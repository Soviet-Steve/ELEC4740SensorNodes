
g:/junk/ELEC4740SensorNodes/test2/target/5.3.2/argon/test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007658  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb678  000bb678  0000b678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000498  2003d960  000bb69c  0000d960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009f8  2003ddf8  2003ddf8  0001ddf8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bbb34  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bbb38  000bbb38  0001bb38  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bbb3e  000bbb3e  0001bb3e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bbb62  000bbb62  0001bb62  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00129f32  00000000  00000000  0001bb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00013e00  00000000  00000000  00145a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003d9af  00000000  00000000  00159898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003148  00000000  00000000  00197247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000afa0  00000000  00000000  0019a38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003cd77  00000000  00000000  001a532f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00044e69  00000000  00000000  001e20a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013c6a0  00000000  00000000  00226f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009034  00000000  00000000  003635b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <__aeabi_frsub>:
   b4a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b4a2c:	e002      	b.n	b4a34 <__addsf3>
   b4a2e:	bf00      	nop

000b4a30 <__aeabi_fsub>:
   b4a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b4a34 <__addsf3>:
   b4a34:	0042      	lsls	r2, r0, #1
   b4a36:	bf1f      	itttt	ne
   b4a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b4a3c:	ea92 0f03 	teqne	r2, r3
   b4a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b4a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4a48:	d06a      	beq.n	b4b20 <__addsf3+0xec>
   b4a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b4a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b4a52:	bfc1      	itttt	gt
   b4a54:	18d2      	addgt	r2, r2, r3
   b4a56:	4041      	eorgt	r1, r0
   b4a58:	4048      	eorgt	r0, r1
   b4a5a:	4041      	eorgt	r1, r0
   b4a5c:	bfb8      	it	lt
   b4a5e:	425b      	neglt	r3, r3
   b4a60:	2b19      	cmp	r3, #25
   b4a62:	bf88      	it	hi
   b4a64:	4770      	bxhi	lr
   b4a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b4a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b4a72:	bf18      	it	ne
   b4a74:	4240      	negne	r0, r0
   b4a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b4a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b4a82:	bf18      	it	ne
   b4a84:	4249      	negne	r1, r1
   b4a86:	ea92 0f03 	teq	r2, r3
   b4a8a:	d03f      	beq.n	b4b0c <__addsf3+0xd8>
   b4a8c:	f1a2 0201 	sub.w	r2, r2, #1
   b4a90:	fa41 fc03 	asr.w	ip, r1, r3
   b4a94:	eb10 000c 	adds.w	r0, r0, ip
   b4a98:	f1c3 0320 	rsb	r3, r3, #32
   b4a9c:	fa01 f103 	lsl.w	r1, r1, r3
   b4aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4aa4:	d502      	bpl.n	b4aac <__addsf3+0x78>
   b4aa6:	4249      	negs	r1, r1
   b4aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b4aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4ab0:	d313      	bcc.n	b4ada <__addsf3+0xa6>
   b4ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b4ab6:	d306      	bcc.n	b4ac6 <__addsf3+0x92>
   b4ab8:	0840      	lsrs	r0, r0, #1
   b4aba:	ea4f 0131 	mov.w	r1, r1, rrx
   b4abe:	f102 0201 	add.w	r2, r2, #1
   b4ac2:	2afe      	cmp	r2, #254	; 0xfe
   b4ac4:	d251      	bcs.n	b4b6a <__addsf3+0x136>
   b4ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b4aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b4ace:	bf08      	it	eq
   b4ad0:	f020 0001 	biceq.w	r0, r0, #1
   b4ad4:	ea40 0003 	orr.w	r0, r0, r3
   b4ad8:	4770      	bx	lr
   b4ada:	0049      	lsls	r1, r1, #1
   b4adc:	eb40 0000 	adc.w	r0, r0, r0
   b4ae0:	3a01      	subs	r2, #1
   b4ae2:	bf28      	it	cs
   b4ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b4ae8:	d2ed      	bcs.n	b4ac6 <__addsf3+0x92>
   b4aea:	fab0 fc80 	clz	ip, r0
   b4aee:	f1ac 0c08 	sub.w	ip, ip, #8
   b4af2:	ebb2 020c 	subs.w	r2, r2, ip
   b4af6:	fa00 f00c 	lsl.w	r0, r0, ip
   b4afa:	bfaa      	itet	ge
   b4afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b4b00:	4252      	neglt	r2, r2
   b4b02:	4318      	orrge	r0, r3
   b4b04:	bfbc      	itt	lt
   b4b06:	40d0      	lsrlt	r0, r2
   b4b08:	4318      	orrlt	r0, r3
   b4b0a:	4770      	bx	lr
   b4b0c:	f092 0f00 	teq	r2, #0
   b4b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b4b14:	bf06      	itte	eq
   b4b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b4b1a:	3201      	addeq	r2, #1
   b4b1c:	3b01      	subne	r3, #1
   b4b1e:	e7b5      	b.n	b4a8c <__addsf3+0x58>
   b4b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b4b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b4b28:	bf18      	it	ne
   b4b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4b2e:	d021      	beq.n	b4b74 <__addsf3+0x140>
   b4b30:	ea92 0f03 	teq	r2, r3
   b4b34:	d004      	beq.n	b4b40 <__addsf3+0x10c>
   b4b36:	f092 0f00 	teq	r2, #0
   b4b3a:	bf08      	it	eq
   b4b3c:	4608      	moveq	r0, r1
   b4b3e:	4770      	bx	lr
   b4b40:	ea90 0f01 	teq	r0, r1
   b4b44:	bf1c      	itt	ne
   b4b46:	2000      	movne	r0, #0
   b4b48:	4770      	bxne	lr
   b4b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b4b4e:	d104      	bne.n	b4b5a <__addsf3+0x126>
   b4b50:	0040      	lsls	r0, r0, #1
   b4b52:	bf28      	it	cs
   b4b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b4b58:	4770      	bx	lr
   b4b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b4b5e:	bf3c      	itt	cc
   b4b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b4b64:	4770      	bxcc	lr
   b4b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b4b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4b72:	4770      	bx	lr
   b4b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b4b78:	bf16      	itet	ne
   b4b7a:	4608      	movne	r0, r1
   b4b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b4b80:	4601      	movne	r1, r0
   b4b82:	0242      	lsls	r2, r0, #9
   b4b84:	bf06      	itte	eq
   b4b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b4b8a:	ea90 0f01 	teqeq	r0, r1
   b4b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b4b92:	4770      	bx	lr

000b4b94 <__aeabi_ui2f>:
   b4b94:	f04f 0300 	mov.w	r3, #0
   b4b98:	e004      	b.n	b4ba4 <__aeabi_i2f+0x8>
   b4b9a:	bf00      	nop

000b4b9c <__aeabi_i2f>:
   b4b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b4ba0:	bf48      	it	mi
   b4ba2:	4240      	negmi	r0, r0
   b4ba4:	ea5f 0c00 	movs.w	ip, r0
   b4ba8:	bf08      	it	eq
   b4baa:	4770      	bxeq	lr
   b4bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b4bb0:	4601      	mov	r1, r0
   b4bb2:	f04f 0000 	mov.w	r0, #0
   b4bb6:	e01c      	b.n	b4bf2 <__aeabi_l2f+0x2a>

000b4bb8 <__aeabi_ul2f>:
   b4bb8:	ea50 0201 	orrs.w	r2, r0, r1
   b4bbc:	bf08      	it	eq
   b4bbe:	4770      	bxeq	lr
   b4bc0:	f04f 0300 	mov.w	r3, #0
   b4bc4:	e00a      	b.n	b4bdc <__aeabi_l2f+0x14>
   b4bc6:	bf00      	nop

000b4bc8 <__aeabi_l2f>:
   b4bc8:	ea50 0201 	orrs.w	r2, r0, r1
   b4bcc:	bf08      	it	eq
   b4bce:	4770      	bxeq	lr
   b4bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b4bd4:	d502      	bpl.n	b4bdc <__aeabi_l2f+0x14>
   b4bd6:	4240      	negs	r0, r0
   b4bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4bdc:	ea5f 0c01 	movs.w	ip, r1
   b4be0:	bf02      	ittt	eq
   b4be2:	4684      	moveq	ip, r0
   b4be4:	4601      	moveq	r1, r0
   b4be6:	2000      	moveq	r0, #0
   b4be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b4bec:	bf08      	it	eq
   b4bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b4bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b4bf6:	fabc f28c 	clz	r2, ip
   b4bfa:	3a08      	subs	r2, #8
   b4bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b4c00:	db10      	blt.n	b4c24 <__aeabi_l2f+0x5c>
   b4c02:	fa01 fc02 	lsl.w	ip, r1, r2
   b4c06:	4463      	add	r3, ip
   b4c08:	fa00 fc02 	lsl.w	ip, r0, r2
   b4c0c:	f1c2 0220 	rsb	r2, r2, #32
   b4c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4c14:	fa20 f202 	lsr.w	r2, r0, r2
   b4c18:	eb43 0002 	adc.w	r0, r3, r2
   b4c1c:	bf08      	it	eq
   b4c1e:	f020 0001 	biceq.w	r0, r0, #1
   b4c22:	4770      	bx	lr
   b4c24:	f102 0220 	add.w	r2, r2, #32
   b4c28:	fa01 fc02 	lsl.w	ip, r1, r2
   b4c2c:	f1c2 0220 	rsb	r2, r2, #32
   b4c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b4c34:	fa21 f202 	lsr.w	r2, r1, r2
   b4c38:	eb43 0002 	adc.w	r0, r3, r2
   b4c3c:	bf08      	it	eq
   b4c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b4c42:	4770      	bx	lr

000b4c44 <strcmp>:
   b4c44:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4c48:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4c4c:	2a01      	cmp	r2, #1
   b4c4e:	bf28      	it	cs
   b4c50:	429a      	cmpcs	r2, r3
   b4c52:	d0f7      	beq.n	b4c44 <strcmp>
   b4c54:	1ad0      	subs	r0, r2, r3
   b4c56:	4770      	bx	lr

000b4c58 <strlen>:
   b4c58:	4603      	mov	r3, r0
   b4c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4c5e:	2a00      	cmp	r2, #0
   b4c60:	d1fb      	bne.n	b4c5a <strlen+0x2>
   b4c62:	1a18      	subs	r0, r3, r0
   b4c64:	3801      	subs	r0, #1
   b4c66:	4770      	bx	lr

000b4c68 <module_user_pre_init>:
   b4c68:	4809      	ldr	r0, [pc, #36]	; (b4c90 <module_user_pre_init+0x28>)
   b4c6a:	490a      	ldr	r1, [pc, #40]	; (b4c94 <module_user_pre_init+0x2c>)
   b4c6c:	4288      	cmp	r0, r1
   b4c6e:	b508      	push	{r3, lr}
   b4c70:	d005      	beq.n	b4c7e <module_user_pre_init+0x16>
   b4c72:	4a09      	ldr	r2, [pc, #36]	; (b4c98 <module_user_pre_init+0x30>)
   b4c74:	4282      	cmp	r2, r0
   b4c76:	d002      	beq.n	b4c7e <module_user_pre_init+0x16>
   b4c78:	1a12      	subs	r2, r2, r0
   b4c7a:	f005 fd8f 	bl	ba79c <memcpy>
   b4c7e:	4807      	ldr	r0, [pc, #28]	; (b4c9c <module_user_pre_init+0x34>)
   b4c80:	4a07      	ldr	r2, [pc, #28]	; (b4ca0 <module_user_pre_init+0x38>)
   b4c82:	2100      	movs	r1, #0
   b4c84:	1a12      	subs	r2, r2, r0
   b4c86:	f005 fdb1 	bl	ba7ec <memset>
   b4c8a:	4801      	ldr	r0, [pc, #4]	; (b4c90 <module_user_pre_init+0x28>)
   b4c8c:	bd08      	pop	{r3, pc}
   b4c8e:	bf00      	nop
   b4c90:	2003d960 	.word	0x2003d960
   b4c94:	000bb69c 	.word	0x000bb69c
   b4c98:	2003ddf8 	.word	0x2003ddf8
   b4c9c:	2003ddf8 	.word	0x2003ddf8
   b4ca0:	2003e7f0 	.word	0x2003e7f0

000b4ca4 <module_user_init>:
   b4ca4:	b570      	push	{r4, r5, r6, lr}
   b4ca6:	4e07      	ldr	r6, [pc, #28]	; (b4cc4 <module_user_init+0x20>)
   b4ca8:	4c07      	ldr	r4, [pc, #28]	; (b4cc8 <module_user_init+0x24>)
   b4caa:	f004 feaf 	bl	b9a0c <module_user_init_hook>
   b4cae:	1ba4      	subs	r4, r4, r6
   b4cb0:	08a4      	lsrs	r4, r4, #2
   b4cb2:	2500      	movs	r5, #0
   b4cb4:	42ac      	cmp	r4, r5
   b4cb6:	d100      	bne.n	b4cba <module_user_init+0x16>
   b4cb8:	bd70      	pop	{r4, r5, r6, pc}
   b4cba:	f856 3b04 	ldr.w	r3, [r6], #4
   b4cbe:	4798      	blx	r3
   b4cc0:	3501      	adds	r5, #1
   b4cc2:	e7f7      	b.n	b4cb4 <module_user_init+0x10>
   b4cc4:	000bb650 	.word	0x000bb650
   b4cc8:	000bb678 	.word	0x000bb678

000b4ccc <module_user_setup>:
   b4ccc:	f000 b834 	b.w	b4d38 <setup>

000b4cd0 <module_user_loop>:
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	f000 f9ef 	bl	b50b4 <loop>
   b4cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4cda:	f004 be4f 	b.w	b997c <_post_loop>

000b4cde <_Znwj>:
   b4cde:	f001 bc71 	b.w	b65c4 <malloc>

000b4ce2 <_Znaj>:
   b4ce2:	f001 bc6f 	b.w	b65c4 <malloc>

000b4ce6 <_ZdlPvj>:
   b4ce6:	f001 bc75 	b.w	b65d4 <free>
	...

000b4cec <__cxa_pure_virtual>:
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4a03      	ldr	r2, [pc, #12]	; (b4cfc <__cxa_pure_virtual+0x10>)
   b4cf0:	4903      	ldr	r1, [pc, #12]	; (b4d00 <__cxa_pure_virtual+0x14>)
   b4cf2:	200c      	movs	r0, #12
   b4cf4:	f001 fbca 	bl	b648c <panic_>
   b4cf8:	e7fe      	b.n	b4cf8 <__cxa_pure_virtual+0xc>
   b4cfa:	bf00      	nop
   b4cfc:	000b6091 	.word	0x000b6091
   b4d00:	000ba978 	.word	0x000ba978

000b4d04 <__cxa_guard_acquire>:
   b4d04:	7800      	ldrb	r0, [r0, #0]
   b4d06:	fab0 f080 	clz	r0, r0
   b4d0a:	0940      	lsrs	r0, r0, #5
   b4d0c:	4770      	bx	lr

000b4d0e <__cxa_guard_release>:
   b4d0e:	2301      	movs	r3, #1
   b4d10:	7003      	strb	r3, [r0, #0]
   b4d12:	4770      	bx	lr

000b4d14 <_Z17onFanDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
        Serial.println("Unexpected data length");
    }
}

void onFanDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
  memcpy(&uinFanSpeed, data, 1);
   b4d14:	4b01      	ldr	r3, [pc, #4]	; (b4d1c <_Z17onFanDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8>)
   b4d16:	7802      	ldrb	r2, [r0, #0]
   b4d18:	701a      	strb	r2, [r3, #0]
}
   b4d1a:	4770      	bx	lr
   b4d1c:	2003e694 	.word	0x2003e694

000b4d20 <_Z15fnvdMovementIsrv>:
void fnvdMovementIsr(){
   b4d20:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4d22:	f001 f9bd 	bl	b60a0 <HAL_Timer_Get_Milli_Seconds>
  uinMovementTime = millis();
   b4d26:	4903      	ldr	r1, [pc, #12]	; (b4d34 <_Z15fnvdMovementIsrv+0x14>)
   b4d28:	4602      	mov	r2, r0
   b4d2a:	2300      	movs	r3, #0
   b4d2c:	e9c1 2300 	strd	r2, r3, [r1]
}
   b4d30:	bd08      	pop	{r3, pc}
   b4d32:	bf00      	nop
   b4d34:	2003e698 	.word	0x2003e698

000b4d38 <setup>:
void setup(){
   b4d38:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(D2, OUTPUT);
   b4d3a:	2101      	movs	r1, #1
void setup(){
   b4d3c:	b095      	sub	sp, #84	; 0x54
  pinMode(D2, OUTPUT);
   b4d3e:	2002      	movs	r0, #2
   b4d40:	f005 f998 	bl	ba074 <pinMode>
  attachInterrupt(PIR_PIN, fnvdMovementIsr, CHANGE);
   b4d44:	2400      	movs	r4, #0
  digitalWrite(D2, LOW);
   b4d46:	2100      	movs	r1, #0
   b4d48:	2002      	movs	r0, #2
   b4d4a:	f005 f9a4 	bl	ba096 <digitalWrite>
  attachInterrupt(PIR_PIN, fnvdMovementIsr, CHANGE);
   b4d4e:	4622      	mov	r2, r4
   b4d50:	f04f 33ff 	mov.w	r3, #4294967295
   b4d54:	4964      	ldr	r1, [pc, #400]	; (b4ee8 <setup+0x1b0>)
   b4d56:	9400      	str	r4, [sp, #0]
   b4d58:	2005      	movs	r0, #5
   b4d5a:	f004 ff83 	bl	b9c64 <_Z15attachInterrupttPFvvE13InterruptModeah>
  pinMode(PIR_PIN, INPUT);
   b4d5e:	4621      	mov	r1, r4
   b4d60:	2005      	movs	r0, #5
   b4d62:	f005 f987 	bl	ba074 <pinMode>
  uinFanSpeed = 0;
   b4d66:	4b61      	ldr	r3, [pc, #388]	; (b4eec <setup+0x1b4>)
   b4d68:	701c      	strb	r4, [r3, #0]
  BLE.on();
   b4d6a:	f002 fc4d 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d6e:	f002 fc95 	bl	b769c <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(tempSensorCharacteristic);
   b4d72:	f002 fc49 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d76:	4a5e      	ldr	r2, [pc, #376]	; (b4ef0 <setup+0x1b8>)
   b4d78:	4601      	mov	r1, r0
   b4d7a:	a80f      	add	r0, sp, #60	; 0x3c
   b4d7c:	f004 f9c0 	bl	b9100 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4d80:	a80f      	add	r0, sp, #60	; 0x3c
   b4d82:	f002 fda2 	bl	b78ca <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(soundSensorCharacteristic);
   b4d86:	f002 fc3f 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d8a:	4a5a      	ldr	r2, [pc, #360]	; (b4ef4 <setup+0x1bc>)
   b4d8c:	4601      	mov	r1, r0
   b4d8e:	a80f      	add	r0, sp, #60	; 0x3c
   b4d90:	f004 f9b6 	bl	b9100 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4d94:	a80f      	add	r0, sp, #60	; 0x3c
   b4d96:	f002 fd98 	bl	b78ca <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(movementSensorCharacteristic);
   b4d9a:	f002 fc35 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d9e:	4a56      	ldr	r2, [pc, #344]	; (b4ef8 <setup+0x1c0>)
   b4da0:	4601      	mov	r1, r0
   b4da2:	a80f      	add	r0, sp, #60	; 0x3c
   b4da4:	f004 f9ac 	bl	b9100 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4da8:	a80f      	add	r0, sp, #60	; 0x3c
   b4daa:	f002 fd8e 	bl	b78ca <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData advData;
   b4dae:	a802      	add	r0, sp, #8
   b4db0:	f003 f8bf 	bl	b7f32 <_ZN8particle18BleAdvertisingDataC1Ev>
  advData.appendServiceUUID(NodeOneServiceUUID);
   b4db4:	4b51      	ldr	r3, [pc, #324]	; (b4efc <setup+0x1c4>)
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4db6:	a80f      	add	r0, sp, #60	; 0x3c
   b4db8:	6819      	ldr	r1, [r3, #0]
   b4dba:	f002 f945 	bl	b7048 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4dbe:	a80f      	add	r0, sp, #60	; 0x3c
   b4dc0:	f002 f8a4 	bl	b6f0c <_ZNK8particle7BleUuid4typeEv>
   b4dc4:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4dc6:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4dc8:	2d00      	cmp	r5, #0
   b4dca:	d16c      	bne.n	b4ea6 <setup+0x16e>
            uint16_t uuid16 = tempUUID.shorted();
   b4dcc:	f002 f8ba 	bl	b6f44 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4dd0:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4dd2:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4dd6:	2302      	movs	r3, #2
   b4dd8:	aa0a      	add	r2, sp, #40	; 0x28
   b4dda:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4ddc:	a802      	add	r0, sp, #8
   b4dde:	f003 f89d 	bl	b7f1c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&advData);
   b4de2:	f002 fc11 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4de6:	2200      	movs	r2, #0
   b4de8:	a902      	add	r1, sp, #8
   b4dea:	f002 fd11 	bl	b7810 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  fanCharacteristic.onDataReceived(onFanDataReceived, NULL);
   b4dee:	2200      	movs	r2, #0
   b4df0:	4943      	ldr	r1, [pc, #268]	; (b4f00 <setup+0x1c8>)
   b4df2:	4844      	ldr	r0, [pc, #272]	; (b4f04 <setup+0x1cc>)
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   b4df4:	4e44      	ldr	r6, [pc, #272]	; (b4f08 <setup+0x1d0>)
   b4df6:	f003 fcdb 	bl	b87b0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    }

    // Service UUID
    template<typename T>
    BleScanFilter& serviceUUID(T uuid) {
        serviceUuids_.append(BleUuid(uuid));
   b4dfa:	4b44      	ldr	r3, [pc, #272]	; (b4f0c <setup+0x1d4>)
   b4dfc:	a805      	add	r0, sp, #20
   b4dfe:	6819      	ldr	r1, [r3, #0]
   b4e00:	ac05      	add	r4, sp, #20
   b4e02:	f002 f921 	bl	b7048 <_ZN8particle7BleUuidC1EPKc>
   b4e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4e08:	ad0a      	add	r5, sp, #40	; 0x28
   b4e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4e0c:	f8d4 c000 	ldr.w	ip, [r4]
   b4e10:	f8c5 c000 	str.w	ip, [r5]
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b4e14:	ac0a      	add	r4, sp, #40	; 0x28
   b4e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4e18:	ad0f      	add	r5, sp, #60	; 0x3c
   b4e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    return insert(size_, std::move(value));
   b4e1c:	6937      	ldr	r7, [r6, #16]
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4e1e:	6973      	ldr	r3, [r6, #20]
   b4e20:	f8c5 c000 	str.w	ip, [r5]
   b4e24:	429f      	cmp	r7, r3
   b4e26:	db4a      	blt.n	b4ebe <setup+0x186>
   b4e28:	1c7c      	adds	r4, r7, #1
        if (n > 0) {
   b4e2a:	2c00      	cmp	r4, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b4e2c:	68f0      	ldr	r0, [r6, #12]
        if (n > 0) {
   b4e2e:	dd41      	ble.n	b4eb4 <setup+0x17c>
    return ::realloc(ptr, size);
   b4e30:	2114      	movs	r1, #20
   b4e32:	4361      	muls	r1, r4
   b4e34:	f001 fbd6 	bl	b65e4 <realloc>
            if (!d) {
   b4e38:	2800      	cmp	r0, #0
   b4e3a:	d13e      	bne.n	b4eba <setup+0x182>
  Wire.begin();
   b4e3c:	f005 f9f4 	bl	ba228 <_Z19__fetch_global_Wirev>
   b4e40:	f004 ffd6 	bl	b9df0 <_ZN7TwoWire5beginEv>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
   b4e44:	223c      	movs	r2, #60	; 0x3c
   b4e46:	2102      	movs	r1, #2
   b4e48:	4831      	ldr	r0, [pc, #196]	; (b4f10 <setup+0x1d8>)
   b4e4a:	f000 fe2f 	bl	b5aac <_ZN16Adafruit_SSD13065beginEhh>
  display.display(); // show splashscreen
   b4e4e:	4830      	ldr	r0, [pc, #192]	; (b4f10 <setup+0x1d8>)
   b4e50:	f000 fdbc 	bl	b59cc <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
   b4e54:	482e      	ldr	r0, [pc, #184]	; (b4f10 <setup+0x1d8>)
   b4e56:	f000 fd41 	bl	b58dc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4e5a:	482d      	ldr	r0, [pc, #180]	; (b4f10 <setup+0x1d8>)
   b4e5c:	2101      	movs	r1, #1
   b4e5e:	f001 f8a6 	bl	b5fae <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   b4e62:	482b      	ldr	r0, [pc, #172]	; (b4f10 <setup+0x1d8>)
   b4e64:	2101      	movs	r1, #1
   b4e66:	f001 f8a7 	bl	b5fb8 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0, 0);
   b4e6a:	2200      	movs	r2, #0
   b4e6c:	4611      	mov	r1, r2
   b4e6e:	4828      	ldr	r0, [pc, #160]	; (b4f10 <setup+0x1d8>)
   b4e70:	f001 f89a 	bl	b5fa8 <_ZN12Adafruit_GFX9setCursorEss>
  display.println("Hello World");
   b4e74:	4927      	ldr	r1, [pc, #156]	; (b4f14 <setup+0x1dc>)
   b4e76:	4826      	ldr	r0, [pc, #152]	; (b4f10 <setup+0x1d8>)
   b4e78:	f004 fc41 	bl	b96fe <_ZN5Print7printlnEPKc>
  display.display();
   b4e7c:	4824      	ldr	r0, [pc, #144]	; (b4f10 <setup+0x1d8>)
   b4e7e:	f000 fda5 	bl	b59cc <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();   // clears the screen and buffer
   b4e82:	4823      	ldr	r0, [pc, #140]	; (b4f10 <setup+0x1d8>)
   b4e84:	f000 fd2a 	bl	b58dc <_ZN16Adafruit_SSD130612clearDisplayEv>
  for(uint32_t i = 0; i < MIC_BUFFER_SIZE; i++){aruinMicBuffer[i] = 2048;}
   b4e88:	4a23      	ldr	r2, [pc, #140]	; (b4f18 <setup+0x1e0>)
   b4e8a:	2300      	movs	r3, #0
   b4e8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   b4e90:	3301      	adds	r3, #1
   b4e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b4e96:	f842 1b04 	str.w	r1, [r2], #4
   b4e9a:	d1f9      	bne.n	b4e90 <setup+0x158>
    ::free(ptr);
   b4e9c:	9802      	ldr	r0, [sp, #8]
   b4e9e:	f001 fb99 	bl	b65d4 <free>
}
   b4ea2:	b015      	add	sp, #84	; 0x54
   b4ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4ea6:	f002 f84f 	bl	b6f48 <_ZNK8particle7BleUuid8rawBytesEv>
   b4eaa:	9400      	str	r4, [sp, #0]
   b4eac:	4602      	mov	r2, r0
   b4eae:	2310      	movs	r3, #16
   b4eb0:	2107      	movs	r1, #7
   b4eb2:	e793      	b.n	b4ddc <setup+0xa4>
   b4eb4:	f001 fb8e 	bl	b65d4 <free>
        T* d = nullptr;
   b4eb8:	2000      	movs	r0, #0
        data_ = d;
   b4eba:	60f0      	str	r0, [r6, #12]
        capacity_ = n;
   b4ebc:	6174      	str	r4, [r6, #20]
        return false;
    }
    T* const p = data_ + i;
   b4ebe:	2314      	movs	r3, #20
   b4ec0:	68f5      	ldr	r5, [r6, #12]
    move(p + 1, p, data_ + size_);
   b4ec2:	6932      	ldr	r2, [r6, #16]
    T* const p = data_ + i;
   b4ec4:	435f      	muls	r7, r3
   b4ec6:	443d      	add	r5, r7
    move(p + 1, p, data_ + size_);
   b4ec8:	435a      	muls	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4eca:	4629      	mov	r1, r5
   b4ecc:	18e8      	adds	r0, r5, r3
   b4ece:	1bd2      	subs	r2, r2, r7
    new(p) T(std::move(value));
   b4ed0:	ac0f      	add	r4, sp, #60	; 0x3c
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4ed2:	f005 fc71 	bl	ba7b8 <memmove>
    new(p) T(std::move(value));
   b4ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4eda:	6823      	ldr	r3, [r4, #0]
   b4edc:	602b      	str	r3, [r5, #0]
    ++size_;
   b4ede:	6933      	ldr	r3, [r6, #16]
   b4ee0:	3301      	adds	r3, #1
   b4ee2:	6133      	str	r3, [r6, #16]
    return true;
   b4ee4:	e7aa      	b.n	b4e3c <setup+0x104>
   b4ee6:	bf00      	nop
   b4ee8:	000b4d21 	.word	0x000b4d21
   b4eec:	2003e694 	.word	0x2003e694
   b4ef0:	2003e68c 	.word	0x2003e68c
   b4ef4:	2003e684 	.word	0x2003e684
   b4ef8:	2003e67c 	.word	0x2003e67c
   b4efc:	2003d96c 	.word	0x2003d96c
   b4f00:	000b4d15 	.word	0x000b4d15
   b4f04:	2003e66c 	.word	0x2003e66c
   b4f08:	2003de00 	.word	0x2003de00
   b4f0c:	2003d960 	.word	0x2003d960
   b4f10:	2003e648 	.word	0x2003e648
   b4f14:	000ba98d 	.word	0x000ba98d
   b4f18:	2003de48 	.word	0x2003de48

000b4f1c <_Z17fnboCheckMovementv>:
bool fnboCheckMovement(){
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	f001 f8bf 	bl	b60a0 <HAL_Timer_Get_Milli_Seconds>
  bool bMotion = (millis() - uinMovementTime < 1000);
   b4f22:	4b08      	ldr	r3, [pc, #32]	; (b4f44 <_Z17fnboCheckMovementv+0x28>)
   b4f24:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f28:	1a80      	subs	r0, r0, r2
   b4f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4f2e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4f32:	f173 0300 	sbcs.w	r3, r3, #0
  uinMotion = bMotion;
   b4f36:	4b04      	ldr	r3, [pc, #16]	; (b4f48 <_Z17fnboCheckMovementv+0x2c>)
  bool bMotion = (millis() - uinMovementTime < 1000);
   b4f38:	bf34      	ite	cc
   b4f3a:	2001      	movcc	r0, #1
   b4f3c:	2000      	movcs	r0, #0
  uinMotion = bMotion;
   b4f3e:	7018      	strb	r0, [r3, #0]
}
   b4f40:	bd08      	pop	{r3, pc}
   b4f42:	bf00      	nop
   b4f44:	2003e698 	.word	0x2003e698
   b4f48:	2003e695 	.word	0x2003e695
   b4f4c:	00000000 	.word	0x00000000

000b4f50 <_Z13fnflGetMicRMSv>:
float fnflGetMicRMS(){
   b4f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f54:	4e28      	ldr	r6, [pc, #160]	; (b4ff8 <_Z13fnflGetMicRMSv+0xa8>)
   b4f56:	ed2d 8b02 	vpush	{d8}
  for(uint32_t i = 0; i < MIC_BUFFER_SIZE; i++){
   b4f5a:	2700      	movs	r7, #0
float fnflGetMicRMS(){
   b4f5c:	46b0      	mov	r8, r6
  uint64_t uinMean = 0;
   b4f5e:	463c      	mov	r4, r7
   b4f60:	463d      	mov	r5, r7
    aruinMicBuffer[i] = analogRead(SOUND_PIN);
   b4f62:	2013      	movs	r0, #19
   b4f64:	f005 f8b0 	bl	ba0c8 <analogRead>
  for(uint32_t i = 0; i < MIC_BUFFER_SIZE; i++){
   b4f68:	3701      	adds	r7, #1
    uinMean += aruinMicBuffer[i];
   b4f6a:	1904      	adds	r4, r0, r4
   b4f6c:	f145 0500 	adc.w	r5, r5, #0
  for(uint32_t i = 0; i < MIC_BUFFER_SIZE; i++){
   b4f70:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    aruinMicBuffer[i] = analogRead(SOUND_PIN);
   b4f74:	f848 0b04 	str.w	r0, [r8], #4
  for(uint32_t i = 0; i < MIC_BUFFER_SIZE; i++){
   b4f78:	d1f3      	bne.n	b4f62 <_Z13fnflGetMicRMSv+0x12>
  uinMean /= MIC_BUFFER_SIZE;
   b4f7a:	0a64      	lsrs	r4, r4, #9
  float flRms = 0;
   b4f7c:	ed9f 8a1f 	vldr	s16, [pc, #124]	; b4ffc <_Z13fnflGetMicRMSv+0xac>
  uinMean /= MIC_BUFFER_SIZE;
   b4f80:	ea44 54c5 	orr.w	r4, r4, r5, lsl #23
  for(uint32_t i = 0; i < MIC_BUFFER_SIZE; i++){
   b4f84:	2700      	movs	r7, #0
  uinMean /= MIC_BUFFER_SIZE;
   b4f86:	0a6d      	lsrs	r5, r5, #9
    flRms += (aruinMicBuffer[i] - uinMean) * (aruinMicBuffer[i] - uinMean);
   b4f88:	f856 0b04 	ldr.w	r0, [r6], #4
   b4f8c:	1b00      	subs	r0, r0, r4
   b4f8e:	eb65 0345 	sbc.w	r3, r5, r5, lsl #1
   b4f92:	4343      	muls	r3, r0
   b4f94:	fba0 0100 	umull	r0, r1, r0, r0
   b4f98:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   b4f9c:	f7ff fe0c 	bl	b4bb8 <__aeabi_ul2f>
  for(uint32_t i = 0; i < MIC_BUFFER_SIZE; i++){
   b4fa0:	3701      	adds	r7, #1
    flRms += (aruinMicBuffer[i] - uinMean) * (aruinMicBuffer[i] - uinMean);
   b4fa2:	ee07 0a90 	vmov	s15, r0
  for(uint32_t i = 0; i < MIC_BUFFER_SIZE; i++){
   b4fa6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    flRms += (aruinMicBuffer[i] - uinMean) * (aruinMicBuffer[i] - uinMean);
   b4faa:	ee38 8a27 	vadd.f32	s16, s16, s15
  for(uint32_t i = 0; i < MIC_BUFFER_SIZE; i++){
   b4fae:	d1eb      	bne.n	b4f88 <_Z13fnflGetMicRMSv+0x38>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b4fb0:	ed9f 0a13 	vldr	s0, [pc, #76]	; b5000 <_Z13fnflGetMicRMSv+0xb0>
   b4fb4:	ee28 0a00 	vmul.f32	s0, s16, s0
   b4fb8:	f005 faa8 	bl	ba50c <sqrtf>
   b4fbc:	ee10 0a10 	vmov	r0, s0
  flRms = (flRms - 2.4595) / 1.2254;
   b4fc0:	f7ff f992 	bl	b42e8 <__aeabi_f2d>
   b4fc4:	a308      	add	r3, pc, #32	; (adr r3, b4fe8 <_Z13fnflGetMicRMSv+0x98>)
   b4fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4fca:	f7ff f82d 	bl	b4028 <__aeabi_dsub>
   b4fce:	a308      	add	r3, pc, #32	; (adr r3, b4ff0 <_Z13fnflGetMicRMSv+0xa0>)
   b4fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4fd4:	f7ff fb0a 	bl	b45ec <__aeabi_ddiv>
   b4fd8:	f7ff fcd6 	bl	b4988 <__aeabi_d2f>
}
   b4fdc:	ecbd 8b02 	vpop	{d8}
   b4fe0:	ee00 0a10 	vmov	s0, r0
   b4fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4fe8:	56041893 	.word	0x56041893
   b4fec:	4003ad0e 	.word	0x4003ad0e
   b4ff0:	07c84b5e 	.word	0x07c84b5e
   b4ff4:	3ff39b3d 	.word	0x3ff39b3d
   b4ff8:	2003de48 	.word	0x2003de48
   b4ffc:	00000000 	.word	0x00000000
   b5000:	3b000000 	.word	0x3b000000
   b5004:	00000000 	.word	0x00000000

000b5008 <_Z12fnflRMStodBaf>:
float fnflRMStodBa(float flRmsInput){
   b5008:	b508      	push	{r3, lr}
  flSound = 10.1 * logf(flRmsInput) + 26.223;
   b500a:	f005 fa49 	bl	ba4a0 <logf>
   b500e:	ee10 0a10 	vmov	r0, s0
   b5012:	f7ff f969 	bl	b42e8 <__aeabi_f2d>
   b5016:	a309      	add	r3, pc, #36	; (adr r3, b503c <_Z12fnflRMStodBaf+0x34>)
   b5018:	e9d3 2300 	ldrd	r2, r3, [r3]
   b501c:	f7ff f9bc 	bl	b4398 <__aeabi_dmul>
   b5020:	a308      	add	r3, pc, #32	; (adr r3, b5044 <_Z12fnflRMStodBaf+0x3c>)
   b5022:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5026:	f7ff f801 	bl	b402c <__adddf3>
   b502a:	f7ff fcad 	bl	b4988 <__aeabi_d2f>
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <_Z12fnflRMStodBaf+0x30>)
   b5030:	6018      	str	r0, [r3, #0]
   b5032:	ee00 0a10 	vmov	s0, r0
}
   b5036:	bd08      	pop	{r3, pc}
   b5038:	2003e674 	.word	0x2003e674
   b503c:	33333333 	.word	0x33333333
   b5040:	40243333 	.word	0x40243333
   b5044:	872b020c 	.word	0x872b020c
   b5048:	403a3916 	.word	0x403a3916

000b504c <_Z20fnflGetTemperaturemVv>:
float fnflGetTemperaturemV(){
   b504c:	b508      	push	{r3, lr}
  return (analogRead(TEMP_PIN) * 3300 / 4096);
   b504e:	2011      	movs	r0, #17
   b5050:	f005 f83a 	bl	ba0c8 <analogRead>
   b5054:	f640 43e4 	movw	r3, #3300	; 0xce4
   b5058:	4358      	muls	r0, r3
   b505a:	bf48      	it	mi
   b505c:	f600 70ff 	addwmi	r0, r0, #4095	; 0xfff
   b5060:	1303      	asrs	r3, r0, #12
   b5062:	ee00 3a10 	vmov	s0, r3
}
   b5066:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b506a:	bd08      	pop	{r3, pc}
   b506c:	0000      	movs	r0, r0
	...

000b5070 <_Z19fnflGetTemperatureCf>:
float fnflGetTemperatureC(float flTempmV){
   b5070:	b508      	push	{r3, lr}
   b5072:	ee10 0a10 	vmov	r0, s0
  flTemp = flTempmV * 0.0445 + 13.137;
   b5076:	f7ff f937 	bl	b42e8 <__aeabi_f2d>
   b507a:	a30a      	add	r3, pc, #40	; (adr r3, b50a4 <_Z19fnflGetTemperatureCf+0x34>)
   b507c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5080:	f7ff f98a 	bl	b4398 <__aeabi_dmul>
   b5084:	a309      	add	r3, pc, #36	; (adr r3, b50ac <_Z19fnflGetTemperatureCf+0x3c>)
   b5086:	e9d3 2300 	ldrd	r2, r3, [r3]
   b508a:	f7fe ffcf 	bl	b402c <__adddf3>
   b508e:	f7ff fc7b 	bl	b4988 <__aeabi_d2f>
   b5092:	4b03      	ldr	r3, [pc, #12]	; (b50a0 <_Z19fnflGetTemperatureCf+0x30>)
   b5094:	6018      	str	r0, [r3, #0]
   b5096:	ee00 0a10 	vmov	s0, r0
}
   b509a:	bd08      	pop	{r3, pc}
   b509c:	f3af 8000 	nop.w
   b50a0:	2003e678 	.word	0x2003e678
   b50a4:	39581062 	.word	0x39581062
   b50a8:	3fa6c8b4 	.word	0x3fa6c8b4
   b50ac:	dd2f1aa0 	.word	0xdd2f1aa0
   b50b0:	402a4624 	.word	0x402a4624

000b50b4 <loop>:
void loop() {
   b50b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50b8:	ed2d 8b02 	vpush	{d8}
   b50bc:	b08f      	sub	sp, #60	; 0x3c
  float flmVRms = fnflGetMicRMS(), flTempmV = fnflGetTemperaturemV();
   b50be:	f7ff ff47 	bl	b4f50 <_Z13fnflGetMicRMSv>
   b50c2:	eef0 8a40 	vmov.f32	s17, s0
   b50c6:	f7ff ffc1 	bl	b504c <_Z20fnflGetTemperaturemVv>
   b50ca:	2409      	movs	r4, #9
   b50cc:	eeb0 8a40 	vmov.f32	s16, s0
  for(int i = 0; i < 9; i++){flTempmV += fnflGetTemperaturemV();}
   b50d0:	f7ff ffbc 	bl	b504c <_Z20fnflGetTemperaturemVv>
   b50d4:	3c01      	subs	r4, #1
   b50d6:	ee38 8a00 	vadd.f32	s16, s16, s0
   b50da:	d1f9      	bne.n	b50d0 <loop+0x1c>
  fnflRMStodBa(flmVRms);
   b50dc:	eeb0 0a68 	vmov.f32	s0, s17
   b50e0:	f7ff ff92 	bl	b5008 <_Z12fnflRMStodBaf>
  if(millis() - uinUpdateTime > WAITTIME){
   b50e4:	f8df 830c 	ldr.w	r8, [pc, #780]	; b53f4 <loop+0x340>
  fnflGetTemperatureC(flTempmV);
   b50e8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b50ec:	ee88 0a00 	vdiv.f32	s0, s16, s0
   b50f0:	f7ff ffbe 	bl	b5070 <_Z19fnflGetTemperatureCf>
  fnboCheckMovement();
   b50f4:	f7ff ff12 	bl	b4f1c <_Z17fnboCheckMovementv>
   b50f8:	f000 ffd2 	bl	b60a0 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - uinUpdateTime > WAITTIME){
   b50fc:	e9d8 2300 	ldrd	r2, r3, [r8]
   b5100:	1a80      	subs	r0, r0, r2
   b5102:	f240 32e9 	movw	r2, #1001	; 0x3e9
   b5106:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b510a:	4290      	cmp	r0, r2
   b510c:	f173 0300 	sbcs.w	r3, r3, #0
   b5110:	f0c0 808a 	bcc.w	b5228 <loop+0x174>
    if(ClusterHead.connected()){
   b5114:	48a0      	ldr	r0, [pc, #640]	; (b5398 <loop+0x2e4>)
   b5116:	4fa0      	ldr	r7, [pc, #640]	; (b5398 <loop+0x2e4>)
   b5118:	f002 f9e8 	bl	b74ec <_ZNK8particle13BlePeerDevice9connectedEv>
   b511c:	b148      	cbz	r0, b5132 <loop+0x7e>
      ClusterHead.getCharacteristicByUUID(fanCharacteristic, NodeOneFanUUID);
   b511e:	4b9f      	ldr	r3, [pc, #636]	; (b539c <loop+0x2e8>)
   b5120:	a809      	add	r0, sp, #36	; 0x24
   b5122:	6819      	ldr	r1, [r3, #0]
   b5124:	f001 ff90 	bl	b7048 <_ZN8particle7BleUuidC1EPKc>
   b5128:	499d      	ldr	r1, [pc, #628]	; (b53a0 <loop+0x2ec>)
   b512a:	aa09      	add	r2, sp, #36	; 0x24
   b512c:	4638      	mov	r0, r7
   b512e:	f003 fb15 	bl	b875c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
    if(BLE.connected()){
   b5132:	f002 fa69 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5136:	f002 fae7 	bl	b7708 <_ZNK8particle14BleLocalDevice9connectedEv>
   b513a:	b188      	cbz	r0, b5160 <loop+0xac>
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b513c:	4999      	ldr	r1, [pc, #612]	; (b53a4 <loop+0x2f0>)
   b513e:	489a      	ldr	r0, [pc, #616]	; (b53a8 <loop+0x2f4>)
   b5140:	2300      	movs	r3, #0
   b5142:	2204      	movs	r2, #4
   b5144:	f002 f8d6 	bl	b72f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5148:	4998      	ldr	r1, [pc, #608]	; (b53ac <loop+0x2f8>)
   b514a:	4899      	ldr	r0, [pc, #612]	; (b53b0 <loop+0x2fc>)
   b514c:	2300      	movs	r3, #0
   b514e:	2204      	movs	r2, #4
   b5150:	f002 f8d0 	bl	b72f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5154:	4997      	ldr	r1, [pc, #604]	; (b53b4 <loop+0x300>)
   b5156:	4898      	ldr	r0, [pc, #608]	; (b53b8 <loop+0x304>)
   b5158:	2300      	movs	r3, #0
   b515a:	2201      	movs	r2, #1
   b515c:	f002 f8ca 	bl	b72f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    switch (uinFanSpeed){
   b5160:	4d96      	ldr	r5, [pc, #600]	; (b53bc <loop+0x308>)
   b5162:	7828      	ldrb	r0, [r5, #0]
   b5164:	2801      	cmp	r0, #1
   b5166:	d007      	beq.n	b5178 <loop+0xc4>
   b5168:	2802      	cmp	r0, #2
   b516a:	d062      	beq.n	b5232 <loop+0x17e>
   b516c:	b948      	cbnz	r0, b5182 <loop+0xce>
      digitalWrite(D2, LOW); // Fan Off
   b516e:	4601      	mov	r1, r0
   b5170:	2002      	movs	r0, #2
      digitalWrite(D2, HIGH); // Fan Speed 2
   b5172:	f004 ff90 	bl	ba096 <digitalWrite>
      break;    
   b5176:	e004      	b.n	b5182 <loop+0xce>
      analogWrite(D2, 128, 4); // Fan Speed 1
   b5178:	2204      	movs	r2, #4
   b517a:	2180      	movs	r1, #128	; 0x80
   b517c:	2002      	movs	r0, #2
   b517e:	f004 ffba 	bl	ba0f6 <_Z11analogWritetmm>
  if(ClusterHead.connected()){
   b5182:	4885      	ldr	r0, [pc, #532]	; (b5398 <loop+0x2e4>)
   b5184:	f002 f9b2 	bl	b74ec <_ZNK8particle13BlePeerDevice9connectedEv>
   b5188:	4604      	mov	r4, r0
   b518a:	2800      	cmp	r0, #0
   b518c:	d053      	beq.n	b5236 <loop+0x182>
    ClusterHead.getCharacteristicByUUID(fanCharacteristic, NodeOneFanUUID);
   b518e:	4b83      	ldr	r3, [pc, #524]	; (b539c <loop+0x2e8>)
   b5190:	a809      	add	r0, sp, #36	; 0x24
   b5192:	6819      	ldr	r1, [r3, #0]
   b5194:	f001 ff58 	bl	b7048 <_ZN8particle7BleUuidC1EPKc>
   b5198:	4981      	ldr	r1, [pc, #516]	; (b53a0 <loop+0x2ec>)
   b519a:	487f      	ldr	r0, [pc, #508]	; (b5398 <loop+0x2e4>)
   b519c:	aa09      	add	r2, sp, #36	; 0x24
   b519e:	f003 fadd 	bl	b875c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
    display.clearDisplay();
   b51a2:	4887      	ldr	r0, [pc, #540]	; (b53c0 <loop+0x30c>)
   b51a4:	f000 fb9a 	bl	b58dc <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setCursor(0, 0);
   b51a8:	2200      	movs	r2, #0
   b51aa:	4611      	mov	r1, r2
   b51ac:	4884      	ldr	r0, [pc, #528]	; (b53c0 <loop+0x30c>)
   b51ae:	f000 fefb 	bl	b5fa8 <_ZN12Adafruit_GFX9setCursorEss>
    display.println("MIC:");
   b51b2:	4984      	ldr	r1, [pc, #528]	; (b53c4 <loop+0x310>)
   b51b4:	4882      	ldr	r0, [pc, #520]	; (b53c0 <loop+0x30c>)
   b51b6:	f004 faa2 	bl	b96fe <_ZN5Print7printlnEPKc>
    display.print(flSound);
   b51ba:	4b7c      	ldr	r3, [pc, #496]	; (b53ac <loop+0x2f8>)
   b51bc:	4880      	ldr	r0, [pc, #512]	; (b53c0 <loop+0x30c>)
   b51be:	ed93 0a00 	vldr	s0, [r3]
   b51c2:	2102      	movs	r1, #2
   b51c4:	f004 fb8c 	bl	b98e0 <_ZN5Print5printEfi>
    display.println(" dBA");
   b51c8:	497f      	ldr	r1, [pc, #508]	; (b53c8 <loop+0x314>)
   b51ca:	487d      	ldr	r0, [pc, #500]	; (b53c0 <loop+0x30c>)
   b51cc:	f004 fa97 	bl	b96fe <_ZN5Print7printlnEPKc>
    display.println("Temperture");
   b51d0:	497e      	ldr	r1, [pc, #504]	; (b53cc <loop+0x318>)
   b51d2:	487b      	ldr	r0, [pc, #492]	; (b53c0 <loop+0x30c>)
   b51d4:	f004 fa93 	bl	b96fe <_ZN5Print7printlnEPKc>
    display.print(flTemp);
   b51d8:	4b72      	ldr	r3, [pc, #456]	; (b53a4 <loop+0x2f0>)
   b51da:	4879      	ldr	r0, [pc, #484]	; (b53c0 <loop+0x30c>)
   b51dc:	ed93 0a00 	vldr	s0, [r3]
   b51e0:	2102      	movs	r1, #2
   b51e2:	f004 fb7d 	bl	b98e0 <_ZN5Print5printEfi>
    display.println(" C");
   b51e6:	497a      	ldr	r1, [pc, #488]	; (b53d0 <loop+0x31c>)
   b51e8:	4875      	ldr	r0, [pc, #468]	; (b53c0 <loop+0x30c>)
   b51ea:	f004 fa88 	bl	b96fe <_ZN5Print7printlnEPKc>
    if(uinMotion > 0){display.println("MOVEMENT DETECTED!");}
   b51ee:	4b71      	ldr	r3, [pc, #452]	; (b53b4 <loop+0x300>)
   b51f0:	781b      	ldrb	r3, [r3, #0]
   b51f2:	b11b      	cbz	r3, b51fc <loop+0x148>
   b51f4:	4977      	ldr	r1, [pc, #476]	; (b53d4 <loop+0x320>)
   b51f6:	4872      	ldr	r0, [pc, #456]	; (b53c0 <loop+0x30c>)
   b51f8:	f004 fa81 	bl	b96fe <_ZN5Print7printlnEPKc>
    display.print("Fan Speed: ");
   b51fc:	4976      	ldr	r1, [pc, #472]	; (b53d8 <loop+0x324>)
   b51fe:	4870      	ldr	r0, [pc, #448]	; (b53c0 <loop+0x30c>)
   b5200:	f004 fa6a 	bl	b96d8 <_ZN5Print5printEPKc>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5204:	7829      	ldrb	r1, [r5, #0]
   b5206:	486e      	ldr	r0, [pc, #440]	; (b53c0 <loop+0x30c>)
   b5208:	220a      	movs	r2, #10
   b520a:	f004 fa82 	bl	b9712 <_ZN5Print11printNumberEmh>
        n += println();
   b520e:	486c      	ldr	r0, [pc, #432]	; (b53c0 <loop+0x30c>)
   b5210:	f004 fa69 	bl	b96e6 <_ZN5Print7printlnEv>
    display.display();
   b5214:	486a      	ldr	r0, [pc, #424]	; (b53c0 <loop+0x30c>)
   b5216:	f000 fbd9 	bl	b59cc <_ZN16Adafruit_SSD13067displayEv>
   b521a:	f000 ff41 	bl	b60a0 <HAL_Timer_Get_Milli_Seconds>
    uinUpdateTime = millis();
   b521e:	2300      	movs	r3, #0
   b5220:	f8c8 0000 	str.w	r0, [r8]
   b5224:	f8c8 3004 	str.w	r3, [r8, #4]
}
   b5228:	b00f      	add	sp, #60	; 0x3c
   b522a:	ecbd 8b02 	vpop	{d8}
   b522e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      digitalWrite(D2, HIGH); // Fan Speed 2
   b5232:	2101      	movs	r1, #1
   b5234:	e79d      	b.n	b5172 <loop+0xbe>
    display.clearDisplay();
   b5236:	4862      	ldr	r0, [pc, #392]	; (b53c0 <loop+0x30c>)
      if(len > 0 && foundService == NodeOneServiceUUID){
   b5238:	f8df 91bc 	ldr.w	r9, [pc, #444]	; b53f8 <loop+0x344>
        display.clearDisplay();
   b523c:	4d60      	ldr	r5, [pc, #384]	; (b53c0 <loop+0x30c>)
        display.println("Found a Device");
   b523e:	f8df a1bc 	ldr.w	sl, [pc, #444]	; b53fc <loop+0x348>
    display.clearDisplay();
   b5242:	f000 fb4b 	bl	b58dc <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setCursor(0, 0);
   b5246:	4622      	mov	r2, r4
   b5248:	485d      	ldr	r0, [pc, #372]	; (b53c0 <loop+0x30c>)
   b524a:	4621      	mov	r1, r4
   b524c:	f000 feac 	bl	b5fa8 <_ZN12Adafruit_GFX9setCursorEss>
    display.println("Cluster Head");
   b5250:	4962      	ldr	r1, [pc, #392]	; (b53dc <loop+0x328>)
   b5252:	485b      	ldr	r0, [pc, #364]	; (b53c0 <loop+0x30c>)
   b5254:	f004 fa53 	bl	b96fe <_ZN5Print7printlnEPKc>
    display.println("Not Connected");
   b5258:	4961      	ldr	r1, [pc, #388]	; (b53e0 <loop+0x32c>)
   b525a:	4859      	ldr	r0, [pc, #356]	; (b53c0 <loop+0x30c>)
   b525c:	f004 fa4f 	bl	b96fe <_ZN5Print7printlnEPKc>
    display.display();
   b5260:	4857      	ldr	r0, [pc, #348]	; (b53c0 <loop+0x30c>)
   b5262:	f000 fbb3 	bl	b59cc <_ZN16Adafruit_SSD13067displayEv>
    Vector<BleScanResult> scanResults = BLE.scanWithFilter(ClusterHeadFilter);
   b5266:	f002 f9cf 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b526a:	4a5e      	ldr	r2, [pc, #376]	; (b53e4 <loop+0x330>)
   b526c:	4601      	mov	r1, r0
   b526e:	a801      	add	r0, sp, #4
   b5270:	f004 f8e2 	bl	b9438 <_ZNK8particle14BleLocalDevice14scanWithFilterERKNS_13BleScanFilterE>
    return true;
}

template<typename T, typename AllocatorT>
inline int spark::Vector<T, AllocatorT>::size() const {
    return size_;
   b5274:	9b02      	ldr	r3, [sp, #8]
    for(int i = 0; i< scanResults.size(); i++){
   b5276:	429c      	cmp	r4, r3
   b5278:	f04f 0624 	mov.w	r6, #36	; 0x24
   b527c:	da7a      	bge.n	b5374 <loop+0x2c0>
      BleUuid foundService;
   b527e:	a804      	add	r0, sp, #16
   b5280:	f001 fdd0 	bl	b6e24 <_ZN8particle7BleUuidC1Ev>
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::operator[](int i) {
    return data_[i];
   b5284:	9801      	ldr	r0, [sp, #4]
   b5286:	4366      	muls	r6, r4
   b5288:	4430      	add	r0, r6
      len = scanResults[i].advertisingData().serviceUUID(&foundService, 1);
   b528a:	2201      	movs	r2, #1
   b528c:	a904      	add	r1, sp, #16
   b528e:	3008      	adds	r0, #8
   b5290:	f003 f998 	bl	b85c4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
      if(len > 0 && foundService == NodeOneServiceUUID){
   b5294:	2800      	cmp	r0, #0
   b5296:	d069      	beq.n	b536c <loop+0x2b8>
        return *this == BleUuid(uuid);
   b5298:	f8d9 1000 	ldr.w	r1, [r9]
   b529c:	a809      	add	r0, sp, #36	; 0x24
   b529e:	f001 fed3 	bl	b7048 <_ZN8particle7BleUuidC1EPKc>
   b52a2:	a909      	add	r1, sp, #36	; 0x24
   b52a4:	a804      	add	r0, sp, #16
   b52a6:	f001 fe50 	bl	b6f4a <_ZNK8particle7BleUuideqERKS0_>
   b52aa:	2800      	cmp	r0, #0
   b52ac:	d05e      	beq.n	b536c <loop+0x2b8>
        display.clearDisplay();
   b52ae:	4628      	mov	r0, r5
   b52b0:	f000 fb14 	bl	b58dc <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.setCursor(0, 0);
   b52b4:	2200      	movs	r2, #0
   b52b6:	4611      	mov	r1, r2
   b52b8:	4628      	mov	r0, r5
   b52ba:	f000 fe75 	bl	b5fa8 <_ZN12Adafruit_GFX9setCursorEss>
        display.println("Found a Device");
   b52be:	4651      	mov	r1, sl
   b52c0:	4628      	mov	r0, r5
   b52c2:	f004 fa1c 	bl	b96fe <_ZN5Print7printlnEPKc>
        display.println("Address: ");
   b52c6:	4948      	ldr	r1, [pc, #288]	; (b53e8 <loop+0x334>)
   b52c8:	4628      	mov	r0, r5
   b52ca:	f004 fa18 	bl	b96fe <_ZN5Print7printlnEPKc>
        display.print(scanResults[i].address().toString());
   b52ce:	9901      	ldr	r1, [sp, #4]
   b52d0:	2200      	movs	r2, #0
   b52d2:	4431      	add	r1, r6
   b52d4:	a809      	add	r0, sp, #36	; 0x24
   b52d6:	f001 fd95 	bl	b6e04 <_ZNK8particle10BleAddress8toStringEb>
   b52da:	9909      	ldr	r1, [sp, #36]	; 0x24
   b52dc:	4628      	mov	r0, r5
   b52de:	f004 f9fb 	bl	b96d8 <_ZN5Print5printEPKc>
   b52e2:	a809      	add	r0, sp, #36	; 0x24
   b52e4:	f001 fab6 	bl	b6854 <_ZN6StringD1Ev>
        display.display();
   b52e8:	4628      	mov	r0, r5
   b52ea:	f000 fb6f 	bl	b59cc <_ZN16Adafruit_SSD13067displayEv>
          ClusterHead = BLE.connect(scanResults[i].address());
   b52ee:	f002 f98b 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b52f2:	9a01      	ldr	r2, [sp, #4]
   b52f4:	4601      	mov	r1, r0
   b52f6:	2301      	movs	r3, #1
   b52f8:	4432      	add	r2, r6
   b52fa:	a809      	add	r0, sp, #36	; 0x24
   b52fc:	f003 fe14 	bl	b8f28 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5300:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5302:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   b5306:	603b      	str	r3, [r7, #0]
	if (__tmp != _M_pi)
   b5308:	687b      	ldr	r3, [r7, #4]
   b530a:	459b      	cmp	fp, r3
   b530c:	d01b      	beq.n	b5346 <loop+0x292>
	    if (__tmp != 0)
   b530e:	f1bb 0f00 	cmp.w	fp, #0
   b5312:	d004      	beq.n	b531e <loop+0x26a>
    { ++_M_use_count; }
   b5314:	f8db 3004 	ldr.w	r3, [fp, #4]
   b5318:	3301      	adds	r3, #1
   b531a:	f8cb 3004 	str.w	r3, [fp, #4]
	    if (_M_pi != 0)
   b531e:	687e      	ldr	r6, [r7, #4]
   b5320:	b17e      	cbz	r6, b5342 <loop+0x28e>
      if (--_M_use_count == 0)
   b5322:	6873      	ldr	r3, [r6, #4]
   b5324:	3b01      	subs	r3, #1
   b5326:	6073      	str	r3, [r6, #4]
   b5328:	b95b      	cbnz	r3, b5342 <loop+0x28e>
          _M_dispose();
   b532a:	6833      	ldr	r3, [r6, #0]
   b532c:	4630      	mov	r0, r6
   b532e:	689b      	ldr	r3, [r3, #8]
   b5330:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5332:	68b3      	ldr	r3, [r6, #8]
   b5334:	3b01      	subs	r3, #1
   b5336:	60b3      	str	r3, [r6, #8]
   b5338:	b91b      	cbnz	r3, b5342 <loop+0x28e>
            _M_destroy();
   b533a:	6833      	ldr	r3, [r6, #0]
   b533c:	4630      	mov	r0, r6
   b533e:	68db      	ldr	r3, [r3, #12]
   b5340:	4798      	blx	r3
	    _M_pi = __tmp;
   b5342:	f8c7 b004 	str.w	fp, [r7, #4]
   b5346:	a809      	add	r0, sp, #36	; 0x24
   b5348:	f002 fac6 	bl	b78d8 <_ZN8particle13BlePeerDeviceD1Ev>
          display.setCursor(0, 30);
   b534c:	4628      	mov	r0, r5
   b534e:	221e      	movs	r2, #30
   b5350:	2100      	movs	r1, #0
   b5352:	f000 fe29 	bl	b5fa8 <_ZN12Adafruit_GFX9setCursorEss>
          if(ClusterHead.connected()){
   b5356:	4810      	ldr	r0, [pc, #64]	; (b5398 <loop+0x2e4>)
   b5358:	f002 f8c8 	bl	b74ec <_ZNK8particle13BlePeerDevice9connectedEv>
   b535c:	b140      	cbz	r0, b5370 <loop+0x2bc>
            display.print("Cluster Head :)");
   b535e:	4923      	ldr	r1, [pc, #140]	; (b53ec <loop+0x338>)
            display.print("Cluster Head :(");
   b5360:	4628      	mov	r0, r5
   b5362:	f004 f9b9 	bl	b96d8 <_ZN5Print5printEPKc>
        display.display();
   b5366:	4628      	mov	r0, r5
   b5368:	f000 fb30 	bl	b59cc <_ZN16Adafruit_SSD13067displayEv>
    for(int i = 0; i< scanResults.size(); i++){
   b536c:	3401      	adds	r4, #1
   b536e:	e781      	b.n	b5274 <loop+0x1c0>
            display.print("Cluster Head :(");
   b5370:	491f      	ldr	r1, [pc, #124]	; (b53f0 <loop+0x33c>)
   b5372:	e7f5      	b.n	b5360 <loop+0x2ac>
    destruct(data_, data_ + size_);
   b5374:	9c01      	ldr	r4, [sp, #4]
   b5376:	fb06 4603 	mla	r6, r6, r3, r4
        for (; p != end; ++p) {
   b537a:	42a6      	cmp	r6, r4
   b537c:	d007      	beq.n	b538e <loop+0x2da>
    ::free(ptr);
   b537e:	6960      	ldr	r0, [r4, #20]
   b5380:	f001 f928 	bl	b65d4 <free>
   b5384:	68a0      	ldr	r0, [r4, #8]
   b5386:	f001 f925 	bl	b65d4 <free>
        for (; p != end; ++p) {
   b538a:	3424      	adds	r4, #36	; 0x24
   b538c:	e7f5      	b.n	b537a <loop+0x2c6>
    ::free(ptr);
   b538e:	9801      	ldr	r0, [sp, #4]
   b5390:	f001 f920 	bl	b65d4 <free>
   b5394:	e741      	b.n	b521a <loop+0x166>
   b5396:	bf00      	nop
   b5398:	2003ddf8 	.word	0x2003ddf8
   b539c:	2003d964 	.word	0x2003d964
   b53a0:	2003e66c 	.word	0x2003e66c
   b53a4:	2003e678 	.word	0x2003e678
   b53a8:	2003e68c 	.word	0x2003e68c
   b53ac:	2003e674 	.word	0x2003e674
   b53b0:	2003e684 	.word	0x2003e684
   b53b4:	2003e695 	.word	0x2003e695
   b53b8:	2003e67c 	.word	0x2003e67c
   b53bc:	2003e694 	.word	0x2003e694
   b53c0:	2003e648 	.word	0x2003e648
   b53c4:	000ba999 	.word	0x000ba999
   b53c8:	000ba99e 	.word	0x000ba99e
   b53cc:	000ba9a3 	.word	0x000ba9a3
   b53d0:	000ba9ae 	.word	0x000ba9ae
   b53d4:	000ba9b1 	.word	0x000ba9b1
   b53d8:	000ba9c4 	.word	0x000ba9c4
   b53dc:	000ba9d0 	.word	0x000ba9d0
   b53e0:	000ba9dd 	.word	0x000ba9dd
   b53e4:	2003de00 	.word	0x2003de00
   b53e8:	000ba9fa 	.word	0x000ba9fa
   b53ec:	000baa04 	.word	0x000baa04
   b53f0:	000baa14 	.word	0x000baa14
   b53f4:	2003e6a0 	.word	0x2003e6a0
   b53f8:	2003d96c 	.word	0x2003d96c
   b53fc:	000ba9eb 	.word	0x000ba9eb

000b5400 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5400:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5402:	4616      	mov	r6, r2
   b5404:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b5406:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5408:	e9c0 2200 	strd	r2, r2, [r0]
   b540c:	4604      	mov	r4, r0
   b540e:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b5410:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b5412:	4619      	mov	r1, r3
   b5414:	a804      	add	r0, sp, #16
   b5416:	f001 fe17 	bl	b7048 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b541a:	9914      	ldr	r1, [sp, #80]	; 0x50
   b541c:	4638      	mov	r0, r7
   b541e:	f001 fe13 	bl	b7048 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5422:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5424:	9302      	str	r3, [sp, #8]
   b5426:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b5428:	4620      	mov	r0, r4
   b542a:	e9cd 7300 	strd	r7, r3, [sp]
   b542e:	4632      	mov	r2, r6
   b5430:	ab04      	add	r3, sp, #16
   b5432:	4629      	mov	r1, r5
   b5434:	f003 fa08 	bl	b8848 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5438:	4620      	mov	r0, r4
   b543a:	b00f      	add	sp, #60	; 0x3c
   b543c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b5440 <_GLOBAL__sub_I_SystemMode>:
}
   b5440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5442:	4b26      	ldr	r3, [pc, #152]	; (b54dc <_GLOBAL__sub_I_SystemMode+0x9c>)
BleCharacteristic tempSensorCharacteristic("temp",BleCharacteristicProperty::NOTIFY, NodeOneTempUUID, NodeOneServiceUUID);
   b5444:	4e26      	ldr	r6, [pc, #152]	; (b54e0 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b5446:	4a27      	ldr	r2, [pc, #156]	; (b54e4 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b5448:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b544a:	2400      	movs	r4, #0
   b544c:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5450:	2003      	movs	r0, #3
   b5452:	f001 f82b 	bl	b64ac <set_system_mode>
   b5456:	6833      	ldr	r3, [r6, #0]
   b5458:	9300      	str	r3, [sp, #0]
   b545a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b545e:	4b22      	ldr	r3, [pc, #136]	; (b54e8 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b5460:	4922      	ldr	r1, [pc, #136]	; (b54ec <_GLOBAL__sub_I_SystemMode+0xac>)
   b5462:	681b      	ldr	r3, [r3, #0]
   b5464:	4822      	ldr	r0, [pc, #136]	; (b54f0 <_GLOBAL__sub_I_SystemMode+0xb0>)
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5466:	2510      	movs	r5, #16
   b5468:	462a      	mov	r2, r5
   b546a:	f7ff ffc9 	bl	b5400 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic soundSensorCharacteristic("sound",BleCharacteristicProperty::NOTIFY, NodeOneSoundUUID, NodeOneServiceUUID);
   b546e:	6833      	ldr	r3, [r6, #0]
   b5470:	9300      	str	r3, [sp, #0]
   b5472:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5476:	4b1f      	ldr	r3, [pc, #124]	; (b54f4 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b5478:	491f      	ldr	r1, [pc, #124]	; (b54f8 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b547a:	681b      	ldr	r3, [r3, #0]
   b547c:	481f      	ldr	r0, [pc, #124]	; (b54fc <_GLOBAL__sub_I_SystemMode+0xbc>)
   b547e:	462a      	mov	r2, r5
   b5480:	f7ff ffbe 	bl	b5400 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic movementSensorCharacteristic("move",BleCharacteristicProperty::NOTIFY, NodeOneMovementUUID, NodeOneServiceUUID);
   b5484:	6833      	ldr	r3, [r6, #0]
   b5486:	9300      	str	r3, [sp, #0]
   b5488:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b548c:	4b1c      	ldr	r3, [pc, #112]	; (b5500 <_GLOBAL__sub_I_SystemMode+0xc0>)
   b548e:	491d      	ldr	r1, [pc, #116]	; (b5504 <_GLOBAL__sub_I_SystemMode+0xc4>)
   b5490:	681b      	ldr	r3, [r3, #0]
   b5492:	481d      	ldr	r0, [pc, #116]	; (b5508 <_GLOBAL__sub_I_SystemMode+0xc8>)
   b5494:	462a      	mov	r2, r5
   b5496:	f7ff ffb3 	bl	b5400 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic fanCharacteristic;
   b549a:	481c      	ldr	r0, [pc, #112]	; (b550c <_GLOBAL__sub_I_SystemMode+0xcc>)
   b549c:	f001 ff04 	bl	b72a8 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice ClusterHead;
   b54a0:	481b      	ldr	r0, [pc, #108]	; (b5510 <_GLOBAL__sub_I_SystemMode+0xd0>)
   b54a2:	f002 f801 	bl	b74a8 <_ZN8particle13BlePeerDeviceC1Ev>
        capacity_(0) {
   b54a6:	4b1b      	ldr	r3, [pc, #108]	; (b5514 <_GLOBAL__sub_I_SystemMode+0xd4>)
Adafruit_SSD1306 display(-1);
   b54a8:	481b      	ldr	r0, [pc, #108]	; (b5518 <_GLOBAL__sub_I_SystemMode+0xd8>)
              customDataLen_(0) {
   b54aa:	639c      	str	r4, [r3, #56]	; 0x38
            : minRssi_(BLE_RSSI_INVALID),
   b54ac:	f647 727f 	movw	r2, #32639	; 0x7f7f
   b54b0:	f04f 31ff 	mov.w	r1, #4294967295
   b54b4:	e9c3 4400 	strd	r4, r4, [r3]
   b54b8:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b54bc:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b54c0:	e9c3 4406 	strd	r4, r4, [r3, #24]
   b54c4:	e9c3 4408 	strd	r4, r4, [r3, #32]
   b54c8:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
              customDataLen_(0) {
   b54cc:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
}
   b54d0:	b004      	add	sp, #16
   b54d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Adafruit_SSD1306 display(-1);
   b54d6:	f000 b9eb 	b.w	b58b0 <_ZN16Adafruit_SSD1306C1Ea>
   b54da:	bf00      	nop
   b54dc:	2003de3c 	.word	0x2003de3c
   b54e0:	2003d96c 	.word	0x2003d96c
   b54e4:	ffff0000 	.word	0xffff0000
   b54e8:	2003d974 	.word	0x2003d974
   b54ec:	000baa24 	.word	0x000baa24
   b54f0:	2003e68c 	.word	0x2003e68c
   b54f4:	2003d970 	.word	0x2003d970
   b54f8:	000baa29 	.word	0x000baa29
   b54fc:	2003e684 	.word	0x2003e684
   b5500:	2003d968 	.word	0x2003d968
   b5504:	000baa2f 	.word	0x000baa2f
   b5508:	2003e67c 	.word	0x2003e67c
   b550c:	2003e66c 	.word	0x2003e66c
   b5510:	2003ddf8 	.word	0x2003ddf8
   b5514:	2003de00 	.word	0x2003de00
   b5518:	2003e648 	.word	0x2003e648

000b551c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b551c:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = hal_pin_map();
   b551e:	f000 fd67 	bl	b5ff0 <hal_pin_map>
   b5522:	4b01      	ldr	r3, [pc, #4]	; (b5528 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b5524:	6018      	str	r0, [r3, #0]
}
   b5526:	bd08      	pop	{r3, pc}
   b5528:	2003e6a8 	.word	0x2003e6a8

000b552c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b552c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b552e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5530:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5534:	2d02      	cmp	r5, #2
   b5536:	d069      	beq.n	b560c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b5538:	2d03      	cmp	r5, #3
   b553a:	f000 8099 	beq.w	b5670 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b553e:	2d01      	cmp	r5, #1
   b5540:	d16c      	bne.n	b561c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b5542:	8905      	ldrh	r5, [r0, #8]
   b5544:	43d2      	mvns	r2, r2
   b5546:	442a      	add	r2, r5
   b5548:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b554a:	2a00      	cmp	r2, #0
   b554c:	db5d      	blt.n	b560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b554e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5552:	4295      	cmp	r5, r2
   b5554:	dd59      	ble.n	b560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b5556:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b5558:	bfbe      	ittt	lt
   b555a:	185b      	addlt	r3, r3, r1
   b555c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b555e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b5560:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5564:	18cd      	adds	r5, r1, r3
   b5566:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5568:	bfc4      	itt	gt
   b556a:	1a43      	subgt	r3, r0, r1
   b556c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b556e:	2b00      	cmp	r3, #0
   b5570:	dd4b      	ble.n	b560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b5572:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b5576:	f8df c120 	ldr.w	ip, [pc, #288]	; b5698 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b557a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b557e:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b5582:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5584:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5588:	d01a      	beq.n	b55c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b558a:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b558e:	4e40      	ldr	r6, [pc, #256]	; (b5690 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b5590:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b5592:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5594:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5596:	bf3f      	itttt	cc
   b5598:	eba5 0e03 	subcc.w	lr, r5, r3
   b559c:	26ff      	movcc	r6, #255	; 0xff
   b559e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b55a2:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b55a4:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b55a8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b55aa:	bf0c      	ite	eq
   b55ac:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b55ae:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b55b0:	42ab      	cmp	r3, r5
   b55b2:	f80c 6002 	strb.w	r6, [ip, r2]
   b55b6:	d328      	bcc.n	b560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b55b8:	3908      	subs	r1, #8
   b55ba:	440b      	add	r3, r1
   b55bc:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b55be:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b55c0:	2b07      	cmp	r3, #7
   b55c2:	d919      	bls.n	b55f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b55c4:	2c01      	cmp	r4, #1
   b55c6:	f04f 35ff 	mov.w	r5, #4294967295
   b55ca:	bf18      	it	ne
   b55cc:	2500      	movne	r5, #0
   b55ce:	b2ed      	uxtb	r5, r5
   b55d0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b55d4:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b55d6:	3a08      	subs	r2, #8
   b55d8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b55da:	2a07      	cmp	r2, #7
      *pBuf = val;
   b55dc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b55e0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b55e4:	d8f7      	bhi.n	b55d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b55e6:	f1a3 0208 	sub.w	r2, r3, #8
   b55ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b55ee:	3201      	adds	r2, #1
   b55f0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b55f4:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b55f8:	b13b      	cbz	r3, b560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b55fa:	4a26      	ldr	r2, [pc, #152]	; (b5694 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b55fc:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b55fe:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5600:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5602:	bf0c      	ite	eq
   b5604:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b5606:	4393      	bicne	r3, r2
   b5608:	7003      	strb	r3, [r0, #0]
}
   b560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b560c:	8945      	ldrh	r5, [r0, #10]
   b560e:	43d2      	mvns	r2, r2
   b5610:	442a      	add	r2, r5
      x -= (w-1);
   b5612:	18cd      	adds	r5, r1, r3
   b5614:	8901      	ldrh	r1, [r0, #8]
   b5616:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b5618:	b212      	sxth	r2, r2
      x -= (w-1);
   b561a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b561c:	2a00      	cmp	r2, #0
   b561e:	dbf4      	blt.n	b560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5620:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5624:	4295      	cmp	r5, r2
   b5626:	ddf0      	ble.n	b560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b5628:	2900      	cmp	r1, #0
    w += x;
   b562a:	bfbe      	ittt	lt
   b562c:	185b      	addlt	r3, r3, r1
   b562e:	b21b      	sxthlt	r3, r3
    x = 0;
   b5630:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b5632:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5636:	18ce      	adds	r6, r1, r3
   b5638:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b563a:	bfc4      	itt	gt
   b563c:	1a6b      	subgt	r3, r5, r1
   b563e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5640:	2b00      	cmp	r3, #0
   b5642:	dde2      	ble.n	b560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5644:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b5646:	2580      	movs	r5, #128	; 0x80
   b5648:	fb10 1105 	smlabb	r1, r0, r5, r1
   b564c:	4812      	ldr	r0, [pc, #72]	; (b5698 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b564e:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b5650:	f002 0007 	and.w	r0, r2, #7
   b5654:	2201      	movs	r2, #1
   b5656:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5658:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b565a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b565c:	440b      	add	r3, r1
   b565e:	d10c      	bne.n	b567a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5660:	428b      	cmp	r3, r1
   b5662:	d0d2      	beq.n	b560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5664:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5668:	4310      	orrs	r0, r2
   b566a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b566e:	e7f7      	b.n	b5660 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5670:	18cd      	adds	r5, r1, r3
   b5672:	8941      	ldrh	r1, [r0, #10]
   b5674:	1b49      	subs	r1, r1, r5
   b5676:	b209      	sxth	r1, r1
      break;
   b5678:	e767      	b.n	b554a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b567a:	43d2      	mvns	r2, r2
   b567c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b567e:	428b      	cmp	r3, r1
   b5680:	d0c3      	beq.n	b560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5682:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5686:	4010      	ands	r0, r2
   b5688:	f801 0c01 	strb.w	r0, [r1, #-1]
   b568c:	e7f7      	b.n	b567e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b568e:	bf00      	nop
   b5690:	2003d980 	.word	0x2003d980
   b5694:	2003d978 	.word	0x2003d978
   b5698:	2003d988 	.word	0x2003d988

000b569c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b569c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b569e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b56a0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b56a4:	2d02      	cmp	r5, #2
   b56a6:	d034      	beq.n	b5712 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b56a8:	2d03      	cmp	r5, #3
   b56aa:	f000 809b 	beq.w	b57e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b56ae:	2d01      	cmp	r5, #1
   b56b0:	d137      	bne.n	b5722 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b56b2:	18d5      	adds	r5, r2, r3
   b56b4:	8902      	ldrh	r2, [r0, #8]
   b56b6:	1b52      	subs	r2, r2, r5
   b56b8:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b56ba:	2900      	cmp	r1, #0
   b56bc:	f2c0 8091 	blt.w	b57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b56c0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b56c4:	428d      	cmp	r5, r1
   b56c6:	f340 808c 	ble.w	b57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b56ca:	2a00      	cmp	r2, #0
    w += x;
   b56cc:	bfbe      	ittt	lt
   b56ce:	189b      	addlt	r3, r3, r2
   b56d0:	b21b      	sxthlt	r3, r3
    x = 0;
   b56d2:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b56d4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b56d8:	18d6      	adds	r6, r2, r3
   b56da:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b56dc:	bfc4      	itt	gt
   b56de:	1aab      	subgt	r3, r5, r2
   b56e0:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b56e2:	2b00      	cmp	r3, #0
   b56e4:	dd7d      	ble.n	b57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b56e6:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b56e8:	2580      	movs	r5, #128	; 0x80
   b56ea:	fb10 2205 	smlabb	r2, r0, r5, r2
   b56ee:	4845      	ldr	r0, [pc, #276]	; (b5804 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b56f0:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b56f2:	f001 0007 	and.w	r0, r1, #7
   b56f6:	2101      	movs	r1, #1
   b56f8:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b56fa:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b56fc:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b56fe:	4413      	add	r3, r2
   b5700:	d175      	bne.n	b57ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b5702:	429a      	cmp	r2, r3
   b5704:	d06d      	beq.n	b57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5706:	f812 0b01 	ldrb.w	r0, [r2], #1
   b570a:	4308      	orrs	r0, r1
   b570c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5710:	e7f7      	b.n	b5702 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b5712:	8905      	ldrh	r5, [r0, #8]
   b5714:	43c9      	mvns	r1, r1
   b5716:	4429      	add	r1, r5
      y -= (h-1);
   b5718:	18d5      	adds	r5, r2, r3
   b571a:	8942      	ldrh	r2, [r0, #10]
   b571c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b571e:	b209      	sxth	r1, r1
      y -= (h-1);
   b5720:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b5722:	2900      	cmp	r1, #0
   b5724:	db5d      	blt.n	b57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5726:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b572a:	428d      	cmp	r5, r1
   b572c:	dd59      	ble.n	b57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b572e:	2a00      	cmp	r2, #0
    __h += __y;
   b5730:	bfbe      	ittt	lt
   b5732:	189b      	addlt	r3, r3, r2
   b5734:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5736:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5738:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b573c:	18d5      	adds	r5, r2, r3
   b573e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5740:	bfc4      	itt	gt
   b5742:	1a83      	subgt	r3, r0, r2
   b5744:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b5746:	2b00      	cmp	r3, #0
   b5748:	dd4b      	ble.n	b57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b574a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b574e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5804 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b5752:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5756:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b575a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b575c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5760:	d01a      	beq.n	b5798 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5762:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5766:	4e28      	ldr	r6, [pc, #160]	; (b5808 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5768:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b576a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b576c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b576e:	bf3f      	itttt	cc
   b5770:	eba5 0e03 	subcc.w	lr, r5, r3
   b5774:	26ff      	movcc	r6, #255	; 0xff
   b5776:	fa46 f60e 	asrcc.w	r6, r6, lr
   b577a:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b577c:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5780:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5782:	bf0c      	ite	eq
   b5784:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5786:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5788:	42ab      	cmp	r3, r5
   b578a:	f80c 6001 	strb.w	r6, [ip, r1]
   b578e:	d328      	bcc.n	b57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5790:	3a08      	subs	r2, #8
   b5792:	4413      	add	r3, r2
   b5794:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5796:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5798:	2b07      	cmp	r3, #7
   b579a:	d919      	bls.n	b57d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b579c:	2c01      	cmp	r4, #1
   b579e:	f04f 35ff 	mov.w	r5, #4294967295
   b57a2:	bf18      	it	ne
   b57a4:	2500      	movne	r5, #0
   b57a6:	b2ed      	uxtb	r5, r5
   b57a8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b57ac:	461a      	mov	r2, r3
      h -= 8;
   b57ae:	3a08      	subs	r2, #8
   b57b0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b57b2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b57b4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b57b8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b57bc:	d8f7      	bhi.n	b57ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b57be:	f1a3 0208 	sub.w	r2, r3, #8
   b57c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b57c6:	3201      	adds	r2, #1
   b57c8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b57cc:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b57d0:	b13b      	cbz	r3, b57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b57d2:	4a0e      	ldr	r2, [pc, #56]	; (b580c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b57d4:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b57d6:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b57d8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b57da:	bf0c      	ite	eq
   b57dc:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b57de:	4393      	bicne	r3, r2
   b57e0:	7003      	strb	r3, [r0, #0]
}
   b57e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b57e4:	8945      	ldrh	r5, [r0, #10]
   b57e6:	43c9      	mvns	r1, r1
   b57e8:	4429      	add	r1, r5
   b57ea:	b209      	sxth	r1, r1
      break;
   b57ec:	e765      	b.n	b56ba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b57ee:	43c9      	mvns	r1, r1
   b57f0:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b57f2:	429a      	cmp	r2, r3
   b57f4:	d0f5      	beq.n	b57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b57f6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b57fa:	4008      	ands	r0, r1
   b57fc:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5800:	e7f7      	b.n	b57f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b5802:	bf00      	nop
   b5804:	2003d988 	.word	0x2003d988
   b5808:	2003d980 	.word	0x2003d980
   b580c:	2003d978 	.word	0x2003d978

000b5810 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5810:	4770      	bx	lr
	...

000b5814 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5816:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5818:	4606      	mov	r6, r0
   b581a:	4614      	mov	r4, r2
   b581c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b581e:	db2d      	blt.n	b587c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5820:	f000 fbcf 	bl	b5fc2 <_ZN12Adafruit_GFX5widthEv>
   b5824:	42a8      	cmp	r0, r5
   b5826:	dd29      	ble.n	b587c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5828:	2c00      	cmp	r4, #0
   b582a:	db27      	blt.n	b587c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b582c:	4630      	mov	r0, r6
   b582e:	f000 fbcb 	bl	b5fc8 <_ZN12Adafruit_GFX6heightEv>
   b5832:	42a0      	cmp	r0, r4
   b5834:	dd22      	ble.n	b587c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5836:	4630      	mov	r0, r6
   b5838:	f000 fbc1 	bl	b5fbe <_ZN12Adafruit_GFX11getRotationEv>
   b583c:	2802      	cmp	r0, #2
   b583e:	d01e      	beq.n	b587e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5840:	2803      	cmp	r0, #3
   b5842:	d025      	beq.n	b5890 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5844:	2801      	cmp	r0, #1
   b5846:	d104      	bne.n	b5852 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5848:	8933      	ldrh	r3, [r6, #8]
   b584a:	43e2      	mvns	r2, r4
   b584c:	441a      	add	r2, r3
    break;
   b584e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5850:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5852:	2c00      	cmp	r4, #0
   b5854:	4622      	mov	r2, r4
   b5856:	bfb8      	it	lt
   b5858:	1de2      	addlt	r2, r4, #7
   b585a:	10d2      	asrs	r2, r2, #3
   b585c:	2180      	movs	r1, #128	; 0x80
   b585e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5862:	490e      	ldr	r1, [pc, #56]	; (b589c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5864:	2201      	movs	r2, #1
   b5866:	f004 0407 	and.w	r4, r4, #7
   b586a:	574b      	ldrsb	r3, [r1, r5]
   b586c:	fa02 f404 	lsl.w	r4, r2, r4
   b5870:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5872:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5874:	bf0c      	ite	eq
   b5876:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5878:	43a3      	bicne	r3, r4
   b587a:	554b      	strb	r3, [r1, r5]
}
   b587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b587e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5880:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5882:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5884:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5886:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5888:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b588a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b588c:	b224      	sxth	r4, r4
    break;
   b588e:	e7e0      	b.n	b5852 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5890:	8973      	ldrh	r3, [r6, #10]
   b5892:	3b01      	subs	r3, #1
   b5894:	1b5b      	subs	r3, r3, r5
    break;
   b5896:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5898:	b21c      	sxth	r4, r3
    break;
   b589a:	e7da      	b.n	b5852 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b589c:	2003d988 	.word	0x2003d988

000b58a0 <_ZN16Adafruit_SSD1306D0Ev>:
   b58a0:	b510      	push	{r4, lr}
   b58a2:	2124      	movs	r1, #36	; 0x24
   b58a4:	4604      	mov	r4, r0
   b58a6:	f7ff fa1e 	bl	b4ce6 <_ZdlPvj>
   b58aa:	4620      	mov	r0, r4
   b58ac:	bd10      	pop	{r4, pc}
	...

000b58b0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b58b0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b58b2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b58b4:	4604      	mov	r4, r0
   b58b6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b58b8:	2180      	movs	r1, #128	; 0x80
   b58ba:	f000 faa7 	bl	b5e0c <_ZN12Adafruit_GFXC1Ess>
   b58be:	4b06      	ldr	r3, [pc, #24]	; (b58d8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b58c0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b58c2:	23ff      	movs	r3, #255	; 0xff
   b58c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b58c8:	7763      	strb	r3, [r4, #29]
   b58ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b58ce:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b58d0:	f884 5020 	strb.w	r5, [r4, #32]
}
   b58d4:	4620      	mov	r0, r4
   b58d6:	bd38      	pop	{r3, r4, r5, pc}
   b58d8:	000bab1c 	.word	0x000bab1c

000b58dc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b58dc:	4802      	ldr	r0, [pc, #8]	; (b58e8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b58de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b58e2:	2100      	movs	r1, #0
   b58e4:	f004 bf82 	b.w	ba7ec <memset>
   b58e8:	2003d988 	.word	0x2003d988

000b58ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b58ec:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b58ee:	4c0b      	ldr	r4, [pc, #44]	; (b591c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b58f0:	7821      	ldrb	r1, [r4, #0]
   b58f2:	f3bf 8f5b 	dmb	ish
   b58f6:	f011 0101 	ands.w	r1, r1, #1
   b58fa:	d10b      	bne.n	b5914 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b58fc:	4620      	mov	r0, r4
   b58fe:	9101      	str	r1, [sp, #4]
   b5900:	f7ff fa00 	bl	b4d04 <__cxa_guard_acquire>
   b5904:	9901      	ldr	r1, [sp, #4]
   b5906:	b128      	cbz	r0, b5914 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5908:	4805      	ldr	r0, [pc, #20]	; (b5920 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b590a:	f000 fed7 	bl	b66bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b590e:	4620      	mov	r0, r4
   b5910:	f7ff f9fd 	bl	b4d0e <__cxa_guard_release>
        return instance;
    }
   b5914:	4802      	ldr	r0, [pc, #8]	; (b5920 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5916:	b002      	add	sp, #8
   b5918:	bd10      	pop	{r4, pc}
   b591a:	bf00      	nop
   b591c:	2003e6ac 	.word	0x2003e6ac
   b5920:	2003e6b0 	.word	0x2003e6b0

000b5924 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5924:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b5926:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b592a:	b143      	cbz	r3, b593e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b592c:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b592e:	f7ff ffdd 	bl	b58ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5932:	9901      	ldr	r1, [sp, #4]
}
   b5934:	b003      	add	sp, #12
   b5936:	f85d eb04 	ldr.w	lr, [sp], #4
   b593a:	f000 bf73 	b.w	b6824 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b593e:	460b      	mov	r3, r1
   b5940:	7f81      	ldrb	r1, [r0, #30]
   b5942:	7f40      	ldrb	r0, [r0, #29]
   b5944:	2201      	movs	r2, #1
}
   b5946:	b003      	add	sp, #12
   b5948:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b594c:	f004 bbef 	b.w	ba12e <shiftOut>

000b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5950:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b5952:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5956:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5958:	4604      	mov	r4, r0
   b595a:	460d      	mov	r5, r1
  if (sid != -1)
   b595c:	d01d      	beq.n	b599a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b595e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b5962:	2101      	movs	r1, #1
   b5964:	b280      	uxth	r0, r0
   b5966:	f004 fb96 	bl	ba096 <digitalWrite>
    digitalWrite(dc, LOW);
   b596a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b596e:	2100      	movs	r1, #0
   b5970:	b280      	uxth	r0, r0
   b5972:	f004 fb90 	bl	ba096 <digitalWrite>
    digitalWrite(cs, LOW);
   b5976:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b597a:	2100      	movs	r1, #0
   b597c:	b280      	uxth	r0, r0
   b597e:	f004 fb8a 	bl	ba096 <digitalWrite>
    fastSPIwrite(c);
   b5982:	4629      	mov	r1, r5
   b5984:	4620      	mov	r0, r4
   b5986:	f7ff ffcd 	bl	b5924 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b598a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b598e:	2101      	movs	r1, #1
}
   b5990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5994:	b280      	uxth	r0, r0
   b5996:	f004 bb7e 	b.w	ba096 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b599a:	f004 fc45 	bl	ba228 <_Z19__fetch_global_Wirev>
   b599e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b59a2:	f004 fa2f 	bl	b9e04 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b59a6:	f004 fc3f 	bl	ba228 <_Z19__fetch_global_Wirev>
   b59aa:	6803      	ldr	r3, [r0, #0]
   b59ac:	2100      	movs	r1, #0
   b59ae:	689b      	ldr	r3, [r3, #8]
   b59b0:	4798      	blx	r3
    Wire.write(c);
   b59b2:	f004 fc39 	bl	ba228 <_Z19__fetch_global_Wirev>
   b59b6:	6803      	ldr	r3, [r0, #0]
   b59b8:	4629      	mov	r1, r5
   b59ba:	689b      	ldr	r3, [r3, #8]
   b59bc:	4798      	blx	r3
    Wire.endTransmission();
   b59be:	f004 fc33 	bl	ba228 <_Z19__fetch_global_Wirev>
}
   b59c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b59c6:	f004 ba24 	b.w	b9e12 <_ZN7TwoWire15endTransmissionEv>
	...

000b59cc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b59cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b59ce:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b59d0:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b59d2:	f7ff ffbd 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b59d6:	2100      	movs	r1, #0
   b59d8:	4620      	mov	r0, r4
   b59da:	f7ff ffb9 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b59de:	217f      	movs	r1, #127	; 0x7f
   b59e0:	4620      	mov	r0, r4
   b59e2:	f7ff ffb5 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b59e6:	2122      	movs	r1, #34	; 0x22
   b59e8:	4620      	mov	r0, r4
   b59ea:	f7ff ffb1 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b59ee:	2100      	movs	r1, #0
   b59f0:	4620      	mov	r0, r4
   b59f2:	f7ff ffad 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b59f6:	2107      	movs	r1, #7
   b59f8:	4620      	mov	r0, r4
   b59fa:	f7ff ffa9 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b59fe:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5a02:	4f29      	ldr	r7, [pc, #164]	; (b5aa8 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5a04:	3301      	adds	r3, #1
   b5a06:	d02a      	beq.n	b5a5e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5a08:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5a0c:	2101      	movs	r1, #1
   b5a0e:	b280      	uxth	r0, r0
   b5a10:	f004 fb41 	bl	ba096 <digitalWrite>
    digitalWrite(dc, HIGH);
   b5a14:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5a18:	2101      	movs	r1, #1
   b5a1a:	b280      	uxth	r0, r0
   b5a1c:	f004 fb3b 	bl	ba096 <digitalWrite>
    digitalWrite(cs, LOW);
   b5a20:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5a24:	2100      	movs	r1, #0
   b5a26:	b280      	uxth	r0, r0
   b5a28:	f004 fb35 	bl	ba096 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5a2c:	2001      	movs	r0, #1
   b5a2e:	f000 fb2f 	bl	b6090 <HAL_Delay_Microseconds>
   b5a32:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5a36:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5a38:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5a3c:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5a3e:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5a40:	f7ff ff70 	bl	b5924 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5a44:	2d00      	cmp	r5, #0
   b5a46:	d1f6      	bne.n	b5a36 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5a48:	2001      	movs	r0, #1
   b5a4a:	f000 fb21 	bl	b6090 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b5a4e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5a52:	2101      	movs	r1, #1
}
   b5a54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5a58:	b280      	uxth	r0, r0
   b5a5a:	f004 bb1c 	b.w	ba096 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5a5e:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5a60:	f004 fbe2 	bl	ba228 <_Z19__fetch_global_Wirev>
   b5a64:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5a68:	f004 f9cc 	bl	b9e04 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5a6c:	f004 fbdc 	bl	ba228 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5a70:	6803      	ldr	r3, [r0, #0]
   b5a72:	2140      	movs	r1, #64	; 0x40
   b5a74:	689b      	ldr	r3, [r3, #8]
   b5a76:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5a78:	f105 0610 	add.w	r6, r5, #16
   b5a7c:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b5a7e:	f004 fbd3 	bl	ba228 <_Z19__fetch_global_Wirev>
   b5a82:	6803      	ldr	r3, [r0, #0]
   b5a84:	5d79      	ldrb	r1, [r7, r5]
   b5a86:	689b      	ldr	r3, [r3, #8]
   b5a88:	4798      	blx	r3
		i++;
   b5a8a:	1c6b      	adds	r3, r5, #1
   b5a8c:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b5a8e:	42ae      	cmp	r6, r5
   b5a90:	d1f5      	bne.n	b5a7e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b5a92:	f004 fbc9 	bl	ba228 <_Z19__fetch_global_Wirev>
   b5a96:	f004 f9bc 	bl	b9e12 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5a9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5a9e:	d100      	bne.n	b5aa2 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5aa2:	4635      	mov	r5, r6
   b5aa4:	e7dc      	b.n	b5a60 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b5aa6:	bf00      	nop
   b5aa8:	2003d988 	.word	0x2003d988

000b5aac <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5aac:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5aae:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5ab2:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5ab4:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5ab6:	4604      	mov	r4, r0
   b5ab8:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b5aba:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5abc:	f000 80c9 	beq.w	b5c52 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5ac0:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5ac4:	2101      	movs	r1, #1
   b5ac6:	b280      	uxth	r0, r0
   b5ac8:	f004 fad4 	bl	ba074 <pinMode>
    pinMode(cs, OUTPUT);
   b5acc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5ad0:	2101      	movs	r1, #1
   b5ad2:	b280      	uxth	r0, r0
   b5ad4:	f004 face 	bl	ba074 <pinMode>
    if (!hwSPI){
   b5ad8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5adc:	2b00      	cmp	r3, #0
   b5ade:	f000 80a6 	beq.w	b5c2e <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5ae2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5ae6:	2101      	movs	r1, #1
   b5ae8:	b280      	uxth	r0, r0
   b5aea:	f004 fad4 	bl	ba096 <digitalWrite>
        instance().setBitOrder(order);
   b5aee:	f7ff fefd 	bl	b58ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5af2:	2101      	movs	r1, #1
   b5af4:	f000 fe00 	bl	b66f8 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5af8:	f7ff fef8 	bl	b58ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5afc:	2110      	movs	r1, #16
   b5afe:	f000 fe6b 	bl	b67d8 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5b02:	f7ff fef3 	bl	b58ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5b06:	2100      	movs	r1, #0
   b5b08:	f000 fe0a 	bl	b6720 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5b0c:	f7ff feee 	bl	b58ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5b10:	f000 fdde 	bl	b66d0 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5b14:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5b18:	2101      	movs	r1, #1
   b5b1a:	b280      	uxth	r0, r0
   b5b1c:	f004 faaa 	bl	ba074 <pinMode>
  digitalWrite(rst, HIGH);
   b5b20:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5b24:	2101      	movs	r1, #1
   b5b26:	b280      	uxth	r0, r0
   b5b28:	f004 fab5 	bl	ba096 <digitalWrite>
  delay(1);
   b5b2c:	2001      	movs	r0, #1
   b5b2e:	f003 fef9 	bl	b9924 <delay>
  digitalWrite(rst, LOW);
   b5b32:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5b36:	2100      	movs	r1, #0
   b5b38:	b280      	uxth	r0, r0
   b5b3a:	f004 faac 	bl	ba096 <digitalWrite>
  delay(10);
   b5b3e:	200a      	movs	r0, #10
   b5b40:	f003 fef0 	bl	b9924 <delay>
  digitalWrite(rst, HIGH);
   b5b44:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5b48:	2101      	movs	r1, #1
   b5b4a:	b280      	uxth	r0, r0
   b5b4c:	f004 faa3 	bl	ba096 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5b50:	4620      	mov	r0, r4
   b5b52:	21ae      	movs	r1, #174	; 0xae
   b5b54:	f7ff fefc 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5b58:	4620      	mov	r0, r4
   b5b5a:	21d5      	movs	r1, #213	; 0xd5
   b5b5c:	f7ff fef8 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5b60:	4620      	mov	r0, r4
   b5b62:	2180      	movs	r1, #128	; 0x80
   b5b64:	f7ff fef4 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5b68:	4620      	mov	r0, r4
   b5b6a:	21a8      	movs	r1, #168	; 0xa8
   b5b6c:	f7ff fef0 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5b70:	4620      	mov	r0, r4
   b5b72:	213f      	movs	r1, #63	; 0x3f
   b5b74:	f7ff feec 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5b78:	4620      	mov	r0, r4
   b5b7a:	21d3      	movs	r1, #211	; 0xd3
   b5b7c:	f7ff fee8 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5b80:	4620      	mov	r0, r4
   b5b82:	2100      	movs	r1, #0
   b5b84:	f7ff fee4 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5b88:	4620      	mov	r0, r4
   b5b8a:	2140      	movs	r1, #64	; 0x40
   b5b8c:	f7ff fee0 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5b90:	218d      	movs	r1, #141	; 0x8d
   b5b92:	4620      	mov	r0, r4
   b5b94:	f7ff fedc 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5b98:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5b9a:	bf0c      	ite	eq
   b5b9c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b5b9e:	2114      	movne	r1, #20
   b5ba0:	4620      	mov	r0, r4
   b5ba2:	f7ff fed5 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5ba6:	4620      	mov	r0, r4
   b5ba8:	2120      	movs	r1, #32
   b5baa:	f7ff fed1 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5bae:	4620      	mov	r0, r4
   b5bb0:	2100      	movs	r1, #0
   b5bb2:	f7ff fecd 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5bb6:	4620      	mov	r0, r4
   b5bb8:	21a1      	movs	r1, #161	; 0xa1
   b5bba:	f7ff fec9 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5bbe:	4620      	mov	r0, r4
   b5bc0:	21c8      	movs	r1, #200	; 0xc8
   b5bc2:	f7ff fec5 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	21da      	movs	r1, #218	; 0xda
   b5bca:	f7ff fec1 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5bce:	4620      	mov	r0, r4
   b5bd0:	2112      	movs	r1, #18
   b5bd2:	f7ff febd 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5bd6:	2181      	movs	r1, #129	; 0x81
   b5bd8:	4620      	mov	r0, r4
   b5bda:	f7ff feb9 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5bde:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5be0:	bf0c      	ite	eq
   b5be2:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5be4:	21cf      	movne	r1, #207	; 0xcf
   b5be6:	4620      	mov	r0, r4
   b5be8:	f7ff feb2 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5bec:	21d9      	movs	r1, #217	; 0xd9
   b5bee:	4620      	mov	r0, r4
   b5bf0:	f7ff feae 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5bf4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5bf6:	bf0c      	ite	eq
   b5bf8:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b5bfa:	21f1      	movne	r1, #241	; 0xf1
   b5bfc:	4620      	mov	r0, r4
   b5bfe:	f7ff fea7 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5c02:	4620      	mov	r0, r4
   b5c04:	21db      	movs	r1, #219	; 0xdb
   b5c06:	f7ff fea3 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	2140      	movs	r1, #64	; 0x40
   b5c0e:	f7ff fe9f 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5c12:	4620      	mov	r0, r4
   b5c14:	21a4      	movs	r1, #164	; 0xa4
   b5c16:	f7ff fe9b 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b5c1a:	4620      	mov	r0, r4
   b5c1c:	21a6      	movs	r1, #166	; 0xa6
   b5c1e:	f7ff fe97 	bl	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5c22:	4620      	mov	r0, r4
   b5c24:	21af      	movs	r1, #175	; 0xaf
}
   b5c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5c2a:	f7ff be91 	b.w	b5950 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b5c2e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5c32:	2101      	movs	r1, #1
   b5c34:	b280      	uxth	r0, r0
   b5c36:	f004 fa1d 	bl	ba074 <pinMode>
    	pinMode(sclk, OUTPUT);
   b5c3a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5c3e:	2101      	movs	r1, #1
   b5c40:	b280      	uxth	r0, r0
   b5c42:	f004 fa17 	bl	ba074 <pinMode>
    if (hwSPI){
   b5c46:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5c4a:	2b00      	cmp	r3, #0
   b5c4c:	f43f af62 	beq.w	b5b14 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5c50:	e747      	b.n	b5ae2 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b5c52:	f004 fae9 	bl	ba228 <_Z19__fetch_global_Wirev>
   b5c56:	f004 f8cb 	bl	b9df0 <_ZN7TwoWire5beginEv>
   b5c5a:	e75b      	b.n	b5b14 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5c5c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b5c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c60:	b085      	sub	sp, #20
   b5c62:	461f      	mov	r7, r3
   b5c64:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5c68:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5c6c:	eba8 0902 	sub.w	r9, r8, r2
   b5c70:	eba7 0a01 	sub.w	sl, r7, r1
   b5c74:	f1b9 0f00 	cmp.w	r9, #0
   b5c78:	bfb8      	it	lt
   b5c7a:	f1c9 0900 	rsblt	r9, r9, #0
   b5c7e:	f1ba 0f00 	cmp.w	sl, #0
   b5c82:	bfb8      	it	lt
   b5c84:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5c88:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b5c8a:	4683      	mov	fp, r0
   b5c8c:	460c      	mov	r4, r1
   b5c8e:	4615      	mov	r5, r2
  if (steep) {
   b5c90:	dd04      	ble.n	b5c9c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b5c92:	463a      	mov	r2, r7
    swap(x0, y0);
   b5c94:	462c      	mov	r4, r5
    swap(x1, y1);
   b5c96:	4647      	mov	r7, r8
    swap(x0, y0);
   b5c98:	460d      	mov	r5, r1
    swap(x1, y1);
   b5c9a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b5c9c:	42bc      	cmp	r4, r7
   b5c9e:	dd05      	ble.n	b5cac <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5ca0:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b5ca2:	4645      	mov	r5, r8
   b5ca4:	4690      	mov	r8, r2
  if (x0 > x1) {
   b5ca6:	4622      	mov	r2, r4
   b5ca8:	463c      	mov	r4, r7
   b5caa:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b5cac:	1b3e      	subs	r6, r7, r4
   b5cae:	b2b2      	uxth	r2, r6
   b5cb0:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b5cb2:	eba8 0205 	sub.w	r2, r8, r5
   b5cb6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5cba:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b5cbe:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5cc2:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b5cc6:	4545      	cmp	r5, r8
   b5cc8:	bfb4      	ite	lt
   b5cca:	2201      	movlt	r2, #1
   b5ccc:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b5cd0:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b5cd2:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b5cd4:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b5cd6:	42bc      	cmp	r4, r7
   b5cd8:	dc1c      	bgt.n	b5d14 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b5cda:	f8db 2000 	ldr.w	r2, [fp]
   b5cde:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5ce0:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b5ce2:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b5ce6:	bfc7      	ittee	gt
   b5ce8:	4629      	movgt	r1, r5
   b5cea:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b5cec:	462a      	movle	r2, r5
   b5cee:	4621      	movle	r1, r4
   b5cf0:	4658      	mov	r0, fp
   b5cf2:	47c0      	blx	r8
    }
    err -= dy;
   b5cf4:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b5cf6:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b5cf8:	1ab6      	subs	r6, r6, r2
   b5cfa:	b2b1      	uxth	r1, r6
   b5cfc:	b236      	sxth	r6, r6
    if (err < 0) {
   b5cfe:	2e00      	cmp	r6, #0
   b5d00:	da05      	bge.n	b5d0e <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5d02:	9a02      	ldr	r2, [sp, #8]
   b5d04:	4415      	add	r5, r2
      err += dx;
   b5d06:	9a00      	ldr	r2, [sp, #0]
   b5d08:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b5d0a:	b22d      	sxth	r5, r5
      err += dx;
   b5d0c:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b5d0e:	3401      	adds	r4, #1
   b5d10:	b224      	sxth	r4, r4
   b5d12:	e7e0      	b.n	b5cd6 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5d14:	b005      	add	sp, #20
   b5d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5d1a <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b5d1a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5d1e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b5d22:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b5d24:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b5d28:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b5d2c:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b5d2e:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b5d30:	4616      	mov	r6, r2
   b5d32:	468a      	mov	sl, r1
   b5d34:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b5d36:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b5d38:	6823      	ldr	r3, [r4, #0]
   b5d3a:	f8cd 8000 	str.w	r8, [sp]
   b5d3e:	f109 32ff 	add.w	r2, r9, #4294967295
   b5d42:	4432      	add	r2, r6
   b5d44:	69df      	ldr	r7, [r3, #28]
   b5d46:	4651      	mov	r1, sl
   b5d48:	462b      	mov	r3, r5
   b5d4a:	4620      	mov	r0, r4
   b5d4c:	b212      	sxth	r2, r2
   b5d4e:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b5d50:	6823      	ldr	r3, [r4, #0]
   b5d52:	f8cd 8000 	str.w	r8, [sp]
   b5d56:	699f      	ldr	r7, [r3, #24]
   b5d58:	4632      	mov	r2, r6
   b5d5a:	464b      	mov	r3, r9
   b5d5c:	4651      	mov	r1, sl
   b5d5e:	4620      	mov	r0, r4
   b5d60:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b5d62:	1e6b      	subs	r3, r5, #1
   b5d64:	eb03 010a 	add.w	r1, r3, sl
   b5d68:	6823      	ldr	r3, [r4, #0]
   b5d6a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b5d6e:	699d      	ldr	r5, [r3, #24]
   b5d70:	4632      	mov	r2, r6
   b5d72:	464b      	mov	r3, r9
   b5d74:	b209      	sxth	r1, r1
   b5d76:	4620      	mov	r0, r4
   b5d78:	46ac      	mov	ip, r5
}
   b5d7a:	b002      	add	sp, #8
   b5d7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5d80:	4760      	bx	ip

000b5d82 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b5d82:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5d84:	3b01      	subs	r3, #1
   b5d86:	4413      	add	r3, r2
   b5d88:	6804      	ldr	r4, [r0, #0]
   b5d8a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5d8e:	9501      	str	r5, [sp, #4]
   b5d90:	b21b      	sxth	r3, r3
   b5d92:	9300      	str	r3, [sp, #0]
   b5d94:	6964      	ldr	r4, [r4, #20]
   b5d96:	460b      	mov	r3, r1
   b5d98:	47a0      	blx	r4
}
   b5d9a:	b003      	add	sp, #12
   b5d9c:	bd30      	pop	{r4, r5, pc}

000b5d9e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b5d9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5da0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5da4:	6804      	ldr	r4, [r0, #0]
   b5da6:	e9cd 2500 	strd	r2, r5, [sp]
   b5daa:	3b01      	subs	r3, #1
   b5dac:	440b      	add	r3, r1
   b5dae:	6964      	ldr	r4, [r4, #20]
   b5db0:	b21b      	sxth	r3, r3
   b5db2:	47a0      	blx	r4
}
   b5db4:	b003      	add	sp, #12
   b5db6:	bd30      	pop	{r4, r5, pc}

000b5db8 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5db8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5dbc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5dc0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5dc4:	4605      	mov	r5, r0
   b5dc6:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5dc8:	460c      	mov	r4, r1
   b5dca:	18ce      	adds	r6, r1, r3
   b5dcc:	42b4      	cmp	r4, r6
   b5dce:	da0b      	bge.n	b5de8 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5dd0:	682b      	ldr	r3, [r5, #0]
   b5dd2:	f8cd 8000 	str.w	r8, [sp]
   b5dd6:	699f      	ldr	r7, [r3, #24]
   b5dd8:	4621      	mov	r1, r4
   b5dda:	464b      	mov	r3, r9
   b5ddc:	4652      	mov	r2, sl
   b5dde:	4628      	mov	r0, r5
   b5de0:	3401      	adds	r4, #1
   b5de2:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5de4:	b224      	sxth	r4, r4
   b5de6:	e7f1      	b.n	b5dcc <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5de8:	b002      	add	sp, #8
   b5dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5dee <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5dee:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5df0:	6802      	ldr	r2, [r0, #0]
   b5df2:	9101      	str	r1, [sp, #4]
   b5df4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5df8:	9100      	str	r1, [sp, #0]
   b5dfa:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5dfc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5e00:	2200      	movs	r2, #0
   b5e02:	4611      	mov	r1, r2
   b5e04:	47a0      	blx	r4
}
   b5e06:	b002      	add	sp, #8
   b5e08:	bd10      	pop	{r4, pc}

000b5e0a <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b5e0a:	4770      	bx	lr

000b5e0c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5e0c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5e0e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5e10:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5e12:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b5e16:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5e18:	4d05      	ldr	r5, [pc, #20]	; (b5e30 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b5e1a:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5e1c:	2201      	movs	r2, #1
   b5e1e:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5e20:	6005      	str	r5, [r0, #0]
   b5e22:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5e24:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b5e26:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b5e28:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b5e2a:	7682      	strb	r2, [r0, #26]
}
   b5e2c:	bd30      	pop	{r4, r5, pc}
   b5e2e:	bf00      	nop
   b5e30:	000bb050 	.word	0x000bb050

000b5e34 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e38:	ed2d 8b02 	vpush	{d8}
   b5e3c:	b08d      	sub	sp, #52	; 0x34
   b5e3e:	4607      	mov	r7, r0
   b5e40:	9104      	str	r1, [sp, #16]
   b5e42:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b5e46:	9105      	str	r1, [sp, #20]
   b5e48:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5e4c:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b5e4e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5e52:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5e54:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5e58:	4281      	cmp	r1, r0
   b5e5a:	dd52      	ble.n	b5f02 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5e5c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5e60:	4291      	cmp	r1, r2
   b5e62:	dd4e      	ble.n	b5f02 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5e64:	2106      	movs	r1, #6
   b5e66:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5e6a:	2c00      	cmp	r4, #0
   b5e6c:	dd49      	ble.n	b5f02 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5e6e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5e72:	2c00      	cmp	r4, #0
   b5e74:	dd45      	ble.n	b5f02 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5e76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5e7a:	930b      	str	r3, [sp, #44]	; 0x2c
   b5e7c:	b293      	uxth	r3, r2
   b5e7e:	9307      	str	r3, [sp, #28]
   b5e80:	3308      	adds	r3, #8
   b5e82:	b29b      	uxth	r3, r3
   b5e84:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5e86:	2400      	movs	r4, #0
   b5e88:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5e8a:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5e8c:	bf1c      	itt	ne
   b5e8e:	4b2c      	ldrne	r3, [pc, #176]	; (b5f40 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5e90:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b5e92:	9e07      	ldr	r6, [sp, #28]
   b5e94:	bf16      	itet	ne
   b5e96:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5e98:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5e9a:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5e9c:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5e9e:	9a04      	ldr	r2, [sp, #16]
   b5ea0:	b2ab      	uxth	r3, r5
   b5ea2:	930a      	str	r3, [sp, #40]	; 0x28
   b5ea4:	fb04 f305 	mul.w	r3, r4, r5
   b5ea8:	fa13 f382 	uxtah	r3, r3, r2
   b5eac:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b5eae:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5eb2:	ee08 3a10 	vmov	s16, r3
   b5eb6:	46b0      	mov	r8, r6
   b5eb8:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5ebc:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5ec0:	9b03      	ldr	r3, [sp, #12]
   b5ec2:	07db      	lsls	r3, r3, #31
   b5ec4:	d52f      	bpl.n	b5f26 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b5ec6:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5ec8:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5eca:	d11f      	bne.n	b5f0c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5ecc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5ed0:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b5ed2:	b232      	sxth	r2, r6
   b5ed4:	4651      	mov	r1, sl
   b5ed6:	4638      	mov	r0, r7
   b5ed8:	47d8      	blx	fp
      line >>= 1;
   b5eda:	9b03      	ldr	r3, [sp, #12]
   b5edc:	085b      	lsrs	r3, r3, #1
   b5ede:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5ee2:	3601      	adds	r6, #1
   b5ee4:	4498      	add	r8, r3
   b5ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5ee8:	b2b6      	uxth	r6, r6
   b5eea:	42b3      	cmp	r3, r6
   b5eec:	fa1f f888 	uxth.w	r8, r8
   b5ef0:	d1e6      	bne.n	b5ec0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5ef2:	9b08      	ldr	r3, [sp, #32]
   b5ef4:	3b01      	subs	r3, #1
   b5ef6:	3401      	adds	r4, #1
   b5ef8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5efc:	b264      	sxtb	r4, r4
   b5efe:	9308      	str	r3, [sp, #32]
   b5f00:	d1c3      	bne.n	b5e8a <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5f02:	b00d      	add	sp, #52	; 0x34
   b5f04:	ecbd 8b02 	vpop	{d8}
   b5f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5f0c:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5f0e:	e9cd 9200 	strd	r9, r2, [sp]
   b5f12:	ee18 1a10 	vmov	r1, s16
   b5f16:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b5f1a:	fa0f f288 	sxth.w	r2, r8
   b5f1e:	464b      	mov	r3, r9
   b5f20:	4638      	mov	r0, r7
   b5f22:	47d8      	blx	fp
   b5f24:	e7d9      	b.n	b5eda <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5f26:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b5f2a:	4293      	cmp	r3, r2
   b5f2c:	d0d5      	beq.n	b5eda <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5f2e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5f30:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5f32:	d103      	bne.n	b5f3c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5f34:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5f38:	9b06      	ldr	r3, [sp, #24]
   b5f3a:	e7ca      	b.n	b5ed2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5f3c:	9a06      	ldr	r2, [sp, #24]
   b5f3e:	e7e6      	b.n	b5f0e <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5f40:	000bab4c 	.word	0x000bab4c

000b5f44 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5f44:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5f46:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5f48:	b085      	sub	sp, #20
   b5f4a:	4604      	mov	r4, r0
  if (c == '\n') {
   b5f4c:	d107      	bne.n	b5f5e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5f4e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5f50:	8a63      	ldrh	r3, [r4, #18]
   b5f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5f56:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5f58:	2300      	movs	r3, #0
   b5f5a:	8223      	strh	r3, [r4, #16]
   b5f5c:	e021      	b.n	b5fa2 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b5f5e:	290d      	cmp	r1, #13
   b5f60:	d01f      	beq.n	b5fa2 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b5f62:	7e03      	ldrb	r3, [r0, #24]
   b5f64:	9302      	str	r3, [sp, #8]
   b5f66:	8ac3      	ldrh	r3, [r0, #22]
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	8a83      	ldrh	r3, [r0, #20]
   b5f6c:	9300      	str	r3, [sp, #0]
   b5f6e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5f72:	460b      	mov	r3, r1
   b5f74:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5f78:	f7ff ff5c 	bl	b5e34 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5f7c:	7e20      	ldrb	r0, [r4, #24]
   b5f7e:	8a23      	ldrh	r3, [r4, #16]
   b5f80:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5f84:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5f88:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5f8a:	b21b      	sxth	r3, r3
   b5f8c:	4602      	mov	r2, r0
   b5f8e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5f90:	b139      	cbz	r1, b5fa2 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b5f92:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5f96:	f06f 0505 	mvn.w	r5, #5
   b5f9a:	fb05 1100 	mla	r1, r5, r0, r1
   b5f9e:	428b      	cmp	r3, r1
   b5fa0:	dcd6      	bgt.n	b5f50 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b5fa2:	2001      	movs	r0, #1
   b5fa4:	b005      	add	sp, #20
   b5fa6:	bd30      	pop	{r4, r5, pc}

000b5fa8 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5fa8:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5faa:	8242      	strh	r2, [r0, #18]
}
   b5fac:	4770      	bx	lr

000b5fae <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5fae:	2901      	cmp	r1, #1
   b5fb0:	bf38      	it	cc
   b5fb2:	2101      	movcc	r1, #1
   b5fb4:	7601      	strb	r1, [r0, #24]
}
   b5fb6:	4770      	bx	lr

000b5fb8 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5fb8:	82c1      	strh	r1, [r0, #22]
   b5fba:	8281      	strh	r1, [r0, #20]
}
   b5fbc:	4770      	bx	lr

000b5fbe <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5fbe:	7e40      	ldrb	r0, [r0, #25]
   b5fc0:	4770      	bx	lr

000b5fc2 <_ZN12Adafruit_GFX5widthEv>:
}
   b5fc2:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5fc6:	4770      	bx	lr

000b5fc8 <_ZN12Adafruit_GFX6heightEv>:
}
   b5fc8:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5fcc:	4770      	bx	lr
	...

000b5fd0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <netdb_freeaddrinfo+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	689b      	ldr	r3, [r3, #8]
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	00030268 	.word	0x00030268

000b5fe0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <netdb_getaddrinfo+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	68db      	ldr	r3, [r3, #12]
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	00030268 	.word	0x00030268

000b5ff0 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <hal_pin_map+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	681b      	ldr	r3, [r3, #0]
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	0003022c 	.word	0x0003022c

000b6000 <hal_pin_validate_function>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <hal_pin_validate_function+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	685b      	ldr	r3, [r3, #4]
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	0003022c 	.word	0x0003022c

000b6010 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <hal_gpio_mode+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	689b      	ldr	r3, [r3, #8]
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	0003022c 	.word	0x0003022c

000b6020 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <hal_gpio_get_mode+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	68db      	ldr	r3, [r3, #12]
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	0003022c 	.word	0x0003022c

000b6030 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <hal_gpio_write+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	691b      	ldr	r3, [r3, #16]
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	0003022c 	.word	0x0003022c

000b6040 <hal_interrupt_attach>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <hal_interrupt_attach+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	699b      	ldr	r3, [r3, #24]
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	0003022c 	.word	0x0003022c

000b6050 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <hal_interrupt_detach+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	69db      	ldr	r3, [r3, #28]
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	0003022c 	.word	0x0003022c

000b6060 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <hal_adc_read+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	0003022c 	.word	0x0003022c

000b6070 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <hal_pwm_write_with_frequency_ext+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	0003022c 	.word	0x0003022c

000b6080 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <HAL_RNG_GetRandomNumber+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	685b      	ldr	r3, [r3, #4]
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	00030218 	.word	0x00030218

000b6090 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <HAL_Delay_Microseconds+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	68db      	ldr	r3, [r3, #12]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030218 	.word	0x00030218

000b60a0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	695b      	ldr	r3, [r3, #20]
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	00030218 	.word	0x00030218

000b60b0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <hal_ble_stack_init+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	689b      	ldr	r3, [r3, #8]
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	00030278 	.word	0x00030278

000b60c0 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <hal_ble_gap_set_advertising_data+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	00030278 	.word	0x00030278

000b60d0 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <hal_ble_gap_set_scan_response_data+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	00030278 	.word	0x00030278

000b60e0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <hal_ble_gap_start_advertising+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030278 	.word	0x00030278

000b60f0 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <hal_ble_gap_start_scan+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030278 	.word	0x00030278

000b6100 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b03      	ldr	r3, [pc, #12]	; (b6110 <hal_ble_gap_stop_scan+0x10>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b610a:	9301      	str	r3, [sp, #4]
   b610c:	bd08      	pop	{r3, pc}
   b610e:	0000      	.short	0x0000
   b6110:	00030278 	.word	0x00030278

000b6114 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b03      	ldr	r3, [pc, #12]	; (b6124 <hal_ble_gap_disconnect+0x10>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b611e:	9301      	str	r3, [sp, #4]
   b6120:	bd08      	pop	{r3, pc}
   b6122:	0000      	.short	0x0000
   b6124:	00030278 	.word	0x00030278

000b6128 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b03      	ldr	r3, [pc, #12]	; (b6138 <hal_ble_gatt_server_add_service+0x10>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b6132:	9301      	str	r3, [sp, #4]
   b6134:	bd08      	pop	{r3, pc}
   b6136:	0000      	.short	0x0000
   b6138:	00030278 	.word	0x00030278

000b613c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b613c:	b508      	push	{r3, lr}
   b613e:	4b03      	ldr	r3, [pc, #12]	; (b614c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6140:	681b      	ldr	r3, [r3, #0]
   b6142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6146:	9301      	str	r3, [sp, #4]
   b6148:	bd08      	pop	{r3, pc}
   b614a:	0000      	.short	0x0000
   b614c:	00030278 	.word	0x00030278

000b6150 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b03      	ldr	r3, [pc, #12]	; (b6160 <hal_ble_gatt_client_discover_all_services+0x10>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b615a:	9301      	str	r3, [sp, #4]
   b615c:	bd08      	pop	{r3, pc}
   b615e:	0000      	.short	0x0000
   b6160:	00030278 	.word	0x00030278

000b6164 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b03      	ldr	r3, [pc, #12]	; (b6174 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b616e:	9301      	str	r3, [sp, #4]
   b6170:	bd08      	pop	{r3, pc}
   b6172:	0000      	.short	0x0000
   b6174:	00030278 	.word	0x00030278

000b6178 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6178:	b508      	push	{r3, lr}
   b617a:	4b03      	ldr	r3, [pc, #12]	; (b6188 <hal_ble_gatt_client_write_with_response+0x10>)
   b617c:	681b      	ldr	r3, [r3, #0]
   b617e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6182:	9301      	str	r3, [sp, #4]
   b6184:	bd08      	pop	{r3, pc}
   b6186:	0000      	.short	0x0000
   b6188:	00030278 	.word	0x00030278

000b618c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b618c:	b508      	push	{r3, lr}
   b618e:	4b03      	ldr	r3, [pc, #12]	; (b619c <hal_ble_gatt_client_write_without_response+0x10>)
   b6190:	681b      	ldr	r3, [r3, #0]
   b6192:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6196:	9301      	str	r3, [sp, #4]
   b6198:	bd08      	pop	{r3, pc}
   b619a:	0000      	.short	0x0000
   b619c:	00030278 	.word	0x00030278

000b61a0 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b03      	ldr	r3, [pc, #12]	; (b61b0 <hal_ble_gatt_client_read+0x10>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b61aa:	9301      	str	r3, [sp, #4]
   b61ac:	bd08      	pop	{r3, pc}
   b61ae:	0000      	.short	0x0000
   b61b0:	00030278 	.word	0x00030278

000b61b4 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b03      	ldr	r3, [pc, #12]	; (b61c4 <hal_ble_gap_connect+0x10>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b61be:	9301      	str	r3, [sp, #4]
   b61c0:	bd08      	pop	{r3, pc}
   b61c2:	0000      	.short	0x0000
   b61c4:	00030278 	.word	0x00030278

000b61c8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b03      	ldr	r3, [pc, #12]	; (b61d8 <hal_ble_gatt_server_add_characteristic+0x10>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b61d2:	9301      	str	r3, [sp, #4]
   b61d4:	bd08      	pop	{r3, pc}
   b61d6:	0000      	.short	0x0000
   b61d8:	00030278 	.word	0x00030278

000b61dc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b61dc:	b508      	push	{r3, lr}
   b61de:	4b03      	ldr	r3, [pc, #12]	; (b61ec <hal_ble_set_callback_on_periph_link_events+0x10>)
   b61e0:	681b      	ldr	r3, [r3, #0]
   b61e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b61e6:	9301      	str	r3, [sp, #4]
   b61e8:	bd08      	pop	{r3, pc}
   b61ea:	0000      	.short	0x0000
   b61ec:	00030278 	.word	0x00030278

000b61f0 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b03      	ldr	r3, [pc, #12]	; (b6200 <hal_ble_gatt_client_configure_cccd+0x10>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b61fa:	9301      	str	r3, [sp, #4]
   b61fc:	bd08      	pop	{r3, pc}
   b61fe:	0000      	.short	0x0000
   b6200:	00030278 	.word	0x00030278

000b6204 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b03      	ldr	r3, [pc, #12]	; (b6214 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b620e:	9301      	str	r3, [sp, #4]
   b6210:	bd08      	pop	{r3, pc}
   b6212:	0000      	.short	0x0000
   b6214:	00030278 	.word	0x00030278

000b6218 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b03      	ldr	r3, [pc, #12]	; (b6228 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6222:	9301      	str	r3, [sp, #4]
   b6224:	bd08      	pop	{r3, pc}
   b6226:	0000      	.short	0x0000
   b6228:	00030278 	.word	0x00030278

000b622c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b622c:	b508      	push	{r3, lr}
   b622e:	4b02      	ldr	r3, [pc, #8]	; (b6238 <os_mutex_recursive_create+0xc>)
   b6230:	681b      	ldr	r3, [r3, #0]
   b6232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6234:	9301      	str	r3, [sp, #4]
   b6236:	bd08      	pop	{r3, pc}
   b6238:	00030248 	.word	0x00030248

000b623c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b623c:	b508      	push	{r3, lr}
   b623e:	4b02      	ldr	r3, [pc, #8]	; (b6248 <os_mutex_recursive_lock+0xc>)
   b6240:	681b      	ldr	r3, [r3, #0]
   b6242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6244:	9301      	str	r3, [sp, #4]
   b6246:	bd08      	pop	{r3, pc}
   b6248:	00030248 	.word	0x00030248

000b624c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b624c:	b508      	push	{r3, lr}
   b624e:	4b02      	ldr	r3, [pc, #8]	; (b6258 <os_mutex_recursive_unlock+0xc>)
   b6250:	681b      	ldr	r3, [r3, #0]
   b6252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6254:	9301      	str	r3, [sp, #4]
   b6256:	bd08      	pop	{r3, pc}
   b6258:	00030248 	.word	0x00030248

000b625c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b625c:	b508      	push	{r3, lr}
   b625e:	4b02      	ldr	r3, [pc, #8]	; (b6268 <inet_inet_ntop+0xc>)
   b6260:	681b      	ldr	r3, [r3, #0]
   b6262:	695b      	ldr	r3, [r3, #20]
   b6264:	9301      	str	r3, [sp, #4]
   b6266:	bd08      	pop	{r3, pc}
   b6268:	00030264 	.word	0x00030264

000b626c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b626c:	b508      	push	{r3, lr}
   b626e:	4b02      	ldr	r3, [pc, #8]	; (b6278 <hal_usart_write+0xc>)
   b6270:	681b      	ldr	r3, [r3, #0]
   b6272:	68db      	ldr	r3, [r3, #12]
   b6274:	9301      	str	r3, [sp, #4]
   b6276:	bd08      	pop	{r3, pc}
   b6278:	0003023c 	.word	0x0003023c

000b627c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b627c:	b508      	push	{r3, lr}
   b627e:	4b02      	ldr	r3, [pc, #8]	; (b6288 <hal_usart_available+0xc>)
   b6280:	681b      	ldr	r3, [r3, #0]
   b6282:	691b      	ldr	r3, [r3, #16]
   b6284:	9301      	str	r3, [sp, #4]
   b6286:	bd08      	pop	{r3, pc}
   b6288:	0003023c 	.word	0x0003023c

000b628c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b628c:	b508      	push	{r3, lr}
   b628e:	4b02      	ldr	r3, [pc, #8]	; (b6298 <hal_usart_read+0xc>)
   b6290:	681b      	ldr	r3, [r3, #0]
   b6292:	695b      	ldr	r3, [r3, #20]
   b6294:	9301      	str	r3, [sp, #4]
   b6296:	bd08      	pop	{r3, pc}
   b6298:	0003023c 	.word	0x0003023c

000b629c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b629c:	b508      	push	{r3, lr}
   b629e:	4b02      	ldr	r3, [pc, #8]	; (b62a8 <hal_usart_peek+0xc>)
   b62a0:	681b      	ldr	r3, [r3, #0]
   b62a2:	699b      	ldr	r3, [r3, #24]
   b62a4:	9301      	str	r3, [sp, #4]
   b62a6:	bd08      	pop	{r3, pc}
   b62a8:	0003023c 	.word	0x0003023c

000b62ac <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b62ac:	b508      	push	{r3, lr}
   b62ae:	4b02      	ldr	r3, [pc, #8]	; (b62b8 <hal_usart_flush+0xc>)
   b62b0:	681b      	ldr	r3, [r3, #0]
   b62b2:	69db      	ldr	r3, [r3, #28]
   b62b4:	9301      	str	r3, [sp, #4]
   b62b6:	bd08      	pop	{r3, pc}
   b62b8:	0003023c 	.word	0x0003023c

000b62bc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b62bc:	b508      	push	{r3, lr}
   b62be:	4b02      	ldr	r3, [pc, #8]	; (b62c8 <hal_usart_is_enabled+0xc>)
   b62c0:	681b      	ldr	r3, [r3, #0]
   b62c2:	6a1b      	ldr	r3, [r3, #32]
   b62c4:	9301      	str	r3, [sp, #4]
   b62c6:	bd08      	pop	{r3, pc}
   b62c8:	0003023c 	.word	0x0003023c

000b62cc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b62cc:	b508      	push	{r3, lr}
   b62ce:	4b02      	ldr	r3, [pc, #8]	; (b62d8 <hal_usart_available_data_for_write+0xc>)
   b62d0:	681b      	ldr	r3, [r3, #0]
   b62d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b62d4:	9301      	str	r3, [sp, #4]
   b62d6:	bd08      	pop	{r3, pc}
   b62d8:	0003023c 	.word	0x0003023c

000b62dc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b62dc:	b508      	push	{r3, lr}
   b62de:	4b02      	ldr	r3, [pc, #8]	; (b62e8 <hal_usart_init_ex+0xc>)
   b62e0:	681b      	ldr	r3, [r3, #0]
   b62e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62e4:	9301      	str	r3, [sp, #4]
   b62e6:	bd08      	pop	{r3, pc}
   b62e8:	0003023c 	.word	0x0003023c

000b62ec <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b62ec:	b508      	push	{r3, lr}
   b62ee:	4b02      	ldr	r3, [pc, #8]	; (b62f8 <hal_i2c_begin+0xc>)
   b62f0:	681b      	ldr	r3, [r3, #0]
   b62f2:	68db      	ldr	r3, [r3, #12]
   b62f4:	9301      	str	r3, [sp, #4]
   b62f6:	bd08      	pop	{r3, pc}
   b62f8:	00030228 	.word	0x00030228

000b62fc <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b62fc:	b508      	push	{r3, lr}
   b62fe:	4b02      	ldr	r3, [pc, #8]	; (b6308 <hal_i2c_begin_transmission+0xc>)
   b6300:	681b      	ldr	r3, [r3, #0]
   b6302:	699b      	ldr	r3, [r3, #24]
   b6304:	9301      	str	r3, [sp, #4]
   b6306:	bd08      	pop	{r3, pc}
   b6308:	00030228 	.word	0x00030228

000b630c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b630c:	b508      	push	{r3, lr}
   b630e:	4b02      	ldr	r3, [pc, #8]	; (b6318 <hal_i2c_end_transmission+0xc>)
   b6310:	681b      	ldr	r3, [r3, #0]
   b6312:	69db      	ldr	r3, [r3, #28]
   b6314:	9301      	str	r3, [sp, #4]
   b6316:	bd08      	pop	{r3, pc}
   b6318:	00030228 	.word	0x00030228

000b631c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b631c:	b508      	push	{r3, lr}
   b631e:	4b02      	ldr	r3, [pc, #8]	; (b6328 <hal_i2c_write+0xc>)
   b6320:	681b      	ldr	r3, [r3, #0]
   b6322:	6a1b      	ldr	r3, [r3, #32]
   b6324:	9301      	str	r3, [sp, #4]
   b6326:	bd08      	pop	{r3, pc}
   b6328:	00030228 	.word	0x00030228

000b632c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b632c:	b508      	push	{r3, lr}
   b632e:	4b02      	ldr	r3, [pc, #8]	; (b6338 <hal_i2c_available+0xc>)
   b6330:	681b      	ldr	r3, [r3, #0]
   b6332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6334:	9301      	str	r3, [sp, #4]
   b6336:	bd08      	pop	{r3, pc}
   b6338:	00030228 	.word	0x00030228

000b633c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b633c:	b508      	push	{r3, lr}
   b633e:	4b02      	ldr	r3, [pc, #8]	; (b6348 <hal_i2c_read+0xc>)
   b6340:	681b      	ldr	r3, [r3, #0]
   b6342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6344:	9301      	str	r3, [sp, #4]
   b6346:	bd08      	pop	{r3, pc}
   b6348:	00030228 	.word	0x00030228

000b634c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b634c:	b508      	push	{r3, lr}
   b634e:	4b02      	ldr	r3, [pc, #8]	; (b6358 <hal_i2c_peek+0xc>)
   b6350:	681b      	ldr	r3, [r3, #0]
   b6352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6354:	9301      	str	r3, [sp, #4]
   b6356:	bd08      	pop	{r3, pc}
   b6358:	00030228 	.word	0x00030228

000b635c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b635c:	b508      	push	{r3, lr}
   b635e:	4b02      	ldr	r3, [pc, #8]	; (b6368 <hal_i2c_flush+0xc>)
   b6360:	681b      	ldr	r3, [r3, #0]
   b6362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6364:	9301      	str	r3, [sp, #4]
   b6366:	bd08      	pop	{r3, pc}
   b6368:	00030228 	.word	0x00030228

000b636c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b636c:	b508      	push	{r3, lr}
   b636e:	4b02      	ldr	r3, [pc, #8]	; (b6378 <hal_i2c_is_enabled+0xc>)
   b6370:	681b      	ldr	r3, [r3, #0]
   b6372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6374:	9301      	str	r3, [sp, #4]
   b6376:	bd08      	pop	{r3, pc}
   b6378:	00030228 	.word	0x00030228

000b637c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b637c:	b508      	push	{r3, lr}
   b637e:	4b02      	ldr	r3, [pc, #8]	; (b6388 <hal_i2c_init+0xc>)
   b6380:	681b      	ldr	r3, [r3, #0]
   b6382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6384:	9301      	str	r3, [sp, #4]
   b6386:	bd08      	pop	{r3, pc}
   b6388:	00030228 	.word	0x00030228

000b638c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b638c:	b508      	push	{r3, lr}
   b638e:	4b02      	ldr	r3, [pc, #8]	; (b6398 <hal_spi_begin+0xc>)
   b6390:	681b      	ldr	r3, [r3, #0]
   b6392:	681b      	ldr	r3, [r3, #0]
   b6394:	9301      	str	r3, [sp, #4]
   b6396:	bd08      	pop	{r3, pc}
   b6398:	00030230 	.word	0x00030230

000b639c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b639c:	b508      	push	{r3, lr}
   b639e:	4b02      	ldr	r3, [pc, #8]	; (b63a8 <hal_spi_set_bit_order+0xc>)
   b63a0:	681b      	ldr	r3, [r3, #0]
   b63a2:	689b      	ldr	r3, [r3, #8]
   b63a4:	9301      	str	r3, [sp, #4]
   b63a6:	bd08      	pop	{r3, pc}
   b63a8:	00030230 	.word	0x00030230

000b63ac <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b63ac:	b508      	push	{r3, lr}
   b63ae:	4b02      	ldr	r3, [pc, #8]	; (b63b8 <hal_spi_set_data_mode+0xc>)
   b63b0:	681b      	ldr	r3, [r3, #0]
   b63b2:	68db      	ldr	r3, [r3, #12]
   b63b4:	9301      	str	r3, [sp, #4]
   b63b6:	bd08      	pop	{r3, pc}
   b63b8:	00030230 	.word	0x00030230

000b63bc <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b63bc:	b508      	push	{r3, lr}
   b63be:	4b02      	ldr	r3, [pc, #8]	; (b63c8 <hal_spi_set_clock_divider+0xc>)
   b63c0:	681b      	ldr	r3, [r3, #0]
   b63c2:	691b      	ldr	r3, [r3, #16]
   b63c4:	9301      	str	r3, [sp, #4]
   b63c6:	bd08      	pop	{r3, pc}
   b63c8:	00030230 	.word	0x00030230

000b63cc <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b63cc:	b508      	push	{r3, lr}
   b63ce:	4b02      	ldr	r3, [pc, #8]	; (b63d8 <hal_spi_transfer+0xc>)
   b63d0:	681b      	ldr	r3, [r3, #0]
   b63d2:	695b      	ldr	r3, [r3, #20]
   b63d4:	9301      	str	r3, [sp, #4]
   b63d6:	bd08      	pop	{r3, pc}
   b63d8:	00030230 	.word	0x00030230

000b63dc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b63dc:	b508      	push	{r3, lr}
   b63de:	4b02      	ldr	r3, [pc, #8]	; (b63e8 <hal_spi_init+0xc>)
   b63e0:	681b      	ldr	r3, [r3, #0]
   b63e2:	69db      	ldr	r3, [r3, #28]
   b63e4:	9301      	str	r3, [sp, #4]
   b63e6:	bd08      	pop	{r3, pc}
   b63e8:	00030230 	.word	0x00030230

000b63ec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b63ec:	b508      	push	{r3, lr}
   b63ee:	4b02      	ldr	r3, [pc, #8]	; (b63f8 <hal_spi_is_enabled+0xc>)
   b63f0:	681b      	ldr	r3, [r3, #0]
   b63f2:	6a1b      	ldr	r3, [r3, #32]
   b63f4:	9301      	str	r3, [sp, #4]
   b63f6:	bd08      	pop	{r3, pc}
   b63f8:	00030230 	.word	0x00030230

000b63fc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b63fc:	b508      	push	{r3, lr}
   b63fe:	4b02      	ldr	r3, [pc, #8]	; (b6408 <hal_spi_info+0xc>)
   b6400:	681b      	ldr	r3, [r3, #0]
   b6402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6404:	9301      	str	r3, [sp, #4]
   b6406:	bd08      	pop	{r3, pc}
   b6408:	00030230 	.word	0x00030230

000b640c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b640c:	b508      	push	{r3, lr}
   b640e:	4b02      	ldr	r3, [pc, #8]	; (b6418 <hal_spi_acquire+0xc>)
   b6410:	681b      	ldr	r3, [r3, #0]
   b6412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6414:	9301      	str	r3, [sp, #4]
   b6416:	bd08      	pop	{r3, pc}
   b6418:	00030230 	.word	0x00030230

000b641c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b641c:	b508      	push	{r3, lr}
   b641e:	4b02      	ldr	r3, [pc, #8]	; (b6428 <hal_spi_release+0xc>)
   b6420:	681b      	ldr	r3, [r3, #0]
   b6422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6424:	9301      	str	r3, [sp, #4]
   b6426:	bd08      	pop	{r3, pc}
   b6428:	00030230 	.word	0x00030230

000b642c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b642c:	b508      	push	{r3, lr}
   b642e:	4b02      	ldr	r3, [pc, #8]	; (b6438 <HAL_USB_USART_Init+0xc>)
   b6430:	681b      	ldr	r3, [r3, #0]
   b6432:	681b      	ldr	r3, [r3, #0]
   b6434:	9301      	str	r3, [sp, #4]
   b6436:	bd08      	pop	{r3, pc}
   b6438:	0003024c 	.word	0x0003024c

000b643c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b643c:	b508      	push	{r3, lr}
   b643e:	4b02      	ldr	r3, [pc, #8]	; (b6448 <HAL_USB_USART_Available_Data+0xc>)
   b6440:	681b      	ldr	r3, [r3, #0]
   b6442:	691b      	ldr	r3, [r3, #16]
   b6444:	9301      	str	r3, [sp, #4]
   b6446:	bd08      	pop	{r3, pc}
   b6448:	0003024c 	.word	0x0003024c

000b644c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b644c:	b508      	push	{r3, lr}
   b644e:	4b02      	ldr	r3, [pc, #8]	; (b6458 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6450:	681b      	ldr	r3, [r3, #0]
   b6452:	695b      	ldr	r3, [r3, #20]
   b6454:	9301      	str	r3, [sp, #4]
   b6456:	bd08      	pop	{r3, pc}
   b6458:	0003024c 	.word	0x0003024c

000b645c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b645c:	b508      	push	{r3, lr}
   b645e:	4b02      	ldr	r3, [pc, #8]	; (b6468 <HAL_USB_USART_Receive_Data+0xc>)
   b6460:	681b      	ldr	r3, [r3, #0]
   b6462:	699b      	ldr	r3, [r3, #24]
   b6464:	9301      	str	r3, [sp, #4]
   b6466:	bd08      	pop	{r3, pc}
   b6468:	0003024c 	.word	0x0003024c

000b646c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b646c:	b508      	push	{r3, lr}
   b646e:	4b02      	ldr	r3, [pc, #8]	; (b6478 <HAL_USB_USART_Send_Data+0xc>)
   b6470:	681b      	ldr	r3, [r3, #0]
   b6472:	69db      	ldr	r3, [r3, #28]
   b6474:	9301      	str	r3, [sp, #4]
   b6476:	bd08      	pop	{r3, pc}
   b6478:	0003024c 	.word	0x0003024c

000b647c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b647c:	b508      	push	{r3, lr}
   b647e:	4b02      	ldr	r3, [pc, #8]	; (b6488 <HAL_USB_USART_Flush_Data+0xc>)
   b6480:	681b      	ldr	r3, [r3, #0]
   b6482:	6a1b      	ldr	r3, [r3, #32]
   b6484:	9301      	str	r3, [sp, #4]
   b6486:	bd08      	pop	{r3, pc}
   b6488:	0003024c 	.word	0x0003024c

000b648c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b648c:	b508      	push	{r3, lr}
   b648e:	4b02      	ldr	r3, [pc, #8]	; (b6498 <panic_+0xc>)
   b6490:	681b      	ldr	r3, [r3, #0]
   b6492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6494:	9301      	str	r3, [sp, #4]
   b6496:	bd08      	pop	{r3, pc}
   b6498:	00030260 	.word	0x00030260

000b649c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b649c:	b508      	push	{r3, lr}
   b649e:	4b02      	ldr	r3, [pc, #8]	; (b64a8 <log_message+0xc>)
   b64a0:	681b      	ldr	r3, [r3, #0]
   b64a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b64a4:	9301      	str	r3, [sp, #4]
   b64a6:	bd08      	pop	{r3, pc}
   b64a8:	00030260 	.word	0x00030260

000b64ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b64ac:	b508      	push	{r3, lr}
   b64ae:	4b02      	ldr	r3, [pc, #8]	; (b64b8 <set_system_mode+0xc>)
   b64b0:	681b      	ldr	r3, [r3, #0]
   b64b2:	685b      	ldr	r3, [r3, #4]
   b64b4:	9301      	str	r3, [sp, #4]
   b64b6:	bd08      	pop	{r3, pc}
   b64b8:	00030220 	.word	0x00030220

000b64bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b64bc:	b508      	push	{r3, lr}
   b64be:	4b02      	ldr	r3, [pc, #8]	; (b64c8 <system_delay_ms+0xc>)
   b64c0:	681b      	ldr	r3, [r3, #0]
   b64c2:	695b      	ldr	r3, [r3, #20]
   b64c4:	9301      	str	r3, [sp, #4]
   b64c6:	bd08      	pop	{r3, pc}
   b64c8:	00030220 	.word	0x00030220

000b64cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b64cc:	b508      	push	{r3, lr}
   b64ce:	4b03      	ldr	r3, [pc, #12]	; (b64dc <system_ctrl_set_app_request_handler+0x10>)
   b64d0:	681b      	ldr	r3, [r3, #0]
   b64d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b64d6:	9301      	str	r3, [sp, #4]
   b64d8:	bd08      	pop	{r3, pc}
   b64da:	0000      	.short	0x0000
   b64dc:	00030220 	.word	0x00030220

000b64e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b03      	ldr	r3, [pc, #12]	; (b64f0 <system_ctrl_set_result+0x10>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b64ea:	9301      	str	r3, [sp, #4]
   b64ec:	bd08      	pop	{r3, pc}
   b64ee:	0000      	.short	0x0000
   b64f0:	00030220 	.word	0x00030220

000b64f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b02      	ldr	r3, [pc, #8]	; (b6500 <network_connect+0xc>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	685b      	ldr	r3, [r3, #4]
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	bd08      	pop	{r3, pc}
   b6500:	00030240 	.word	0x00030240

000b6504 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6504:	b508      	push	{r3, lr}
   b6506:	4b02      	ldr	r3, [pc, #8]	; (b6510 <network_connecting+0xc>)
   b6508:	681b      	ldr	r3, [r3, #0]
   b650a:	689b      	ldr	r3, [r3, #8]
   b650c:	9301      	str	r3, [sp, #4]
   b650e:	bd08      	pop	{r3, pc}
   b6510:	00030240 	.word	0x00030240

000b6514 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6514:	b508      	push	{r3, lr}
   b6516:	4b02      	ldr	r3, [pc, #8]	; (b6520 <network_disconnect+0xc>)
   b6518:	681b      	ldr	r3, [r3, #0]
   b651a:	68db      	ldr	r3, [r3, #12]
   b651c:	9301      	str	r3, [sp, #4]
   b651e:	bd08      	pop	{r3, pc}
   b6520:	00030240 	.word	0x00030240

000b6524 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6524:	b508      	push	{r3, lr}
   b6526:	4b02      	ldr	r3, [pc, #8]	; (b6530 <network_ready+0xc>)
   b6528:	681b      	ldr	r3, [r3, #0]
   b652a:	691b      	ldr	r3, [r3, #16]
   b652c:	9301      	str	r3, [sp, #4]
   b652e:	bd08      	pop	{r3, pc}
   b6530:	00030240 	.word	0x00030240

000b6534 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6534:	b508      	push	{r3, lr}
   b6536:	4b02      	ldr	r3, [pc, #8]	; (b6540 <network_on+0xc>)
   b6538:	681b      	ldr	r3, [r3, #0]
   b653a:	695b      	ldr	r3, [r3, #20]
   b653c:	9301      	str	r3, [sp, #4]
   b653e:	bd08      	pop	{r3, pc}
   b6540:	00030240 	.word	0x00030240

000b6544 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6544:	b508      	push	{r3, lr}
   b6546:	4b02      	ldr	r3, [pc, #8]	; (b6550 <network_off+0xc>)
   b6548:	681b      	ldr	r3, [r3, #0]
   b654a:	699b      	ldr	r3, [r3, #24]
   b654c:	9301      	str	r3, [sp, #4]
   b654e:	bd08      	pop	{r3, pc}
   b6550:	00030240 	.word	0x00030240

000b6554 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6554:	b508      	push	{r3, lr}
   b6556:	4b02      	ldr	r3, [pc, #8]	; (b6560 <network_listen+0xc>)
   b6558:	681b      	ldr	r3, [r3, #0]
   b655a:	69db      	ldr	r3, [r3, #28]
   b655c:	9301      	str	r3, [sp, #4]
   b655e:	bd08      	pop	{r3, pc}
   b6560:	00030240 	.word	0x00030240

000b6564 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6564:	b508      	push	{r3, lr}
   b6566:	4b02      	ldr	r3, [pc, #8]	; (b6570 <network_listening+0xc>)
   b6568:	681b      	ldr	r3, [r3, #0]
   b656a:	6a1b      	ldr	r3, [r3, #32]
   b656c:	9301      	str	r3, [sp, #4]
   b656e:	bd08      	pop	{r3, pc}
   b6570:	00030240 	.word	0x00030240

000b6574 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b02      	ldr	r3, [pc, #8]	; (b6580 <network_set_listen_timeout+0xc>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b657c:	9301      	str	r3, [sp, #4]
   b657e:	bd08      	pop	{r3, pc}
   b6580:	00030240 	.word	0x00030240

000b6584 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6584:	b508      	push	{r3, lr}
   b6586:	4b02      	ldr	r3, [pc, #8]	; (b6590 <network_get_listen_timeout+0xc>)
   b6588:	681b      	ldr	r3, [r3, #0]
   b658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b658c:	9301      	str	r3, [sp, #4]
   b658e:	bd08      	pop	{r3, pc}
   b6590:	00030240 	.word	0x00030240

000b6594 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6594:	b508      	push	{r3, lr}
   b6596:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <network_is_on+0xc>)
   b6598:	681b      	ldr	r3, [r3, #0]
   b659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b659c:	9301      	str	r3, [sp, #4]
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	00030240 	.word	0x00030240

000b65a4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <network_is_off+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	00030240 	.word	0x00030240

000b65b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	00030244 	.word	0x00030244

000b65c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <malloc+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	681b      	ldr	r3, [r3, #0]
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	0003021c 	.word	0x0003021c

000b65d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <free+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	685b      	ldr	r3, [r3, #4]
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	0003021c 	.word	0x0003021c

000b65e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <realloc+0xc>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	689b      	ldr	r3, [r3, #8]
   b65ec:	9301      	str	r3, [sp, #4]
   b65ee:	bd08      	pop	{r3, pc}
   b65f0:	0003021c 	.word	0x0003021c

000b65f4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b65f4:	b508      	push	{r3, lr}
   b65f6:	4b02      	ldr	r3, [pc, #8]	; (b6600 <abort+0xc>)
   b65f8:	681b      	ldr	r3, [r3, #0]
   b65fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b65fc:	9301      	str	r3, [sp, #4]
   b65fe:	bd08      	pop	{r3, pc}
   b6600:	0003021c 	.word	0x0003021c

000b6604 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6604:	b508      	push	{r3, lr}
   b6606:	4b02      	ldr	r3, [pc, #8]	; (b6610 <__errno+0xc>)
   b6608:	681b      	ldr	r3, [r3, #0]
   b660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b660c:	9301      	str	r3, [sp, #4]
   b660e:	bd08      	pop	{r3, pc}
   b6610:	0003021c 	.word	0x0003021c

000b6614 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6614:	b508      	push	{r3, lr}
   b6616:	4b02      	ldr	r3, [pc, #8]	; (b6620 <__assert_func+0xc>)
   b6618:	681b      	ldr	r3, [r3, #0]
   b661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b661c:	9301      	str	r3, [sp, #4]
   b661e:	bd08      	pop	{r3, pc}
   b6620:	0003021c 	.word	0x0003021c

000b6624 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6624:	b508      	push	{r3, lr}
   b6626:	4b02      	ldr	r3, [pc, #8]	; (b6630 <newlib_impure_ptr_callback+0xc>)
   b6628:	681b      	ldr	r3, [r3, #0]
   b662a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b662c:	9301      	str	r3, [sp, #4]
   b662e:	bd08      	pop	{r3, pc}
   b6630:	0003021c 	.word	0x0003021c

000b6634 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6634:	2200      	movs	r2, #0
   b6636:	6840      	ldr	r0, [r0, #4]
   b6638:	4611      	mov	r1, r2
   b663a:	f7ff bf93 	b.w	b6564 <network_listening>

000b663e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b663e:	2200      	movs	r2, #0
   b6640:	6840      	ldr	r0, [r0, #4]
   b6642:	4611      	mov	r1, r2
   b6644:	f7ff bf9e 	b.w	b6584 <network_get_listen_timeout>

000b6648 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6648:	6840      	ldr	r0, [r0, #4]
   b664a:	2200      	movs	r2, #0
   b664c:	f7ff bf92 	b.w	b6574 <network_set_listen_timeout>

000b6650 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6650:	6840      	ldr	r0, [r0, #4]
   b6652:	2200      	movs	r2, #0
   b6654:	f081 0101 	eor.w	r1, r1, #1
   b6658:	f7ff bf7c 	b.w	b6554 <network_listen>

000b665c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b665c:	2300      	movs	r3, #0
   b665e:	6840      	ldr	r0, [r0, #4]
   b6660:	461a      	mov	r2, r3
   b6662:	4619      	mov	r1, r3
   b6664:	f7ff bf6e 	b.w	b6544 <network_off>

000b6668 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6668:	2300      	movs	r3, #0
   b666a:	6840      	ldr	r0, [r0, #4]
   b666c:	461a      	mov	r2, r3
   b666e:	4619      	mov	r1, r3
   b6670:	f7ff bf60 	b.w	b6534 <network_on>

000b6674 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6674:	2200      	movs	r2, #0
   b6676:	6840      	ldr	r0, [r0, #4]
   b6678:	4611      	mov	r1, r2
   b667a:	f7ff bf53 	b.w	b6524 <network_ready>

000b667e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b667e:	2200      	movs	r2, #0
   b6680:	6840      	ldr	r0, [r0, #4]
   b6682:	4611      	mov	r1, r2
   b6684:	f7ff bf3e 	b.w	b6504 <network_connecting>

000b6688 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6688:	6840      	ldr	r0, [r0, #4]
   b668a:	2200      	movs	r2, #0
   b668c:	2102      	movs	r1, #2
   b668e:	f7ff bf41 	b.w	b6514 <network_disconnect>

000b6692 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6692:	2300      	movs	r3, #0
   b6694:	6840      	ldr	r0, [r0, #4]
   b6696:	461a      	mov	r2, r3
   b6698:	f7ff bf2c 	b.w	b64f4 <network_connect>

000b669c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b669c:	4b02      	ldr	r3, [pc, #8]	; (b66a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b669e:	2203      	movs	r2, #3
   b66a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b66a2:	4a02      	ldr	r2, [pc, #8]	; (b66ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b66a4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b66a6:	4770      	bx	lr
   b66a8:	2003e6b8 	.word	0x2003e6b8
   b66ac:	000bb088 	.word	0x000bb088

000b66b0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b66b0:	2100      	movs	r1, #0
   b66b2:	f7ff beb3 	b.w	b641c <hal_spi_release>

000b66b6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b66b6:	2100      	movs	r1, #0
   b66b8:	f7ff bea8 	b.w	b640c <hal_spi_acquire>

000b66bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b66bc:	b510      	push	{r4, lr}
   b66be:	4604      	mov	r4, r0
   b66c0:	4608      	mov	r0, r1
{
    _spi = spi;
   b66c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b66c4:	f7ff fe8a 	bl	b63dc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b66c8:	2300      	movs	r3, #0
   b66ca:	6063      	str	r3, [r4, #4]
}
   b66cc:	4620      	mov	r0, r4
   b66ce:	bd10      	pop	{r4, pc}

000b66d0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b66d0:	b513      	push	{r0, r1, r4, lr}
   b66d2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b66d4:	7800      	ldrb	r0, [r0, #0]
   b66d6:	f7ff ffee 	bl	b66b6 <_ZN8SPIClass4lockEv.isra.0>
   b66da:	b958      	cbnz	r0, b66f4 <_ZN8SPIClass5beginEv+0x24>
   b66dc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b66de:	9001      	str	r0, [sp, #4]
   b66e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b66e4:	f7ff fe52 	bl	b638c <hal_spi_begin>
        unlock();
   b66e8:	9801      	ldr	r0, [sp, #4]
    }
}
   b66ea:	b002      	add	sp, #8
   b66ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b66f0:	f7ff bfde 	b.w	b66b0 <_ZN8SPIClass6unlockEv.isra.0>
   b66f4:	b002      	add	sp, #8
   b66f6:	bd10      	pop	{r4, pc}

000b66f8 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b66f8:	b513      	push	{r0, r1, r4, lr}
   b66fa:	4604      	mov	r4, r0
    if (!lock())
   b66fc:	7800      	ldrb	r0, [r0, #0]
{
   b66fe:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6700:	f7ff ffd9 	bl	b66b6 <_ZN8SPIClass4lockEv.isra.0>
   b6704:	9901      	ldr	r1, [sp, #4]
   b6706:	b948      	cbnz	r0, b671c <_ZN8SPIClass11setBitOrderEh+0x24>
   b6708:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b670a:	9001      	str	r0, [sp, #4]
   b670c:	f7ff fe46 	bl	b639c <hal_spi_set_bit_order>
        unlock();
   b6710:	9801      	ldr	r0, [sp, #4]
    }
}
   b6712:	b002      	add	sp, #8
   b6714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6718:	f7ff bfca 	b.w	b66b0 <_ZN8SPIClass6unlockEv.isra.0>
   b671c:	b002      	add	sp, #8
   b671e:	bd10      	pop	{r4, pc}

000b6720 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6720:	b513      	push	{r0, r1, r4, lr}
   b6722:	4604      	mov	r4, r0
    if (!lock())
   b6724:	7800      	ldrb	r0, [r0, #0]
{
   b6726:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6728:	f7ff ffc5 	bl	b66b6 <_ZN8SPIClass4lockEv.isra.0>
   b672c:	9901      	ldr	r1, [sp, #4]
   b672e:	b948      	cbnz	r0, b6744 <_ZN8SPIClass11setDataModeEh+0x24>
   b6730:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b6732:	9001      	str	r0, [sp, #4]
   b6734:	f7ff fe3a 	bl	b63ac <hal_spi_set_data_mode>
        unlock();
   b6738:	9801      	ldr	r0, [sp, #4]
    }
}
   b673a:	b002      	add	sp, #8
   b673c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6740:	f7ff bfb6 	b.w	b66b0 <_ZN8SPIClass6unlockEv.isra.0>
   b6744:	b002      	add	sp, #8
   b6746:	bd10      	pop	{r4, pc}

000b6748 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6748:	0840      	lsrs	r0, r0, #1
{
   b674a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b674c:	6018      	str	r0, [r3, #0]
   b674e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6750:	6818      	ldr	r0, [r3, #0]
   b6752:	4288      	cmp	r0, r1
   b6754:	b2e5      	uxtb	r5, r4
   b6756:	d906      	bls.n	b6766 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6758:	3401      	adds	r4, #1
   b675a:	2c08      	cmp	r4, #8
   b675c:	d002      	beq.n	b6764 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b675e:	0840      	lsrs	r0, r0, #1
   b6760:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6762:	e7f5      	b.n	b6750 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6764:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6766:	4b02      	ldr	r3, [pc, #8]	; (b6770 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6768:	5d5b      	ldrb	r3, [r3, r5]
   b676a:	7013      	strb	r3, [r2, #0]
}
   b676c:	bd30      	pop	{r4, r5, pc}
   b676e:	bf00      	nop
   b6770:	000bb0bc 	.word	0x000bb0bc

000b6774 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6778:	b088      	sub	sp, #32
    unsigned clock = 0;
   b677a:	2300      	movs	r3, #0
{
   b677c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b677e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6780:	9302      	str	r3, [sp, #8]
{
   b6782:	460e      	mov	r6, r1
   b6784:	4617      	mov	r7, r2
    if (!lock())
   b6786:	f7ff ff96 	bl	b66b6 <_ZN8SPIClass4lockEv.isra.0>
   b678a:	4605      	mov	r5, r0
   b678c:	bb00      	cbnz	r0, b67d0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b678e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6792:	4601      	mov	r1, r0
   b6794:	2214      	movs	r2, #20
   b6796:	a803      	add	r0, sp, #12
   b6798:	f004 f828 	bl	ba7ec <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b679c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b679e:	462a      	mov	r2, r5
   b67a0:	a903      	add	r1, sp, #12
   b67a2:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b67a4:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b67a8:	f7ff fe28 	bl	b63fc <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b67ac:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b67ae:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b67b2:	ab02      	add	r3, sp, #8
   b67b4:	f10d 0207 	add.w	r2, sp, #7
   b67b8:	fb07 f106 	mul.w	r1, r7, r6
   b67bc:	f7ff ffc4 	bl	b6748 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b67c0:	7820      	ldrb	r0, [r4, #0]
   b67c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b67c6:	f7ff fdf9 	bl	b63bc <hal_spi_set_clock_divider>
        unlock();
   b67ca:	7820      	ldrb	r0, [r4, #0]
   b67cc:	f7ff ff70 	bl	b66b0 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b67d0:	9802      	ldr	r0, [sp, #8]
   b67d2:	b008      	add	sp, #32
   b67d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b67d8 <_ZN8SPIClass15setClockDividerEh>:
{
   b67d8:	b538      	push	{r3, r4, r5, lr}
   b67da:	4604      	mov	r4, r0
    if (!lock())
   b67dc:	7800      	ldrb	r0, [r0, #0]
{
   b67de:	460d      	mov	r5, r1
    if (!lock())
   b67e0:	f7ff ff69 	bl	b66b6 <_ZN8SPIClass4lockEv.isra.0>
   b67e4:	4603      	mov	r3, r0
   b67e6:	b9d0      	cbnz	r0, b681e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b67e8:	6861      	ldr	r1, [r4, #4]
   b67ea:	b199      	cbz	r1, b6814 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b67ec:	4a0c      	ldr	r2, [pc, #48]	; (b6820 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b67ee:	f812 0b01 	ldrb.w	r0, [r2], #1
   b67f2:	4285      	cmp	r5, r0
   b67f4:	d002      	beq.n	b67fc <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b67f6:	3301      	adds	r3, #1
   b67f8:	2b08      	cmp	r3, #8
   b67fa:	d1f8      	bne.n	b67ee <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b67fc:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b67fe:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6800:	2201      	movs	r2, #1
   b6802:	40d9      	lsrs	r1, r3
   b6804:	4620      	mov	r0, r4
   b6806:	f7ff ffb5 	bl	b6774 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b680a:	7820      	ldrb	r0, [r4, #0]
}
   b680c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6810:	f7ff bf4e 	b.w	b66b0 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6814:	7820      	ldrb	r0, [r4, #0]
   b6816:	4629      	mov	r1, r5
   b6818:	f7ff fdd0 	bl	b63bc <hal_spi_set_clock_divider>
   b681c:	e7f5      	b.n	b680a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b681e:	bd38      	pop	{r3, r4, r5, pc}
   b6820:	000bb0bc 	.word	0x000bb0bc

000b6824 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6824:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6826:	7800      	ldrb	r0, [r0, #0]
   b6828:	f7ff fdd0 	bl	b63cc <hal_spi_transfer>
}
   b682c:	b2c0      	uxtb	r0, r0
   b682e:	bd08      	pop	{r3, pc}

000b6830 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6830:	4b05      	ldr	r3, [pc, #20]	; (b6848 <_GLOBAL__sub_I_System+0x18>)
   b6832:	2202      	movs	r2, #2
   b6834:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6836:	4b05      	ldr	r3, [pc, #20]	; (b684c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6838:	4a05      	ldr	r2, [pc, #20]	; (b6850 <_GLOBAL__sub_I_System+0x20>)
   b683a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b683c:	2000      	movs	r0, #0
   b683e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6842:	f7ff be33 	b.w	b64ac <set_system_mode>
   b6846:	bf00      	nop
   b6848:	2003e6cc 	.word	0x2003e6cc
   b684c:	2003e6c0 	.word	0x2003e6c0
   b6850:	ffff0000 	.word	0xffff0000

000b6854 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6854:	b510      	push	{r4, lr}
   b6856:	4604      	mov	r4, r0
{
	free(buffer);
   b6858:	6800      	ldr	r0, [r0, #0]
   b685a:	f7ff febb 	bl	b65d4 <free>
}
   b685e:	4620      	mov	r0, r4
   b6860:	bd10      	pop	{r4, pc}

000b6862 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6862:	b510      	push	{r4, lr}
   b6864:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6866:	6800      	ldr	r0, [r0, #0]
   b6868:	b108      	cbz	r0, b686e <_ZN6String10invalidateEv+0xc>
   b686a:	f7ff feb3 	bl	b65d4 <free>
	buffer = NULL;
   b686e:	2300      	movs	r3, #0
	capacity = len = 0;
   b6870:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6874:	6023      	str	r3, [r4, #0]
}
   b6876:	bd10      	pop	{r4, pc}

000b6878 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6878:	b538      	push	{r3, r4, r5, lr}
   b687a:	4604      	mov	r4, r0
   b687c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b687e:	6800      	ldr	r0, [r0, #0]
   b6880:	3101      	adds	r1, #1
   b6882:	f7ff feaf 	bl	b65e4 <realloc>
	if (newbuffer) {
   b6886:	b110      	cbz	r0, b688e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6888:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b688c:	2001      	movs	r0, #1
	}
	return 0;
}
   b688e:	bd38      	pop	{r3, r4, r5, pc}

000b6890 <_ZN6String7reserveEj>:
{
   b6890:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6892:	6803      	ldr	r3, [r0, #0]
{
   b6894:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6896:	b123      	cbz	r3, b68a2 <_ZN6String7reserveEj+0x12>
   b6898:	6843      	ldr	r3, [r0, #4]
   b689a:	428b      	cmp	r3, r1
   b689c:	d301      	bcc.n	b68a2 <_ZN6String7reserveEj+0x12>
   b689e:	2001      	movs	r0, #1
}
   b68a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b68a2:	4620      	mov	r0, r4
   b68a4:	f7ff ffe8 	bl	b6878 <_ZN6String12changeBufferEj>
   b68a8:	2800      	cmp	r0, #0
   b68aa:	d0f9      	beq.n	b68a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b68ac:	68a3      	ldr	r3, [r4, #8]
   b68ae:	2b00      	cmp	r3, #0
   b68b0:	d1f5      	bne.n	b689e <_ZN6String7reserveEj+0xe>
   b68b2:	6822      	ldr	r2, [r4, #0]
   b68b4:	7013      	strb	r3, [r2, #0]
   b68b6:	e7f2      	b.n	b689e <_ZN6String7reserveEj+0xe>

000b68b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b68b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b68ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b68bc:	4611      	mov	r1, r2
   b68be:	9201      	str	r2, [sp, #4]
{
   b68c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b68c2:	f7ff ffe5 	bl	b6890 <_ZN6String7reserveEj>
   b68c6:	9a01      	ldr	r2, [sp, #4]
   b68c8:	b928      	cbnz	r0, b68d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b68ca:	4620      	mov	r0, r4
   b68cc:	f7ff ffc9 	bl	b6862 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b68d0:	4620      	mov	r0, r4
   b68d2:	b003      	add	sp, #12
   b68d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b68d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b68d8:	4629      	mov	r1, r5
   b68da:	6820      	ldr	r0, [r4, #0]
   b68dc:	f003 ff5e 	bl	ba79c <memcpy>
	buffer[len] = 0;
   b68e0:	6822      	ldr	r2, [r4, #0]
   b68e2:	68a3      	ldr	r3, [r4, #8]
   b68e4:	2100      	movs	r1, #0
   b68e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b68e8:	e7f2      	b.n	b68d0 <_ZN6String4copyEPKcj+0x18>

000b68ea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b68ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b68ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b68ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b68f2:	4604      	mov	r4, r0
	len = 0;
   b68f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b68f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b68f8:	b141      	cbz	r1, b690c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b68fa:	4608      	mov	r0, r1
   b68fc:	9101      	str	r1, [sp, #4]
   b68fe:	f7fe f9ab 	bl	b4c58 <strlen>
   b6902:	9901      	ldr	r1, [sp, #4]
   b6904:	4602      	mov	r2, r0
   b6906:	4620      	mov	r0, r4
   b6908:	f7ff ffd6 	bl	b68b8 <_ZN6String4copyEPKcj>
}
   b690c:	4620      	mov	r0, r4
   b690e:	b002      	add	sp, #8
   b6910:	bd10      	pop	{r4, pc}

000b6912 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6912:	b538      	push	{r3, r4, r5, lr}
   b6914:	4605      	mov	r5, r0
	if (buffer) {
   b6916:	6800      	ldr	r0, [r0, #0]
{
   b6918:	460c      	mov	r4, r1
	if (buffer) {
   b691a:	b168      	cbz	r0, b6938 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b691c:	686a      	ldr	r2, [r5, #4]
   b691e:	688b      	ldr	r3, [r1, #8]
   b6920:	429a      	cmp	r2, r3
   b6922:	d307      	bcc.n	b6934 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6924:	6809      	ldr	r1, [r1, #0]
   b6926:	f003 ff97 	bl	ba858 <strcpy>
			len = rhs.len;
   b692a:	68a3      	ldr	r3, [r4, #8]
   b692c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b692e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6930:	60a3      	str	r3, [r4, #8]
}
   b6932:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6934:	f7ff fe4e 	bl	b65d4 <free>
	buffer = rhs.buffer;
   b6938:	6823      	ldr	r3, [r4, #0]
   b693a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b693c:	6863      	ldr	r3, [r4, #4]
   b693e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6940:	68a3      	ldr	r3, [r4, #8]
   b6942:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6944:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b6946:	e9c4 3300 	strd	r3, r3, [r4]
   b694a:	e7f1      	b.n	b6930 <_ZN6String4moveERS_+0x1e>

000b694c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b694c:	b510      	push	{r4, lr}
	buffer = NULL;
   b694e:	2300      	movs	r3, #0
	capacity = 0;
   b6950:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b6954:	4604      	mov	r4, r0
	len = 0;
   b6956:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6958:	7303      	strb	r3, [r0, #12]
	move(rval);
   b695a:	f7ff ffda 	bl	b6912 <_ZN6String4moveERS_>
}
   b695e:	4620      	mov	r0, r4
   b6960:	bd10      	pop	{r4, pc}

000b6962 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6962:	4288      	cmp	r0, r1
{
   b6964:	b510      	push	{r4, lr}
   b6966:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6968:	d005      	beq.n	b6976 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b696a:	680b      	ldr	r3, [r1, #0]
   b696c:	b12b      	cbz	r3, b697a <_ZN6StringaSERKS_+0x18>
   b696e:	688a      	ldr	r2, [r1, #8]
   b6970:	4619      	mov	r1, r3
   b6972:	f7ff ffa1 	bl	b68b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6976:	4620      	mov	r0, r4
   b6978:	bd10      	pop	{r4, pc}
	else invalidate();
   b697a:	f7ff ff72 	bl	b6862 <_ZN6String10invalidateEv>
   b697e:	e7fa      	b.n	b6976 <_ZN6StringaSERKS_+0x14>

000b6980 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6980:	b510      	push	{r4, lr}
	buffer = NULL;
   b6982:	2300      	movs	r3, #0
String::String(const String &value)
   b6984:	4604      	mov	r4, r0
	capacity = 0;
   b6986:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b698a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b698c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b698e:	f7ff ffe8 	bl	b6962 <_ZN6StringaSERKS_>
}
   b6992:	4620      	mov	r0, r4
   b6994:	bd10      	pop	{r4, pc}

000b6996 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6996:	b513      	push	{r0, r1, r4, lr}
   b6998:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b699a:	b159      	cbz	r1, b69b4 <_ZN6StringaSEPKc+0x1e>
   b699c:	4608      	mov	r0, r1
   b699e:	9101      	str	r1, [sp, #4]
   b69a0:	f7fe f95a 	bl	b4c58 <strlen>
   b69a4:	9901      	ldr	r1, [sp, #4]
   b69a6:	4602      	mov	r2, r0
   b69a8:	4620      	mov	r0, r4
   b69aa:	f7ff ff85 	bl	b68b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b69ae:	4620      	mov	r0, r4
   b69b0:	b002      	add	sp, #8
   b69b2:	bd10      	pop	{r4, pc}
	else invalidate();
   b69b4:	f7ff ff55 	bl	b6862 <_ZN6String10invalidateEv>
   b69b8:	e7f9      	b.n	b69ae <_ZN6StringaSEPKc+0x18>

000b69ba <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b69ba:	b570      	push	{r4, r5, r6, lr}
   b69bc:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b69be:	460e      	mov	r6, r1
   b69c0:	b909      	cbnz	r1, b69c6 <_ZN6String6concatEPKcj+0xc>
   b69c2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b69c4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b69c6:	b16a      	cbz	r2, b69e4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b69c8:	6884      	ldr	r4, [r0, #8]
   b69ca:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b69cc:	4621      	mov	r1, r4
   b69ce:	f7ff ff5f 	bl	b6890 <_ZN6String7reserveEj>
   b69d2:	2800      	cmp	r0, #0
   b69d4:	d0f5      	beq.n	b69c2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b69d6:	6828      	ldr	r0, [r5, #0]
   b69d8:	68ab      	ldr	r3, [r5, #8]
   b69da:	4631      	mov	r1, r6
   b69dc:	4418      	add	r0, r3
   b69de:	f003 ff3b 	bl	ba858 <strcpy>
	len = newlen;
   b69e2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b69e4:	2001      	movs	r0, #1
   b69e6:	e7ed      	b.n	b69c4 <_ZN6String6concatEPKcj+0xa>

000b69e8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b69e8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b69ea:	2300      	movs	r3, #0
	buf[0] = c;
   b69ec:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b69f0:	2201      	movs	r2, #1
   b69f2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b69f4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b69f8:	f7ff ffdf 	bl	b69ba <_ZN6String6concatEPKcj>
}
   b69fc:	b003      	add	sp, #12
   b69fe:	f85d fb04 	ldr.w	pc, [sp], #4

000b6a02 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b6a02:	6802      	ldr	r2, [r0, #0]
{
   b6a04:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b6a06:	6809      	ldr	r1, [r1, #0]
   b6a08:	b162      	cbz	r2, b6a24 <_ZNK6String9compareToERKS_+0x22>
   b6a0a:	b941      	cbnz	r1, b6a1e <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b6a0c:	6880      	ldr	r0, [r0, #8]
   b6a0e:	b160      	cbz	r0, b6a2a <_ZNK6String9compareToERKS_+0x28>
   b6a10:	7810      	ldrb	r0, [r2, #0]
   b6a12:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b6a14:	6898      	ldr	r0, [r3, #8]
   b6a16:	b140      	cbz	r0, b6a2a <_ZNK6String9compareToERKS_+0x28>
   b6a18:	7809      	ldrb	r1, [r1, #0]
   b6a1a:	4248      	negs	r0, r1
   b6a1c:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b6a1e:	4610      	mov	r0, r2
   b6a20:	f7fe b910 	b.w	b4c44 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b6a24:	2900      	cmp	r1, #0
   b6a26:	d1f5      	bne.n	b6a14 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b6a28:	4608      	mov	r0, r1
}
   b6a2a:	4770      	bx	lr

000b6a2c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b6a2c:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b6a2e:	6882      	ldr	r2, [r0, #8]
   b6a30:	688b      	ldr	r3, [r1, #8]
   b6a32:	429a      	cmp	r2, r3
   b6a34:	d105      	bne.n	b6a42 <_ZNK6String6equalsERKS_+0x16>
   b6a36:	f7ff ffe4 	bl	b6a02 <_ZNK6String9compareToERKS_>
   b6a3a:	fab0 f080 	clz	r0, r0
   b6a3e:	0940      	lsrs	r0, r0, #5
}
   b6a40:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b6a42:	2000      	movs	r0, #0
   b6a44:	e7fc      	b.n	b6a40 <_ZNK6String6equalsERKS_+0x14>

000b6a46 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6a46:	4770      	bx	lr

000b6a48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6a48:	4770      	bx	lr

000b6a4a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6a4a:	4770      	bx	lr

000b6a4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6a4c:	4770      	bx	lr
	...

000b6a50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a50:	4b06      	ldr	r3, [pc, #24]	; (b6a6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a52:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a54:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6a56:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a5a:	d005      	beq.n	b6a68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a5c:	4608      	mov	r0, r1
   b6a5e:	f003 fc0d 	bl	ba27c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a62:	2800      	cmp	r0, #0
   b6a64:	bf08      	it	eq
   b6a66:	2400      	moveq	r4, #0
      }
   b6a68:	4620      	mov	r0, r4
   b6a6a:	bd10      	pop	{r4, pc}
   b6a6c:	000bb358 	.word	0x000bb358

000b6a70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a70:	4b06      	ldr	r3, [pc, #24]	; (b6a8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a72:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a74:	b510      	push	{r4, lr}
   b6a76:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a7a:	d005      	beq.n	b6a88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a7c:	4608      	mov	r0, r1
   b6a7e:	f003 fbfd 	bl	ba27c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a82:	2800      	cmp	r0, #0
   b6a84:	bf08      	it	eq
   b6a86:	2400      	moveq	r4, #0
      }
   b6a88:	4620      	mov	r0, r4
   b6a8a:	bd10      	pop	{r4, pc}
   b6a8c:	000bb358 	.word	0x000bb358

000b6a90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a90:	4b06      	ldr	r3, [pc, #24]	; (b6aac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a92:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a94:	b510      	push	{r4, lr}
   b6a96:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a9a:	d005      	beq.n	b6aa8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a9c:	4608      	mov	r0, r1
   b6a9e:	f003 fbed 	bl	ba27c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6aa2:	2800      	cmp	r0, #0
   b6aa4:	bf08      	it	eq
   b6aa6:	2400      	moveq	r4, #0
      }
   b6aa8:	4620      	mov	r0, r4
   b6aaa:	bd10      	pop	{r4, pc}
   b6aac:	000bb358 	.word	0x000bb358

000b6ab0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6ab0:	b510      	push	{r4, lr}
   b6ab2:	2168      	movs	r1, #104	; 0x68
   b6ab4:	4604      	mov	r4, r0
   b6ab6:	f7fe f916 	bl	b4ce6 <_ZdlPvj>
   b6aba:	4620      	mov	r0, r4
   b6abc:	bd10      	pop	{r4, pc}

000b6abe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6abe:	b510      	push	{r4, lr}
   b6ac0:	2128      	movs	r1, #40	; 0x28
   b6ac2:	4604      	mov	r4, r0
   b6ac4:	f7fe f90f 	bl	b4ce6 <_ZdlPvj>
   b6ac8:	4620      	mov	r0, r4
   b6aca:	bd10      	pop	{r4, pc}

000b6acc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6acc:	b510      	push	{r4, lr}
   b6ace:	2130      	movs	r1, #48	; 0x30
   b6ad0:	4604      	mov	r4, r0
   b6ad2:	f7fe f908 	bl	b4ce6 <_ZdlPvj>
   b6ad6:	4620      	mov	r0, r4
   b6ad8:	bd10      	pop	{r4, pc}

000b6ada <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6ada:	2168      	movs	r1, #104	; 0x68
   b6adc:	f7fe b903 	b.w	b4ce6 <_ZdlPvj>

000b6ae0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6ae0:	2128      	movs	r1, #40	; 0x28
   b6ae2:	f7fe b900 	b.w	b4ce6 <_ZdlPvj>

000b6ae6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6ae6:	2130      	movs	r1, #48	; 0x30
   b6ae8:	f7fe b8fd 	b.w	b4ce6 <_ZdlPvj>

000b6aec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6aee:	2500      	movs	r5, #0
   b6af0:	1cec      	adds	r4, r5, #3
   b6af2:	428c      	cmp	r4, r1
   b6af4:	d80d      	bhi.n	b6b12 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6af6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6af8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6afa:	5d87      	ldrb	r7, [r0, r6]
   b6afc:	4297      	cmp	r7, r2
   b6afe:	d105      	bne.n	b6b0c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6b00:	4426      	add	r6, r4
   b6b02:	42b1      	cmp	r1, r6
   b6b04:	d305      	bcc.n	b6b12 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6b06:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6b08:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6b0c:	3401      	adds	r4, #1
   b6b0e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6b10:	e7ee      	b.n	b6af0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6b12:	2000      	movs	r0, #0
   b6b14:	e7f9      	b.n	b6b0a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6b18 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6b18:	4a02      	ldr	r2, [pc, #8]	; (b6b24 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6b1a:	4903      	ldr	r1, [pc, #12]	; (b6b28 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6b1c:	200a      	movs	r0, #10
   b6b1e:	f7ff bcb5 	b.w	b648c <panic_>
   b6b22:	bf00      	nop
   b6b24:	000b6091 	.word	0x000b6091
   b6b28:	000bb0c4 	.word	0x000bb0c4

000b6b2c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6b2c:	b430      	push	{r4, r5}
   b6b2e:	460d      	mov	r5, r1
   b6b30:	4611      	mov	r1, r2
   b6b32:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6b34:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6b36:	6809      	ldr	r1, [r1, #0]
   b6b38:	6828      	ldr	r0, [r5, #0]
   b6b3a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6b3e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6b40:	bc30      	pop	{r4, r5}
   b6b42:	4760      	bx	ip

000b6b44 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6b44:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6b46:	b538      	push	{r3, r4, r5, lr}
   b6b48:	4604      	mov	r4, r0
	switch (__op)
   b6b4a:	d102      	bne.n	b6b52 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6b4c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6b4e:	6023      	str	r3, [r4, #0]
	}
   b6b50:	e003      	b.n	b6b5a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6b52:	2a02      	cmp	r2, #2
   b6b54:	d003      	beq.n	b6b5e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6b56:	2a03      	cmp	r2, #3
   b6b58:	d00d      	beq.n	b6b76 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6b5a:	2000      	movs	r0, #0
   b6b5c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b5e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6b60:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b62:	f7fe f8bc 	bl	b4cde <_Znwj>
   b6b66:	4603      	mov	r3, r0
   b6b68:	2800      	cmp	r0, #0
   b6b6a:	d0f0      	beq.n	b6b4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6b6c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6b70:	e883 0003 	stmia.w	r3, {r0, r1}
   b6b74:	e7eb      	b.n	b6b4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6b76:	6800      	ldr	r0, [r0, #0]
   b6b78:	2800      	cmp	r0, #0
   b6b7a:	d0ee      	beq.n	b6b5a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6b7c:	2108      	movs	r1, #8
   b6b7e:	f7fe f8b2 	bl	b4ce6 <_ZdlPvj>
   b6b82:	e7ea      	b.n	b6b5a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6b84 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b6b84:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b6b86:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b6b88:	4604      	mov	r4, r0
	if (_M_manager)
   b6b8a:	b12b      	cbz	r3, b6b98 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b6b8c:	2203      	movs	r2, #3
   b6b8e:	4601      	mov	r1, r0
   b6b90:	4798      	blx	r3
	    _M_manager = nullptr;
   b6b92:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b6b94:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b6b98:	bd10      	pop	{r4, pc}

000b6b9a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b6b9a:	b510      	push	{r4, lr}
	if (_M_manager)
   b6b9c:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b6b9e:	4604      	mov	r4, r0
	if (_M_manager)
   b6ba0:	b12b      	cbz	r3, b6bae <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b6ba2:	2203      	movs	r2, #3
   b6ba4:	4601      	mov	r1, r0
   b6ba6:	4798      	blx	r3
	    _M_manager = nullptr;
   b6ba8:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b6baa:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b6bae:	bd10      	pop	{r4, pc}

000b6bb0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b6bb0:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b6bb2:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b6bb4:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b6bb6:	2220      	movs	r2, #32
   b6bb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b6bbc:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b6bbe:	4a08      	ldr	r2, [pc, #32]	; (b6be0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b6bc0:	9200      	str	r2, [sp, #0]
   b6bc2:	4908      	ldr	r1, [pc, #32]	; (b6be4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b6bc4:	aa02      	add	r2, sp, #8
   b6bc6:	2001      	movs	r0, #1
   b6bc8:	f7ff fc68 	bl	b649c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b6bcc:	6820      	ldr	r0, [r4, #0]
   b6bce:	4906      	ldr	r1, [pc, #24]	; (b6be8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b6bd0:	8800      	ldrh	r0, [r0, #0]
   b6bd2:	2300      	movs	r3, #0
   b6bd4:	4622      	mov	r2, r4
    }
   b6bd6:	b00a      	add	sp, #40	; 0x28
   b6bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b6bdc:	f7ff bab8 	b.w	b6150 <hal_ble_gatt_client_discover_all_services>
   b6be0:	000bb0e6 	.word	0x000bb0e6
   b6be4:	000bb0db 	.word	0x000bb0db
   b6be8:	000b8a4d 	.word	0x000b8a4d

000b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b6bec:	b510      	push	{r4, lr}
   b6bee:	3801      	subs	r0, #1
   b6bf0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b6bf4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b6bf8:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b6bfa:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b6bfe:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b6c00:	bf88      	it	hi
   b6c02:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b6c06:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b6c0a:	7803      	ldrb	r3, [r0, #0]
   b6c0c:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b6c10:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b6c14:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b6c16:	bf88      	it	hi
   b6c18:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b6c1c:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b6c1e:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b6c22:	d1e7      	bne.n	b6bf4 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b6c24:	bd10      	pop	{r4, pc}

000b6c26 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6c26:	b510      	push	{r4, lr}
      if (_M_manager)
   b6c28:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6c2a:	4604      	mov	r4, r0
      if (_M_manager)
   b6c2c:	b113      	cbz	r3, b6c34 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6c2e:	2203      	movs	r2, #3
   b6c30:	4601      	mov	r1, r0
   b6c32:	4798      	blx	r3
    }
   b6c34:	4620      	mov	r0, r4
   b6c36:	bd10      	pop	{r4, pc}

000b6c38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6c38:	b510      	push	{r4, lr}
   b6c3a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b6c3c:	3058      	adds	r0, #88	; 0x58
   b6c3e:	f7ff fff2 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6c42:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6c4a:	f7ff be03 	b.w	b6854 <_ZN6StringD1Ev>

000b6c4e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6c4e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6c50:	6843      	ldr	r3, [r0, #4]
   b6c52:	3b01      	subs	r3, #1
    {
   b6c54:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6c56:	6043      	str	r3, [r0, #4]
   b6c58:	b963      	cbnz	r3, b6c74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6c5a:	6803      	ldr	r3, [r0, #0]
   b6c5c:	689b      	ldr	r3, [r3, #8]
   b6c5e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6c60:	68a3      	ldr	r3, [r4, #8]
   b6c62:	3b01      	subs	r3, #1
   b6c64:	60a3      	str	r3, [r4, #8]
   b6c66:	b92b      	cbnz	r3, b6c74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6c68:	6823      	ldr	r3, [r4, #0]
   b6c6a:	4620      	mov	r0, r4
   b6c6c:	68db      	ldr	r3, [r3, #12]
    }
   b6c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6c72:	4718      	bx	r3
    }
   b6c74:	bd10      	pop	{r4, pc}

000b6c76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b6c76:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b6c78:	6803      	ldr	r3, [r0, #0]
   b6c7a:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b6c7c:	4605      	mov	r5, r0
   b6c7e:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b6c80:	d008      	beq.n	b6c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b6c82:	b111      	cbz	r1, b6c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b6c84:	684b      	ldr	r3, [r1, #4]
   b6c86:	3301      	adds	r3, #1
   b6c88:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b6c8a:	6828      	ldr	r0, [r5, #0]
   b6c8c:	b108      	cbz	r0, b6c92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b6c8e:	f7ff ffde 	bl	b6c4e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b6c92:	602c      	str	r4, [r5, #0]
      }
   b6c94:	bd38      	pop	{r3, r4, r5, pc}

000b6c96 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6c96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6c9a:	b2da      	uxtb	r2, r3
   b6c9c:	2a09      	cmp	r2, #9
   b6c9e:	d801      	bhi.n	b6ca4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6ca0:	4618      	mov	r0, r3
   b6ca2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6ca4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6ca8:	2b05      	cmp	r3, #5
   b6caa:	d801      	bhi.n	b6cb0 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6cac:	3857      	subs	r0, #87	; 0x57
   b6cae:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6cb0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6cb4:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6cb6:	bf94      	ite	ls
   b6cb8:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6cba:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b6cbe:	4770      	bx	lr

000b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6cc0:	b510      	push	{r4, lr}
            locked_(false) {
   b6cc2:	2300      	movs	r3, #0
   b6cc4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6cc6:	4b04      	ldr	r3, [pc, #16]	; (b6cd8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6cc8:	4604      	mov	r4, r0
   b6cca:	6818      	ldr	r0, [r3, #0]
   b6ccc:	f7ff fab6 	bl	b623c <os_mutex_recursive_lock>
        locked_ = true;
   b6cd0:	2301      	movs	r3, #1
   b6cd2:	7023      	strb	r3, [r4, #0]
    }
   b6cd4:	4620      	mov	r0, r4
   b6cd6:	bd10      	pop	{r4, pc}
   b6cd8:	2003e6d8 	.word	0x2003e6d8

000b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6cdc:	b510      	push	{r4, lr}
        if (locked_) {
   b6cde:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6ce0:	4604      	mov	r4, r0
        if (locked_) {
   b6ce2:	b11b      	cbz	r3, b6cec <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6ce4:	4b02      	ldr	r3, [pc, #8]	; (b6cf0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6ce6:	6818      	ldr	r0, [r3, #0]
   b6ce8:	f7ff fab0 	bl	b624c <os_mutex_recursive_unlock>
    }
   b6cec:	4620      	mov	r0, r4
   b6cee:	bd10      	pop	{r4, pc}
   b6cf0:	2003e6d8 	.word	0x2003e6d8

000b6cf4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6cf4:	b082      	sub	sp, #8
   b6cf6:	4603      	mov	r3, r0
    address_ = addr;
   b6cf8:	6808      	ldr	r0, [r1, #0]
   b6cfa:	6849      	ldr	r1, [r1, #4]
   b6cfc:	466a      	mov	r2, sp
   b6cfe:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6d00:	466a      	mov	r2, sp
   b6d02:	ca03      	ldmia	r2!, {r0, r1}
   b6d04:	6018      	str	r0, [r3, #0]
}
   b6d06:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6d08:	6059      	str	r1, [r3, #4]
}
   b6d0a:	b002      	add	sp, #8
   b6d0c:	4770      	bx	lr

000b6d0e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6d0e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6d10:	7982      	ldrb	r2, [r0, #6]
   b6d12:	798b      	ldrb	r3, [r1, #6]
   b6d14:	429a      	cmp	r2, r3
   b6d16:	d106      	bne.n	b6d26 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6d18:	2206      	movs	r2, #6
   b6d1a:	f003 fd2f 	bl	ba77c <memcmp>
   b6d1e:	fab0 f080 	clz	r0, r0
   b6d22:	0940      	lsrs	r0, r0, #5
}
   b6d24:	bd08      	pop	{r3, pc}
    return false;
   b6d26:	2000      	movs	r0, #0
   b6d28:	e7fc      	b.n	b6d24 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6d2a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6d2a:	f04f 33ff 	mov.w	r3, #4294967295
   b6d2e:	6003      	str	r3, [r0, #0]
   b6d30:	8083      	strh	r3, [r0, #4]
}
   b6d32:	2000      	movs	r0, #0
   b6d34:	4770      	bx	lr

000b6d36 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6d36:	b508      	push	{r3, lr}
   b6d38:	4602      	mov	r2, r0
        : address_{} {
   b6d3a:	2100      	movs	r1, #0
   b6d3c:	6001      	str	r1, [r0, #0]
   b6d3e:	6041      	str	r1, [r0, #4]
    clear();
   b6d40:	f7ff fff3 	bl	b6d2a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6d44:	7191      	strb	r1, [r2, #6]
}
   b6d46:	4610      	mov	r0, r2
   b6d48:	bd08      	pop	{r3, pc}

000b6d4a <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b6d4a:	b510      	push	{r4, lr}
   b6d4c:	1d43      	adds	r3, r0, #5
   b6d4e:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b6d50:	781c      	ldrb	r4, [r3, #0]
   b6d52:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b6d56:	4283      	cmp	r3, r0
   b6d58:	f103 33ff 	add.w	r3, r3, #4294967295
   b6d5c:	d1f8      	bne.n	b6d50 <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b6d5e:	bd10      	pop	{r4, pc}

000b6d60 <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b6d60:	b570      	push	{r4, r5, r6, lr}
   b6d62:	4614      	mov	r4, r2
   b6d64:	b088      	sub	sp, #32
   b6d66:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b6d68:	460d      	mov	r5, r1
   b6d6a:	2900      	cmp	r1, #0
   b6d6c:	d048      	beq.n	b6e00 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b6d6e:	b1a4      	cbz	r4, b6d9a <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b6d70:	a901      	add	r1, sp, #4
   b6d72:	f7ff ffea 	bl	b6d4a <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b6d76:	b19a      	cbz	r2, b6da0 <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b6d78:	aa03      	add	r2, sp, #12
   b6d7a:	2106      	movs	r1, #6
   b6d7c:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b6d7e:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b6d80:	f7ff ff34 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b6d84:	2e11      	cmp	r6, #17
   b6d86:	bf28      	it	cs
   b6d88:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b6d8a:	4632      	mov	r2, r6
   b6d8c:	a903      	add	r1, sp, #12
   b6d8e:	4628      	mov	r0, r5
   b6d90:	f003 fd04 	bl	ba79c <memcpy>
    buf[len++] = '\0';
   b6d94:	2300      	movs	r3, #0
   b6d96:	55ab      	strb	r3, [r5, r6]
   b6d98:	1c74      	adds	r4, r6, #1
}
   b6d9a:	4620      	mov	r0, r4
   b6d9c:	b008      	add	sp, #32
   b6d9e:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b6da0:	aa03      	add	r2, sp, #12
   b6da2:	2101      	movs	r1, #1
   b6da4:	a801      	add	r0, sp, #4
   b6da6:	f7ff ff21 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b6daa:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b6dac:	f10d 020f 	add.w	r2, sp, #15
   b6db0:	2101      	movs	r1, #1
   b6db2:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b6db6:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b6dba:	f7ff ff17 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b6dbe:	f10d 0212 	add.w	r2, sp, #18
   b6dc2:	2101      	movs	r1, #1
   b6dc4:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b6dc8:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b6dcc:	f7ff ff0e 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b6dd0:	f10d 0215 	add.w	r2, sp, #21
   b6dd4:	2101      	movs	r1, #1
   b6dd6:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b6dda:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b6dde:	f7ff ff05 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b6de2:	aa06      	add	r2, sp, #24
   b6de4:	2101      	movs	r1, #1
   b6de6:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b6de8:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b6dec:	f7ff fefe 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b6df0:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b6df4:	f10d 021b 	add.w	r2, sp, #27
   b6df8:	2101      	movs	r1, #1
   b6dfa:	f10d 0009 	add.w	r0, sp, #9
   b6dfe:	e7be      	b.n	b6d7e <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b6e00:	460c      	mov	r4, r1
   b6e02:	e7ca      	b.n	b6d9a <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b6e04 <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b6e04:	b510      	push	{r4, lr}
   b6e06:	b086      	sub	sp, #24
   b6e08:	4604      	mov	r4, r0
   b6e0a:	4613      	mov	r3, r2
   b6e0c:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b6e0e:	2212      	movs	r2, #18
   b6e10:	a901      	add	r1, sp, #4
   b6e12:	f7ff ffa5 	bl	b6d60 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b6e16:	a901      	add	r1, sp, #4
   b6e18:	4620      	mov	r0, r4
   b6e1a:	f7ff fd66 	bl	b68ea <_ZN6StringC1EPK19__FlashStringHelper>
}
   b6e1e:	4620      	mov	r0, r4
   b6e20:	b006      	add	sp, #24
   b6e22:	bd10      	pop	{r4, pc}

000b6e24 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6e24:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6e26:	2301      	movs	r3, #1
   b6e28:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6e2a:	4b05      	ldr	r3, [pc, #20]	; (b6e40 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6e2c:	4602      	mov	r2, r0
   b6e2e:	f103 0110 	add.w	r1, r3, #16
   b6e32:	f853 4b04 	ldr.w	r4, [r3], #4
   b6e36:	f842 4b04 	str.w	r4, [r2], #4
   b6e3a:	428b      	cmp	r3, r1
   b6e3c:	d1f9      	bne.n	b6e32 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6e3e:	bd10      	pop	{r4, pc}
   b6e40:	000ba952 	.word	0x000ba952

000b6e44 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b6e44:	7c0b      	ldrb	r3, [r1, #16]
   b6e46:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b6e4a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b6e4c:	d10d      	bne.n	b6e6a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b6e4e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6e50:	4b0c      	ldr	r3, [pc, #48]	; (b6e84 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b6e52:	4602      	mov	r2, r0
   b6e54:	f103 0410 	add.w	r4, r3, #16
   b6e58:	f853 5b04 	ldr.w	r5, [r3], #4
   b6e5c:	f842 5b04 	str.w	r5, [r2], #4
   b6e60:	42a3      	cmp	r3, r4
   b6e62:	d1f9      	bne.n	b6e58 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b6e64:	880b      	ldrh	r3, [r1, #0]
   b6e66:	8183      	strh	r3, [r0, #12]
}
   b6e68:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b6e6a:	2301      	movs	r3, #1
   b6e6c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6e6e:	f101 0210 	add.w	r2, r1, #16
   b6e72:	4603      	mov	r3, r0
   b6e74:	f851 4b04 	ldr.w	r4, [r1], #4
   b6e78:	f843 4b04 	str.w	r4, [r3], #4
   b6e7c:	4291      	cmp	r1, r2
   b6e7e:	d1f9      	bne.n	b6e74 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b6e80:	e7f2      	b.n	b6e68 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b6e82:	bf00      	nop
   b6e84:	000ba952 	.word	0x000ba952

000b6e88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6e88:	b510      	push	{r4, lr}
    if (uuid128) {
   b6e8a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6e8c:	4604      	mov	r4, r0
    if (uuid128) {
   b6e8e:	b1b1      	cbz	r1, b6ebe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6e90:	2a01      	cmp	r2, #1
   b6e92:	f101 0210 	add.w	r2, r1, #16
   b6e96:	d10a      	bne.n	b6eae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6e98:	4601      	mov	r1, r0
   b6e9a:	f853 0b04 	ldr.w	r0, [r3], #4
   b6e9e:	f841 0b04 	str.w	r0, [r1], #4
   b6ea2:	4293      	cmp	r3, r2
   b6ea4:	d1f9      	bne.n	b6e9a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6ea6:	2301      	movs	r3, #1
   b6ea8:	6123      	str	r3, [r4, #16]
}
   b6eaa:	4620      	mov	r0, r4
   b6eac:	bd10      	pop	{r4, pc}
   b6eae:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6eb0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6eb4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6eb8:	429a      	cmp	r2, r3
   b6eba:	d1f9      	bne.n	b6eb0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6ebc:	e7f3      	b.n	b6ea6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6ebe:	2210      	movs	r2, #16
   b6ec0:	f003 fc94 	bl	ba7ec <memset>
   b6ec4:	e7f1      	b.n	b6eaa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6ec6 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b6ec6:	b538      	push	{r3, r4, r5, lr}
   b6ec8:	4604      	mov	r4, r0
   b6eca:	460d      	mov	r5, r1
        : BleUuid() {
   b6ecc:	f7ff ffaa 	bl	b6e24 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b6ed0:	2300      	movs	r3, #0
   b6ed2:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6ed4:	81a5      	strh	r5, [r4, #12]
}
   b6ed6:	4620      	mov	r0, r4
   b6ed8:	bd38      	pop	{r3, r4, r5, pc}

000b6eda <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6eda:	b538      	push	{r3, r4, r5, lr}
   b6edc:	4604      	mov	r4, r0
   b6ede:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6ee0:	461a      	mov	r2, r3
   b6ee2:	f7ff ffd1 	bl	b6e88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6ee6:	81a5      	strh	r5, [r4, #12]
}
   b6ee8:	4620      	mov	r0, r4
   b6eea:	bd38      	pop	{r3, r4, r5, pc}

000b6eec <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6eec:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6eee:	6902      	ldr	r2, [r0, #16]
   b6ef0:	b922      	cbnz	r2, b6efc <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6ef2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6ef4:	3800      	subs	r0, #0
   b6ef6:	bf18      	it	ne
   b6ef8:	2001      	movne	r0, #1
}
   b6efa:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6efc:	4902      	ldr	r1, [pc, #8]	; (b6f08 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6efe:	2210      	movs	r2, #16
   b6f00:	f003 fc3c 	bl	ba77c <memcmp>
   b6f04:	e7f6      	b.n	b6ef4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6f06:	bf00      	nop
   b6f08:	000bb370 	.word	0x000bb370

000b6f0c <_ZNK8particle7BleUuid4typeEv>:
}
   b6f0c:	6900      	ldr	r0, [r0, #16]
   b6f0e:	4770      	bx	lr

000b6f10 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6f10:	b538      	push	{r3, r4, r5, lr}
   b6f12:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6f14:	2214      	movs	r2, #20
   b6f16:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6f18:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6f1a:	f003 fc67 	bl	ba7ec <memset>
    if (type_ == BleUuidType::SHORT) {
   b6f1e:	6923      	ldr	r3, [r4, #16]
   b6f20:	b91b      	cbnz	r3, b6f2a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6f22:	89a3      	ldrh	r3, [r4, #12]
   b6f24:	802b      	strh	r3, [r5, #0]
}
   b6f26:	4628      	mov	r0, r5
   b6f28:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6f2a:	2301      	movs	r3, #1
   b6f2c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6f2e:	4621      	mov	r1, r4
   b6f30:	462b      	mov	r3, r5
   b6f32:	f104 0210 	add.w	r2, r4, #16
   b6f36:	f851 0b04 	ldr.w	r0, [r1], #4
   b6f3a:	f843 0b04 	str.w	r0, [r3], #4
   b6f3e:	4291      	cmp	r1, r2
   b6f40:	d1f9      	bne.n	b6f36 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6f42:	e7f0      	b.n	b6f26 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6f44 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6f44:	8980      	ldrh	r0, [r0, #12]
   b6f46:	4770      	bx	lr

000b6f48 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6f48:	4770      	bx	lr

000b6f4a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6f4a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6f4c:	6902      	ldr	r2, [r0, #16]
   b6f4e:	690b      	ldr	r3, [r1, #16]
   b6f50:	429a      	cmp	r2, r3
   b6f52:	d106      	bne.n	b6f62 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6f54:	2210      	movs	r2, #16
   b6f56:	f003 fc11 	bl	ba77c <memcmp>
   b6f5a:	fab0 f080 	clz	r0, r0
   b6f5e:	0940      	lsrs	r0, r0, #5
}
   b6f60:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6f62:	2000      	movs	r0, #0
   b6f64:	e7fc      	b.n	b6f60 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6f68 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6f68:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6f6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6f6e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6f70:	4b34      	ldr	r3, [pc, #208]	; (b7044 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6f72:	460c      	mov	r4, r1
   b6f74:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6f76:	4602      	mov	r2, r0
   b6f78:	f103 0110 	add.w	r1, r3, #16
   b6f7c:	f853 0b04 	ldr.w	r0, [r3], #4
   b6f80:	f842 0b04 	str.w	r0, [r2], #4
   b6f84:	428b      	cmp	r3, r1
   b6f86:	d1f9      	bne.n	b6f7c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6f88:	b344      	cbz	r4, b6fdc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6f8a:	2124      	movs	r1, #36	; 0x24
   b6f8c:	4620      	mov	r0, r4
   b6f8e:	f003 fc6b 	bl	ba868 <strnlen>
   b6f92:	2804      	cmp	r0, #4
   b6f94:	f04f 0500 	mov.w	r5, #0
   b6f98:	d123      	bne.n	b6fe2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6f9a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6f9e:	af01      	add	r7, sp, #4
   b6fa0:	1ca5      	adds	r5, r4, #2
   b6fa2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6fa4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6fa8:	f7ff fe75 	bl	b6c96 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6fac:	f1b0 0800 	subs.w	r8, r0, #0
   b6fb0:	db12      	blt.n	b6fd8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6fb2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6fb6:	f7ff fe6e 	bl	b6c96 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6fba:	2800      	cmp	r0, #0
   b6fbc:	db0c      	blt.n	b6fd8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6fbe:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6fc0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6fc4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6fc6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6fca:	d1eb      	bne.n	b6fa4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6fcc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6fd0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6fd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6fd6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6fd8:	2300      	movs	r3, #0
   b6fda:	6133      	str	r3, [r6, #16]
}
   b6fdc:	b002      	add	sp, #8
   b6fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6fe2:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6fe6:	2124      	movs	r1, #36	; 0x24
   b6fe8:	4620      	mov	r0, r4
   b6fea:	f003 fc3d 	bl	ba868 <strnlen>
   b6fee:	42a8      	cmp	r0, r5
   b6ff0:	d807      	bhi.n	b7002 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6ff2:	4642      	mov	r2, r8
   b6ff4:	2100      	movs	r1, #0
   b6ff6:	4630      	mov	r0, r6
}
   b6ff8:	b002      	add	sp, #8
   b6ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6ffe:	f003 bbf5 	b.w	ba7ec <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7002:	f1b8 0f00 	cmp.w	r8, #0
   b7006:	d0e9      	beq.n	b6fdc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7008:	5d60      	ldrb	r0, [r4, r5]
   b700a:	f7ff fe44 	bl	b6c96 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b700e:	0603      	lsls	r3, r0, #24
   b7010:	d415      	bmi.n	b703e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7012:	0100      	lsls	r0, r0, #4
   b7014:	f108 38ff 	add.w	r8, r8, #4294967295
   b7018:	b2c7      	uxtb	r7, r0
   b701a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b701e:	2124      	movs	r1, #36	; 0x24
   b7020:	4620      	mov	r0, r4
   b7022:	f003 fc21 	bl	ba868 <strnlen>
   b7026:	3501      	adds	r5, #1
   b7028:	42a8      	cmp	r0, r5
   b702a:	d908      	bls.n	b703e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b702c:	5d60      	ldrb	r0, [r4, r5]
   b702e:	f7ff fe32 	bl	b6c96 <_ZN8particle11hexToNibbleEc>
   b7032:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7034:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7036:	bfa4      	itt	ge
   b7038:	4338      	orrge	r0, r7
   b703a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b703e:	3501      	adds	r5, #1
   b7040:	e7d1      	b.n	b6fe6 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7042:	bf00      	nop
   b7044:	000ba952 	.word	0x000ba952

000b7048 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7048:	b513      	push	{r0, r1, r4, lr}
   b704a:	4604      	mov	r4, r0
   b704c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b704e:	f7ff fee9 	bl	b6e24 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7052:	4620      	mov	r0, r4
   b7054:	9901      	ldr	r1, [sp, #4]
   b7056:	f7ff ff87 	bl	b6f68 <_ZN8particle7BleUuid9constructEPKc>
}
   b705a:	4620      	mov	r0, r4
   b705c:	b002      	add	sp, #8
   b705e:	bd10      	pop	{r4, pc}

000b7060 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b7060:	b510      	push	{r4, lr}
   b7062:	f100 030f 	add.w	r3, r0, #15
   b7066:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b7068:	781c      	ldrb	r4, [r3, #0]
   b706a:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b706e:	4283      	cmp	r3, r0
   b7070:	f103 33ff 	add.w	r3, r3, #4294967295
   b7074:	d1f8      	bne.n	b7068 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b7076:	bd10      	pop	{r4, pc}

000b7078 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b7078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b707c:	461f      	mov	r7, r3
   b707e:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b7080:	460d      	mov	r5, r1
   b7082:	2900      	cmp	r1, #0
   b7084:	d05b      	beq.n	b713e <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b7086:	b1da      	cbz	r2, b70c0 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b7088:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b708c:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b708e:	f1b8 0f00 	cmp.w	r8, #0
   b7092:	d119      	bne.n	b70c8 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b7094:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b7096:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b709a:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b709c:	aa05      	add	r2, sp, #20
   b709e:	2102      	movs	r1, #2
   b70a0:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b70a2:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b70a6:	f7ff fda1 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b70aa:	2c04      	cmp	r4, #4
   b70ac:	bf28      	it	cs
   b70ae:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b70b0:	4622      	mov	r2, r4
   b70b2:	a905      	add	r1, sp, #20
   b70b4:	4628      	mov	r0, r5
   b70b6:	f003 fb71 	bl	ba79c <memcpy>
        buf[len++] = '\0';
   b70ba:	f805 8004 	strb.w	r8, [r5, r4]
   b70be:	1c62      	adds	r2, r4, #1
}
   b70c0:	4610      	mov	r0, r2
   b70c2:	b00e      	add	sp, #56	; 0x38
   b70c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b70c8:	a901      	add	r1, sp, #4
   b70ca:	f7ff ffc9 	bl	b7060 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b70ce:	aa05      	add	r2, sp, #20
    if (stripped) {
   b70d0:	b17f      	cbz	r7, b70f2 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b70d2:	2110      	movs	r1, #16
   b70d4:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b70d6:	f7ff fd89 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b70da:	2c24      	cmp	r4, #36	; 0x24
   b70dc:	bf28      	it	cs
   b70de:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b70e0:	4622      	mov	r2, r4
   b70e2:	a905      	add	r1, sp, #20
   b70e4:	4628      	mov	r0, r5
   b70e6:	f003 fb59 	bl	ba79c <memcpy>
    buf[len++] = '\0';
   b70ea:	2300      	movs	r3, #0
   b70ec:	552b      	strb	r3, [r5, r4]
   b70ee:	1c62      	adds	r2, r4, #1
    return len;
   b70f0:	e7e6      	b.n	b70c0 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b70f2:	2104      	movs	r1, #4
   b70f4:	eb0d 0001 	add.w	r0, sp, r1
   b70f8:	f7ff fd78 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b70fc:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b70fe:	f10d 021d 	add.w	r2, sp, #29
   b7102:	2102      	movs	r1, #2
   b7104:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b7106:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b710a:	f7ff fd6f 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b710e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b7112:	2102      	movs	r1, #2
   b7114:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b7118:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b711c:	f7ff fd66 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b7120:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b7124:	2102      	movs	r1, #2
   b7126:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b7128:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b712c:	f7ff fd5e 	bl	b6bec <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b7130:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b7134:	aa0b      	add	r2, sp, #44	; 0x2c
   b7136:	2106      	movs	r1, #6
   b7138:	f10d 000e 	add.w	r0, sp, #14
   b713c:	e7cb      	b.n	b70d6 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b713e:	460a      	mov	r2, r1
   b7140:	e7be      	b.n	b70c0 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b7142 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b7142:	b510      	push	{r4, lr}
   b7144:	b08a      	sub	sp, #40	; 0x28
   b7146:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b7148:	2300      	movs	r3, #0
   b714a:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b714c:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b714e:	4669      	mov	r1, sp
   b7150:	f7ff ff92 	bl	b7078 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b7154:	4669      	mov	r1, sp
   b7156:	4620      	mov	r0, r4
   b7158:	f7ff fbc7 	bl	b68ea <_ZN6StringC1EPK19__FlashStringHelper>
}
   b715c:	4620      	mov	r0, r4
   b715e:	b00a      	add	sp, #40	; 0x28
   b7160:	bd10      	pop	{r4, pc}

000b7162 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b7162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7164:	4605      	mov	r5, r0
   b7166:	4616      	mov	r6, r2
   b7168:	461f      	mov	r7, r3
   b716a:	460a      	mov	r2, r1
   b716c:	ab01      	add	r3, sp, #4
   b716e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7172:	f7ff fcbb 	bl	b6aec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b7176:	f030 0402 	bics.w	r4, r0, #2
   b717a:	d00c      	beq.n	b7196 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b717c:	1e84      	subs	r4, r0, #2
   b717e:	42bc      	cmp	r4, r7
   b7180:	bf28      	it	cs
   b7182:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b7184:	b13e      	cbz	r6, b7196 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b7186:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b7188:	682b      	ldr	r3, [r5, #0]
   b718a:	3102      	adds	r1, #2
   b718c:	4622      	mov	r2, r4
   b718e:	4419      	add	r1, r3
   b7190:	4630      	mov	r0, r6
   b7192:	f003 fb03 	bl	ba79c <memcpy>
}
   b7196:	4620      	mov	r0, r4
   b7198:	b003      	add	sp, #12
   b719a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b719c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b719c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b719e:	4613      	mov	r3, r2
   b71a0:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b71a2:	9201      	str	r2, [sp, #4]
   b71a4:	460a      	mov	r2, r1
   b71a6:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b71a8:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b71aa:	f7ff ffda 	bl	b7162 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b71ae:	b940      	cbnz	r0, b71c2 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b71b0:	9b01      	ldr	r3, [sp, #4]
   b71b2:	4622      	mov	r2, r4
   b71b4:	2109      	movs	r1, #9
   b71b6:	4628      	mov	r0, r5
}
   b71b8:	b003      	add	sp, #12
   b71ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b71be:	f7ff bfd0 	b.w	b7162 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b71c2:	b003      	add	sp, #12
   b71c4:	bd30      	pop	{r4, r5, pc}
	...

000b71c8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b71c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b71ca:	460c      	mov	r4, r1
   b71cc:	b089      	sub	sp, #36	; 0x24
    String name;
   b71ce:	490c      	ldr	r1, [pc, #48]	; (b7200 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b71d0:	4605      	mov	r5, r0
    String name;
   b71d2:	f7ff fb8a 	bl	b68ea <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b71d6:	221f      	movs	r2, #31
   b71d8:	4669      	mov	r1, sp
   b71da:	4620      	mov	r0, r4
   b71dc:	f7ff ffde 	bl	b719c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b71e0:	4606      	mov	r6, r0
   b71e2:	b150      	cbz	r0, b71fa <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b71e4:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b71e6:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b71e8:	f814 1b01 	ldrb.w	r1, [r4], #1
   b71ec:	4628      	mov	r0, r5
   b71ee:	f7ff fbfb 	bl	b69e8 <_ZN6String6concatEc>
   b71f2:	b110      	cbz	r0, b71fa <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b71f4:	3701      	adds	r7, #1
   b71f6:	42be      	cmp	r6, r7
   b71f8:	d1f6      	bne.n	b71e8 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b71fa:	4628      	mov	r0, r5
   b71fc:	b009      	add	sp, #36	; 0x24
   b71fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7200:	000ba9cf 	.word	0x000ba9cf

000b7204 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b7204:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b7206:	2302      	movs	r3, #2
   b7208:	aa01      	add	r2, sp, #4
   b720a:	2119      	movs	r1, #25
   b720c:	f7ff ffa9 	bl	b7162 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b7210:	b108      	cbz	r0, b7216 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b7212:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b7216:	b003      	add	sp, #12
   b7218:	f85d fb04 	ldr.w	pc, [sp], #4

000b721c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b721c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b721e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7222:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7224:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7226:	8043      	strh	r3, [r0, #2]
   b7228:	220e      	movs	r2, #14
   b722a:	4629      	mov	r1, r5
   b722c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b722e:	7105      	strb	r5, [r0, #4]
   b7230:	3006      	adds	r0, #6
   b7232:	f003 fadb 	bl	ba7ec <memset>
   b7236:	f104 0014 	add.w	r0, r4, #20
   b723a:	f7ff fdf3 	bl	b6e24 <_ZN8particle7BleUuidC1Ev>
   b723e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7242:	f7ff fdef 	bl	b6e24 <_ZN8particle7BleUuidC1Ev>
   b7246:	4904      	ldr	r1, [pc, #16]	; (b7258 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7248:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b724c:	f7ff fb4d 	bl	b68ea <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7250:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7252:	4620      	mov	r0, r4
   b7254:	bd38      	pop	{r3, r4, r5, pc}
   b7256:	bf00      	nop
   b7258:	000ba9cf 	.word	0x000ba9cf

000b725c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b725c:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b725e:	680d      	ldr	r5, [r1, #0]
   b7260:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b7262:	4601      	mov	r1, r0
   b7264:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b7268:	f7ff fe6f 	bl	b6f4a <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b726c:	b140      	cbz	r0, b7280 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b726e:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b7270:	8aa2      	ldrh	r2, [r4, #20]
   b7272:	429a      	cmp	r2, r3
   b7274:	d805      	bhi.n	b7282 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b7276:	8ae0      	ldrh	r0, [r4, #22]
   b7278:	4298      	cmp	r0, r3
   b727a:	bf34      	ite	cc
   b727c:	2000      	movcc	r0, #0
   b727e:	2001      	movcs	r0, #1
    }
   b7280:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b7282:	2000      	movs	r0, #0
   b7284:	e7fc      	b.n	b7280 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b7286 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7286:	b510      	push	{r4, lr}
    return data_ + size_;
   b7288:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b728c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7290:	4293      	cmp	r3, r2
   b7292:	4618      	mov	r0, r3
   b7294:	d006      	beq.n	b72a4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7296:	6804      	ldr	r4, [r0, #0]
   b7298:	8824      	ldrh	r4, [r4, #0]
   b729a:	428c      	cmp	r4, r1
   b729c:	f103 0308 	add.w	r3, r3, #8
   b72a0:	d1f6      	bne.n	b7290 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b72a2:	bd10      	pop	{r4, pc}
        return nullptr;
   b72a4:	2000      	movs	r0, #0
   b72a6:	e7fc      	b.n	b72a2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b72a8 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b72a8:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b72aa:	b570      	push	{r4, r5, r6, lr}
   b72ac:	6003      	str	r3, [r0, #0]
   b72ae:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b72b0:	2068      	movs	r0, #104	; 0x68
   b72b2:	f7fd fd14 	bl	b4cde <_Znwj>
	  auto __pi = ::new (__mem)
   b72b6:	1e04      	subs	r4, r0, #0
   b72b8:	f104 060c 	add.w	r6, r4, #12
   b72bc:	d007      	beq.n	b72ce <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b72be:	2301      	movs	r3, #1
   b72c0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b72c4:	4b04      	ldr	r3, [pc, #16]	; (b72d8 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b72c6:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b72c8:	4630      	mov	r0, r6
   b72ca:	f7ff ffa7 	bl	b721c <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b72ce:	e9c5 6400 	strd	r6, r4, [r5]
}
   b72d2:	4628      	mov	r0, r5
   b72d4:	bd70      	pop	{r4, r5, r6, pc}
   b72d6:	bf00      	nop
   b72d8:	000bb30c 	.word	0x000bb30c

000b72dc <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b72dc:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b72de:	680c      	ldr	r4, [r1, #0]
   b72e0:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b72e2:	4606      	mov	r6, r0
    return impl()->charUUID();
   b72e4:	4605      	mov	r5, r0
   b72e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b72e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b72ea:	6823      	ldr	r3, [r4, #0]
   b72ec:	602b      	str	r3, [r5, #0]
}
   b72ee:	4630      	mov	r0, r6
   b72f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b72f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b72f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b72f6:	4606      	mov	r6, r0
   b72f8:	b085      	sub	sp, #20
   b72fa:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b72fc:	460d      	mov	r5, r1
   b72fe:	2900      	cmp	r1, #0
   b7300:	d050      	beq.n	b73a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7302:	2a00      	cmp	r2, #0
   b7304:	d04e      	beq.n	b73a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b7306:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b7308:	7823      	ldrb	r3, [r4, #0]
   b730a:	2af4      	cmp	r2, #244	; 0xf4
   b730c:	bf28      	it	cs
   b730e:	22f4      	movcs	r2, #244	; 0xf4
   b7310:	b343      	cbz	r3, b7364 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7312:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7314:	0798      	lsls	r0, r3, #30
   b7316:	d509      	bpl.n	b732c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7318:	89a0      	ldrh	r0, [r4, #12]
   b731a:	9203      	str	r2, [sp, #12]
   b731c:	2300      	movs	r3, #0
   b731e:	f7fe ff0d 	bl	b613c <hal_ble_gatt_server_set_characteristic_value>
   b7322:	2800      	cmp	r0, #0
   b7324:	9a03      	ldr	r2, [sp, #12]
   b7326:	da03      	bge.n	b7330 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b7328:	b005      	add	sp, #20
   b732a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b732c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7330:	6834      	ldr	r4, [r6, #0]
   b7332:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7334:	06d9      	lsls	r1, r3, #27
   b7336:	d509      	bpl.n	b734c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7338:	2f01      	cmp	r7, #1
   b733a:	d007      	beq.n	b734c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b733c:	89a0      	ldrh	r0, [r4, #12]
   b733e:	2300      	movs	r3, #0
   b7340:	4629      	mov	r1, r5
}
   b7342:	b005      	add	sp, #20
   b7344:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7348:	f7fe bf5c 	b.w	b6204 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b734c:	069b      	lsls	r3, r3, #26
   b734e:	d5eb      	bpl.n	b7328 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7350:	2f02      	cmp	r7, #2
   b7352:	d0e9      	beq.n	b7328 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7354:	89a0      	ldrh	r0, [r4, #12]
   b7356:	2300      	movs	r3, #0
   b7358:	4629      	mov	r1, r5
}
   b735a:	b005      	add	sp, #20
   b735c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7360:	f7fe bf5a 	b.w	b6218 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7364:	8860      	ldrh	r0, [r4, #2]
   b7366:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b736a:	4288      	cmp	r0, r1
   b736c:	d01c      	beq.n	b73a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b736e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7370:	074e      	lsls	r6, r1, #29
   b7372:	d501      	bpl.n	b7378 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7374:	2f01      	cmp	r7, #1
   b7376:	d104      	bne.n	b7382 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7378:	070b      	lsls	r3, r1, #28
   b737a:	d409      	bmi.n	b7390 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b737c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7380:	e7d2      	b.n	b7328 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7382:	89a1      	ldrh	r1, [r4, #12]
   b7384:	9300      	str	r3, [sp, #0]
   b7386:	4613      	mov	r3, r2
   b7388:	462a      	mov	r2, r5
   b738a:	f7fe feff 	bl	b618c <hal_ble_gatt_client_write_without_response>
   b738e:	e7cb      	b.n	b7328 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7390:	2f02      	cmp	r7, #2
   b7392:	d0f3      	beq.n	b737c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7394:	2300      	movs	r3, #0
   b7396:	89a1      	ldrh	r1, [r4, #12]
   b7398:	9300      	str	r3, [sp, #0]
   b739a:	4613      	mov	r3, r2
   b739c:	462a      	mov	r2, r5
   b739e:	f7fe feeb 	bl	b6178 <hal_ble_gatt_client_write_with_response>
   b73a2:	e7c1      	b.n	b7328 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b73a4:	4802      	ldr	r0, [pc, #8]	; (b73b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b73a6:	e7bf      	b.n	b7328 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b73a8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b73ac:	e7bc      	b.n	b7328 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b73ae:	bf00      	nop
   b73b0:	fffffef2 	.word	0xfffffef2

000b73b4 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b73b4:	b510      	push	{r4, lr}
   b73b6:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b73b8:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b73ba:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b73bc:	bb52      	cbnz	r2, b7414 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b73be:	885c      	ldrh	r4, [r3, #2]
   b73c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b73c4:	4284      	cmp	r4, r0
   b73c6:	d025      	beq.n	b7414 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b73c8:	8a18      	ldrh	r0, [r3, #16]
   b73ca:	b330      	cbz	r0, b741a <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b73cc:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b73d0:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b73d2:	4a13      	ldr	r2, [pc, #76]	; (b7420 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b73d4:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b73d6:	4a13      	ldr	r2, [pc, #76]	; (b7424 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b73d8:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b73dc:	885a      	ldrh	r2, [r3, #2]
   b73de:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b73e2:	8a1a      	ldrh	r2, [r3, #16]
   b73e4:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b73e8:	899a      	ldrh	r2, [r3, #12]
   b73ea:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b73ee:	b159      	cbz	r1, b7408 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b73f0:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b73f2:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b73f4:	bf44      	itt	mi
   b73f6:	2202      	movmi	r2, #2
   b73f8:	9205      	strmi	r2, [sp, #20]
   b73fa:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b73fc:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b73fe:	bf42      	ittt	mi
   b7400:	9b05      	ldrmi	r3, [sp, #20]
   b7402:	f043 0301 	orrmi.w	r3, r3, #1
   b7406:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b7408:	2100      	movs	r1, #0
   b740a:	4668      	mov	r0, sp
   b740c:	f7fe fef0 	bl	b61f0 <hal_ble_gatt_client_configure_cccd>
}
   b7410:	b006      	add	sp, #24
   b7412:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b7414:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7418:	e7fa      	b.n	b7410 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b741a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b741e:	e7f7      	b.n	b7410 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b7420:	00180003 	.word	0x00180003
   b7424:	000b7641 	.word	0x000b7641

000b7428 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b7428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b742a:	2600      	movs	r6, #0
   b742c:	6006      	str	r6, [r0, #0]
   b742e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7430:	2028      	movs	r0, #40	; 0x28
   b7432:	f7fd fc54 	bl	b4cde <_Znwj>
	  auto __pi = ::new (__mem)
   b7436:	1e04      	subs	r4, r0, #0
   b7438:	f104 070c 	add.w	r7, r4, #12
   b743c:	d00a      	beq.n	b7454 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b743e:	2301      	movs	r3, #1
   b7440:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b7444:	4b05      	ldr	r3, [pc, #20]	; (b745c <_ZN8particle10BleServiceC1Ev+0x34>)
   b7446:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b7448:	4638      	mov	r0, r7
   b744a:	f7ff fceb 	bl	b6e24 <_ZN8particle7BleUuidC1Ev>
   b744e:	6226      	str	r6, [r4, #32]
   b7450:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b7454:	e9c5 7400 	strd	r7, r4, [r5]
}
   b7458:	4628      	mov	r0, r5
   b745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b745c:	000bb328 	.word	0x000bb328

000b7460 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
BleService::BleService(const BleUuid& uuid)
   b7460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7464:	2600      	movs	r6, #0
   b7466:	6006      	str	r6, [r0, #0]
   b7468:	4607      	mov	r7, r0
   b746a:	2028      	movs	r0, #40	; 0x28
   b746c:	460c      	mov	r4, r1
   b746e:	f7fd fc36 	bl	b4cde <_Znwj>
	  auto __pi = ::new (__mem)
   b7472:	1e05      	subs	r5, r0, #0
   b7474:	f105 080c 	add.w	r8, r5, #12
   b7478:	d00f      	beq.n	b749a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b747a:	2301      	movs	r3, #1
   b747c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7480:	4b08      	ldr	r3, [pc, #32]	; (b74a4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b7482:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b7484:	4640      	mov	r0, r8
   b7486:	f7ff fccd 	bl	b6e24 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b748a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b748c:	622e      	str	r6, [r5, #32]
   b748e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b7492:	4646      	mov	r6, r8
   b7494:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b7496:	6823      	ldr	r3, [r4, #0]
   b7498:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b749a:	e9c7 8500 	strd	r8, r5, [r7]
}
   b749e:	4638      	mov	r0, r7
   b74a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b74a4:	000bb328 	.word	0x000bb328

000b74a8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b74a8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b74aa:	2500      	movs	r5, #0
   b74ac:	6005      	str	r5, [r0, #0]
   b74ae:	4606      	mov	r6, r0
   b74b0:	2030      	movs	r0, #48	; 0x30
   b74b2:	f7fd fc14 	bl	b4cde <_Znwj>
	  auto __pi = ::new (__mem)
   b74b6:	4604      	mov	r4, r0
   b74b8:	b188      	cbz	r0, b74de <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b74ba:	2301      	movs	r3, #1
   b74bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b74c0:	4b09      	ldr	r3, [pc, #36]	; (b74e8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b74c2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b74c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b74c8:	8183      	strh	r3, [r0, #12]
   b74ca:	300e      	adds	r0, #14
   b74cc:	f7ff fc33 	bl	b6d36 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b74d0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b74d4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b74d8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b74dc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b74de:	6074      	str	r4, [r6, #4]
   b74e0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b74e2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b74e4:	4630      	mov	r0, r6
   b74e6:	bd70      	pop	{r4, r5, r6, pc}
   b74e8:	000bb344 	.word	0x000bb344

000b74ec <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b74ec:	b513      	push	{r0, r1, r4, lr}
   b74ee:	4604      	mov	r4, r0
    WiringBleLock lk;
   b74f0:	a801      	add	r0, sp, #4
   b74f2:	f7ff fbe5 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b74f6:	6823      	ldr	r3, [r4, #0]
   b74f8:	881c      	ldrh	r4, [r3, #0]
   b74fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b74fe:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b7500:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b7502:	bf18      	it	ne
   b7504:	2401      	movne	r4, #1
    WiringBleLock lk;
   b7506:	f7ff fbe9 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b750a:	4620      	mov	r0, r4
   b750c:	b002      	add	sp, #8
   b750e:	bd10      	pop	{r4, pc}

000b7510 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b7510:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7512:	4605      	mov	r5, r0
   b7514:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7516:	a801      	add	r0, sp, #4
   b7518:	f7ff fbd2 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b751c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b751e:	6823      	ldr	r3, [r4, #0]
   b7520:	f8c2 3002 	str.w	r3, [r2, #2]
   b7524:	6863      	ldr	r3, [r4, #4]
   b7526:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b752a:	a801      	add	r0, sp, #4
   b752c:	f7ff fbd6 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b7530:	b003      	add	sp, #12
   b7532:	bd30      	pop	{r4, r5, pc}

000b7534 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b7534:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7536:	460d      	mov	r5, r1
   b7538:	4604      	mov	r4, r0
    WiringBleLock lk;
   b753a:	a801      	add	r0, sp, #4
   b753c:	f7ff fbc0 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
   b7540:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7542:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7546:	6023      	str	r3, [r4, #0]
   b7548:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b754c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b754e:	a801      	add	r0, sp, #4
   b7550:	f7ff fbc4 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7554:	4620      	mov	r0, r4
   b7556:	b003      	add	sp, #12
   b7558:	bd30      	pop	{r4, r5, pc}

000b755a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b755a:	b530      	push	{r4, r5, lr}
   b755c:	4605      	mov	r5, r0
   b755e:	b087      	sub	sp, #28
   b7560:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7562:	a801      	add	r0, sp, #4
   b7564:	f7ff fbac 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7568:	682a      	ldr	r2, [r5, #0]
   b756a:	6823      	ldr	r3, [r4, #0]
   b756c:	8812      	ldrh	r2, [r2, #0]
   b756e:	881b      	ldrh	r3, [r3, #0]
   b7570:	429a      	cmp	r2, r3
   b7572:	d10d      	bne.n	b7590 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7574:	4629      	mov	r1, r5
   b7576:	a802      	add	r0, sp, #8
   b7578:	f7ff ffdc 	bl	b7534 <_ZNK8particle13BlePeerDevice7addressEv>
   b757c:	4621      	mov	r1, r4
   b757e:	a804      	add	r0, sp, #16
   b7580:	f7ff ffd8 	bl	b7534 <_ZNK8particle13BlePeerDevice7addressEv>
   b7584:	a904      	add	r1, sp, #16
   b7586:	a802      	add	r0, sp, #8
   b7588:	f7ff fbc1 	bl	b6d0e <_ZNK8particle10BleAddresseqERKS0_>
   b758c:	4604      	mov	r4, r0
   b758e:	b900      	cbnz	r0, b7592 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7590:	2400      	movs	r4, #0
    WiringBleLock lk;
   b7592:	a801      	add	r0, sp, #4
   b7594:	f7ff fba2 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7598:	4620      	mov	r0, r4
   b759a:	b007      	add	sp, #28
   b759c:	bd30      	pop	{r4, r5, pc}
	...

000b75a0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b75a0:	b510      	push	{r4, lr}
   b75a2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b75a4:	2064      	movs	r0, #100	; 0x64
   b75a6:	f7fd fb9a 	bl	b4cde <_Znwj>
   b75aa:	b168      	cbz	r0, b75c8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b75ac:	2300      	movs	r3, #0
   b75ae:	e9c0 3300 	strd	r3, r3, [r0]
   b75b2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b75b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b75ba:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b75be:	6203      	str	r3, [r0, #32]
   b75c0:	62c3      	str	r3, [r0, #44]	; 0x2c
   b75c2:	63c3      	str	r3, [r0, #60]	; 0x3c
   b75c4:	64c3      	str	r3, [r0, #76]	; 0x4c
   b75c6:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b75c8:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b75ca:	b920      	cbnz	r0, b75d6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b75cc:	4a0a      	ldr	r2, [pc, #40]	; (b75f8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b75ce:	490b      	ldr	r1, [pc, #44]	; (b75fc <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b75d0:	200a      	movs	r0, #10
   b75d2:	f7fe ff5b 	bl	b648c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b75d6:	2000      	movs	r0, #0
   b75d8:	f7fe fd6a 	bl	b60b0 <hal_ble_stack_init>
   b75dc:	b120      	cbz	r0, b75e8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b75de:	4a06      	ldr	r2, [pc, #24]	; (b75f8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b75e0:	4907      	ldr	r1, [pc, #28]	; (b7600 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b75e2:	200a      	movs	r0, #10
   b75e4:	f7fe ff52 	bl	b648c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b75e8:	6821      	ldr	r1, [r4, #0]
   b75ea:	4806      	ldr	r0, [pc, #24]	; (b7604 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b75ec:	2200      	movs	r2, #0
   b75ee:	f7fe fdf5 	bl	b61dc <hal_ble_set_callback_on_periph_link_events>
}
   b75f2:	4620      	mov	r0, r4
   b75f4:	bd10      	pop	{r4, pc}
   b75f6:	bf00      	nop
   b75f8:	000b6091 	.word	0x000b6091
   b75fc:	000bb0c4 	.word	0x000bb0c4
   b7600:	000bb102 	.word	0x000bb102
   b7604:	000b8065 	.word	0x000b8065

000b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7608:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b760a:	4c0a      	ldr	r4, [pc, #40]	; (b7634 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b760c:	7823      	ldrb	r3, [r4, #0]
   b760e:	f3bf 8f5b 	dmb	ish
   b7612:	07db      	lsls	r3, r3, #31
   b7614:	d40c      	bmi.n	b7630 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7616:	4620      	mov	r0, r4
   b7618:	f7fd fb74 	bl	b4d04 <__cxa_guard_acquire>
   b761c:	b140      	cbz	r0, b7630 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b761e:	4806      	ldr	r0, [pc, #24]	; (b7638 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7620:	f7ff ffbe 	bl	b75a0 <_ZN8particle14BleLocalDeviceC1Ev>
   b7624:	4620      	mov	r0, r4
   b7626:	f7fd fb72 	bl	b4d0e <__cxa_guard_release>
   b762a:	4804      	ldr	r0, [pc, #16]	; (b763c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b762c:	f003 f8a0 	bl	ba770 <atexit>
    return instance;
}
   b7630:	4801      	ldr	r0, [pc, #4]	; (b7638 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7632:	bd10      	pop	{r4, pc}
   b7634:	2003e6d0 	.word	0x2003e6d0
   b7638:	2003e6dc 	.word	0x2003e6dc
   b763c:	000b7945 	.word	0x000b7945

000b7640 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7640:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7642:	6803      	ldr	r3, [r0, #0]
   b7644:	3b09      	subs	r3, #9
   b7646:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7648:	b08d      	sub	sp, #52	; 0x34
   b764a:	4604      	mov	r4, r0
   b764c:	460d      	mov	r5, r1
    switch (event->type) {
   b764e:	d811      	bhi.n	b7674 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7650:	f7ff ffda 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7654:	88a1      	ldrh	r1, [r4, #4]
   b7656:	6800      	ldr	r0, [r0, #0]
   b7658:	f7ff fe15 	bl	b7286 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b765c:	4603      	mov	r3, r0
   b765e:	b958      	cbnz	r0, b7678 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7660:	2220      	movs	r2, #32
   b7662:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7666:	4a0b      	ldr	r2, [pc, #44]	; (b7694 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7668:	9200      	str	r2, [sp, #0]
   b766a:	490b      	ldr	r1, [pc, #44]	; (b7698 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b766c:	aa04      	add	r2, sp, #16
   b766e:	2032      	movs	r0, #50	; 0x32
   b7670:	f7fe ff14 	bl	b649c <log_message>
}
   b7674:	b00d      	add	sp, #52	; 0x34
   b7676:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7678:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b767a:	2a00      	cmp	r2, #0
   b767c:	d0fa      	beq.n	b7674 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b767e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7682:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7686:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b768a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b768c:	aa04      	add	r2, sp, #16
   b768e:	a903      	add	r1, sp, #12
   b7690:	47a0      	blx	r4
}
   b7692:	e7ef      	b.n	b7674 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7694:	000bb144 	.word	0x000bb144
   b7698:	000bb0db 	.word	0x000bb0db

000b769c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b769c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b769e:	2000      	movs	r0, #0
   b76a0:	f7fe fd06 	bl	b60b0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b76a4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b76a8:	bd08      	pop	{r3, pc}

000b76aa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b76aa:	b919      	cbnz	r1, b76b4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b76ac:	460a      	mov	r2, r1
   b76ae:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b76b0:	f7fe bd06 	b.w	b60c0 <hal_ble_gap_set_advertising_data>
   b76b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b76b8:	2200      	movs	r2, #0
   b76ba:	e7f9      	b.n	b76b0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b76bc <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b76bc:	b510      	push	{r4, lr}
   b76be:	4604      	mov	r4, r0
    ::free(ptr);
   b76c0:	6940      	ldr	r0, [r0, #20]
   b76c2:	f7fe ff87 	bl	b65d4 <free>
   b76c6:	68a0      	ldr	r0, [r4, #8]
   b76c8:	f7fe ff84 	bl	b65d4 <free>
   b76cc:	4620      	mov	r0, r4
   b76ce:	bd10      	pop	{r4, pc}

000b76d0 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b76d0:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b76d2:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b76d6:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   b76da:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b76de:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b76e2:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b76e6:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b76ea:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b76ee:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b76f2:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b76f6:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b76fa:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b76fe:	6202      	str	r2, [r0, #32]
   b7700:	6302      	str	r2, [r0, #48]	; 0x30
   b7702:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   b7706:	4770      	bx	lr

000b7708 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b7708:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b770a:	69d8      	ldr	r0, [r3, #28]
}
   b770c:	2800      	cmp	r0, #0
   b770e:	bfd4      	ite	le
   b7710:	2000      	movle	r0, #0
   b7712:	2001      	movgt	r0, #1
   b7714:	4770      	bx	lr

000b7716 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7716:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7718:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b771c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b771e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b7722:	42ae      	cmp	r6, r5
   b7724:	d004      	beq.n	b7730 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b7726:	4628      	mov	r0, r5
   b7728:	f7ff f894 	bl	b6854 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b772c:	3510      	adds	r5, #16
   b772e:	e7f8      	b.n	b7722 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7730:	6820      	ldr	r0, [r4, #0]
   b7732:	f7fe ff4f 	bl	b65d4 <free>
}
   b7736:	4620      	mov	r0, r4
   b7738:	bd70      	pop	{r4, r5, r6, pc}

000b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b773a:	b510      	push	{r4, lr}
   b773c:	4604      	mov	r4, r0
    ::free(ptr);
   b773e:	6800      	ldr	r0, [r0, #0]
   b7740:	f7fe ff48 	bl	b65d4 <free>
}
   b7744:	4620      	mov	r0, r4
   b7746:	bd10      	pop	{r4, pc}

000b7748 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b7748:	b570      	push	{r4, r5, r6, lr}
   b774a:	4604      	mov	r4, r0
    ::free(ptr);
   b774c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b774e:	f7fe ff41 	bl	b65d4 <free>
   b7752:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b7754:	f7fe ff3e 	bl	b65d4 <free>
    }
    ~BleScanFilter() = default;
   b7758:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b775c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7760:	f7ff ffeb 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b7764:	4628      	mov	r0, r5
   b7766:	f7ff ffd6 	bl	b7716 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b776a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b776e:	f7ff fa5a 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
   b7772:	f104 0018 	add.w	r0, r4, #24
   b7776:	f7ff fa56 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b777a:	e9d4 5300 	ldrd	r5, r3, [r4]
   b777e:	2624      	movs	r6, #36	; 0x24
   b7780:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7784:	42ae      	cmp	r6, r5
   b7786:	d004      	beq.n	b7792 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b7788:	4628      	mov	r0, r5
   b778a:	f7ff ff97 	bl	b76bc <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b778e:	3524      	adds	r5, #36	; 0x24
   b7790:	e7f8      	b.n	b7784 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b7792:	6820      	ldr	r0, [r4, #0]
   b7794:	f7fe ff1e 	bl	b65d4 <free>
   b7798:	4620      	mov	r0, r4
   b779a:	bd70      	pop	{r4, r5, r6, pc}

000b779c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b779c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b779e:	1e14      	subs	r4, r2, #0
   b77a0:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b77a2:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b77a4:	db02      	blt.n	b77ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b77a6:	1862      	adds	r2, r4, r1
   b77a8:	429a      	cmp	r2, r3
   b77aa:	dd00      	ble.n	b77ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b77ac:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b77ae:	682a      	ldr	r2, [r5, #0]
   b77b0:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b77b2:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b77b4:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b77b6:	1a52      	subs	r2, r2, r1
   b77b8:	f002 fffe 	bl	ba7b8 <memmove>
    size_ -= n;
   b77bc:	686a      	ldr	r2, [r5, #4]
   b77be:	1b12      	subs	r2, r2, r4
   b77c0:	606a      	str	r2, [r5, #4]
}
   b77c2:	bd38      	pop	{r3, r4, r5, pc}

000b77c4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b77c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b77c6:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b77c8:	4604      	mov	r4, r0
   b77ca:	460d      	mov	r5, r1
   b77cc:	ab01      	add	r3, sp, #4
   b77ce:	e9d0 0100 	ldrd	r0, r1, [r0]
   b77d2:	f7ff f98b 	bl	b6aec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b77d6:	4602      	mov	r2, r0
   b77d8:	b138      	cbz	r0, b77ea <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b77da:	9901      	ldr	r1, [sp, #4]
   b77dc:	4620      	mov	r0, r4
   b77de:	f7ff ffdd 	bl	b779c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b77e2:	4629      	mov	r1, r5
   b77e4:	4620      	mov	r0, r4
   b77e6:	f7ff ffed 	bl	b77c4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b77ea:	b003      	add	sp, #12
   b77ec:	bd30      	pop	{r4, r5, pc}

000b77ee <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b77ee:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b77f0:	460c      	mov	r4, r1
   b77f2:	b929      	cbnz	r1, b7800 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b77f4:	460a      	mov	r2, r1
   b77f6:	4608      	mov	r0, r1
}
   b77f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b77fc:	f7fe bc68 	b.w	b60d0 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7800:	2101      	movs	r1, #1
   b7802:	4620      	mov	r0, r4
   b7804:	f7ff ffde 	bl	b77c4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7808:	e9d4 0100 	ldrd	r0, r1, [r4]
   b780c:	2200      	movs	r2, #0
   b780e:	e7f3      	b.n	b77f8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7810 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7810:	b538      	push	{r3, r4, r5, lr}
   b7812:	4604      	mov	r4, r0
   b7814:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7816:	f7ff ff48 	bl	b76aa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b781a:	2800      	cmp	r0, #0
   b781c:	db0a      	blt.n	b7834 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b781e:	4629      	mov	r1, r5
   b7820:	4620      	mov	r0, r4
   b7822:	f7ff ffe4 	bl	b77ee <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7826:	2800      	cmp	r0, #0
   b7828:	db04      	blt.n	b7834 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b782a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b782e:	2000      	movs	r0, #0
   b7830:	f7fe bc56 	b.w	b60e0 <hal_ble_gap_start_advertising>
}
   b7834:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7838 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7838:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b783a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b783c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b783e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7840:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7842:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7844:	f7fd fa4b 	bl	b4cde <_Znwj>
   b7848:	b118      	cbz	r0, b7852 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b784a:	682b      	ldr	r3, [r5, #0]
   b784c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b784e:	686b      	ldr	r3, [r5, #4]
   b7850:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7852:	4b03      	ldr	r3, [pc, #12]	; (b7860 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7854:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7856:	4b03      	ldr	r3, [pc, #12]	; (b7864 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7858:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b785a:	60a3      	str	r3, [r4, #8]
      }
   b785c:	4620      	mov	r0, r4
   b785e:	bd38      	pop	{r3, r4, r5, pc}
   b7860:	000b6b2d 	.word	0x000b6b2d
   b7864:	000b6b45 	.word	0x000b6b45

000b7868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7868:	680b      	ldr	r3, [r1, #0]
   b786a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b786c:	b113      	cbz	r3, b7874 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b786e:	685a      	ldr	r2, [r3, #4]
   b7870:	3201      	adds	r2, #1
   b7872:	605a      	str	r2, [r3, #4]
      }
   b7874:	4770      	bx	lr

000b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b7876:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7878:	f851 3b04 	ldr.w	r3, [r1], #4
   b787c:	4604      	mov	r4, r0
   b787e:	f840 3b04 	str.w	r3, [r0], #4
   b7882:	f7ff fff1 	bl	b7868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b7886:	6823      	ldr	r3, [r4, #0]
   b7888:	b90b      	cbnz	r3, b788e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b788a:	f7ff f945 	bl	b6b18 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b788e:	4620      	mov	r0, r4
   b7890:	bd10      	pop	{r4, pc}

000b7892 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7892:	b510      	push	{r4, lr}
   b7894:	f851 3b04 	ldr.w	r3, [r1], #4
   b7898:	4604      	mov	r4, r0
   b789a:	f840 3b04 	str.w	r3, [r0], #4
   b789e:	f7ff ffe3 	bl	b7868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b78a2:	4620      	mov	r0, r4
   b78a4:	bd10      	pop	{r4, pc}

000b78a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b78a6:	b510      	push	{r4, lr}
   b78a8:	f851 3b04 	ldr.w	r3, [r1], #4
   b78ac:	4604      	mov	r4, r0
   b78ae:	f840 3b04 	str.w	r3, [r0], #4
   b78b2:	f7ff ffd9 	bl	b7868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b78b6:	4620      	mov	r0, r4
   b78b8:	bd10      	pop	{r4, pc}

000b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b78ba:	b510      	push	{r4, lr}
   b78bc:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b78be:	6800      	ldr	r0, [r0, #0]
   b78c0:	b108      	cbz	r0, b78c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b78c2:	f7ff f9c4 	bl	b6c4e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b78c6:	4620      	mov	r0, r4
   b78c8:	bd10      	pop	{r4, pc}

000b78ca <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b78ca:	b510      	push	{r4, lr}
   b78cc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b78ce:	3004      	adds	r0, #4
   b78d0:	f7ff fff3 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b78d4:	4620      	mov	r0, r4
   b78d6:	bd10      	pop	{r4, pc}

000b78d8 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b78d8:	b510      	push	{r4, lr}
   b78da:	4604      	mov	r4, r0
   b78dc:	3004      	adds	r0, #4
   b78de:	f7ff ffec 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b78e2:	4620      	mov	r0, r4
   b78e4:	bd10      	pop	{r4, pc}

000b78e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b78e6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b78e8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b78ec:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b78ee:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b78f2:	42ae      	cmp	r6, r5
   b78f4:	d004      	beq.n	b7900 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b78f6:	1d28      	adds	r0, r5, #4
   b78f8:	f7ff ffdf 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78fc:	3508      	adds	r5, #8
   b78fe:	e7f8      	b.n	b78f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7900:	6820      	ldr	r0, [r4, #0]
   b7902:	f7fe fe67 	bl	b65d4 <free>
}
   b7906:	4620      	mov	r0, r4
   b7908:	bd70      	pop	{r4, r5, r6, pc}

000b790a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b790a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b790c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7910:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7912:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7916:	42ae      	cmp	r6, r5
   b7918:	d004      	beq.n	b7924 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b791a:	1d28      	adds	r0, r5, #4
   b791c:	f7ff ffcd 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7920:	3508      	adds	r5, #8
   b7922:	e7f8      	b.n	b7916 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7924:	6820      	ldr	r0, [r4, #0]
   b7926:	f7fe fe55 	bl	b65d4 <free>
}
   b792a:	4620      	mov	r0, r4
   b792c:	bd70      	pop	{r4, r5, r6, pc}

000b792e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b792e:	b510      	push	{r4, lr}
   b7930:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7932:	3024      	adds	r0, #36	; 0x24
   b7934:	f7ff ffe9 	bl	b790a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7938:	f104 0018 	add.w	r0, r4, #24
   b793c:	f7ff ffd3 	bl	b78e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7940:	bd10      	pop	{r4, pc}
	...

000b7944 <__tcf_0>:
    static BleLocalDevice instance;
   b7944:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7946:	4b17      	ldr	r3, [pc, #92]	; (b79a4 <__tcf_0+0x60>)
   b7948:	681c      	ldr	r4, [r3, #0]
   b794a:	b354      	cbz	r4, b79a2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b794c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7950:	f7ff f969 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
   b7954:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7958:	f7ff f965 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
   b795c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7960:	f7ff f961 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
   b7964:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7968:	f7ff f95d 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b796c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7970:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7974:	42ae      	cmp	r6, r5
   b7976:	d004      	beq.n	b7982 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b7978:	1d28      	adds	r0, r5, #4
   b797a:	f7ff ff9e 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b797e:	3508      	adds	r5, #8
   b7980:	e7f8      	b.n	b7974 <__tcf_0+0x30>
    ::free(ptr);
   b7982:	69a0      	ldr	r0, [r4, #24]
   b7984:	f7fe fe26 	bl	b65d4 <free>
    ~BleLocalDeviceImpl() = default;
   b7988:	f104 000c 	add.w	r0, r4, #12
   b798c:	f7ff ffbd 	bl	b790a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7990:	4620      	mov	r0, r4
   b7992:	f7ff ffa8 	bl	b78e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b7996:	4620      	mov	r0, r4
   b7998:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b799a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b799e:	f7fd b9a2 	b.w	b4ce6 <_ZdlPvj>
   b79a2:	bd70      	pop	{r4, r5, r6, pc}
   b79a4:	2003e6dc 	.word	0x2003e6dc

000b79a8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b79a8:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b79aa:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b79ac:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b79b0:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b79b4:	6803      	ldr	r3, [r0, #0]
   b79b6:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b79b8:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b79ba:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b79bc:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b79be:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b79c0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b79c2:	f7ff ff7a 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b79c6:	b002      	add	sp, #8
   b79c8:	bd10      	pop	{r4, pc}

000b79ca <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b79ca:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b79cc:	b510      	push	{r4, lr}
      if (_M_empty())
   b79ce:	b90a      	cbnz	r2, b79d4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b79d0:	f002 fc50 	bl	ba274 <_ZSt25__throw_bad_function_callv>
    }
   b79d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b79d8:	68c3      	ldr	r3, [r0, #12]
   b79da:	4718      	bx	r3

000b79dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b79dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b79e0:	2300      	movs	r3, #0
   b79e2:	e9c0 3300 	strd	r3, r3, [r0]
   b79e6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b79e8:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b79ec:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b79ee:	4605      	mov	r5, r0
   b79f0:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b79f2:	dd4a      	ble.n	b7a8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b79f4:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b79f8:	f7fe fde4 	bl	b65c4 <malloc>
            if (!d) {
   b79fc:	4606      	mov	r6, r0
   b79fe:	2800      	cmp	r0, #0
   b7a00:	d043      	beq.n	b7a8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b7a02:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b7a06:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b7a08:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b7a0c:	d916      	bls.n	b7a3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b7a0e:	4550      	cmp	r0, sl
   b7a10:	d215      	bcs.n	b7a3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b7a12:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b7a16:	f1a4 0910 	sub.w	r9, r4, #16
   b7a1a:	ebaa 0404 	sub.w	r4, sl, r4
   b7a1e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b7a20:	45d1      	cmp	r9, sl
   b7a22:	d01d      	beq.n	b7a60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b7a24:	b11c      	cbz	r4, b7a2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b7a26:	4651      	mov	r1, sl
   b7a28:	4620      	mov	r0, r4
   b7a2a:	f7fe ff8f 	bl	b694c <_ZN6StringC1EOS_>
                end->~T();
   b7a2e:	4650      	mov	r0, sl
   b7a30:	f7fe ff10 	bl	b6854 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7a34:	f1aa 0a10 	sub.w	sl, sl, #16
   b7a38:	3c10      	subs	r4, #16
   b7a3a:	e7f1      	b.n	b7a20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b7a3c:	d010      	beq.n	b7a60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b7a3e:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b7a40:	45a2      	cmp	sl, r4
   b7a42:	d00d      	beq.n	b7a60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b7a44:	f1b9 0f00 	cmp.w	r9, #0
   b7a48:	d003      	beq.n	b7a52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b7a4a:	4621      	mov	r1, r4
   b7a4c:	4648      	mov	r0, r9
   b7a4e:	f7fe ff7d 	bl	b694c <_ZN6StringC1EOS_>
                p->~T();
   b7a52:	4620      	mov	r0, r4
   b7a54:	f7fe fefe 	bl	b6854 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7a58:	3410      	adds	r4, #16
   b7a5a:	f109 0910 	add.w	r9, r9, #16
   b7a5e:	e7ef      	b.n	b7a40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b7a60:	6828      	ldr	r0, [r5, #0]
   b7a62:	f7fe fdb7 	bl	b65d4 <free>
        capacity_ = n;
   b7a66:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b7a6a:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7a6c:	e9d7 4300 	ldrd	r4, r3, [r7]
   b7a70:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b7a74:	45a0      	cmp	r8, r4
   b7a76:	d006      	beq.n	b7a86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b7a78:	4621      	mov	r1, r4
   b7a7a:	4630      	mov	r0, r6
   b7a7c:	f7fe ff80 	bl	b6980 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b7a80:	3410      	adds	r4, #16
   b7a82:	3610      	adds	r6, #16
   b7a84:	e7f6      	b.n	b7a74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b7a86:	687b      	ldr	r3, [r7, #4]
   b7a88:	606b      	str	r3, [r5, #4]
}
   b7a8a:	4628      	mov	r0, r5
   b7a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b7a90 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b7a90:	b530      	push	{r4, r5, lr}
   b7a92:	b08d      	sub	sp, #52	; 0x34
   b7a94:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b7a96:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b7a9a:	a801      	add	r0, sp, #4
   b7a9c:	f7ff ff9e 	bl	b79dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b7aa0:	9b02      	ldr	r3, [sp, #8]
   b7aa2:	2b00      	cmp	r3, #0
   b7aa4:	dd2f      	ble.n	b7b06 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b7aa6:	f104 0114 	add.w	r1, r4, #20
   b7aaa:	a804      	add	r0, sp, #16
   b7aac:	f7ff fb8c 	bl	b71c8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b7ab0:	f104 0108 	add.w	r1, r4, #8
   b7ab4:	a808      	add	r0, sp, #32
   b7ab6:	f7ff fb87 	bl	b71c8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b7aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b7abc:	9b06      	ldr	r3, [sp, #24]
   b7abe:	4313      	orrs	r3, r2
   b7ac0:	d01f      	beq.n	b7b02 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b7ac2:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b7ac6:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b7aca:	42ac      	cmp	r4, r5
   b7acc:	d019      	beq.n	b7b02 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b7ace:	a904      	add	r1, sp, #16
   b7ad0:	4620      	mov	r0, r4
   b7ad2:	f7fe ffab 	bl	b6a2c <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b7ad6:	b160      	cbz	r0, b7af2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b7ad8:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b7ada:	a808      	add	r0, sp, #32
   b7adc:	f7fe feba 	bl	b6854 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b7ae0:	a804      	add	r0, sp, #16
   b7ae2:	f7fe feb7 	bl	b6854 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b7ae6:	a801      	add	r0, sp, #4
   b7ae8:	f7ff fe15 	bl	b7716 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b7aec:	4620      	mov	r0, r4
   b7aee:	b00d      	add	sp, #52	; 0x34
   b7af0:	bd30      	pop	{r4, r5, pc}
   b7af2:	4620      	mov	r0, r4
   b7af4:	a908      	add	r1, sp, #32
   b7af6:	f7fe ff99 	bl	b6a2c <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b7afa:	3410      	adds	r4, #16
   b7afc:	2800      	cmp	r0, #0
   b7afe:	d0e4      	beq.n	b7aca <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b7b00:	e7ea      	b.n	b7ad8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b7b02:	2400      	movs	r4, #0
   b7b04:	e7e9      	b.n	b7ada <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b7b06:	2401      	movs	r4, #1
   b7b08:	e7ed      	b.n	b7ae6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b7b0a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b7b0c:	2300      	movs	r3, #0
   b7b0e:	e9c0 3300 	strd	r3, r3, [r0]
   b7b12:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7b14:	684f      	ldr	r7, [r1, #4]
   b7b16:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7b18:	4605      	mov	r5, r0
   b7b1a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7b1c:	dd3e      	ble.n	b7b9c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b7b1e:	00f8      	lsls	r0, r7, #3
   b7b20:	f7fe fd50 	bl	b65c4 <malloc>
            if (!d) {
   b7b24:	4604      	mov	r4, r0
   b7b26:	b3c8      	cbz	r0, b7b9c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b7b28:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b7b2c:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b7b2e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b7b32:	d910      	bls.n	b7b56 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b7b34:	429c      	cmp	r4, r3
   b7b36:	d20f      	bcs.n	b7b58 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b7b38:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b7b3a:	1a1a      	subs	r2, r3, r0
   b7b3c:	f1a0 0c08 	sub.w	ip, r0, #8
   b7b40:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b7b42:	459c      	cmp	ip, r3
   b7b44:	d018      	beq.n	b7b78 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b7b46:	b11a      	cbz	r2, b7b50 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b7b48:	6819      	ldr	r1, [r3, #0]
   b7b4a:	6011      	str	r1, [r2, #0]
   b7b4c:	6859      	ldr	r1, [r3, #4]
   b7b4e:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b7b50:	3b08      	subs	r3, #8
   b7b52:	3a08      	subs	r2, #8
   b7b54:	e7f5      	b.n	b7b42 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b7b56:	d00f      	beq.n	b7b78 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b7b58:	4601      	mov	r1, r0
   b7b5a:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b7b5c:	428b      	cmp	r3, r1
   b7b5e:	d00b      	beq.n	b7b78 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b7b60:	b13a      	cbz	r2, b7b72 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b7b62:	f8d1 c000 	ldr.w	ip, [r1]
   b7b66:	f8c2 c000 	str.w	ip, [r2]
   b7b6a:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b7b6e:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b7b72:	3108      	adds	r1, #8
   b7b74:	3208      	adds	r2, #8
   b7b76:	e7f1      	b.n	b7b5c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b7b78:	f7fe fd2c 	bl	b65d4 <free>
        data_ = d;
   b7b7c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7b7e:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7b80:	e9d6 3100 	ldrd	r3, r1, [r6]
   b7b84:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b7b88:	4298      	cmp	r0, r3
   b7b8a:	d006      	beq.n	b7b9a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b7b8c:	681a      	ldr	r2, [r3, #0]
   b7b8e:	6022      	str	r2, [r4, #0]
   b7b90:	685a      	ldr	r2, [r3, #4]
   b7b92:	6062      	str	r2, [r4, #4]
   b7b94:	3308      	adds	r3, #8
   b7b96:	3408      	adds	r4, #8
   b7b98:	e7f6      	b.n	b7b88 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b7b9a:	6069      	str	r1, [r5, #4]
}
   b7b9c:	4628      	mov	r0, r5
   b7b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ba0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7ba0:	b570      	push	{r4, r5, r6, lr}
   b7ba2:	4604      	mov	r4, r0
        capacity_(0) {
   b7ba4:	2000      	movs	r0, #0
   b7ba6:	e9c4 0000 	strd	r0, r0, [r4]
   b7baa:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7bac:	684e      	ldr	r6, [r1, #4]
   b7bae:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7bb0:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7bb2:	dd12      	ble.n	b7bda <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b7bb4:	0071      	lsls	r1, r6, #1
   b7bb6:	f7fe fd15 	bl	b65e4 <realloc>
            if (!d) {
   b7bba:	b170      	cbz	r0, b7bda <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b7bbc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7bbe:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7bc0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7bc4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b7bc8:	429a      	cmp	r2, r3
   b7bca:	d004      	beq.n	b7bd6 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b7bcc:	f833 1b02 	ldrh.w	r1, [r3], #2
   b7bd0:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b7bd4:	e7f8      	b.n	b7bc8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b7bd6:	686b      	ldr	r3, [r5, #4]
   b7bd8:	6063      	str	r3, [r4, #4]
}
   b7bda:	4620      	mov	r0, r4
   b7bdc:	bd70      	pop	{r4, r5, r6, pc}

000b7bde <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b7bde:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b7be0:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b7be2:	4604      	mov	r4, r0
        if (!dismissed_) {
   b7be4:	b923      	cbnz	r3, b7bf0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b7be6:	6803      	ldr	r3, [r0, #0]
   b7be8:	6818      	ldr	r0, [r3, #0]
   b7bea:	b108      	cbz	r0, b7bf0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b7bec:	f7fe fcf2 	bl	b65d4 <free>
            func_();
        }
    }
   b7bf0:	4620      	mov	r0, r4
   b7bf2:	bd10      	pop	{r4, pc}

000b7bf4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b7bf4:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b7bf6:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b7bf8:	4604      	mov	r4, r0
        if (!dismissed_) {
   b7bfa:	b923      	cbnz	r3, b7c06 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b7bfc:	6803      	ldr	r3, [r0, #0]
   b7bfe:	6818      	ldr	r0, [r3, #0]
   b7c00:	b108      	cbz	r0, b7c06 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b7c02:	f7fe fce7 	bl	b65d4 <free>
    }
   b7c06:	4620      	mov	r0, r4
   b7c08:	bd10      	pop	{r4, pc}
	...

000b7c0c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b7c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b7c10:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b7c14:	b08f      	sub	sp, #60	; 0x3c
   b7c16:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b7c18:	f1b8 0f00 	cmp.w	r8, #0
   b7c1c:	d072      	beq.n	b7d04 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b7c1e:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b7c20:	2d00      	cmp	r5, #0
   b7c22:	d06f      	beq.n	b7d04 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b7c24:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b7c28:	231f      	movs	r3, #31
   b7c2a:	2200      	movs	r2, #0
   b7c2c:	21ff      	movs	r1, #255	; 0xff
   b7c2e:	4648      	mov	r0, r9
   b7c30:	f7ff fa97 	bl	b7162 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b7c34:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b7c36:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b7c38:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b7c3a:	2200      	movs	r2, #0
   b7c3c:	4619      	mov	r1, r3
   b7c3e:	4638      	mov	r0, r7
   b7c40:	f7ff fa8f 	bl	b7162 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b7c44:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b7c46:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b7c48:	d006      	beq.n	b7c58 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b7c4a:	42ae      	cmp	r6, r5
   b7c4c:	d030      	beq.n	b7cb0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b7c4e:	2400      	movs	r4, #0
    }
   b7c50:	4620      	mov	r0, r4
   b7c52:	b00f      	add	sp, #60	; 0x3c
   b7c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b7c58:	4620      	mov	r0, r4
   b7c5a:	f7fe fcb3 	bl	b65c4 <malloc>
            dismissed_(false) {
   b7c5e:	ab03      	add	r3, sp, #12
   b7c60:	9304      	str	r3, [sp, #16]
   b7c62:	2300      	movs	r3, #0
   b7c64:	4604      	mov	r4, r0
   b7c66:	9003      	str	r0, [sp, #12]
   b7c68:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b7c6c:	b970      	cbnz	r0, b7c8c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b7c6e:	2320      	movs	r3, #32
   b7c70:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b7c74:	4b24      	ldr	r3, [pc, #144]	; (b7d08 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b7c76:	9300      	str	r3, [sp, #0]
   b7c78:	4924      	ldr	r1, [pc, #144]	; (b7d0c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b7c7a:	4603      	mov	r3, r0
   b7c7c:	aa06      	add	r2, sp, #24
   b7c7e:	2032      	movs	r0, #50	; 0x32
   b7c80:	f7fe fc0c 	bl	b649c <log_message>
                    return false;
   b7c84:	a804      	add	r0, sp, #16
   b7c86:	f7ff ffaa 	bl	b7bde <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b7c8a:	e7e1      	b.n	b7c50 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b7c8c:	4602      	mov	r2, r0
   b7c8e:	21ff      	movs	r1, #255	; 0xff
   b7c90:	462b      	mov	r3, r5
   b7c92:	4648      	mov	r0, r9
   b7c94:	f7ff fa65 	bl	b7162 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b7c98:	9803      	ldr	r0, [sp, #12]
   b7c9a:	462a      	mov	r2, r5
   b7c9c:	4641      	mov	r1, r8
   b7c9e:	f002 fd6d 	bl	ba77c <memcmp>
   b7ca2:	b118      	cbz	r0, b7cac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b7ca4:	a804      	add	r0, sp, #16
   b7ca6:	f7ff ff9a 	bl	b7bde <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b7caa:	e7ce      	b.n	b7c4a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b7cac:	2401      	movs	r4, #1
   b7cae:	e7e9      	b.n	b7c84 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b7cb0:	4628      	mov	r0, r5
   b7cb2:	f7fe fc87 	bl	b65c4 <malloc>
   b7cb6:	2400      	movs	r4, #0
   b7cb8:	ab03      	add	r3, sp, #12
   b7cba:	4606      	mov	r6, r0
   b7cbc:	9003      	str	r0, [sp, #12]
   b7cbe:	9304      	str	r3, [sp, #16]
   b7cc0:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b7cc4:	b978      	cbnz	r0, b7ce6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b7cc6:	2320      	movs	r3, #32
   b7cc8:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b7ccc:	4b0e      	ldr	r3, [pc, #56]	; (b7d08 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b7cce:	9300      	str	r3, [sp, #0]
   b7cd0:	490e      	ldr	r1, [pc, #56]	; (b7d0c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b7cd2:	4603      	mov	r3, r0
   b7cd4:	aa06      	add	r2, sp, #24
   b7cd6:	2032      	movs	r0, #50	; 0x32
   b7cd8:	f7fe fbe0 	bl	b649c <log_message>
                    return false;
   b7cdc:	4634      	mov	r4, r6
   b7cde:	a804      	add	r0, sp, #16
   b7ce0:	f7ff ff88 	bl	b7bf4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b7ce4:	e7b4      	b.n	b7c50 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b7ce6:	4602      	mov	r2, r0
   b7ce8:	21ff      	movs	r1, #255	; 0xff
   b7cea:	462b      	mov	r3, r5
   b7cec:	4638      	mov	r0, r7
   b7cee:	f7ff fa38 	bl	b7162 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b7cf2:	9803      	ldr	r0, [sp, #12]
   b7cf4:	462a      	mov	r2, r5
   b7cf6:	4641      	mov	r1, r8
   b7cf8:	f002 fd40 	bl	ba77c <memcmp>
   b7cfc:	2800      	cmp	r0, #0
   b7cfe:	d1ee      	bne.n	b7cde <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b7d00:	2401      	movs	r4, #1
   b7d02:	e7ec      	b.n	b7cde <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b7d04:	2401      	movs	r4, #1
   b7d06:	e7a3      	b.n	b7c50 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b7d08:	000bb15c 	.word	0x000bb15c
   b7d0c:	000bb0db 	.word	0x000bb0db

000b7d10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7d10:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7d12:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7d14:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7d16:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7d18:	dd03      	ble.n	b7d22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7d1a:	f7fe fc63 	bl	b65e4 <realloc>
            if (!d) {
   b7d1e:	b918      	cbnz	r0, b7d28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7d20:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7d22:	f7fe fc57 	bl	b65d4 <free>
        T* d = nullptr;
   b7d26:	2000      	movs	r0, #0
        data_ = d;
   b7d28:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7d2a:	60a5      	str	r5, [r4, #8]
        return true;
   b7d2c:	2001      	movs	r0, #1
   b7d2e:	e7f7      	b.n	b7d20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7d30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7d30:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7d32:	6883      	ldr	r3, [r0, #8]
   b7d34:	428b      	cmp	r3, r1
   b7d36:	da02      	bge.n	b7d3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7d38:	f7ff ffea 	bl	b7d10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7d3c:	bd08      	pop	{r3, pc}
    return true;
   b7d3e:	2001      	movs	r0, #1
   b7d40:	e7fc      	b.n	b7d3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7d42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7d42:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b7d44:	2300      	movs	r3, #0
   b7d46:	e9c0 3300 	strd	r3, r3, [r0]
   b7d4a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7d4c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7d4e:	6849      	ldr	r1, [r1, #4]
   b7d50:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7d52:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7d54:	dd10      	ble.n	b7d78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b7d56:	f7ff ffdb 	bl	b7d10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7d5a:	b168      	cbz	r0, b7d78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7d5c:	e9d5 3100 	ldrd	r3, r1, [r5]
   b7d60:	6822      	ldr	r2, [r4, #0]
   b7d62:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b7d64:	4299      	cmp	r1, r3
   b7d66:	d005      	beq.n	b7d74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b7d68:	b10a      	cbz	r2, b7d6e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b7d6a:	7818      	ldrb	r0, [r3, #0]
   b7d6c:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b7d6e:	3301      	adds	r3, #1
   b7d70:	3201      	adds	r2, #1
   b7d72:	e7f7      	b.n	b7d64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b7d74:	686b      	ldr	r3, [r5, #4]
   b7d76:	6063      	str	r3, [r4, #4]
}
   b7d78:	4620      	mov	r0, r4
   b7d7a:	bd38      	pop	{r3, r4, r5, pc}

000b7d7c <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b7d7c:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b7d7e:	680b      	ldr	r3, [r1, #0]
   b7d80:	6003      	str	r3, [r0, #0]
   b7d82:	684b      	ldr	r3, [r1, #4]
   b7d84:	6043      	str	r3, [r0, #4]
   b7d86:	4604      	mov	r4, r0
   b7d88:	460d      	mov	r5, r1
class BleAdvertisingData {
   b7d8a:	3008      	adds	r0, #8
   b7d8c:	3108      	adds	r1, #8
   b7d8e:	f7ff ffd8 	bl	b7d42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b7d92:	f105 0114 	add.w	r1, r5, #20
   b7d96:	f104 0014 	add.w	r0, r4, #20
   b7d9a:	f7ff ffd2 	bl	b7d42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b7d9e:	f895 3020 	ldrb.w	r3, [r5, #32]
   b7da2:	f884 3020 	strb.w	r3, [r4, #32]
   b7da6:	4620      	mov	r0, r4
   b7da8:	bd38      	pop	{r3, r4, r5, pc}

000b7daa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b7daa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7dac:	4604      	mov	r4, r0
   b7dae:	a801      	add	r0, sp, #4
   b7db0:	f7ff ffc7 	bl	b7d42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   b7db4:	9b01      	ldr	r3, [sp, #4]
   b7db6:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7db8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b7dba:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dbc:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7dbe:	6062      	str	r2, [r4, #4]
   b7dc0:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7dc2:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dc4:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7dc6:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7dc8:	9001      	str	r0, [sp, #4]
   b7dca:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b7dcc:	f7fe fc02 	bl	b65d4 <free>
   b7dd0:	b004      	add	sp, #16
   b7dd2:	bd10      	pop	{r4, pc}

000b7dd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7dd8:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7dda:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7ddc:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7dde:	4419      	add	r1, r3
   b7de0:	6883      	ldr	r3, [r0, #8]
   b7de2:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7de4:	4604      	mov	r4, r0
   b7de6:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7de8:	dc12      	bgt.n	b7e10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7dea:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7dec:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7dee:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7df0:	1bd2      	subs	r2, r2, r7
   b7df2:	4631      	mov	r1, r6
   b7df4:	1970      	adds	r0, r6, r5
   b7df6:	f002 fcdf 	bl	ba7b8 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7dfa:	462a      	mov	r2, r5
   b7dfc:	4641      	mov	r1, r8
   b7dfe:	4630      	mov	r0, r6
   b7e00:	f002 fccc 	bl	ba79c <memcpy>
    size_ += n;
   b7e04:	6863      	ldr	r3, [r4, #4]
   b7e06:	442b      	add	r3, r5
   b7e08:	6063      	str	r3, [r4, #4]
    return true;
   b7e0a:	2001      	movs	r0, #1
}
   b7e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7e10:	f7ff ff7e 	bl	b7d10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7e14:	2800      	cmp	r0, #0
   b7e16:	d1e8      	bne.n	b7dea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7e18:	e7f8      	b.n	b7e0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7e1a <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b7e1a:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b7e1c:	460a      	mov	r2, r1
   b7e1e:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b7e20:	b510      	push	{r4, lr}
   b7e22:	4604      	mov	r4, r0
    size_ = 0;
   b7e24:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b7e26:	b102      	cbz	r2, b7e2a <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b7e28:	b90b      	cbnz	r3, b7e2e <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b7e2a:	2000      	movs	r0, #0
}
   b7e2c:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b7e2e:	2bff      	cmp	r3, #255	; 0xff
   b7e30:	bf28      	it	cs
   b7e32:	23ff      	movcs	r3, #255	; 0xff
   b7e34:	f7ff ffce 	bl	b7dd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b7e38:	2800      	cmp	r0, #0
   b7e3a:	d0f7      	beq.n	b7e2c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b7e3c:	6860      	ldr	r0, [r4, #4]
   b7e3e:	e7f5      	b.n	b7e2c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b7e40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e42:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7e44:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7e48:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7e4a:	4604      	mov	r4, r0
   b7e4c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7e4e:	da0b      	bge.n	b7e68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7e50:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7e52:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7e54:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7e56:	1b52      	subs	r2, r2, r5
   b7e58:	1c48      	adds	r0, r1, #1
   b7e5a:	f002 fcad 	bl	ba7b8 <memmove>
    new(p) T(std::move(value));
   b7e5e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7e60:	6863      	ldr	r3, [r4, #4]
   b7e62:	3301      	adds	r3, #1
   b7e64:	6063      	str	r3, [r4, #4]
}
   b7e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7e68:	3101      	adds	r1, #1
   b7e6a:	f7ff ff51 	bl	b7d10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7e6e:	2800      	cmp	r0, #0
   b7e70:	d1ee      	bne.n	b7e50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7e72:	e7f8      	b.n	b7e66 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7e74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7e74:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7e76:	6841      	ldr	r1, [r0, #4]
   b7e78:	f7ff bfe2 	b.w	b7e40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7e7c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7e80:	4604      	mov	r4, r0
   b7e82:	461d      	mov	r5, r3
   b7e84:	460f      	mov	r7, r1
   b7e86:	ab01      	add	r3, sp, #4
   b7e88:	4690      	mov	r8, r2
   b7e8a:	460a      	mov	r2, r1
   b7e8c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7e90:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7e94:	f7fe fe2a 	bl	b6aec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7e98:	1cae      	adds	r6, r5, #2
   b7e9a:	6863      	ldr	r3, [r4, #4]
   b7e9c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7e9e:	f1b9 0f00 	cmp.w	r9, #0
   b7ea2:	d126      	bne.n	b7ef2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7ea4:	b328      	cbz	r0, b7ef2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7ea6:	4433      	add	r3, r6
   b7ea8:	1a1b      	subs	r3, r3, r0
   b7eaa:	2bff      	cmp	r3, #255	; 0xff
   b7eac:	d809      	bhi.n	b7ec2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7eae:	9901      	ldr	r1, [sp, #4]
   b7eb0:	4620      	mov	r0, r4
   b7eb2:	f7ff fc73 	bl	b779c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7eb6:	6861      	ldr	r1, [r4, #4]
   b7eb8:	4620      	mov	r0, r4
   b7eba:	4431      	add	r1, r6
   b7ebc:	f7ff ff38 	bl	b7d30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7ec0:	b918      	cbnz	r0, b7eca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7ec2:	6860      	ldr	r0, [r4, #4]
}
   b7ec4:	b003      	add	sp, #12
   b7ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7eca:	1c6a      	adds	r2, r5, #1
   b7ecc:	9901      	ldr	r1, [sp, #4]
   b7ece:	b2d2      	uxtb	r2, r2
   b7ed0:	4620      	mov	r0, r4
   b7ed2:	f7ff ffb5 	bl	b7e40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7ed6:	9901      	ldr	r1, [sp, #4]
   b7ed8:	463a      	mov	r2, r7
   b7eda:	3101      	adds	r1, #1
   b7edc:	4620      	mov	r0, r4
   b7ede:	f7ff ffaf 	bl	b7e40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7ee2:	9901      	ldr	r1, [sp, #4]
   b7ee4:	462b      	mov	r3, r5
   b7ee6:	4642      	mov	r2, r8
   b7ee8:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7eea:	4620      	mov	r0, r4
   b7eec:	f7ff ff72 	bl	b7dd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7ef0:	e7e7      	b.n	b7ec2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7ef2:	18f1      	adds	r1, r6, r3
   b7ef4:	29ff      	cmp	r1, #255	; 0xff
   b7ef6:	d8e4      	bhi.n	b7ec2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7ef8:	4620      	mov	r0, r4
   b7efa:	f7ff ff19 	bl	b7d30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7efe:	2800      	cmp	r0, #0
   b7f00:	d0df      	beq.n	b7ec2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7f02:	1c69      	adds	r1, r5, #1
   b7f04:	b2c9      	uxtb	r1, r1
   b7f06:	4620      	mov	r0, r4
   b7f08:	f7ff ffb4 	bl	b7e74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7f0c:	4639      	mov	r1, r7
   b7f0e:	4620      	mov	r0, r4
   b7f10:	f7ff ffb0 	bl	b7e74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7f14:	6861      	ldr	r1, [r4, #4]
   b7f16:	462b      	mov	r3, r5
   b7f18:	4642      	mov	r2, r8
   b7f1a:	e7e6      	b.n	b7eea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7f1c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7f1c:	b430      	push	{r4, r5}
   b7f1e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7f22:	b11a      	cbz	r2, b7f2c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7f24:	9502      	str	r5, [sp, #8]
}
   b7f26:	bc30      	pop	{r4, r5}
   b7f28:	f7ff bfa8 	b.w	b7e7c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7f2c:	6840      	ldr	r0, [r0, #4]
}
   b7f2e:	bc30      	pop	{r4, r5}
   b7f30:	4770      	bx	lr

000b7f32 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7f32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7f34:	2300      	movs	r3, #0
   b7f36:	e9c0 3300 	strd	r3, r3, [r0]
   b7f3a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7f3c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7f3e:	9300      	str	r3, [sp, #0]
   b7f40:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7f42:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7f46:	4619      	mov	r1, r3
   b7f48:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7f4c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7f4e:	f7ff ffe5 	bl	b7f1c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7f52:	4620      	mov	r0, r4
   b7f54:	b004      	add	sp, #16
   b7f56:	bd10      	pop	{r4, pc}

000b7f58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7f58:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f5c:	4604      	mov	r4, r0
   b7f5e:	460d      	mov	r5, r1
   b7f60:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7f62:	d914      	bls.n	b7f8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7f64:	4290      	cmp	r0, r2
   b7f66:	d213      	bcs.n	b7f90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7f68:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7f6c:	1a75      	subs	r5, r6, r1
   b7f6e:	f1a1 0708 	sub.w	r7, r1, #8
   b7f72:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7f74:	42b7      	cmp	r7, r6
   b7f76:	d018      	beq.n	b7faa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7f78:	b11c      	cbz	r4, b7f82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7f7a:	4631      	mov	r1, r6
   b7f7c:	4620      	mov	r0, r4
   b7f7e:	f7ff fc92 	bl	b78a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7f82:	1d30      	adds	r0, r6, #4
   b7f84:	f7ff fc99 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7f88:	3e08      	subs	r6, #8
   b7f8a:	3c08      	subs	r4, #8
   b7f8c:	e7f2      	b.n	b7f74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7f8e:	d00c      	beq.n	b7faa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7f90:	42b5      	cmp	r5, r6
   b7f92:	d00a      	beq.n	b7faa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7f94:	b11c      	cbz	r4, b7f9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7f96:	4629      	mov	r1, r5
   b7f98:	4620      	mov	r0, r4
   b7f9a:	f7ff fc84 	bl	b78a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7f9e:	1d28      	adds	r0, r5, #4
   b7fa0:	f7ff fc8b 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7fa4:	3508      	adds	r5, #8
   b7fa6:	3408      	adds	r4, #8
   b7fa8:	e7f2      	b.n	b7f90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7fac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7fae:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7fb0:	6846      	ldr	r6, [r0, #4]
   b7fb2:	4668      	mov	r0, sp
   b7fb4:	f7ff fc77 	bl	b78a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7fb8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7fbc:	429f      	cmp	r7, r3
   b7fbe:	db12      	blt.n	b7fe6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7fc0:	3701      	adds	r7, #1
        if (n > 0) {
   b7fc2:	2f00      	cmp	r7, #0
   b7fc4:	dd29      	ble.n	b801a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7fc6:	00f8      	lsls	r0, r7, #3
   b7fc8:	f7fe fafc 	bl	b65c4 <malloc>
            if (!d) {
   b7fcc:	4605      	mov	r5, r0
   b7fce:	b1f0      	cbz	r0, b800e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7fd0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7fd4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7fd8:	f7ff ffbe 	bl	b7f58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7fdc:	6820      	ldr	r0, [r4, #0]
   b7fde:	f7fe faf9 	bl	b65d4 <free>
        data_ = d;
   b7fe2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7fe4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7fe6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7fe8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7fea:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7fee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7ff2:	4631      	mov	r1, r6
   b7ff4:	f106 0008 	add.w	r0, r6, #8
   b7ff8:	f7ff ffae 	bl	b7f58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7ffc:	b11e      	cbz	r6, b8006 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7ffe:	4669      	mov	r1, sp
   b8000:	4630      	mov	r0, r6
   b8002:	f7ff fc50 	bl	b78a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b8006:	6863      	ldr	r3, [r4, #4]
   b8008:	3301      	adds	r3, #1
   b800a:	6063      	str	r3, [r4, #4]
    return true;
   b800c:	2501      	movs	r5, #1
   b800e:	a801      	add	r0, sp, #4
   b8010:	f7ff fc53 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8014:	4628      	mov	r0, r5
   b8016:	b003      	add	sp, #12
   b8018:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b801a:	2500      	movs	r5, #0
   b801c:	e7de      	b.n	b7fdc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b801e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b801e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8020:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8024:	4605      	mov	r5, r0
   b8026:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8028:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b802c:	42a6      	cmp	r6, r4
   b802e:	d005      	beq.n	b803c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8030:	4639      	mov	r1, r7
   b8032:	4620      	mov	r0, r4
   b8034:	f7ff fa91 	bl	b755a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8038:	b108      	cbz	r0, b803e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b803a:	b914      	cbnz	r4, b8042 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b803c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b803e:	3408      	adds	r4, #8
   b8040:	e7f4      	b.n	b802c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8042:	1d20      	adds	r0, r4, #4
   b8044:	f7ff fc39 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8048:	e9d5 3200 	ldrd	r3, r2, [r5]
   b804c:	f104 0108 	add.w	r1, r4, #8
   b8050:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8054:	4620      	mov	r0, r4
   b8056:	f7ff ff7f 	bl	b7f58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b805a:	686b      	ldr	r3, [r5, #4]
   b805c:	3b01      	subs	r3, #1
   b805e:	606b      	str	r3, [r5, #4]
    return true;
   b8060:	e7ec      	b.n	b803c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8064 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8068:	4605      	mov	r5, r0
   b806a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b806c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b806e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8070:	f7fe fe26 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8074:	682e      	ldr	r6, [r5, #0]
   b8076:	1ef3      	subs	r3, r6, #3
   b8078:	2b0d      	cmp	r3, #13
   b807a:	d83c      	bhi.n	b80f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b807c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8080:	0057000e 	.word	0x0057000e
   b8084:	00cf003b 	.word	0x00cf003b
   b8088:	003b003b 	.word	0x003b003b
   b808c:	003b003b 	.word	0x003b003b
   b8090:	0099003b 	.word	0x0099003b
   b8094:	00990099 	.word	0x00990099
   b8098:	00990099 	.word	0x00990099
                    BlePeerDevice peer;
   b809c:	a804      	add	r0, sp, #16
   b809e:	f7ff fa03 	bl	b74a8 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b80a2:	9b04      	ldr	r3, [sp, #16]
   b80a4:	89aa      	ldrh	r2, [r5, #12]
   b80a6:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b80a8:	6869      	ldr	r1, [r5, #4]
   b80aa:	9804      	ldr	r0, [sp, #16]
   b80ac:	3108      	adds	r1, #8
   b80ae:	3002      	adds	r0, #2
   b80b0:	f7fe fe20 	bl	b6cf4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b80b4:	a904      	add	r1, sp, #16
   b80b6:	a806      	add	r0, sp, #24
   b80b8:	f7ff fbf5 	bl	b78a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b80bc:	a906      	add	r1, sp, #24
   b80be:	f104 0018 	add.w	r0, r4, #24
   b80c2:	f7ff ff73 	bl	b7fac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b80c6:	4605      	mov	r5, r0
   b80c8:	a807      	add	r0, sp, #28
   b80ca:	f7ff fbf6 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b80ce:	b9c5      	cbnz	r5, b8102 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b80d0:	2320      	movs	r3, #32
   b80d2:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b80d6:	4b5c      	ldr	r3, [pc, #368]	; (b8248 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e4>)
   b80d8:	495c      	ldr	r1, [pc, #368]	; (b824c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b80da:	9300      	str	r3, [sp, #0]
   b80dc:	aa06      	add	r2, sp, #24
   b80de:	462b      	mov	r3, r5
   b80e0:	2001      	movs	r0, #1
   b80e2:	f7fe f9db 	bl	b649c <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b80e6:	9b04      	ldr	r3, [sp, #16]
   b80e8:	4629      	mov	r1, r5
   b80ea:	8818      	ldrh	r0, [r3, #0]
   b80ec:	f7fe f812 	bl	b6114 <hal_ble_gap_disconnect>
   b80f0:	a805      	add	r0, sp, #20
   b80f2:	f7ff fbe2 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b80f6:	a803      	add	r0, sp, #12
   b80f8:	f7fe fdf0 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b80fc:	b00e      	add	sp, #56	; 0x38
   b80fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b8102:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8104:	b123      	cbz	r3, b8110 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b8106:	a904      	add	r1, sp, #16
   b8108:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b810c:	f7ff fc5d 	bl	b79ca <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8110:	a805      	add	r0, sp, #20
   b8112:	f7ff fbd2 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b8116:	2120      	movs	r1, #32
   b8118:	2300      	movs	r3, #0
   b811a:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b811e:	4a4c      	ldr	r2, [pc, #304]	; (b8250 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
                    LOG(TRACE, "Disconnected");
   b8120:	9200      	str	r2, [sp, #0]
   b8122:	494a      	ldr	r1, [pc, #296]	; (b824c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8124:	aa06      	add	r2, sp, #24
   b8126:	2001      	movs	r0, #1
   b8128:	f7fe f9b8 	bl	b649c <log_message>
   b812c:	e7e3      	b.n	b80f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b812e:	89a9      	ldrh	r1, [r5, #12]
   b8130:	4620      	mov	r0, r4
   b8132:	f7ff f8a8 	bl	b7286 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8136:	4606      	mov	r6, r0
   b8138:	2800      	cmp	r0, #0
   b813a:	d0dc      	beq.n	b80f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b813c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b813e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8142:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8146:	8029      	strh	r1, [r5, #0]
   b8148:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b814c:	429a      	cmp	r2, r3
   b814e:	d003      	beq.n	b8158 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b8150:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8154:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8156:	e7f9      	b.n	b814c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b8158:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b815c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8160:	45b8      	cmp	r8, r7
   b8162:	d004      	beq.n	b816e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b8164:	1d38      	adds	r0, r7, #4
   b8166:	f7ff fba8 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b816a:	3708      	adds	r7, #8
   b816c:	e7f8      	b.n	b8160 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b816e:	2300      	movs	r3, #0
   b8170:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8172:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8176:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b817a:	45b8      	cmp	r8, r7
   b817c:	d004      	beq.n	b8188 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b817e:	1d38      	adds	r0, r7, #4
   b8180:	f7ff fb9b 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8184:	3708      	adds	r7, #8
   b8186:	e7f8      	b.n	b817a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b8188:	2300      	movs	r3, #0
   b818a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b818c:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b818e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8190:	b123      	cbz	r3, b819c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b8192:	4631      	mov	r1, r6
   b8194:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8198:	f7ff fc17 	bl	b79ca <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        impl->peers_.removeOne(*peer);
   b819c:	4631      	mov	r1, r6
   b819e:	f104 0018 	add.w	r0, r4, #24
   b81a2:	f7ff ff3c 	bl	b801e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b81a6:	2220      	movs	r2, #32
   b81a8:	2300      	movs	r3, #0
   b81aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b81ae:	4a29      	ldr	r2, [pc, #164]	; (b8254 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b81b0:	e7b6      	b.n	b8120 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b81b2:	89a9      	ldrh	r1, [r5, #12]
   b81b4:	4620      	mov	r0, r4
   b81b6:	f7ff f866 	bl	b7286 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b81ba:	2800      	cmp	r0, #0
   b81bc:	d09b      	beq.n	b80f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b81be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b81c0:	2b00      	cmp	r3, #0
   b81c2:	d098      	beq.n	b80f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b81c4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b81c6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b81c8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b81cc:	d001      	beq.n	b81d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x16e>
   b81ce:	2e10      	cmp	r6, #16
   b81d0:	d117      	bne.n	b8202 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x19e>
                        BlePairingEventPayload payload = {};
   b81d2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b81d4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b81d6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b81d8:	2506      	movs	r5, #6
                        };
   b81da:	f88d 3015 	strb.w	r3, [sp, #21]
   b81de:	9104      	str	r1, [sp, #16]
   b81e0:	f88d 2014 	strb.w	r2, [sp, #20]
   b81e4:	9006      	str	r0, [sp, #24]
   b81e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b81ea:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b81ec:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b81f0:	9508      	str	r5, [sp, #32]
   b81f2:	e883 0003 	stmia.w	r3, {r0, r1}
   b81f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b81f8:	a906      	add	r1, sp, #24
   b81fa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b81fe:	4798      	blx	r3
   b8200:	e779      	b.n	b80f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b8202:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8204:	bf01      	itttt	eq
   b8206:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8208:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b820a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b820e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8210:	bf0f      	iteee	eq
   b8212:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b8216:	461a      	movne	r2, r3
   b8218:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b821a:	461d      	movne	r5, r3
   b821c:	e7dd      	b.n	b81da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b821e:	89a9      	ldrh	r1, [r5, #12]
   b8220:	4620      	mov	r0, r4
   b8222:	f7ff f830 	bl	b7286 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8226:	4601      	mov	r1, r0
   b8228:	2800      	cmp	r0, #0
   b822a:	f43f af64 	beq.w	b80f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b822e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8230:	2b00      	cmp	r3, #0
   b8232:	f43f af60 	beq.w	b80f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8236:	686b      	ldr	r3, [r5, #4]
   b8238:	9306      	str	r3, [sp, #24]
   b823a:	aa06      	add	r2, sp, #24
   b823c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b823e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8242:	4798      	blx	r3
   b8244:	e757      	b.n	b80f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8246:	bf00      	nop
   b8248:	000bb177 	.word	0x000bb177
   b824c:	000bb0db 	.word	0x000bb0db
   b8250:	000ba9e1 	.word	0x000ba9e1
   b8254:	000bb19d 	.word	0x000bb19d

000b8258 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8258:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b825a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b825c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b825e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8260:	dd05      	ble.n	b826e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b8262:	2114      	movs	r1, #20
   b8264:	4369      	muls	r1, r5
   b8266:	f7fe f9bd 	bl	b65e4 <realloc>
            if (!d) {
   b826a:	b918      	cbnz	r0, b8274 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b826c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b826e:	f7fe f9b1 	bl	b65d4 <free>
        T* d = nullptr;
   b8272:	2000      	movs	r0, #0
        data_ = d;
   b8274:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8276:	60a5      	str	r5, [r4, #8]
        return true;
   b8278:	2001      	movs	r0, #1
   b827a:	e7f7      	b.n	b826c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b827c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b827c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b8280:	2400      	movs	r4, #0
   b8282:	e9c0 4400 	strd	r4, r4, [r0]
   b8286:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8288:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b828a:	6849      	ldr	r1, [r1, #4]
   b828c:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b828e:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8290:	dd1a      	ble.n	b82c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b8292:	f7ff ffe1 	bl	b8258 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8296:	b1b8      	cbz	r0, b82c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8298:	e9d8 9300 	ldrd	r9, r3, [r8]
   b829c:	f04f 0c14 	mov.w	ip, #20
   b82a0:	f8d7 e000 	ldr.w	lr, [r7]
   b82a4:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b82a8:	eb09 0504 	add.w	r5, r9, r4
   b82ac:	45ac      	cmp	ip, r5
   b82ae:	d008      	beq.n	b82c2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b82b0:	eb1e 0604 	adds.w	r6, lr, r4
   b82b4:	bf1f      	itttt	ne
   b82b6:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b82b8:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b82ba:	682b      	ldrne	r3, [r5, #0]
   b82bc:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b82be:	3414      	adds	r4, #20
   b82c0:	e7f2      	b.n	b82a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b82c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b82c6:	607b      	str	r3, [r7, #4]
}
   b82c8:	4638      	mov	r0, r7
   b82ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b82ce <_ZN8particle13BleScanFilteraSERKS0_.isra.0>:
class BleScanFilter {
   b82ce:	b530      	push	{r4, r5, lr}
   b82d0:	b085      	sub	sp, #20
   b82d2:	4604      	mov	r4, r0
   b82d4:	a801      	add	r0, sp, #4
   b82d6:	460d      	mov	r5, r1
   b82d8:	f7ff fb80 	bl	b79dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
      __a = _GLIBCXX_MOVE(__b);
   b82dc:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b82de:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b82e0:	6022      	str	r2, [r4, #0]
   b82e2:	9a02      	ldr	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b82e4:	9301      	str	r3, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b82e6:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b82e8:	6062      	str	r2, [r4, #4]
   b82ea:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b82ec:	9302      	str	r3, [sp, #8]
   b82ee:	a801      	add	r0, sp, #4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b82f0:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b82f2:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b82f4:	9303      	str	r3, [sp, #12]
   b82f6:	f7ff fa0e 	bl	b7716 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
   b82fa:	f105 010c 	add.w	r1, r5, #12
   b82fe:	a801      	add	r0, sp, #4
   b8300:	f7ff ffbc 	bl	b827c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
      __a = _GLIBCXX_MOVE(__b);
   b8304:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8306:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8308:	60e2      	str	r2, [r4, #12]
   b830a:	9a02      	ldr	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b830c:	9301      	str	r3, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b830e:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8310:	6122      	str	r2, [r4, #16]
   b8312:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8314:	9302      	str	r3, [sp, #8]
   b8316:	a801      	add	r0, sp, #4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8318:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b831a:	6162      	str	r2, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b831c:	9303      	str	r3, [sp, #12]
   b831e:	f7ff fa0c 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b8322:	f105 0118 	add.w	r1, r5, #24
   b8326:	a801      	add	r0, sp, #4
   b8328:	f7ff fbef 	bl	b7b0a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
      __a = _GLIBCXX_MOVE(__b);
   b832c:	9b01      	ldr	r3, [sp, #4]
   b832e:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8330:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   b8332:	61a3      	str	r3, [r4, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8334:	69e3      	ldr	r3, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   b8336:	61e2      	str	r2, [r4, #28]
   b8338:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b833a:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b833c:	6a23      	ldr	r3, [r4, #32]
      __a = _GLIBCXX_MOVE(__b);
   b833e:	6222      	str	r2, [r4, #32]
      __b = _GLIBCXX_MOVE(__tmp);
   b8340:	9303      	str	r3, [sp, #12]
   b8342:	9001      	str	r0, [sp, #4]
    ::free(ptr);
   b8344:	f7fe f946 	bl	b65d4 <free>
   b8348:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b834c:	a801      	add	r0, sp, #4
   b834e:	f7ff fc27 	bl	b7ba0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
      __a = _GLIBCXX_MOVE(__b);
   b8352:	9b01      	ldr	r3, [sp, #4]
   b8354:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8356:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b8358:	6263      	str	r3, [r4, #36]	; 0x24
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b835a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   b835c:	62a2      	str	r2, [r4, #40]	; 0x28
   b835e:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8360:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8362:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   b8364:	62e2      	str	r2, [r4, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b8366:	9303      	str	r3, [sp, #12]
   b8368:	9001      	str	r0, [sp, #4]
   b836a:	f7fe f933 	bl	b65d4 <free>
   b836e:	f995 3030 	ldrsb.w	r3, [r5, #48]	; 0x30
   b8372:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b8376:	f995 3031 	ldrsb.w	r3, [r5, #49]	; 0x31
   b837a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   b837e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   b8380:	6363      	str	r3, [r4, #52]	; 0x34
   b8382:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8384:	63a3      	str	r3, [r4, #56]	; 0x38
   b8386:	b005      	add	sp, #20
   b8388:	bd30      	pop	{r4, r5, pc}

000b838a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b838a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b838e:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b8392:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8394:	6883      	ldr	r3, [r0, #8]
   b8396:	19e9      	adds	r1, r5, r7
   b8398:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b839a:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b839c:	dc17      	bgt.n	b83ce <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b839e:	2314      	movs	r3, #20
   b83a0:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b83a2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b83a4:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b83a6:	fb03 f907 	mul.w	r9, r3, r7
   b83aa:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b83ac:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b83ae:	1b52      	subs	r2, r2, r5
   b83b0:	4631      	mov	r1, r6
   b83b2:	eb06 0009 	add.w	r0, r6, r9
   b83b6:	f002 f9ff 	bl	ba7b8 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b83ba:	464a      	mov	r2, r9
   b83bc:	4641      	mov	r1, r8
   b83be:	4630      	mov	r0, r6
   b83c0:	f002 f9ec 	bl	ba79c <memcpy>
    size_ += n;
   b83c4:	6863      	ldr	r3, [r4, #4]
   b83c6:	443b      	add	r3, r7
   b83c8:	6063      	str	r3, [r4, #4]
}
   b83ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b83ce:	f7ff ff43 	bl	b8258 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b83d2:	2800      	cmp	r0, #0
   b83d4:	d1e3      	bne.n	b839e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b83d6:	e7f8      	b.n	b83ca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b83d8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b83d8:	b082      	sub	sp, #8
   b83da:	b570      	push	{r4, r5, r6, lr}
   b83dc:	460c      	mov	r4, r1
   b83de:	a904      	add	r1, sp, #16
   b83e0:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b83e4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b83e8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b83ea:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b83ec:	da17      	bge.n	b841e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b83ee:	2314      	movs	r3, #20
   b83f0:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b83f4:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b83f6:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b83f8:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b83fa:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b83fc:	1a52      	subs	r2, r2, r1
   b83fe:	18e0      	adds	r0, r4, r3
   b8400:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b8402:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8404:	f002 f9d8 	bl	ba7b8 <memmove>
    new(p) T(std::move(value));
   b8408:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b840a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b840c:	6833      	ldr	r3, [r6, #0]
   b840e:	6023      	str	r3, [r4, #0]
    ++size_;
   b8410:	686b      	ldr	r3, [r5, #4]
   b8412:	3301      	adds	r3, #1
   b8414:	606b      	str	r3, [r5, #4]
}
   b8416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b841a:	b002      	add	sp, #8
   b841c:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b841e:	3101      	adds	r1, #1
   b8420:	f7ff ff1a 	bl	b8258 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8424:	2800      	cmp	r0, #0
   b8426:	d1e2      	bne.n	b83ee <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b8428:	e7f5      	b.n	b8416 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b842a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b842a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b842e:	2400      	movs	r4, #0
   b8430:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8432:	1e93      	subs	r3, r2, #2
   b8434:	e9c0 4400 	strd	r4, r4, [r0]
   b8438:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b843a:	4605      	mov	r5, r0
   b843c:	460f      	mov	r7, r1
   b843e:	4690      	mov	r8, r2
   b8440:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8442:	9305      	str	r3, [sp, #20]
    return size_;
   b8444:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b8446:	428c      	cmp	r4, r1
   b8448:	da72      	bge.n	b8530 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b844a:	6838      	ldr	r0, [r7, #0]
   b844c:	ab07      	add	r3, sp, #28
   b844e:	4642      	mov	r2, r8
   b8450:	1b09      	subs	r1, r1, r4
   b8452:	4420      	add	r0, r4
   b8454:	f7fe fb4a 	bl	b6aec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b8458:	4606      	mov	r6, r0
   b845a:	2800      	cmp	r0, #0
   b845c:	d068      	beq.n	b8530 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b845e:	9b05      	ldr	r3, [sp, #20]
   b8460:	2b01      	cmp	r3, #1
   b8462:	d82f      	bhi.n	b84c4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8464:	f1a0 0b02 	sub.w	fp, r0, #2
   b8468:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b846c:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b8470:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8474:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8476:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8478:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b847a:	d055      	beq.n	b8528 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b847c:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b847e:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b8482:	4413      	add	r3, r2
   b8484:	a808      	add	r0, sp, #32
   b8486:	78d9      	ldrb	r1, [r3, #3]
   b8488:	789b      	ldrb	r3, [r3, #2]
   b848a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b848e:	f7fe fd1a 	bl	b6ec6 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b8492:	f10d 0e20 	add.w	lr, sp, #32
   b8496:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b849a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b849e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b84a2:	f8de 3000 	ldr.w	r3, [lr]
   b84a6:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b84aa:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b84ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b84b2:	ab0d      	add	r3, sp, #52	; 0x34
   b84b4:	cb0c      	ldmia	r3, {r2, r3}
   b84b6:	6869      	ldr	r1, [r5, #4]
   b84b8:	4628      	mov	r0, r5
   b84ba:	f7ff ff8d 	bl	b83d8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b84be:	f109 0901 	add.w	r9, r9, #1
   b84c2:	e7d7      	b.n	b8474 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b84c4:	f1a8 0306 	sub.w	r3, r8, #6
   b84c8:	2b01      	cmp	r3, #1
   b84ca:	d82d      	bhi.n	b8528 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b84cc:	f1a0 0b02 	sub.w	fp, r0, #2
   b84d0:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b84d4:	f04f 0900 	mov.w	r9, #0
   b84d8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b84dc:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b84de:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b84e0:	d022      	beq.n	b8528 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b84e2:	3302      	adds	r3, #2
    return data_[i];
   b84e4:	6839      	ldr	r1, [r7, #0]
   b84e6:	4423      	add	r3, r4
   b84e8:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b84ec:	2201      	movs	r2, #1
   b84ee:	4419      	add	r1, r3
   b84f0:	a808      	add	r0, sp, #32
   b84f2:	f7fe fcc9 	bl	b6e88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b84f6:	f10d 0e20 	add.w	lr, sp, #32
   b84fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b84fe:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8502:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8506:	f8de 3000 	ldr.w	r3, [lr]
   b850a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b850e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b8512:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b8516:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b851a:	6869      	ldr	r1, [r5, #4]
   b851c:	4628      	mov	r0, r5
   b851e:	f7ff ff5b 	bl	b83d8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b8522:	f109 0901 	add.w	r9, r9, #1
   b8526:	e7d9      	b.n	b84dc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b8528:	9b07      	ldr	r3, [sp, #28]
   b852a:	441c      	add	r4, r3
   b852c:	4434      	add	r4, r6
   b852e:	e789      	b.n	b8444 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b8530:	4628      	mov	r0, r5
   b8532:	b013      	add	sp, #76	; 0x4c
   b8534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8538 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b8538:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b853a:	2300      	movs	r3, #0
   b853c:	b085      	sub	sp, #20
   b853e:	e9c0 3300 	strd	r3, r3, [r0]
   b8542:	6083      	str	r3, [r0, #8]
   b8544:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b8546:	2202      	movs	r2, #2
   b8548:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b854a:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b854c:	f7ff ff6d 	bl	b842a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8550:	a901      	add	r1, sp, #4
   b8552:	4620      	mov	r0, r4
   b8554:	f7ff ff19 	bl	b838a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8558:	a801      	add	r0, sp, #4
   b855a:	f7ff f8ee 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b855e:	2202      	movs	r2, #2
   b8560:	4629      	mov	r1, r5
   b8562:	a801      	add	r0, sp, #4
   b8564:	f7ff ff61 	bl	b842a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8568:	a901      	add	r1, sp, #4
   b856a:	4620      	mov	r0, r4
   b856c:	f7ff ff0d 	bl	b838a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8570:	a801      	add	r0, sp, #4
   b8572:	f7ff f8e2 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b8576:	2203      	movs	r2, #3
   b8578:	4629      	mov	r1, r5
   b857a:	a801      	add	r0, sp, #4
   b857c:	f7ff ff55 	bl	b842a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8580:	a901      	add	r1, sp, #4
   b8582:	4620      	mov	r0, r4
   b8584:	f7ff ff01 	bl	b838a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8588:	a801      	add	r0, sp, #4
   b858a:	f7ff f8d6 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b858e:	2206      	movs	r2, #6
   b8590:	4629      	mov	r1, r5
   b8592:	a801      	add	r0, sp, #4
   b8594:	f7ff ff49 	bl	b842a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8598:	a901      	add	r1, sp, #4
   b859a:	4620      	mov	r0, r4
   b859c:	f7ff fef5 	bl	b838a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b85a0:	a801      	add	r0, sp, #4
   b85a2:	f7ff f8ca 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b85a6:	2207      	movs	r2, #7
   b85a8:	4629      	mov	r1, r5
   b85aa:	a801      	add	r0, sp, #4
   b85ac:	f7ff ff3d 	bl	b842a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b85b0:	a901      	add	r1, sp, #4
   b85b2:	4620      	mov	r0, r4
   b85b4:	f7ff fee9 	bl	b838a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b85b8:	a801      	add	r0, sp, #4
   b85ba:	f7ff f8be 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b85be:	4620      	mov	r0, r4
   b85c0:	b005      	add	sp, #20
   b85c2:	bd30      	pop	{r4, r5, pc}

000b85c4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b85c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b85c8:	b085      	sub	sp, #20
   b85ca:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b85cc:	4601      	mov	r1, r0
   b85ce:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b85d0:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b85d2:	f7ff ffb1 	bl	b8538 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b85d6:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b85d8:	9b02      	ldr	r3, [sp, #8]
   b85da:	f04f 0e14 	mov.w	lr, #20
   b85de:	fb0e 6c03 	mla	ip, lr, r3, r6
   b85e2:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b85e4:	45b4      	cmp	ip, r6
   b85e6:	d00d      	beq.n	b8604 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b85e8:	45b9      	cmp	r9, r7
   b85ea:	f106 0614 	add.w	r6, r6, #20
   b85ee:	d009      	beq.n	b8604 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b85f0:	f1a6 0514 	sub.w	r5, r6, #20
   b85f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b85f6:	fb0e 8407 	mla	r4, lr, r7, r8
   b85fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b85fc:	682b      	ldr	r3, [r5, #0]
   b85fe:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b8600:	3701      	adds	r7, #1
   b8602:	e7ef      	b.n	b85e4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b8604:	a801      	add	r0, sp, #4
   b8606:	f7ff f898 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b860a:	4638      	mov	r0, r7
   b860c:	b005      	add	sp, #20
   b860e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8612 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b8612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8616:	b08b      	sub	sp, #44	; 0x2c
   b8618:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b861a:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b861e:	a801      	add	r0, sp, #4
   b8620:	f7ff fe2c 	bl	b827c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b8624:	9b02      	ldr	r3, [sp, #8]
   b8626:	2b00      	cmp	r3, #0
   b8628:	dd4a      	ble.n	b86c0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b862a:	f104 0114 	add.w	r1, r4, #20
   b862e:	a804      	add	r0, sp, #16
   b8630:	f7ff ff82 	bl	b8538 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b8634:	f104 0108 	add.w	r1, r4, #8
   b8638:	a807      	add	r0, sp, #28
   b863a:	f7ff ff7d 	bl	b8538 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b863e:	9d05      	ldr	r5, [sp, #20]
   b8640:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b8642:	2d00      	cmp	r5, #0
   b8644:	dc01      	bgt.n	b864a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b8646:	2e00      	cmp	r6, #0
   b8648:	dd38      	ble.n	b86bc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b864a:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b864c:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b864e:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b8652:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b8656:	2314      	movs	r3, #20
   b8658:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b865c:	fb03 8505 	mla	r5, r3, r5, r8
   b8660:	fb03 9606 	mla	r6, r3, r6, r9
   b8664:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b8666:	45ba      	cmp	sl, r7
   b8668:	d028      	beq.n	b86bc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b866a:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b866c:	45ab      	cmp	fp, r5
   b866e:	d015      	beq.n	b869c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b8670:	4659      	mov	r1, fp
   b8672:	4650      	mov	r0, sl
   b8674:	f7fe fc69 	bl	b6f4a <_ZNK8particle7BleUuideqERKS0_>
   b8678:	f10b 0b14 	add.w	fp, fp, #20
   b867c:	4604      	mov	r4, r0
   b867e:	2800      	cmp	r0, #0
   b8680:	d0f4      	beq.n	b866c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b8682:	a807      	add	r0, sp, #28
   b8684:	f7ff f859 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b8688:	a804      	add	r0, sp, #16
   b868a:	f7ff f856 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b868e:	a801      	add	r0, sp, #4
   b8690:	f7ff f853 	bl	b773a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b8694:	4620      	mov	r0, r4
   b8696:	b00b      	add	sp, #44	; 0x2c
   b8698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b869c:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b869e:	45b3      	cmp	fp, r6
   b86a0:	d009      	beq.n	b86b6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b86a2:	4659      	mov	r1, fp
   b86a4:	4650      	mov	r0, sl
   b86a6:	f7fe fc50 	bl	b6f4a <_ZNK8particle7BleUuideqERKS0_>
   b86aa:	f10b 0b14 	add.w	fp, fp, #20
   b86ae:	4604      	mov	r4, r0
   b86b0:	2800      	cmp	r0, #0
   b86b2:	d0f4      	beq.n	b869e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b86b4:	e7e5      	b.n	b8682 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b86b6:	f10a 0a14 	add.w	sl, sl, #20
   b86ba:	e7d4      	b.n	b8666 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b86bc:	2400      	movs	r4, #0
   b86be:	e7e0      	b.n	b8682 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b86c0:	2401      	movs	r4, #1
   b86c2:	e7e4      	b.n	b868e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b86c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b86c4:	b513      	push	{r0, r1, r4, lr}
   b86c6:	460b      	mov	r3, r1
   b86c8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b86ca:	e9d0 0100 	ldrd	r0, r1, [r0]
   b86ce:	466c      	mov	r4, sp
   b86d0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b86d4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b86d8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b86dc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b86e0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b86e4:	b002      	add	sp, #8
   b86e6:	bd10      	pop	{r4, pc}

000b86e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b86e8:	b538      	push	{r3, r4, r5, lr}
   b86ea:	4605      	mov	r5, r0
   b86ec:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b86ee:	f7ff ffe9 	bl	b86c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b86f2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b86f4:	68a2      	ldr	r2, [r4, #8]
   b86f6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b86f8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b86fa:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b86fc:	68e2      	ldr	r2, [r4, #12]
   b86fe:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8700:	60e3      	str	r3, [r4, #12]
      }
   b8702:	bd38      	pop	{r3, r4, r5, pc}

000b8704 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b8704:	b530      	push	{r4, r5, lr}
   b8706:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b8708:	2300      	movs	r3, #0
   b870a:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b870c:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b870e:	4605      	mov	r5, r0
   b8710:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b8712:	b133      	cbz	r3, b8722 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8714:	2202      	movs	r2, #2
   b8716:	4668      	mov	r0, sp
   b8718:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b871a:	68e3      	ldr	r3, [r4, #12]
   b871c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b871e:	68a3      	ldr	r3, [r4, #8]
   b8720:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b8722:	4629      	mov	r1, r5
   b8724:	4668      	mov	r0, sp
   b8726:	f7ff ffdf 	bl	b86e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b872a:	4668      	mov	r0, sp
   b872c:	f7fe fa7b 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
      }
   b8730:	b005      	add	sp, #20
   b8732:	bd30      	pop	{r4, r5, pc}

000b8734 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b8734:	b538      	push	{r3, r4, r5, lr}
   b8736:	460d      	mov	r5, r1
      { return _M_ptr; }
   b8738:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b873a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b873c:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b873e:	b123      	cbz	r3, b874a <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b8740:	6828      	ldr	r0, [r5, #0]
   b8742:	314c      	adds	r1, #76	; 0x4c
   b8744:	304c      	adds	r0, #76	; 0x4c
   b8746:	f7ff ffdd 	bl	b8704 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b874a:	4620      	mov	r0, r4
   b874c:	682b      	ldr	r3, [r5, #0]
   b874e:	f840 3b04 	str.w	r3, [r0], #4
   b8752:	6869      	ldr	r1, [r5, #4]
   b8754:	f7fe fa8f 	bl	b6c76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b8758:	4620      	mov	r0, r4
   b875a:	bd38      	pop	{r3, r4, r5, pc}

000b875c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b875c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8760:	4604      	mov	r4, r0
   b8762:	b087      	sub	sp, #28
    WiringBleLock lk;
   b8764:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b8766:	460e      	mov	r6, r1
   b8768:	4617      	mov	r7, r2
    WiringBleLock lk;
   b876a:	f7fe faa9 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b876e:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b8770:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b8774:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b8778:	4544      	cmp	r4, r8
   b877a:	46a1      	mov	r9, r4
   b877c:	d016      	beq.n	b87ac <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b877e:	4621      	mov	r1, r4
   b8780:	a801      	add	r0, sp, #4
   b8782:	f7fe fdab 	bl	b72dc <_ZNK8particle17BleCharacteristic4UUIDEv>
   b8786:	4639      	mov	r1, r7
   b8788:	a801      	add	r0, sp, #4
   b878a:	f7fe fbde 	bl	b6f4a <_ZNK8particle7BleUuideqERKS0_>
   b878e:	3408      	adds	r4, #8
   b8790:	4605      	mov	r5, r0
   b8792:	2800      	cmp	r0, #0
   b8794:	d0f0      	beq.n	b8778 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b8796:	4649      	mov	r1, r9
   b8798:	4630      	mov	r0, r6
   b879a:	f7ff ffcb 	bl	b8734 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b879e:	4668      	mov	r0, sp
   b87a0:	f7fe fa9c 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b87a4:	4628      	mov	r0, r5
   b87a6:	b007      	add	sp, #28
   b87a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b87ac:	2500      	movs	r5, #0
   b87ae:	e7f6      	b.n	b879e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b87b0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b87b0:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b87b2:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b87b4:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b87b6:	344c      	adds	r4, #76	; 0x4c
   b87b8:	b1b9      	cbz	r1, b87ea <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b87ba:	e9cd 1200 	strd	r1, r2, [sp]
   b87be:	a802      	add	r0, sp, #8
   b87c0:	4669      	mov	r1, sp
   b87c2:	f7ff f839 	bl	b7838 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b87c6:	2300      	movs	r3, #0
	__x.swap(*this);
   b87c8:	a906      	add	r1, sp, #24
   b87ca:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b87cc:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b87ce:	f7ff ff8b 	bl	b86e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b87d2:	4621      	mov	r1, r4
   b87d4:	a806      	add	r0, sp, #24
   b87d6:	f7ff ff87 	bl	b86e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b87da:	a806      	add	r0, sp, #24
   b87dc:	f7fe fa23 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
   b87e0:	a802      	add	r0, sp, #8
   b87e2:	f7fe fa20 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
}
   b87e6:	b00a      	add	sp, #40	; 0x28
   b87e8:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b87ea:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b87ec:	e7eb      	b.n	b87c6 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b87ee <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b87ee:	b570      	push	{r4, r5, r6, lr}
   b87f0:	4604      	mov	r4, r0
   b87f2:	b08c      	sub	sp, #48	; 0x30
   b87f4:	460e      	mov	r6, r1
   b87f6:	9201      	str	r2, [sp, #4]
   b87f8:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b87fa:	f7fe fd0f 	bl	b721c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b87fe:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8800:	9901      	ldr	r1, [sp, #4]
   b8802:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8806:	f7fe f8c6 	bl	b6996 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b880a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b880e:	b1cd      	cbz	r5, b8844 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8810:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8812:	9502      	str	r5, [sp, #8]
   b8814:	a902      	add	r1, sp, #8
   b8816:	a804      	add	r0, sp, #16
   b8818:	9303      	str	r3, [sp, #12]
   b881a:	f7ff f80d 	bl	b7838 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b881e:	2300      	movs	r3, #0
	__x.swap(*this);
   b8820:	a908      	add	r1, sp, #32
   b8822:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8824:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8826:	f7ff ff5f 	bl	b86e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b882a:	4631      	mov	r1, r6
   b882c:	a808      	add	r0, sp, #32
   b882e:	f7ff ff5b 	bl	b86e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8832:	a808      	add	r0, sp, #32
   b8834:	f7fe f9f7 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
   b8838:	a804      	add	r0, sp, #16
   b883a:	f7fe f9f4 	bl	b6c26 <_ZNSt14_Function_baseD1Ev>
    }
   b883e:	4620      	mov	r0, r4
   b8840:	b00c      	add	sp, #48	; 0x30
   b8842:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8844:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b8846:	e7ea      	b.n	b881e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>

000b8848 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b884c:	b087      	sub	sp, #28
   b884e:	461d      	mov	r5, r3
   b8850:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b8854:	4680      	mov	r8, r0
   b8856:	468b      	mov	fp, r1
   b8858:	4692      	mov	sl, r2
   b885a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b885c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b885e:	2200      	movs	r2, #0
   b8860:	2068      	movs	r0, #104	; 0x68
   b8862:	9102      	str	r1, [sp, #8]
   b8864:	9204      	str	r2, [sp, #16]
   b8866:	f7fc fa3a 	bl	b4cde <_Znwj>
	  auto __pi = ::new (__mem)
   b886a:	1e06      	subs	r6, r0, #0
   b886c:	f106 090c 	add.w	r9, r6, #12
   b8870:	d018      	beq.n	b88a4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8872:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8874:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b8876:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b887a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b887c:	4a15      	ldr	r2, [pc, #84]	; (b88d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b887e:	f847 2b20 	str.w	r2, [r7], #32
   b8882:	9b03      	ldr	r3, [sp, #12]
   b8884:	9100      	str	r1, [sp, #0]
   b8886:	465a      	mov	r2, fp
   b8888:	4651      	mov	r1, sl
   b888a:	4648      	mov	r0, r9
   b888c:	f7ff ffaf 	bl	b87ee <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8892:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8894:	682b      	ldr	r3, [r5, #0]
   b8896:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b889a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b889e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b88a0:	6823      	ldr	r3, [r4, #0]
   b88a2:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b88a4:	a904      	add	r1, sp, #16
   b88a6:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b88a8:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b88ac:	f7ff f87c 	bl	b79a8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b88b0:	a805      	add	r0, sp, #20
   b88b2:	f7ff f802 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b88b6:	f8d8 3000 	ldr.w	r3, [r8]
   b88ba:	b93b      	cbnz	r3, b88cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b88bc:	4a06      	ldr	r2, [pc, #24]	; (b88d8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b88be:	4907      	ldr	r1, [pc, #28]	; (b88dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b88c0:	200a      	movs	r0, #10
}
   b88c2:	b007      	add	sp, #28
   b88c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b88c8:	f7fd bde0 	b.w	b648c <panic_>
}
   b88cc:	b007      	add	sp, #28
   b88ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b88d2:	bf00      	nop
   b88d4:	000bb30c 	.word	0x000bb30c
   b88d8:	000b6091 	.word	0x000b6091
   b88dc:	000bb0c4 	.word	0x000bb0c4

000b88e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b88e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b88e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b88e4:	4604      	mov	r4, r0
   b88e6:	460d      	mov	r5, r1
   b88e8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b88ea:	d914      	bls.n	b8916 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b88ec:	4290      	cmp	r0, r2
   b88ee:	d213      	bcs.n	b8918 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b88f0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b88f4:	1a75      	subs	r5, r6, r1
   b88f6:	f1a1 0708 	sub.w	r7, r1, #8
   b88fa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b88fc:	42b7      	cmp	r7, r6
   b88fe:	d018      	beq.n	b8932 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8900:	b11c      	cbz	r4, b890a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8902:	4631      	mov	r1, r6
   b8904:	4620      	mov	r0, r4
   b8906:	f7fe ffc4 	bl	b7892 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b890a:	1d30      	adds	r0, r6, #4
   b890c:	f7fe ffd5 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8910:	3e08      	subs	r6, #8
   b8912:	3c08      	subs	r4, #8
   b8914:	e7f2      	b.n	b88fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8916:	d00c      	beq.n	b8932 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8918:	42b5      	cmp	r5, r6
   b891a:	d00a      	beq.n	b8932 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b891c:	b11c      	cbz	r4, b8926 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b891e:	4629      	mov	r1, r5
   b8920:	4620      	mov	r0, r4
   b8922:	f7fe ffb6 	bl	b7892 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8926:	1d28      	adds	r0, r5, #4
   b8928:	f7fe ffc7 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b892c:	3508      	adds	r5, #8
   b892e:	3408      	adds	r4, #8
   b8930:	e7f2      	b.n	b8918 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8934 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8934:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8936:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8938:	4605      	mov	r5, r0
        if (n > 0) {
   b893a:	dd11      	ble.n	b8960 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b893c:	00f0      	lsls	r0, r6, #3
   b893e:	f7fd fe41 	bl	b65c4 <malloc>
            if (!d) {
   b8942:	4604      	mov	r4, r0
   b8944:	b158      	cbz	r0, b895e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8946:	e9d5 1200 	ldrd	r1, r2, [r5]
   b894a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b894e:	f7ff ffc7 	bl	b88e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8952:	6828      	ldr	r0, [r5, #0]
   b8954:	f7fd fe3e 	bl	b65d4 <free>
        data_ = d;
   b8958:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b895a:	60ae      	str	r6, [r5, #8]
        return true;
   b895c:	2001      	movs	r0, #1
    }
   b895e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8960:	2400      	movs	r4, #0
   b8962:	e7f6      	b.n	b8952 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8964 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b8968:	2300      	movs	r3, #0
   b896a:	e9c0 3300 	strd	r3, r3, [r0]
   b896e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8970:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8972:	6849      	ldr	r1, [r1, #4]
   b8974:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8976:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8978:	dd13      	ble.n	b89a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b897a:	f7ff ffdb 	bl	b8934 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b897e:	b180      	cbz	r0, b89a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8980:	e9d5 6300 	ldrd	r6, r3, [r5]
   b8984:	6827      	ldr	r7, [r4, #0]
   b8986:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b898a:	45b0      	cmp	r8, r6
   b898c:	d007      	beq.n	b899e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b898e:	b11f      	cbz	r7, b8998 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b8990:	4631      	mov	r1, r6
   b8992:	4638      	mov	r0, r7
   b8994:	f7fe ff7d 	bl	b7892 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b8998:	3608      	adds	r6, #8
   b899a:	3708      	adds	r7, #8
   b899c:	e7f5      	b.n	b898a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b899e:	686b      	ldr	r3, [r5, #4]
   b89a0:	6063      	str	r3, [r4, #4]
}
   b89a2:	4620      	mov	r0, r4
   b89a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b89a8 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b89a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b89aa:	460d      	mov	r5, r1
   b89ac:	4604      	mov	r4, r0
    WiringBleLock lk;
   b89ae:	a801      	add	r0, sp, #4
   b89b0:	f7fe f986 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b89b4:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b89b6:	4620      	mov	r0, r4
   b89b8:	310c      	adds	r1, #12
   b89ba:	f7ff ffd3 	bl	b8964 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b89be:	a801      	add	r0, sp, #4
   b89c0:	f7fe f98c 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b89c4:	4620      	mov	r0, r4
   b89c6:	b003      	add	sp, #12
   b89c8:	bd30      	pop	{r4, r5, pc}

000b89ca <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b89ca:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b89cc:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b89ce:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b89d0:	4605      	mov	r5, r0
   b89d2:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b89d4:	b933      	cbnz	r3, b89e4 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b89d6:	4608      	mov	r0, r1
   b89d8:	f7fe f8ea 	bl	b6bb0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b89dc:	b910      	cbnz	r0, b89e4 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b89de:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b89e0:	2201      	movs	r2, #1
   b89e2:	729a      	strb	r2, [r3, #10]
    return services();
   b89e4:	4628      	mov	r0, r5
   b89e6:	4621      	mov	r1, r4
   b89e8:	f7ff ffde 	bl	b89a8 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b89ec:	4628      	mov	r0, r5
   b89ee:	bd38      	pop	{r3, r4, r5, pc}

000b89f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b89f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b89f2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b89f4:	6845      	ldr	r5, [r0, #4]
   b89f6:	4668      	mov	r0, sp
   b89f8:	f7fe ff4b 	bl	b7892 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b89fc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8a00:	4299      	cmp	r1, r3
   b8a02:	da10      	bge.n	b8a26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8a04:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8a06:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8a08:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8a0c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8a10:	4629      	mov	r1, r5
   b8a12:	f105 0008 	add.w	r0, r5, #8
   b8a16:	f7ff ff63 	bl	b88e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8a1a:	b98d      	cbnz	r5, b8a40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8a1c:	6863      	ldr	r3, [r4, #4]
   b8a1e:	3301      	adds	r3, #1
   b8a20:	6063      	str	r3, [r4, #4]
    return true;
   b8a22:	2601      	movs	r6, #1
   b8a24:	e006      	b.n	b8a34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a26:	3101      	adds	r1, #1
   b8a28:	4620      	mov	r0, r4
   b8a2a:	f7ff ff83 	bl	b8934 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8a2e:	4606      	mov	r6, r0
   b8a30:	2800      	cmp	r0, #0
   b8a32:	d1e7      	bne.n	b8a04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b8a34:	a801      	add	r0, sp, #4
   b8a36:	f7fe ff40 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8a3a:	4630      	mov	r0, r6
   b8a3c:	b002      	add	sp, #8
   b8a3e:	bd70      	pop	{r4, r5, r6, pc}
   b8a40:	4669      	mov	r1, sp
   b8a42:	4628      	mov	r0, r5
   b8a44:	f7fe ff25 	bl	b7892 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8a48:	e7e8      	b.n	b8a1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b8a4c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b8a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b8a50:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b8b0c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b8a54:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b8b10 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b8a58:	b093      	sub	sp, #76	; 0x4c
   b8a5a:	4605      	mov	r5, r0
   b8a5c:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b8a5e:	2700      	movs	r7, #0
   b8a60:	682b      	ldr	r3, [r5, #0]
   b8a62:	42bb      	cmp	r3, r7
   b8a64:	d94e      	bls.n	b8b04 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b8a66:	a803      	add	r0, sp, #12
   b8a68:	f7fe fcde 	bl	b7428 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b8a6c:	261c      	movs	r6, #28
   b8a6e:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b8a70:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b8a72:	437e      	muls	r6, r7
   b8a74:	4432      	add	r2, r6
   b8a76:	f10d 0c14 	add.w	ip, sp, #20
   b8a7a:	1d13      	adds	r3, r2, #4
   b8a7c:	46e3      	mov	fp, ip
   b8a7e:	3214      	adds	r2, #20
   b8a80:	6818      	ldr	r0, [r3, #0]
   b8a82:	6859      	ldr	r1, [r3, #4]
   b8a84:	46e6      	mov	lr, ip
   b8a86:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b8a8a:	3308      	adds	r3, #8
   b8a8c:	4293      	cmp	r3, r2
   b8a8e:	46f4      	mov	ip, lr
   b8a90:	d1f6      	bne.n	b8a80 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b8a92:	6818      	ldr	r0, [r3, #0]
   b8a94:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b8a98:	4659      	mov	r1, fp
   b8a9a:	a80a      	add	r0, sp, #40	; 0x28
   b8a9c:	f7fe f9d2 	bl	b6e44 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b8aa0:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b8aa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8aaa:	f8dc 3000 	ldr.w	r3, [ip]
   b8aae:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b8ab0:	686b      	ldr	r3, [r5, #4]
   b8ab2:	9a03      	ldr	r2, [sp, #12]
   b8ab4:	4433      	add	r3, r6
   b8ab6:	a903      	add	r1, sp, #12
   b8ab8:	8b1b      	ldrh	r3, [r3, #24]
   b8aba:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b8abc:	686b      	ldr	r3, [r5, #4]
   b8abe:	4433      	add	r3, r6
   b8ac0:	8b5b      	ldrh	r3, [r3, #26]
   b8ac2:	82d3      	strh	r3, [r2, #22]
        return services_;
   b8ac4:	f8d8 0000 	ldr.w	r0, [r8]
   b8ac8:	f100 040c 	add.w	r4, r0, #12
   b8acc:	a80a      	add	r0, sp, #40	; 0x28
   b8ace:	f7fe fee0 	bl	b7892 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b8ad2:	4620      	mov	r0, r4
   b8ad4:	a90a      	add	r1, sp, #40	; 0x28
   b8ad6:	f7ff ff8b 	bl	b89f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8ada:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8adc:	a80b      	add	r0, sp, #44	; 0x2c
   b8ade:	f7fe feec 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ae2:	b954      	cbnz	r4, b8afa <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b8ae4:	2320      	movs	r3, #32
   b8ae6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b8aea:	f8cd 9000 	str.w	r9, [sp]
   b8aee:	4623      	mov	r3, r4
   b8af0:	aa0a      	add	r2, sp, #40	; 0x28
   b8af2:	4651      	mov	r1, sl
   b8af4:	2032      	movs	r0, #50	; 0x32
   b8af6:	f7fd fcd1 	bl	b649c <log_message>
   b8afa:	a804      	add	r0, sp, #16
   b8afc:	f7fe fedd 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b8b00:	3701      	adds	r7, #1
   b8b02:	e7ad      	b.n	b8a60 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b8b04:	b013      	add	sp, #76	; 0x4c
   b8b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8b0a:	bf00      	nop
   b8b0c:	000bb1aa 	.word	0x000bb1aa
   b8b10:	000bb0db 	.word	0x000bb0db

000b8b14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8b14:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b18:	4604      	mov	r4, r0
   b8b1a:	460d      	mov	r5, r1
   b8b1c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8b1e:	d914      	bls.n	b8b4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8b20:	4290      	cmp	r0, r2
   b8b22:	d213      	bcs.n	b8b4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8b24:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8b28:	1a75      	subs	r5, r6, r1
   b8b2a:	f1a1 0708 	sub.w	r7, r1, #8
   b8b2e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8b30:	42b7      	cmp	r7, r6
   b8b32:	d018      	beq.n	b8b66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8b34:	b11c      	cbz	r4, b8b3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8b36:	4631      	mov	r1, r6
   b8b38:	4620      	mov	r0, r4
   b8b3a:	f7fe fe9c 	bl	b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8b3e:	1d30      	adds	r0, r6, #4
   b8b40:	f7fe febb 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8b44:	3e08      	subs	r6, #8
   b8b46:	3c08      	subs	r4, #8
   b8b48:	e7f2      	b.n	b8b30 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8b4a:	d00c      	beq.n	b8b66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8b4c:	42b5      	cmp	r5, r6
   b8b4e:	d00a      	beq.n	b8b66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8b50:	b11c      	cbz	r4, b8b5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8b52:	4629      	mov	r1, r5
   b8b54:	4620      	mov	r0, r4
   b8b56:	f7fe fe8e 	bl	b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8b5a:	1d28      	adds	r0, r5, #4
   b8b5c:	f7fe fead 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8b60:	3508      	adds	r5, #8
   b8b62:	3408      	adds	r4, #8
   b8b64:	e7f2      	b.n	b8b4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8b68:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8b6a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8b6c:	4605      	mov	r5, r0
        if (n > 0) {
   b8b6e:	dd11      	ble.n	b8b94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8b70:	00f0      	lsls	r0, r6, #3
   b8b72:	f7fd fd27 	bl	b65c4 <malloc>
            if (!d) {
   b8b76:	4604      	mov	r4, r0
   b8b78:	b158      	cbz	r0, b8b92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8b7a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8b7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8b82:	f7ff ffc7 	bl	b8b14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8b86:	6828      	ldr	r0, [r5, #0]
   b8b88:	f7fd fd24 	bl	b65d4 <free>
        data_ = d;
   b8b8c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8b8e:	60ae      	str	r6, [r5, #8]
        return true;
   b8b90:	2001      	movs	r0, #1
    }
   b8b92:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8b94:	2400      	movs	r4, #0
   b8b96:	e7f6      	b.n	b8b86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8b98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b8b9c:	2300      	movs	r3, #0
   b8b9e:	e9c0 3300 	strd	r3, r3, [r0]
   b8ba2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8ba4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8ba6:	6849      	ldr	r1, [r1, #4]
   b8ba8:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8baa:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8bac:	dd13      	ble.n	b8bd6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b8bae:	f7ff ffdb 	bl	b8b68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8bb2:	b180      	cbz	r0, b8bd6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8bb4:	e9d5 6300 	ldrd	r6, r3, [r5]
   b8bb8:	6827      	ldr	r7, [r4, #0]
   b8bba:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b8bbe:	45b0      	cmp	r8, r6
   b8bc0:	d007      	beq.n	b8bd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b8bc2:	b11f      	cbz	r7, b8bcc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b8bc4:	4631      	mov	r1, r6
   b8bc6:	4638      	mov	r0, r7
   b8bc8:	f7fe fe55 	bl	b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b8bcc:	3608      	adds	r6, #8
   b8bce:	3708      	adds	r7, #8
   b8bd0:	e7f5      	b.n	b8bbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b8bd2:	686b      	ldr	r3, [r5, #4]
   b8bd4:	6063      	str	r3, [r4, #4]
}
   b8bd6:	4620      	mov	r0, r4
   b8bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8bdc <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b8bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8bde:	460d      	mov	r5, r1
   b8be0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b8be2:	a801      	add	r0, sp, #4
   b8be4:	f7fe f86c 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b8be8:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b8bea:	4620      	mov	r0, r4
   b8bec:	3118      	adds	r1, #24
   b8bee:	f7ff ffd3 	bl	b8b98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b8bf2:	a801      	add	r0, sp, #4
   b8bf4:	f7fe f872 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8bf8:	4620      	mov	r0, r4
   b8bfa:	b003      	add	sp, #12
   b8bfc:	bd30      	pop	{r4, r5, pc}

000b8bfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8c00:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8c02:	6845      	ldr	r5, [r0, #4]
   b8c04:	4668      	mov	r0, sp
   b8c06:	f7fe fe36 	bl	b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c0a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8c0e:	4299      	cmp	r1, r3
   b8c10:	da10      	bge.n	b8c34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8c12:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8c14:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c16:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8c1a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8c1e:	4629      	mov	r1, r5
   b8c20:	f105 0008 	add.w	r0, r5, #8
   b8c24:	f7ff ff76 	bl	b8b14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8c28:	b98d      	cbnz	r5, b8c4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8c2a:	6863      	ldr	r3, [r4, #4]
   b8c2c:	3301      	adds	r3, #1
   b8c2e:	6063      	str	r3, [r4, #4]
    return true;
   b8c30:	2601      	movs	r6, #1
   b8c32:	e006      	b.n	b8c42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c34:	3101      	adds	r1, #1
   b8c36:	4620      	mov	r0, r4
   b8c38:	f7ff ff96 	bl	b8b68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8c3c:	4606      	mov	r6, r0
   b8c3e:	2800      	cmp	r0, #0
   b8c40:	d1e7      	bne.n	b8c12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8c42:	a801      	add	r0, sp, #4
   b8c44:	f7fe fe39 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c48:	4630      	mov	r0, r6
   b8c4a:	b002      	add	sp, #8
   b8c4c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8c4e:	4669      	mov	r1, sp
   b8c50:	4628      	mov	r0, r5
   b8c52:	f7fe fe10 	bl	b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c56:	e7e8      	b.n	b8c2a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8c58 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b8c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8c5a:	b085      	sub	sp, #20
   b8c5c:	4605      	mov	r5, r0
    WiringBleLock lk;
   b8c5e:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b8c60:	460c      	mov	r4, r1
   b8c62:	4617      	mov	r7, r2
    WiringBleLock lk;
   b8c64:	f7fe f82c 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b8c68:	2300      	movs	r3, #0
   b8c6a:	e9c5 3300 	strd	r3, r3, [r5]
   b8c6e:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b8c70:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b8c72:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b8c76:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b8c7a:	42b4      	cmp	r4, r6
   b8c7c:	d011      	beq.n	b8ca2 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b8c7e:	6838      	ldr	r0, [r7, #0]
   b8c80:	4621      	mov	r1, r4
   b8c82:	f7fe faeb 	bl	b725c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b8c86:	b150      	cbz	r0, b8c9e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b8c88:	4621      	mov	r1, r4
   b8c8a:	a802      	add	r0, sp, #8
   b8c8c:	f7fe fdf3 	bl	b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c90:	a902      	add	r1, sp, #8
   b8c92:	4628      	mov	r0, r5
   b8c94:	f7ff ffb3 	bl	b8bfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b8c98:	a803      	add	r0, sp, #12
   b8c9a:	f7fe fe0e 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b8c9e:	3408      	adds	r4, #8
   b8ca0:	e7eb      	b.n	b8c7a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b8ca2:	a801      	add	r0, sp, #4
   b8ca4:	f7fe f81a 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8ca8:	4628      	mov	r0, r5
   b8caa:	b005      	add	sp, #20
   b8cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b8cb0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b8cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b8cb4:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b8cb6:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b8cb8:	b091      	sub	sp, #68	; 0x44
   b8cba:	4606      	mov	r6, r0
   b8cbc:	460f      	mov	r7, r1
   b8cbe:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b8cc0:	b933      	cbnz	r3, b8cd0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b8cc2:	e9c0 3300 	strd	r3, r3, [r0]
   b8cc6:	6083      	str	r3, [r0, #8]
}
   b8cc8:	4630      	mov	r0, r6
   b8cca:	b011      	add	sp, #68	; 0x44
   b8ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b8cd0:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b8cd2:	7e0d      	ldrb	r5, [r1, #24]
   b8cd4:	2d00      	cmp	r5, #0
   b8cd6:	d158      	bne.n	b8d8a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b8cd8:	2320      	movs	r3, #32
   b8cda:	462a      	mov	r2, r5
   b8cdc:	a803      	add	r0, sp, #12
   b8cde:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b8ce2:	f7fe fa2e 	bl	b7142 <_ZNK8particle7BleUuid8toStringEb>
   b8ce6:	9b03      	ldr	r3, [sp, #12]
   b8ce8:	9301      	str	r3, [sp, #4]
   b8cea:	4b2b      	ldr	r3, [pc, #172]	; (b8d98 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b8cec:	492b      	ldr	r1, [pc, #172]	; (b8d9c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b8cee:	9300      	str	r3, [sp, #0]
   b8cf0:	aa08      	add	r2, sp, #32
   b8cf2:	462b      	mov	r3, r5
   b8cf4:	2001      	movs	r0, #1
   b8cf6:	f7fd fbd1 	bl	b649c <log_message>
   b8cfa:	a803      	add	r0, sp, #12
   b8cfc:	f7fd fdaa 	bl	b6854 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b8d00:	231c      	movs	r3, #28
   b8d02:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b8d06:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b8d0a:	8a9a      	ldrh	r2, [r3, #20]
   b8d0c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b8d10:	8adb      	ldrh	r3, [r3, #22]
   b8d12:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b8d16:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b8d18:	4a21      	ldr	r2, [pc, #132]	; (b8da0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b8d1a:	8818      	ldrh	r0, [r3, #0]
   b8d1c:	9500      	str	r5, [sp, #0]
   b8d1e:	a908      	add	r1, sp, #32
   b8d20:	f7fd fa20 	bl	b6164 <hal_ble_gatt_client_discover_characteristics>
   b8d24:	2800      	cmp	r0, #0
   b8d26:	db30      	blt.n	b8d8a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b8d28:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b8d2a:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b8d2e:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b8d32:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b8d34:	f1a4 0308 	sub.w	r3, r4, #8
   b8d38:	4599      	cmp	r9, r3
   b8d3a:	d022      	beq.n	b8d82 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b8d3c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b8d40:	89db      	ldrh	r3, [r3, #14]
   b8d42:	2b00      	cmp	r3, #0
   b8d44:	d0f5      	beq.n	b8d32 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b8d46:	2210      	movs	r2, #16
   b8d48:	2100      	movs	r1, #0
   b8d4a:	eb0d 0002 	add.w	r0, sp, r2
   b8d4e:	9503      	str	r5, [sp, #12]
   b8d50:	f001 fd4c 	bl	ba7ec <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b8d54:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b8d58:	89d9      	ldrh	r1, [r3, #14]
   b8d5a:	683b      	ldr	r3, [r7, #0]
   b8d5c:	aa03      	add	r2, sp, #12
   b8d5e:	8818      	ldrh	r0, [r3, #0]
   b8d60:	9500      	str	r5, [sp, #0]
   b8d62:	2313      	movs	r3, #19
   b8d64:	f7fd fa1c 	bl	b61a0 <hal_ble_gatt_client_read>
                if (len > 0) {
   b8d68:	2800      	cmp	r0, #0
   b8d6a:	d0e2      	beq.n	b8d32 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b8d6c:	ab10      	add	r3, sp, #64	; 0x40
   b8d6e:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b8d70:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b8d72:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b8d76:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b8d7a:	303c      	adds	r0, #60	; 0x3c
   b8d7c:	f7fd fe0b 	bl	b6996 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b8d80:	e7d7      	b.n	b8d32 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b8d82:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b8d86:	2201      	movs	r2, #1
   b8d88:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b8d8a:	4642      	mov	r2, r8
   b8d8c:	4639      	mov	r1, r7
   b8d8e:	4630      	mov	r0, r6
   b8d90:	f7ff ff62 	bl	b8c58 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b8d94:	e798      	b.n	b8cc8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b8d96:	bf00      	nop
   b8d98:	000bb1cf 	.word	0x000bb1cf
   b8d9c:	000bb0db 	.word	0x000bb0db
   b8da0:	000b8f49 	.word	0x000b8f49

000b8da4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b8da4:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b8da6:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b8da8:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b8daa:	b085      	sub	sp, #20
   b8dac:	4606      	mov	r6, r0
   b8dae:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b8db0:	b92b      	cbnz	r3, b8dbe <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b8db2:	a801      	add	r0, sp, #4
   b8db4:	f7ff fe09 	bl	b89ca <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b8db8:	a801      	add	r0, sp, #4
   b8dba:	f7fe fd94 	bl	b78e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b8dbe:	682b      	ldr	r3, [r5, #0]
   b8dc0:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b8dc4:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b8dc8:	42bc      	cmp	r4, r7
   b8dca:	d009      	beq.n	b8de0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b8dcc:	4622      	mov	r2, r4
   b8dce:	4629      	mov	r1, r5
   b8dd0:	a801      	add	r0, sp, #4
   b8dd2:	f7ff ff6d 	bl	b8cb0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b8dd6:	a801      	add	r0, sp, #4
   b8dd8:	f7fe fd97 	bl	b790a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b8ddc:	3408      	adds	r4, #8
   b8dde:	e7f3      	b.n	b8dc8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b8de0:	4630      	mov	r0, r6
   b8de2:	4629      	mov	r1, r5
   b8de4:	f7ff fefa 	bl	b8bdc <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b8de8:	4630      	mov	r0, r6
   b8dea:	b005      	add	sp, #20
   b8dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b8df0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b8df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8df4:	4605      	mov	r5, r0
   b8df6:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b8df8:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b8dfa:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b8dfc:	460f      	mov	r7, r1
    return address_;
   b8dfe:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b8e00:	4698      	mov	r8, r3
    return address_;
   b8e02:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b8e04:	4b41      	ldr	r3, [pc, #260]	; (b8f0c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b8e06:	9304      	str	r3, [sp, #16]
    return address_;
   b8e08:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b8e0a:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b8e0c:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b8e10:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b8e14:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b8e18:	f7fe fbf6 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8e1c:	4b3c      	ldr	r3, [pc, #240]	; (b8f10 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b8e1e:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b8e20:	f7fe fbf2 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b8e24:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8e26:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b8e28:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b8e2a:	464a      	mov	r2, r9
   b8e2c:	a804      	add	r0, sp, #16
   b8e2e:	f7fd f9c1 	bl	b61b4 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b8e32:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b8e34:	4604      	mov	r4, r0
   b8e36:	b138      	cbz	r0, b8e48 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b8e38:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b8e3e:	801a      	strh	r2, [r3, #0]
}
   b8e40:	4620      	mov	r0, r4
   b8e42:	b013      	add	sp, #76	; 0x4c
   b8e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WiringBleLock lk;
   b8e48:	a803      	add	r0, sp, #12
   b8e4a:	f7fd ff39 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
        bind(addr);
   b8e4e:	4639      	mov	r1, r7
   b8e50:	4628      	mov	r0, r5
   b8e52:	f7fe fb5d 	bl	b7510 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b8e56:	f7fe fbd7 	bl	b7608 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b8e5a:	6807      	ldr	r7, [r0, #0]
   b8e5c:	4629      	mov	r1, r5
   b8e5e:	3718      	adds	r7, #24
   b8e60:	4630      	mov	r0, r6
   b8e62:	f7fe fd20 	bl	b78a6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b8e66:	4631      	mov	r1, r6
   b8e68:	4638      	mov	r0, r7
   b8e6a:	f7ff f89f 	bl	b7fac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8e6e:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b8e70:	a80b      	add	r0, sp, #44	; 0x2c
   b8e72:	f7fe fd22 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e76:	f04f 0920 	mov.w	r9, #32
   b8e7a:	bb1f      	cbnz	r7, b8ec4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b8e7c:	4632      	mov	r2, r6
   b8e7e:	4b25      	ldr	r3, [pc, #148]	; (b8f14 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b8e80:	4e25      	ldr	r6, [pc, #148]	; (b8f18 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b8e82:	4926      	ldr	r1, [pc, #152]	; (b8f1c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b8e84:	9300      	str	r3, [sp, #0]
   b8e86:	2032      	movs	r0, #50	; 0x32
   b8e88:	4623      	mov	r3, r4
   b8e8a:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b8e8e:	f7fd fb05 	bl	b649c <log_message>
   b8e92:	6830      	ldr	r0, [r6, #0]
   b8e94:	f7fd f9da 	bl	b624c <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b8e98:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b8e9a:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b8e9e:	4621      	mov	r1, r4
   b8ea0:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b8ea2:	4c1f      	ldr	r4, [pc, #124]	; (b8f20 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b8ea4:	f7fd f936 	bl	b6114 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b8ea8:	6830      	ldr	r0, [r6, #0]
   b8eaa:	f7fd f9c7 	bl	b623c <os_mutex_recursive_lock>
        locked_ = true;
   b8eae:	2301      	movs	r3, #1
   b8eb0:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b8eb4:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b8eba:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b8ebc:	a803      	add	r0, sp, #12
   b8ebe:	f7fd ff0d 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
   b8ec2:	e7bd      	b.n	b8e40 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b8ec4:	a803      	add	r0, sp, #12
   b8ec6:	f7fd ff09 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b8eca:	4b16      	ldr	r3, [pc, #88]	; (b8f24 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b8ecc:	9300      	str	r3, [sp, #0]
   b8ece:	4913      	ldr	r1, [pc, #76]	; (b8f1c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b8ed0:	4623      	mov	r3, r4
   b8ed2:	4632      	mov	r2, r6
   b8ed4:	2001      	movs	r0, #1
   b8ed6:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b8eda:	f7fd fadf 	bl	b649c <log_message>
    if (automatic) {
   b8ede:	f1b8 0f00 	cmp.w	r8, #0
   b8ee2:	d0ad      	beq.n	b8e40 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b8ee4:	4629      	mov	r1, r5
   b8ee6:	4630      	mov	r0, r6
   b8ee8:	f7ff ff5c 	bl	b8da4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b8eec:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b8ef0:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b8ef4:	42bd      	cmp	r5, r7
   b8ef6:	d005      	beq.n	b8f04 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b8ef8:	4628      	mov	r0, r5
   b8efa:	2101      	movs	r1, #1
   b8efc:	f7fe fa5a 	bl	b73b4 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b8f00:	3508      	adds	r5, #8
   b8f02:	e7f7      	b.n	b8ef4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b8f04:	4630      	mov	r0, r6
   b8f06:	f7fe fd00 	bl	b790a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8f0a:	e799      	b.n	b8e40 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b8f0c:	00180003 	.word	0x00180003
   b8f10:	000b8065 	.word	0x000b8065
   b8f14:	000bb201 	.word	0x000bb201
   b8f18:	2003e6d8 	.word	0x2003e6d8
   b8f1c:	000bb0db 	.word	0x000bb0db
   b8f20:	fffffefc 	.word	0xfffffefc
   b8f24:	000bb21d 	.word	0x000bb21d

000b8f28 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b8f28:	b513      	push	{r0, r1, r4, lr}
   b8f2a:	4604      	mov	r4, r0
   b8f2c:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b8f30:	f7fe faba 	bl	b74a8 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b8f34:	9b00      	ldr	r3, [sp, #0]
   b8f36:	9901      	ldr	r1, [sp, #4]
   b8f38:	2200      	movs	r2, #0
   b8f3a:	4620      	mov	r0, r4
   b8f3c:	f7ff ff58 	bl	b8df0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   b8f40:	4620      	mov	r0, r4
   b8f42:	b002      	add	sp, #8
   b8f44:	bd10      	pop	{r4, pc}
	...

000b8f48 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b8f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b8f4c:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b8f4e:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b8f50:	2600      	movs	r6, #0
   b8f52:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b8f56:	4b66      	ldr	r3, [pc, #408]	; (b90f0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b8f58:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b8f5a:	4605      	mov	r5, r0
   b8f5c:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b8f5e:	4633      	mov	r3, r6
   b8f60:	4964      	ldr	r1, [pc, #400]	; (b90f4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b8f62:	f8df 9194 	ldr.w	r9, [pc, #404]	; b90f8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b8f66:	f8df 818c 	ldr.w	r8, [pc, #396]	; b90f4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b8f6a:	f8df a190 	ldr.w	sl, [pc, #400]	; b90fc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b8f6e:	aa0c      	add	r2, sp, #48	; 0x30
   b8f70:	2001      	movs	r0, #1
   b8f72:	f7fd fa93 	bl	b649c <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b8f76:	682b      	ldr	r3, [r5, #0]
   b8f78:	42b3      	cmp	r3, r6
   b8f7a:	f240 80b5 	bls.w	b90e8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b8f7e:	a803      	add	r0, sp, #12
   b8f80:	f7fe f992 	bl	b72a8 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b8f84:	a805      	add	r0, sp, #20
   b8f86:	f7fe fa4f 	bl	b7428 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b8f8a:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b8f8e:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b8f90:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b8f92:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b8f96:	445b      	add	r3, fp
        this->size = halHandles.size;
   b8f98:	8bd9      	ldrh	r1, [r3, #30]
   b8f9a:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b8f9c:	8c19      	ldrh	r1, [r3, #32]
   b8f9e:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b8fa0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b8fa2:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b8fa4:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b8fa6:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b8fa8:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b8faa:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b8fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b8fae:	8253      	strh	r3, [r2, #18]
   b8fb0:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b8fb4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b8fb8:	429a      	cmp	r2, r3
   b8fba:	d07d      	beq.n	b90b8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b8fbc:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b8fbe:	8ac4      	ldrh	r4, [r0, #22]
   b8fc0:	428c      	cmp	r4, r1
   b8fc2:	d377      	bcc.n	b90b4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b8fc4:	8a84      	ldrh	r4, [r0, #20]
   b8fc6:	428c      	cmp	r4, r1
   b8fc8:	d874      	bhi.n	b90b4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8fca:	6859      	ldr	r1, [r3, #4]
   b8fcc:	9005      	str	r0, [sp, #20]
   b8fce:	a806      	add	r0, sp, #24
   b8fd0:	f7fd fe51 	bl	b6c76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b8fd4:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b8fd8:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b8fdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8fe0:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b8fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8fe6:	f8dc 3000 	ldr.w	r3, [ip]
   b8fea:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b8fec:	892b      	ldrh	r3, [r5, #8]
   b8fee:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b8ff2:	686b      	ldr	r3, [r5, #4]
   b8ff4:	9c03      	ldr	r4, [sp, #12]
   b8ff6:	445b      	add	r3, fp
   b8ff8:	7e5b      	ldrb	r3, [r3, #25]
   b8ffa:	f013 0f02 	tst.w	r3, #2
   b8ffe:	d16e      	bne.n	b90de <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b9000:	686b      	ldr	r3, [r5, #4]
   b9002:	445b      	add	r3, fp
   b9004:	7e5b      	ldrb	r3, [r3, #25]
   b9006:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b9008:	bf42      	ittt	mi
   b900a:	7923      	ldrbmi	r3, [r4, #4]
   b900c:	f043 0304 	orrmi.w	r3, r3, #4
   b9010:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b9012:	686b      	ldr	r3, [r5, #4]
   b9014:	445b      	add	r3, fp
   b9016:	7e5b      	ldrb	r3, [r3, #25]
   b9018:	0719      	lsls	r1, r3, #28
   b901a:	bf42      	ittt	mi
   b901c:	7923      	ldrbmi	r3, [r4, #4]
   b901e:	f043 0308 	orrmi.w	r3, r3, #8
   b9022:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b9024:	686b      	ldr	r3, [r5, #4]
   b9026:	445b      	add	r3, fp
   b9028:	7e5b      	ldrb	r3, [r3, #25]
   b902a:	06da      	lsls	r2, r3, #27
   b902c:	bf42      	ittt	mi
   b902e:	7923      	ldrbmi	r3, [r4, #4]
   b9030:	f043 0310 	orrmi.w	r3, r3, #16
   b9034:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b9036:	686b      	ldr	r3, [r5, #4]
   b9038:	445b      	add	r3, fp
   b903a:	aa07      	add	r2, sp, #28
   b903c:	7e5b      	ldrb	r3, [r3, #25]
   b903e:	069b      	lsls	r3, r3, #26
   b9040:	bf42      	ittt	mi
   b9042:	7923      	ldrbmi	r3, [r4, #4]
   b9044:	f043 0320 	orrmi.w	r3, r3, #32
   b9048:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b904a:	686b      	ldr	r3, [r5, #4]
   b904c:	449b      	add	fp, r3
   b904e:	f10b 0304 	add.w	r3, fp, #4
   b9052:	4696      	mov	lr, r2
   b9054:	f10b 0b14 	add.w	fp, fp, #20
   b9058:	6818      	ldr	r0, [r3, #0]
   b905a:	6859      	ldr	r1, [r3, #4]
   b905c:	4694      	mov	ip, r2
   b905e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b9062:	3308      	adds	r3, #8
   b9064:	455b      	cmp	r3, fp
   b9066:	4662      	mov	r2, ip
   b9068:	d1f6      	bne.n	b9058 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b906a:	6818      	ldr	r0, [r3, #0]
   b906c:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b9070:	4671      	mov	r1, lr
   b9072:	a80c      	add	r0, sp, #48	; 0x30
   b9074:	f7fd fee6 	bl	b6e44 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b9078:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b907c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9080:	3414      	adds	r4, #20
   b9082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9084:	f8dc 3000 	ldr.w	r3, [ip]
   b9088:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b908a:	a903      	add	r1, sp, #12
   b908c:	a80c      	add	r0, sp, #48	; 0x30
   b908e:	f7fe fbf2 	bl	b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9092:	a90c      	add	r1, sp, #48	; 0x30
   b9094:	f107 0018 	add.w	r0, r7, #24
   b9098:	f7ff fdb1 	bl	b8bfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b909c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b909e:	a80d      	add	r0, sp, #52	; 0x34
   b90a0:	f7fe fc0b 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b90a4:	b99c      	cbnz	r4, b90ce <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b90a6:	2320      	movs	r3, #32
   b90a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b90ac:	f8cd a000 	str.w	sl, [sp]
   b90b0:	4623      	mov	r3, r4
   b90b2:	e007      	b.n	b90c4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b90b4:	3308      	adds	r3, #8
   b90b6:	e77f      	b.n	b8fb8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b90b8:	2420      	movs	r4, #32
   b90ba:	2300      	movs	r3, #0
   b90bc:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b90c0:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b90c4:	aa0c      	add	r2, sp, #48	; 0x30
   b90c6:	4641      	mov	r1, r8
   b90c8:	2032      	movs	r0, #50	; 0x32
   b90ca:	f7fd f9e7 	bl	b649c <log_message>
   b90ce:	a806      	add	r0, sp, #24
   b90d0:	f7fe fbf3 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b90d4:	a804      	add	r0, sp, #16
   b90d6:	f7fe fbf0 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b90da:	3601      	adds	r6, #1
   b90dc:	e74b      	b.n	b8f76 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b90de:	7923      	ldrb	r3, [r4, #4]
   b90e0:	f043 0302 	orr.w	r3, r3, #2
   b90e4:	7123      	strb	r3, [r4, #4]
   b90e6:	e78b      	b.n	b9000 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b90e8:	b015      	add	sp, #84	; 0x54
   b90ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b90ee:	bf00      	nop
   b90f0:	000bb23a 	.word	0x000bb23a
   b90f4:	000bb0db 	.word	0x000bb0db
   b90f8:	000bb255 	.word	0x000bb255
   b90fc:	000bb284 	.word	0x000bb284

000b9100 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9104:	4617      	mov	r7, r2
   b9106:	b0a1      	sub	sp, #132	; 0x84
   b9108:	4680      	mov	r8, r0
    WiringBleLock lk;
   b910a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b910c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b910e:	f7fd fdd7 	bl	b6cc0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9112:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b9114:	7923      	ldrb	r3, [r4, #4]
   b9116:	b953      	cbnz	r3, b912e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b9118:	4639      	mov	r1, r7
   b911a:	4640      	mov	r0, r8
   b911c:	f7fe fbab 	bl	b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b9120:	a80a      	add	r0, sp, #40	; 0x28
   b9122:	f7fd fddb 	bl	b6cdc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b9126:	4640      	mov	r0, r8
   b9128:	b021      	add	sp, #132	; 0x84
   b912a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b912e:	6833      	ldr	r3, [r6, #0]
   b9130:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b9134:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b9138:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b913a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b913e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b9142:	9b03      	ldr	r3, [sp, #12]
   b9144:	429d      	cmp	r5, r3
   b9146:	d021      	beq.n	b918c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b9148:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b914c:	4658      	mov	r0, fp
   b914e:	f109 0114 	add.w	r1, r9, #20
   b9152:	f7fd fefa 	bl	b6f4a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b9156:	b1b8      	cbz	r0, b9188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b9158:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b915c:	4650      	mov	r0, sl
   b915e:	f7fd fef4 	bl	b6f4a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b9162:	b188      	cbz	r0, b9188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b9164:	6823      	ldr	r3, [r4, #0]
   b9166:	f8d9 2000 	ldr.w	r2, [r9]
   b916a:	4053      	eors	r3, r2
   b916c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b9170:	d10a      	bne.n	b9188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b9172:	2220      	movs	r2, #32
   b9174:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b9178:	4a5e      	ldr	r2, [pc, #376]	; (b92f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b917a:	9200      	str	r2, [sp, #0]
   b917c:	aa15      	add	r2, sp, #84	; 0x54
   b917e:	495e      	ldr	r1, [pc, #376]	; (b92f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b9180:	2032      	movs	r0, #50	; 0x32
   b9182:	f7fd f98b 	bl	b649c <log_message>
   b9186:	e7c7      	b.n	b9118 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b9188:	3508      	adds	r5, #8
   b918a:	e7da      	b.n	b9142 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b918c:	4650      	mov	r0, sl
   b918e:	f7fd fead 	bl	b6eec <_ZNK8particle7BleUuid7isValidEv>
   b9192:	b960      	cbnz	r0, b91ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
   b9194:	4959      	ldr	r1, [pc, #356]	; (b92fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b9196:	2201      	movs	r2, #1
   b9198:	a815      	add	r0, sp, #84	; 0x54
   b919a:	ad15      	add	r5, sp, #84	; 0x54
   b919c:	f7fd fe74 	bl	b6e88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b91a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b91a2:	46d4      	mov	ip, sl
   b91a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b91a8:	682b      	ldr	r3, [r5, #0]
   b91aa:	f8cc 3000 	str.w	r3, [ip]
   b91ae:	6833      	ldr	r3, [r6, #0]
   b91b0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b91b4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b91b8:	455d      	cmp	r5, fp
   b91ba:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b91bc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b91be:	d06e      	beq.n	b929e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b91c0:	f855 0b08 	ldr.w	r0, [r5], #8
   b91c4:	f7fd fec1 	bl	b6f4a <_ZNK8particle7BleUuideqERKS0_>
   b91c8:	2800      	cmp	r0, #0
   b91ca:	d0f5      	beq.n	b91b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b91cc:	f104 0a14 	add.w	sl, r4, #20
   b91d0:	4650      	mov	r0, sl
   b91d2:	f7fd fe8b 	bl	b6eec <_ZNK8particle7BleUuid7isValidEv>
   b91d6:	b988      	cbnz	r0, b91fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b91d8:	4b49      	ldr	r3, [pc, #292]	; (b9300 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b91da:	4948      	ldr	r1, [pc, #288]	; (b92fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b91dc:	881a      	ldrh	r2, [r3, #0]
   b91de:	3201      	adds	r2, #1
   b91e0:	b292      	uxth	r2, r2
   b91e2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b91e4:	a815      	add	r0, sp, #84	; 0x54
   b91e6:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b91e8:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b91ea:	f7fd fe76 	bl	b6eda <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b91ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b91f0:	46d4      	mov	ip, sl
   b91f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b91f6:	682b      	ldr	r3, [r5, #0]
   b91f8:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b91fc:	4b41      	ldr	r3, [pc, #260]	; (b9304 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b91fe:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9200:	2228      	movs	r2, #40	; 0x28
   b9202:	2100      	movs	r1, #0
   b9204:	a816      	add	r0, sp, #88	; 0x58
   b9206:	f001 faf1 	bl	ba7ec <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b920a:	4651      	mov	r1, sl
   b920c:	a804      	add	r0, sp, #16
   b920e:	f7fd fe7f 	bl	b6f10 <_ZN8particle7BleUuid7halUUIDEv>
   b9212:	ab04      	add	r3, sp, #16
   b9214:	aa18      	add	r2, sp, #96	; 0x60
   b9216:	f10d 0c20 	add.w	ip, sp, #32
   b921a:	6818      	ldr	r0, [r3, #0]
   b921c:	6859      	ldr	r1, [r3, #4]
   b921e:	4615      	mov	r5, r2
   b9220:	c503      	stmia	r5!, {r0, r1}
   b9222:	3308      	adds	r3, #8
   b9224:	4563      	cmp	r3, ip
   b9226:	462a      	mov	r2, r5
   b9228:	d1f7      	bne.n	b921a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b922a:	6818      	ldr	r0, [r3, #0]
   b922c:	6028      	str	r0, [r5, #0]
    return value_;
   b922e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b9230:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b9234:	f8d9 3000 	ldr.w	r3, [r9]
   b9238:	8a9b      	ldrh	r3, [r3, #20]
   b923a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b923e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9240:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b9242:	4b31      	ldr	r3, [pc, #196]	; (b9308 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9244:	2200      	movs	r2, #0
   b9246:	1da1      	adds	r1, r4, #6
   b9248:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b924a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b924e:	f7fc ffbb 	bl	b61c8 <hal_ble_gatt_server_add_characteristic>
   b9252:	2800      	cmp	r0, #0
   b9254:	f47f af60 	bne.w	b9118 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b9258:	2301      	movs	r3, #1
   b925a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b925c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b925e:	4639      	mov	r1, r7
        return characteristics_;
   b9260:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b9262:	a80d      	add	r0, sp, #52	; 0x34
   b9264:	f7fe fb07 	bl	b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9268:	4620      	mov	r0, r4
   b926a:	a90d      	add	r1, sp, #52	; 0x34
   b926c:	f7ff fcc7 	bl	b8bfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9270:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9272:	a80e      	add	r0, sp, #56	; 0x38
   b9274:	f7fe fb21 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9278:	2c00      	cmp	r4, #0
   b927a:	f47f af4d 	bne.w	b9118 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b927e:	2320      	movs	r3, #32
   b9280:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b9284:	4b21      	ldr	r3, [pc, #132]	; (b930c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b9286:	9300      	str	r3, [sp, #0]
   b9288:	aa0d      	add	r2, sp, #52	; 0x34
   b928a:	4623      	mov	r3, r4
   b928c:	e777      	b.n	b917e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b928e:	4639      	mov	r1, r7
   b9290:	4640      	mov	r0, r8
   b9292:	f7fe faf0 	bl	b7876 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9296:	a80c      	add	r0, sp, #48	; 0x30
   b9298:	f7fe fb0f 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b929c:	e740      	b.n	b9120 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b929e:	a80b      	add	r0, sp, #44	; 0x2c
   b92a0:	f7fe f8de 	bl	b7460 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b92a4:	4651      	mov	r1, sl
   b92a6:	a815      	add	r0, sp, #84	; 0x54
   b92a8:	f7fd fe32 	bl	b6f10 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b92ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b92ae:	2300      	movs	r3, #0
   b92b0:	3214      	adds	r2, #20
   b92b2:	a915      	add	r1, sp, #84	; 0x54
   b92b4:	2001      	movs	r0, #1
   b92b6:	f7fc ff37 	bl	b6128 <hal_ble_gatt_server_add_service>
   b92ba:	2800      	cmp	r0, #0
   b92bc:	d1e7      	bne.n	b928e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b92be:	6835      	ldr	r5, [r6, #0]
   b92c0:	a90b      	add	r1, sp, #44	; 0x2c
   b92c2:	a80d      	add	r0, sp, #52	; 0x34
   b92c4:	f7fe fae5 	bl	b7892 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b92c8:	4628      	mov	r0, r5
   b92ca:	a90d      	add	r1, sp, #52	; 0x34
   b92cc:	f7ff fb90 	bl	b89f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b92d0:	4605      	mov	r5, r0
   b92d2:	a80e      	add	r0, sp, #56	; 0x38
   b92d4:	f7fe faf1 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b92d8:	2d00      	cmp	r5, #0
   b92da:	d0d8      	beq.n	b928e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b92dc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b92de:	6853      	ldr	r3, [r2, #4]
   b92e0:	6812      	ldr	r2, [r2, #0]
   b92e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b92e6:	3b01      	subs	r3, #1
   b92e8:	a80c      	add	r0, sp, #48	; 0x30
   b92ea:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b92ee:	f7fe fae4 	bl	b78ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b92f2:	e76b      	b.n	b91cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b92f4:	000bb2b0 	.word	0x000bb2b0
   b92f8:	000bb0db 	.word	0x000bb0db
   b92fc:	000bb360 	.word	0x000bb360
   b9300:	2003e6d4 	.word	0x2003e6d4
   b9304:	002c0003 	.word	0x002c0003
   b9308:	000b7641 	.word	0x000b7641
   b930c:	000bb2db 	.word	0x000bb2db

000b9310 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9310:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9314:	4604      	mov	r4, r0
   b9316:	460d      	mov	r5, r1
   b9318:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b931a:	d914      	bls.n	b9346 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b931c:	4290      	cmp	r0, r2
   b931e:	d213      	bcs.n	b9348 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9320:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b9324:	1a75      	subs	r5, r6, r1
   b9326:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b932a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b932c:	42b7      	cmp	r7, r6
   b932e:	d018      	beq.n	b9362 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9330:	b11c      	cbz	r4, b933a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9332:	4631      	mov	r1, r6
   b9334:	4620      	mov	r0, r4
   b9336:	f7fe fd21 	bl	b7d7c <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b933a:	4630      	mov	r0, r6
   b933c:	f7fe f9be 	bl	b76bc <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b9340:	3e24      	subs	r6, #36	; 0x24
   b9342:	3c24      	subs	r4, #36	; 0x24
   b9344:	e7f2      	b.n	b932c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9346:	d00c      	beq.n	b9362 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9348:	42b5      	cmp	r5, r6
   b934a:	d00a      	beq.n	b9362 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b934c:	b11c      	cbz	r4, b9356 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b934e:	4629      	mov	r1, r5
   b9350:	4620      	mov	r0, r4
   b9352:	f7fe fd13 	bl	b7d7c <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b9356:	4628      	mov	r0, r5
   b9358:	f7fe f9b0 	bl	b76bc <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b935c:	3524      	adds	r5, #36	; 0x24
   b935e:	3424      	adds	r4, #36	; 0x24
   b9360:	e7f2      	b.n	b9348 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9364 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b9366:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9368:	4605      	mov	r5, r0
        if (n > 0) {
   b936a:	dd13      	ble.n	b9394 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b936c:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b936e:	fb07 f006 	mul.w	r0, r7, r6
   b9372:	f7fd f927 	bl	b65c4 <malloc>
            if (!d) {
   b9376:	4604      	mov	r4, r0
   b9378:	b158      	cbz	r0, b9392 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b937a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b937e:	fb07 1202 	mla	r2, r7, r2, r1
   b9382:	f7ff ffc5 	bl	b9310 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9386:	6828      	ldr	r0, [r5, #0]
   b9388:	f7fd f924 	bl	b65d4 <free>
        data_ = d;
   b938c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b938e:	60ae      	str	r6, [r5, #8]
        return true;
   b9390:	2001      	movs	r0, #1
    }
   b9392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9394:	2400      	movs	r4, #0
   b9396:	e7f6      	b.n	b9386 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b9398 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b939c:	2300      	movs	r3, #0
   b939e:	e9c0 3300 	strd	r3, r3, [r0]
   b93a2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b93a4:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b93a6:	6849      	ldr	r1, [r1, #4]
   b93a8:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b93aa:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b93ac:	dd29      	ble.n	b9402 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
   b93ae:	f7ff ffd9 	bl	b9364 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b93b2:	b330      	cbz	r0, b9402 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b93b4:	e9d7 4300 	ldrd	r4, r3, [r7]
   b93b8:	f04f 0824 	mov.w	r8, #36	; 0x24
   b93bc:	682e      	ldr	r6, [r5, #0]
   b93be:	fb08 4803 	mla	r8, r8, r3, r4
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
   b93c2:	3408      	adds	r4, #8
        for (; it != end; ++it, ++dest) {
   b93c4:	f1a4 0208 	sub.w	r2, r4, #8
   b93c8:	4590      	cmp	r8, r2
   b93ca:	d018      	beq.n	b93fe <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x66>
            new(dest) T(*it);
   b93cc:	b1a6      	cbz	r6, b93f8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x60>
    address_ = addr.address_;
   b93ce:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b93d2:	6033      	str	r3, [r6, #0]
   b93d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   b93d8:	6073      	str	r3, [r6, #4]
class BleAdvertisingData {
   b93da:	4621      	mov	r1, r4
   b93dc:	f106 0008 	add.w	r0, r6, #8
   b93e0:	f7fe fcaf 	bl	b7d42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b93e4:	f104 010c 	add.w	r1, r4, #12
   b93e8:	f106 0014 	add.w	r0, r6, #20
   b93ec:	f7fe fca9 	bl	b7d42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b93f0:	f994 3018 	ldrsb.w	r3, [r4, #24]
   b93f4:	f886 3020 	strb.w	r3, [r6, #32]
        for (; it != end; ++it, ++dest) {
   b93f8:	3624      	adds	r6, #36	; 0x24
   b93fa:	3424      	adds	r4, #36	; 0x24
   b93fc:	e7e2      	b.n	b93c4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b93fe:	687b      	ldr	r3, [r7, #4]
   b9400:	606b      	str	r3, [r5, #4]
}
   b9402:	4628      	mov	r0, r5
   b9404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9408 <_ZN8particle16BleScanDelegator5startEv>:
    Vector<BleScanResult> start() {
   b9408:	b538      	push	{r3, r4, r5, lr}
   b940a:	460c      	mov	r4, r1
   b940c:	4605      	mov	r5, r0
        scanResultCallback_ = nullptr;
   b940e:	f101 0018 	add.w	r0, r1, #24
   b9412:	f7fd fbb7 	bl	b6b84 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b9416:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b941a:	f7fd fbbe 	bl	b6b9a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        hal_ble_gap_start_scan(onScanResultCallback, this, nullptr);
   b941e:	2200      	movs	r2, #0
   b9420:	4621      	mov	r1, r4
   b9422:	4804      	ldr	r0, [pc, #16]	; (b9434 <_ZN8particle16BleScanDelegator5startEv+0x2c>)
   b9424:	f7fc fe64 	bl	b60f0 <hal_ble_gap_start_scan>
        return resultsVector_;
   b9428:	4621      	mov	r1, r4
   b942a:	4628      	mov	r0, r5
   b942c:	f7ff ffb4 	bl	b9398 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
    }
   b9430:	4628      	mov	r0, r5
   b9432:	bd38      	pop	{r3, r4, r5, pc}
   b9434:	000b9463 	.word	0x000b9463

000b9438 <_ZNK8particle14BleLocalDevice14scanWithFilterERKNS_13BleScanFilterE>:
Vector<BleScanResult> BleLocalDevice::scanWithFilter(const BleScanFilter& filter) const {
   b9438:	b510      	push	{r4, lr}
   b943a:	b0a0      	sub	sp, #128	; 0x80
   b943c:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b943e:	a803      	add	r0, sp, #12
Vector<BleScanResult> BleLocalDevice::scanWithFilter(const BleScanFilter& filter) const {
   b9440:	9201      	str	r2, [sp, #4]
    BleScanDelegator scanner;
   b9442:	f7fe f945 	bl	b76d0 <_ZN8particle16BleScanDelegatorC1Ev>
        filter_ = filter;
   b9446:	9901      	ldr	r1, [sp, #4]
   b9448:	a811      	add	r0, sp, #68	; 0x44
   b944a:	f7fe ff40 	bl	b82ce <_ZN8particle13BleScanFilteraSERKS0_.isra.0>
    return scanner.setScanFilter(filter).start();
   b944e:	a903      	add	r1, sp, #12
   b9450:	4620      	mov	r0, r4
   b9452:	f7ff ffd9 	bl	b9408 <_ZN8particle16BleScanDelegator5startEv>
    BleScanDelegator scanner;
   b9456:	a803      	add	r0, sp, #12
   b9458:	f7fe f976 	bl	b7748 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b945c:	4620      	mov	r0, r4
   b945e:	b020      	add	sp, #128	; 0x80
   b9460:	bd10      	pop	{r4, pc}

000b9462 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b9462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9466:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b9468:	ad01      	add	r5, sp, #4
   b946a:	4606      	mov	r6, r0
   b946c:	4628      	mov	r0, r5
   b946e:	460c      	mov	r4, r1
   b9470:	f7fd fc61 	bl	b6d36 <_ZN8particle10BleAddressC1Ev>
   b9474:	a803      	add	r0, sp, #12
   b9476:	f7fe fd5c 	bl	b7f32 <_ZN8particle18BleAdvertisingDataC1Ev>
   b947a:	a806      	add	r0, sp, #24
   b947c:	f7fe fd59 	bl	b7f32 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b9480:	6930      	ldr	r0, [r6, #16]
   b9482:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b9484:	89f2      	ldrh	r2, [r6, #14]
   b9486:	ab13      	add	r3, sp, #76	; 0x4c
   b9488:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b948a:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b948e:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b9490:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b9492:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b9496:	a806      	add	r0, sp, #24
   b9498:	f7fe fcbf 	bl	b7e1a <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b949c:	89b2      	ldrh	r2, [r6, #12]
   b949e:	6871      	ldr	r1, [r6, #4]
   b94a0:	a803      	add	r0, sp, #12
   b94a2:	f7fe fcba 	bl	b7e1a <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b94a6:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b94aa:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b94ac:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b94ae:	d003      	beq.n	b94b8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b94b0:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b94b4:	429a      	cmp	r2, r3
   b94b6:	db5c      	blt.n	b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b94b8:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b94bc:	2b7f      	cmp	r3, #127	; 0x7f
   b94be:	d003      	beq.n	b94c8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b94c0:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b94c4:	429a      	cmp	r2, r3
   b94c6:	dc54      	bgt.n	b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b94c8:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b94cc:	4638      	mov	r0, r7
   b94ce:	f7fe fb1c 	bl	b7b0a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b94d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b94d4:	2b00      	cmp	r3, #0
   b94d6:	dd52      	ble.n	b957e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b94d8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b94da:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b94de:	45b1      	cmp	r9, r6
   b94e0:	d050      	beq.n	b9584 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b94e2:	4630      	mov	r0, r6
   b94e4:	4629      	mov	r1, r5
   b94e6:	f7fd fc12 	bl	b6d0e <_ZNK8particle10BleAddresseqERKS0_>
   b94ea:	3608      	adds	r6, #8
   b94ec:	4680      	mov	r8, r0
   b94ee:	2800      	cmp	r0, #0
   b94f0:	d0f5      	beq.n	b94de <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b94f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b94f4:	f7fd f86e 	bl	b65d4 <free>
        if (!delegator->filterByRssi(result) ||
   b94f8:	f1b8 0f00 	cmp.w	r8, #0
   b94fc:	d039      	beq.n	b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b94fe:	4629      	mov	r1, r5
   b9500:	4620      	mov	r0, r4
   b9502:	f7fe fac5 	bl	b7a90 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b9506:	b3a0      	cbz	r0, b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b9508:	4629      	mov	r1, r5
   b950a:	4620      	mov	r0, r4
   b950c:	f7ff f881 	bl	b8612 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b9510:	4606      	mov	r6, r0
   b9512:	b370      	cbz	r0, b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b9514:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b9518:	4638      	mov	r0, r7
   b951a:	f7fe fb41 	bl	b7ba0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b951e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9520:	2b00      	cmp	r3, #0
   b9522:	dd12      	ble.n	b954a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b9524:	a806      	add	r0, sp, #24
   b9526:	f7fd fe6d 	bl	b7204 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b952a:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b952c:	a803      	add	r0, sp, #12
   b952e:	f7fd fe69 	bl	b7204 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b9532:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b9536:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b953a:	429a      	cmp	r2, r3
   b953c:	d025      	beq.n	b958a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b953e:	f833 1b02 	ldrh.w	r1, [r3], #2
   b9542:	4588      	cmp	r8, r1
   b9544:	d001      	beq.n	b954a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b9546:	4288      	cmp	r0, r1
   b9548:	d1f7      	bne.n	b953a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b954a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b954c:	f7fd f842 	bl	b65d4 <free>
              !delegator->filterByServiceUUID(result) ||
   b9550:	b17e      	cbz	r6, b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b9552:	4629      	mov	r1, r5
   b9554:	4620      	mov	r0, r4
   b9556:	f7fe fb59 	bl	b7c0c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b955a:	b150      	cbz	r0, b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b955c:	6a23      	ldr	r3, [r4, #32]
   b955e:	b1b3      	cbz	r3, b958e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b9560:	6963      	ldr	r3, [r4, #20]
   b9562:	9513      	str	r5, [sp, #76]	; 0x4c
   b9564:	3301      	adds	r3, #1
   b9566:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9568:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b956a:	4639      	mov	r1, r7
   b956c:	f104 0018 	add.w	r0, r4, #24
   b9570:	4798      	blx	r3
            return;
   b9572:	4628      	mov	r0, r5
   b9574:	f7fe f8a2 	bl	b76bc <_ZN8particle13BleScanResultD1Ev>
    }
   b9578:	b01d      	add	sp, #116	; 0x74
   b957a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b957e:	f04f 0801 	mov.w	r8, #1
   b9582:	e7b6      	b.n	b94f2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b9584:	f04f 0800 	mov.w	r8, #0
   b9588:	e7b3      	b.n	b94f2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b958a:	2600      	movs	r6, #0
   b958c:	e7dd      	b.n	b954a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b958e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b9592:	f1b8 0f00 	cmp.w	r8, #0
   b9596:	d007      	beq.n	b95a8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b9598:	6963      	ldr	r3, [r4, #20]
   b959a:	3301      	adds	r3, #1
   b959c:	6163      	str	r3, [r4, #20]
   b959e:	4629      	mov	r1, r5
   b95a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b95a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b95a6:	e7e3      	b.n	b9570 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b95a8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b95ac:	f1bc 0f00 	cmp.w	ip, #0
   b95b0:	d024      	beq.n	b95fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19a>
            if (delegator->foundCount_ < delegator->targetCount_) {
   b95b2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   b95b6:	4293      	cmp	r3, r2
   b95b8:	d2db      	bcs.n	b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_] = result;
   b95ba:	2224      	movs	r2, #36	; 0x24
   b95bc:	4353      	muls	r3, r2
    address_ = addr.address_;
   b95be:	462a      	mov	r2, r5
   b95c0:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_] = result;
   b95c2:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b95c6:	f84c 0003 	str.w	r0, [ip, r3]
   b95ca:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b95cc:	f106 0008 	add.w	r0, r6, #8
   b95d0:	a903      	add	r1, sp, #12
   b95d2:	f7fe fbea 	bl	b7daa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b95d6:	a906      	add	r1, sp, #24
   b95d8:	f106 0014 	add.w	r0, r6, #20
   b95dc:	f7fe fbe5 	bl	b7daa <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b95e0:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b95e4:	f886 3020 	strb.w	r3, [r6, #32]
                delegator->foundCount_++;
   b95e8:	6963      	ldr	r3, [r4, #20]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b95ea:	6922      	ldr	r2, [r4, #16]
                delegator->foundCount_++;
   b95ec:	3301      	adds	r3, #1
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b95ee:	4293      	cmp	r3, r2
                delegator->foundCount_++;
   b95f0:	6163      	str	r3, [r4, #20]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b95f2:	d3be      	bcc.n	b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b95f4:	4640      	mov	r0, r8
   b95f6:	f7fc fd83 	bl	b6100 <hal_ble_gap_stop_scan>
   b95fa:	e7ba      	b.n	b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b95fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9600:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b9604:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b9608:	a903      	add	r1, sp, #12
   b960a:	a80c      	add	r0, sp, #48	; 0x30
   b960c:	f7fe fb99 	bl	b7d42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b9610:	a906      	add	r1, sp, #24
   b9612:	a80f      	add	r0, sp, #60	; 0x3c
   b9614:	f7fe fb95 	bl	b7d42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b9618:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b961c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b9620:	4641      	mov	r1, r8
   b9622:	4638      	mov	r0, r7
   b9624:	6866      	ldr	r6, [r4, #4]
   b9626:	f7fe fba9 	bl	b7d7c <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b962a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b962e:	4299      	cmp	r1, r3
   b9630:	da10      	bge.n	b9654 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f2>
    T* const p = data_ + i;
   b9632:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9634:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b9636:	2224      	movs	r2, #36	; 0x24
   b9638:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b963c:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b9640:	fb02 3201 	mla	r2, r2, r1, r3
   b9644:	4631      	mov	r1, r6
   b9646:	f7ff fe63 	bl	b9310 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b964a:	b986      	cbnz	r6, b966e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20c>
    ++size_;
   b964c:	6863      	ldr	r3, [r4, #4]
   b964e:	3301      	adds	r3, #1
   b9650:	6063      	str	r3, [r4, #4]
    return true;
   b9652:	e005      	b.n	b9660 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1fe>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9654:	3101      	adds	r1, #1
   b9656:	4620      	mov	r0, r4
   b9658:	f7ff fe84 	bl	b9364 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b965c:	2800      	cmp	r0, #0
   b965e:	d1e8      	bne.n	b9632 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d0>
    return insert(size_, std::move(value));
   b9660:	4638      	mov	r0, r7
   b9662:	f7fe f82b 	bl	b76bc <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b9666:	4640      	mov	r0, r8
   b9668:	f7fe f828 	bl	b76bc <_ZN8particle13BleScanResultD1Ev>
   b966c:	e781      	b.n	b9572 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b966e:	4639      	mov	r1, r7
   b9670:	4630      	mov	r0, r6
   b9672:	f7fe fb83 	bl	b7d7c <_ZN8particle13BleScanResultC1EOS0_>
   b9676:	e7e9      	b.n	b964c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ea>

000b9678 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9678:	4802      	ldr	r0, [pc, #8]	; (b9684 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b967a:	2300      	movs	r3, #0
   b967c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b967e:	f7fc bdd5 	b.w	b622c <os_mutex_recursive_create>
   b9682:	bf00      	nop
   b9684:	2003e6d8 	.word	0x2003e6d8

000b9688 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b968a:	4606      	mov	r6, r0
   b968c:	460d      	mov	r5, r1
  size_t n = 0;
   b968e:	188f      	adds	r7, r1, r2
   b9690:	2400      	movs	r4, #0
  while (size--) {
   b9692:	42bd      	cmp	r5, r7
   b9694:	d00c      	beq.n	b96b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9696:	6833      	ldr	r3, [r6, #0]
   b9698:	f815 1b01 	ldrb.w	r1, [r5], #1
   b969c:	689b      	ldr	r3, [r3, #8]
   b969e:	4630      	mov	r0, r6
   b96a0:	4798      	blx	r3
     if (chunk>=0)
   b96a2:	1e03      	subs	r3, r0, #0
   b96a4:	db01      	blt.n	b96aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b96a6:	441c      	add	r4, r3
  while (size--) {
   b96a8:	e7f3      	b.n	b9692 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b96aa:	2c00      	cmp	r4, #0
   b96ac:	bf08      	it	eq
   b96ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b96b0:	4620      	mov	r0, r4
   b96b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b96b4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b96b4:	b513      	push	{r0, r1, r4, lr}
   b96b6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b96b8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b96ba:	b159      	cbz	r1, b96d4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b96bc:	9101      	str	r1, [sp, #4]
   b96be:	f7fb facb 	bl	b4c58 <strlen>
   b96c2:	6823      	ldr	r3, [r4, #0]
   b96c4:	9901      	ldr	r1, [sp, #4]
   b96c6:	68db      	ldr	r3, [r3, #12]
   b96c8:	4602      	mov	r2, r0
   b96ca:	4620      	mov	r0, r4
    }
   b96cc:	b002      	add	sp, #8
   b96ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b96d2:	4718      	bx	r3
    }
   b96d4:	b002      	add	sp, #8
   b96d6:	bd10      	pop	{r4, pc}

000b96d8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b96d8:	b508      	push	{r3, lr}
  return write(str);
   b96da:	f7ff ffeb 	bl	b96b4 <_ZN5Print5writeEPKc>
}
   b96de:	bd08      	pop	{r3, pc}

000b96e0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b96e0:	6803      	ldr	r3, [r0, #0]
   b96e2:	689b      	ldr	r3, [r3, #8]
   b96e4:	4718      	bx	r3

000b96e6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b96e6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b96e8:	210d      	movs	r1, #13
{
   b96ea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b96ec:	f7ff fff8 	bl	b96e0 <_ZN5Print5printEc>
  n += print('\n');
   b96f0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b96f2:	4604      	mov	r4, r0
  n += print('\n');
   b96f4:	4628      	mov	r0, r5
   b96f6:	f7ff fff3 	bl	b96e0 <_ZN5Print5printEc>
  return n;
}
   b96fa:	4420      	add	r0, r4
   b96fc:	bd38      	pop	{r3, r4, r5, pc}

000b96fe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b96fe:	b538      	push	{r3, r4, r5, lr}
   b9700:	4605      	mov	r5, r0
  return write(str);
   b9702:	f7ff ffd7 	bl	b96b4 <_ZN5Print5writeEPKc>
   b9706:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9708:	4628      	mov	r0, r5
   b970a:	f7ff ffec 	bl	b96e6 <_ZN5Print7printlnEv>
  return n;
}
   b970e:	4420      	add	r0, r4
   b9710:	bd38      	pop	{r3, r4, r5, pc}

000b9712 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9712:	b530      	push	{r4, r5, lr}
   b9714:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9716:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9718:	2a01      	cmp	r2, #1
  *str = '\0';
   b971a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b971e:	bf98      	it	ls
   b9720:	220a      	movls	r2, #10
   b9722:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9724:	460d      	mov	r5, r1
   b9726:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b972a:	fb01 5312 	mls	r3, r1, r2, r5
   b972e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9732:	2b09      	cmp	r3, #9
   b9734:	bf94      	ite	ls
   b9736:	3330      	addls	r3, #48	; 0x30
   b9738:	3337      	addhi	r3, #55	; 0x37
   b973a:	b2db      	uxtb	r3, r3
  } while(n);
   b973c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b973e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9742:	d9ef      	bls.n	b9724 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9744:	4621      	mov	r1, r4
   b9746:	f7ff ffb5 	bl	b96b4 <_ZN5Print5writeEPKc>
}
   b974a:	b00b      	add	sp, #44	; 0x2c
   b974c:	bd30      	pop	{r4, r5, pc}
	...

000b9750 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b9750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9754:	ec55 4b10 	vmov	r4, r5, d0
   b9758:	4606      	mov	r6, r0
   b975a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b975c:	ee10 2a10 	vmov	r2, s0
   b9760:	ee10 0a10 	vmov	r0, s0
   b9764:	462b      	mov	r3, r5
   b9766:	4629      	mov	r1, r5
   b9768:	f7fb f8b0 	bl	b48cc <__aeabi_dcmpun>
   b976c:	b140      	cbz	r0, b9780 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b976e:	4953      	ldr	r1, [pc, #332]	; (b98bc <_ZN5Print10printFloatEdh+0x16c>)
   b9770:	4630      	mov	r0, r6
   b9772:	f7ff ff9f 	bl	b96b4 <_ZN5Print5writeEPKc>
   b9776:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b9778:	4650      	mov	r0, sl
   b977a:	b003      	add	sp, #12
   b977c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b9780:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b9784:	4b4e      	ldr	r3, [pc, #312]	; (b98c0 <_ZN5Print10printFloatEdh+0x170>)
   b9786:	f04f 32ff 	mov.w	r2, #4294967295
   b978a:	4620      	mov	r0, r4
   b978c:	4649      	mov	r1, r9
   b978e:	f7fb f89d 	bl	b48cc <__aeabi_dcmpun>
   b9792:	b948      	cbnz	r0, b97a8 <_ZN5Print10printFloatEdh+0x58>
   b9794:	4b4a      	ldr	r3, [pc, #296]	; (b98c0 <_ZN5Print10printFloatEdh+0x170>)
   b9796:	f04f 32ff 	mov.w	r2, #4294967295
   b979a:	4620      	mov	r0, r4
   b979c:	4649      	mov	r1, r9
   b979e:	f7fb f877 	bl	b4890 <__aeabi_dcmple>
   b97a2:	b908      	cbnz	r0, b97a8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b97a4:	4947      	ldr	r1, [pc, #284]	; (b98c4 <_ZN5Print10printFloatEdh+0x174>)
   b97a6:	e7e3      	b.n	b9770 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b97a8:	4b47      	ldr	r3, [pc, #284]	; (b98c8 <_ZN5Print10printFloatEdh+0x178>)
   b97aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b97ae:	4620      	mov	r0, r4
   b97b0:	4629      	mov	r1, r5
   b97b2:	f7fb f881 	bl	b48b8 <__aeabi_dcmpgt>
   b97b6:	b108      	cbz	r0, b97bc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b97b8:	4944      	ldr	r1, [pc, #272]	; (b98cc <_ZN5Print10printFloatEdh+0x17c>)
   b97ba:	e7d9      	b.n	b9770 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b97bc:	4b44      	ldr	r3, [pc, #272]	; (b98d0 <_ZN5Print10printFloatEdh+0x180>)
   b97be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b97c2:	4620      	mov	r0, r4
   b97c4:	4629      	mov	r1, r5
   b97c6:	f7fb f859 	bl	b487c <__aeabi_dcmplt>
   b97ca:	2800      	cmp	r0, #0
   b97cc:	d1f4      	bne.n	b97b8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b97ce:	2200      	movs	r2, #0
   b97d0:	2300      	movs	r3, #0
   b97d2:	4620      	mov	r0, r4
   b97d4:	4629      	mov	r1, r5
   b97d6:	f7fb f851 	bl	b487c <__aeabi_dcmplt>
   b97da:	b1d0      	cbz	r0, b9812 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b97dc:	212d      	movs	r1, #45	; 0x2d
   b97de:	4630      	mov	r0, r6
   b97e0:	f7ff ff7e 	bl	b96e0 <_ZN5Print5printEc>
     number = -number;
   b97e4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b97e8:	4682      	mov	sl, r0
     number = -number;
   b97ea:	461d      	mov	r5, r3
  double rounding = 0.5;
   b97ec:	4939      	ldr	r1, [pc, #228]	; (b98d4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b97ee:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b98dc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b97f2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b97f6:	2000      	movs	r0, #0
    rounding /= 10.0;
   b97f8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b97fc:	fa5f f38b 	uxtb.w	r3, fp
   b9800:	429f      	cmp	r7, r3
   b9802:	d908      	bls.n	b9816 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b9804:	4642      	mov	r2, r8
   b9806:	464b      	mov	r3, r9
   b9808:	f7fa fef0 	bl	b45ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b980c:	f10b 0b01 	add.w	fp, fp, #1
   b9810:	e7f4      	b.n	b97fc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b9812:	4682      	mov	sl, r0
   b9814:	e7ea      	b.n	b97ec <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b9816:	4622      	mov	r2, r4
   b9818:	462b      	mov	r3, r5
   b981a:	f7fa fc07 	bl	b402c <__adddf3>
   b981e:	460d      	mov	r5, r1
   b9820:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b9822:	f7fb f891 	bl	b4948 <__aeabi_d2uiz>
   b9826:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b9828:	f7fa fd3c 	bl	b42a4 <__aeabi_ui2d>
   b982c:	4602      	mov	r2, r0
   b982e:	460b      	mov	r3, r1
   b9830:	4620      	mov	r0, r4
   b9832:	4629      	mov	r1, r5
   b9834:	f7fa fbf8 	bl	b4028 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9838:	220a      	movs	r2, #10
   b983a:	4604      	mov	r4, r0
   b983c:	460d      	mov	r5, r1
   b983e:	4630      	mov	r0, r6
   b9840:	4641      	mov	r1, r8
   b9842:	f7ff ff66 	bl	b9712 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b9846:	4482      	add	sl, r0
  if (digits > 0) {
   b9848:	2f00      	cmp	r7, #0
   b984a:	d095      	beq.n	b9778 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b984c:	4922      	ldr	r1, [pc, #136]	; (b98d8 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b984e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b98dc <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b9852:	4630      	mov	r0, r6
   b9854:	f7ff ff2e 	bl	b96b4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b9858:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b985c:	4482      	add	sl, r0
  while (digits-- > 0)
   b985e:	2f00      	cmp	r7, #0
   b9860:	d08a      	beq.n	b9778 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b9862:	4642      	mov	r2, r8
   b9864:	464b      	mov	r3, r9
   b9866:	4620      	mov	r0, r4
   b9868:	4629      	mov	r1, r5
   b986a:	f7fa fd95 	bl	b4398 <__aeabi_dmul>
   b986e:	4604      	mov	r4, r0
   b9870:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b9872:	f7fb f841 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b9876:	f1b0 0b00 	subs.w	fp, r0, #0
   b987a:	da1c      	bge.n	b98b6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b987c:	212d      	movs	r1, #45	; 0x2d
   b987e:	4630      	mov	r0, r6
   b9880:	f7ff ff2e 	bl	b96e0 <_ZN5Print5printEc>
            val = -n;
   b9884:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b9888:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b988a:	220a      	movs	r2, #10
   b988c:	4630      	mov	r0, r6
   b988e:	9301      	str	r3, [sp, #4]
   b9890:	f7ff ff3f 	bl	b9712 <_ZN5Print11printNumberEmh>
   b9894:	9b01      	ldr	r3, [sp, #4]
   b9896:	4418      	add	r0, r3
    n += print(toPrint);
   b9898:	4482      	add	sl, r0
    remainder -= toPrint;
   b989a:	4658      	mov	r0, fp
   b989c:	f7fa fd12 	bl	b42c4 <__aeabi_i2d>
   b98a0:	4602      	mov	r2, r0
   b98a2:	460b      	mov	r3, r1
   b98a4:	4620      	mov	r0, r4
   b98a6:	4629      	mov	r1, r5
   b98a8:	f7fa fbbe 	bl	b4028 <__aeabi_dsub>
   b98ac:	3f01      	subs	r7, #1
   b98ae:	4604      	mov	r4, r0
   b98b0:	460d      	mov	r5, r1
   b98b2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b98b4:	e7d3      	b.n	b985e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b98b6:	4659      	mov	r1, fp
        size_t t = 0;
   b98b8:	2300      	movs	r3, #0
   b98ba:	e7e6      	b.n	b988a <_ZN5Print10printFloatEdh+0x13a>
   b98bc:	000bb380 	.word	0x000bb380
   b98c0:	7fefffff 	.word	0x7fefffff
   b98c4:	000bb384 	.word	0x000bb384
   b98c8:	41efffff 	.word	0x41efffff
   b98cc:	000bb388 	.word	0x000bb388
   b98d0:	c1efffff 	.word	0xc1efffff
   b98d4:	3fe00000 	.word	0x3fe00000
   b98d8:	000bb2ae 	.word	0x000bb2ae
   b98dc:	40240000 	.word	0x40240000

000b98e0 <_ZN5Print5printEfi>:
{
   b98e0:	b538      	push	{r3, r4, r5, lr}
   b98e2:	4604      	mov	r4, r0
   b98e4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b98e8:	b2cd      	uxtb	r5, r1
   b98ea:	f7fa fcfd 	bl	b42e8 <__aeabi_f2d>
   b98ee:	ec41 0b10 	vmov	d0, r0, r1
   b98f2:	4629      	mov	r1, r5
   b98f4:	4620      	mov	r0, r4
}
   b98f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b98fa:	f7ff bf29 	b.w	b9750 <_ZN5Print10printFloatEdh>
	...

000b9900 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9900:	4b01      	ldr	r3, [pc, #4]	; (b9908 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9902:	4a02      	ldr	r2, [pc, #8]	; (b990c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9904:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9906:	4770      	bx	lr
   b9908:	2003e6e0 	.word	0x2003e6e0
   b990c:	000bb38c 	.word	0x000bb38c

000b9910 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9910:	4b02      	ldr	r3, [pc, #8]	; (b991c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9912:	681a      	ldr	r2, [r3, #0]
   b9914:	4b02      	ldr	r3, [pc, #8]	; (b9920 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9916:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9918:	4770      	bx	lr
   b991a:	bf00      	nop
   b991c:	2003dd88 	.word	0x2003dd88
   b9920:	2003e6e4 	.word	0x2003e6e4

000b9924 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9924:	2100      	movs	r1, #0
   b9926:	f7fc bdc9 	b.w	b64bc <system_delay_ms>
	...

000b992c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b992c:	4b01      	ldr	r3, [pc, #4]	; (b9934 <_GLOBAL__sub_I_RGB+0x8>)
   b992e:	2200      	movs	r2, #0
   b9930:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9932:	4770      	bx	lr
   b9934:	2003e6e8 	.word	0x2003e6e8

000b9938 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9938:	4b01      	ldr	r3, [pc, #4]	; (b9940 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b993a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b993c:	4770      	bx	lr
   b993e:	bf00      	nop
   b9940:	2003dd90 	.word	0x2003dd90

000b9944 <serialEventRun>:
{
   b9944:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9946:	4b0b      	ldr	r3, [pc, #44]	; (b9974 <serialEventRun+0x30>)
   b9948:	b143      	cbz	r3, b995c <serialEventRun+0x18>
   b994a:	f000 f963 	bl	b9c14 <_Z16_fetch_usbserialv>
   b994e:	6803      	ldr	r3, [r0, #0]
   b9950:	691b      	ldr	r3, [r3, #16]
   b9952:	4798      	blx	r3
   b9954:	2800      	cmp	r0, #0
   b9956:	dd01      	ble.n	b995c <serialEventRun+0x18>
        serialEvent();
   b9958:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b995c:	4b06      	ldr	r3, [pc, #24]	; (b9978 <serialEventRun+0x34>)
   b995e:	b143      	cbz	r3, b9972 <serialEventRun+0x2e>
   b9960:	f000 fc22 	bl	ba1a8 <_Z22__fetch_global_Serial1v>
   b9964:	6803      	ldr	r3, [r0, #0]
   b9966:	691b      	ldr	r3, [r3, #16]
   b9968:	4798      	blx	r3
   b996a:	2800      	cmp	r0, #0
   b996c:	dd01      	ble.n	b9972 <serialEventRun+0x2e>
        serialEvent1();
   b996e:	f3af 8000 	nop.w
}
   b9972:	bd08      	pop	{r3, pc}
	...

000b997c <_post_loop>:
{
   b997c:	b508      	push	{r3, lr}
	serialEventRun();
   b997e:	f7ff ffe1 	bl	b9944 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9982:	f7fc fb8d 	bl	b60a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9986:	4b01      	ldr	r3, [pc, #4]	; (b998c <_post_loop+0x10>)
   b9988:	6018      	str	r0, [r3, #0]
}
   b998a:	bd08      	pop	{r3, pc}
   b998c:	2003e740 	.word	0x2003e740

000b9990 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9990:	4805      	ldr	r0, [pc, #20]	; (b99a8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b9992:	4a06      	ldr	r2, [pc, #24]	; (b99ac <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9994:	4906      	ldr	r1, [pc, #24]	; (b99b0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9996:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9998:	1a12      	subs	r2, r2, r0
   b999a:	f000 feff 	bl	ba79c <memcpy>
    __backup_sram_signature = signature;
   b999e:	4b05      	ldr	r3, [pc, #20]	; (b99b4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b99a0:	4a05      	ldr	r2, [pc, #20]	; (b99b8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b99a2:	601a      	str	r2, [r3, #0]
}
   b99a4:	bd08      	pop	{r3, pc}
   b99a6:	bf00      	nop
   b99a8:	2003f400 	.word	0x2003f400
   b99ac:	2003f404 	.word	0x2003f404
   b99b0:	000bbb34 	.word	0x000bbb34
   b99b4:	2003f400 	.word	0x2003f400
   b99b8:	9a271c1e 	.word	0x9a271c1e

000b99bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b99bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b99be:	2300      	movs	r3, #0
   b99c0:	9300      	str	r3, [sp, #0]
   b99c2:	461a      	mov	r2, r3
   b99c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b99c8:	f7fc fd8a 	bl	b64e0 <system_ctrl_set_result>
}
   b99cc:	b003      	add	sp, #12
   b99ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b99d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b99d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b99d6:	8843      	ldrh	r3, [r0, #2]
   b99d8:	2b0a      	cmp	r3, #10
   b99da:	d008      	beq.n	b99ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b99dc:	2b50      	cmp	r3, #80	; 0x50
   b99de:	d10b      	bne.n	b99f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b99e0:	4b09      	ldr	r3, [pc, #36]	; (b9a08 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b99e2:	681b      	ldr	r3, [r3, #0]
   b99e4:	b14b      	cbz	r3, b99fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b99e6:	b003      	add	sp, #12
   b99e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b99ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b99ee:	f7ff ffe5 	bl	b99bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b99f2:	b003      	add	sp, #12
   b99f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b99f8:	2300      	movs	r3, #0
   b99fa:	9300      	str	r3, [sp, #0]
   b99fc:	461a      	mov	r2, r3
   b99fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9a02:	f7fc fd6d 	bl	b64e0 <system_ctrl_set_result>
}
   b9a06:	e7f4      	b.n	b99f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9a08:	2003e6fc 	.word	0x2003e6fc

000b9a0c <module_user_init_hook>:
{
   b9a0c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9a0e:	4812      	ldr	r0, [pc, #72]	; (b9a58 <module_user_init_hook+0x4c>)
   b9a10:	2100      	movs	r1, #0
   b9a12:	f7fc fe07 	bl	b6624 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9a16:	4b11      	ldr	r3, [pc, #68]	; (b9a5c <module_user_init_hook+0x50>)
   b9a18:	681a      	ldr	r2, [r3, #0]
   b9a1a:	4b11      	ldr	r3, [pc, #68]	; (b9a60 <module_user_init_hook+0x54>)
   b9a1c:	429a      	cmp	r2, r3
   b9a1e:	4b11      	ldr	r3, [pc, #68]	; (b9a64 <module_user_init_hook+0x58>)
   b9a20:	bf0c      	ite	eq
   b9a22:	2201      	moveq	r2, #1
   b9a24:	2200      	movne	r2, #0
   b9a26:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9a28:	d001      	beq.n	b9a2e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9a2a:	f7ff ffb1 	bl	b9990 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9a2e:	f7fc fb27 	bl	b6080 <HAL_RNG_GetRandomNumber>
   b9a32:	4604      	mov	r4, r0
    srand(seed);
   b9a34:	f000 fee2 	bl	ba7fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9a38:	4b0b      	ldr	r3, [pc, #44]	; (b9a68 <module_user_init_hook+0x5c>)
   b9a3a:	b113      	cbz	r3, b9a42 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9a3c:	4620      	mov	r0, r4
   b9a3e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9a42:	2100      	movs	r1, #0
   b9a44:	4808      	ldr	r0, [pc, #32]	; (b9a68 <module_user_init_hook+0x5c>)
   b9a46:	f7fc fdb5 	bl	b65b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9a4e:	4807      	ldr	r0, [pc, #28]	; (b9a6c <module_user_init_hook+0x60>)
   b9a50:	2100      	movs	r1, #0
   b9a52:	f7fc bd3b 	b.w	b64cc <system_ctrl_set_app_request_handler>
   b9a56:	bf00      	nop
   b9a58:	000b9939 	.word	0x000b9939
   b9a5c:	2003f400 	.word	0x2003f400
   b9a60:	9a271c1e 	.word	0x9a271c1e
   b9a64:	2003e6f8 	.word	0x2003e6f8
   b9a68:	00000000 	.word	0x00000000
   b9a6c:	000b99d5 	.word	0x000b99d5

000b9a70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9a70:	4770      	bx	lr

000b9a72 <_ZN9IPAddressD0Ev>:
   b9a72:	b510      	push	{r4, lr}
   b9a74:	2118      	movs	r1, #24
   b9a76:	4604      	mov	r4, r0
   b9a78:	f7fb f935 	bl	b4ce6 <_ZdlPvj>
   b9a7c:	4620      	mov	r0, r4
   b9a7e:	bd10      	pop	{r4, pc}

000b9a80 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9a80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9a82:	7d03      	ldrb	r3, [r0, #20]
   b9a84:	2b06      	cmp	r3, #6
{
   b9a86:	b08d      	sub	sp, #52	; 0x34
   b9a88:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9a8a:	f100 0704 	add.w	r7, r0, #4
   b9a8e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9a92:	d012      	beq.n	b9aba <_ZNK9IPAddress7printToER5Print+0x3a>
   b9a94:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b9a98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9a9c:	220a      	movs	r2, #10
   b9a9e:	4630      	mov	r0, r6
   b9aa0:	f7ff fe37 	bl	b9712 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9aa4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9aa6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9aa8:	d019      	beq.n	b9ade <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9aaa:	2c00      	cmp	r4, #0
   b9aac:	d0f4      	beq.n	b9a98 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9aae:	212e      	movs	r1, #46	; 0x2e
   b9ab0:	4630      	mov	r0, r6
   b9ab2:	f7ff fe15 	bl	b96e0 <_ZN5Print5printEc>
   b9ab6:	4404      	add	r4, r0
   b9ab8:	e7ee      	b.n	b9a98 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9aba:	232f      	movs	r3, #47	; 0x2f
   b9abc:	466a      	mov	r2, sp
   b9abe:	4639      	mov	r1, r7
   b9ac0:	200a      	movs	r0, #10
		buf[0] = 0;
   b9ac2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9ac6:	f7fc fbc9 	bl	b625c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9aca:	4668      	mov	r0, sp
   b9acc:	f7fb f8c4 	bl	b4c58 <strlen>
   b9ad0:	6833      	ldr	r3, [r6, #0]
   b9ad2:	4602      	mov	r2, r0
   b9ad4:	68db      	ldr	r3, [r3, #12]
   b9ad6:	4669      	mov	r1, sp
   b9ad8:	4630      	mov	r0, r6
   b9ada:	4798      	blx	r3
   b9adc:	4604      	mov	r4, r0
    }
    return n;
}
   b9ade:	4620      	mov	r0, r4
   b9ae0:	b00d      	add	sp, #52	; 0x34
   b9ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9ae4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9ae4:	b510      	push	{r4, lr}
   b9ae6:	4b05      	ldr	r3, [pc, #20]	; (b9afc <_ZN9IPAddressC1Ev+0x18>)
   b9ae8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9aea:	2211      	movs	r2, #17
   b9aec:	f840 3b04 	str.w	r3, [r0], #4
   b9af0:	2100      	movs	r1, #0
   b9af2:	f000 fe7b 	bl	ba7ec <memset>
}
   b9af6:	4620      	mov	r0, r4
   b9af8:	bd10      	pop	{r4, pc}
   b9afa:	bf00      	nop
   b9afc:	000bb3b4 	.word	0x000bb3b4

000b9b00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9b00:	4603      	mov	r3, r0
   b9b02:	4a07      	ldr	r2, [pc, #28]	; (b9b20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9b04:	b510      	push	{r4, lr}
   b9b06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9b0a:	f101 0210 	add.w	r2, r1, #16
   b9b0e:	f851 4b04 	ldr.w	r4, [r1], #4
   b9b12:	f843 4b04 	str.w	r4, [r3], #4
   b9b16:	4291      	cmp	r1, r2
   b9b18:	d1f9      	bne.n	b9b0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9b1a:	780a      	ldrb	r2, [r1, #0]
   b9b1c:	701a      	strb	r2, [r3, #0]
}
   b9b1e:	bd10      	pop	{r4, pc}
   b9b20:	000bb3b4 	.word	0x000bb3b4

000b9b24 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9b24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9b26:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9b2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9b2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9b32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9b36:	2304      	movs	r3, #4
   b9b38:	6041      	str	r1, [r0, #4]
   b9b3a:	7503      	strb	r3, [r0, #20]
}
   b9b3c:	bd10      	pop	{r4, pc}
	...

000b9b40 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9b40:	b507      	push	{r0, r1, r2, lr}
   b9b42:	4b06      	ldr	r3, [pc, #24]	; (b9b5c <_ZN9IPAddressC1EPKh+0x1c>)
   b9b44:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9b46:	78cb      	ldrb	r3, [r1, #3]
   b9b48:	9300      	str	r3, [sp, #0]
   b9b4a:	788b      	ldrb	r3, [r1, #2]
   b9b4c:	784a      	ldrb	r2, [r1, #1]
   b9b4e:	7809      	ldrb	r1, [r1, #0]
   b9b50:	f7ff ffe8 	bl	b9b24 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9b54:	b003      	add	sp, #12
   b9b56:	f85d fb04 	ldr.w	pc, [sp], #4
   b9b5a:	bf00      	nop
   b9b5c:	000bb3b4 	.word	0x000bb3b4

000b9b60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9b60:	7441      	strb	r1, [r0, #17]
}
   b9b62:	4770      	bx	lr

000b9b64 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9b64:	4770      	bx	lr

000b9b66 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9b66:	4770      	bx	lr

000b9b68 <_ZN9USBSerial4readEv>:
{
   b9b68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9b6a:	2100      	movs	r1, #0
   b9b6c:	7c00      	ldrb	r0, [r0, #16]
   b9b6e:	f7fc fc75 	bl	b645c <HAL_USB_USART_Receive_Data>
}
   b9b72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9b76:	bd08      	pop	{r3, pc}

000b9b78 <_ZN9USBSerial4peekEv>:
{
   b9b78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9b7a:	2101      	movs	r1, #1
   b9b7c:	7c00      	ldrb	r0, [r0, #16]
   b9b7e:	f7fc fc6d 	bl	b645c <HAL_USB_USART_Receive_Data>
}
   b9b82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9b86:	bd08      	pop	{r3, pc}

000b9b88 <_ZN9USBSerial17availableForWriteEv>:
{
   b9b88:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9b8a:	7c00      	ldrb	r0, [r0, #16]
   b9b8c:	f7fc fc5e 	bl	b644c <HAL_USB_USART_Available_Data_For_Write>
}
   b9b90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9b94:	bd08      	pop	{r3, pc}

000b9b96 <_ZN9USBSerial9availableEv>:
{
   b9b96:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9b98:	7c00      	ldrb	r0, [r0, #16]
   b9b9a:	f7fc fc4f 	bl	b643c <HAL_USB_USART_Available_Data>
}
   b9b9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9ba2:	bd08      	pop	{r3, pc}

000b9ba4 <_ZN9USBSerial5writeEh>:
{
   b9ba4:	b513      	push	{r0, r1, r4, lr}
   b9ba6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9ba8:	7c00      	ldrb	r0, [r0, #16]
{
   b9baa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9bac:	f7fc fc4e 	bl	b644c <HAL_USB_USART_Available_Data_For_Write>
   b9bb0:	2800      	cmp	r0, #0
   b9bb2:	9901      	ldr	r1, [sp, #4]
   b9bb4:	dc01      	bgt.n	b9bba <_ZN9USBSerial5writeEh+0x16>
   b9bb6:	7c60      	ldrb	r0, [r4, #17]
   b9bb8:	b120      	cbz	r0, b9bc4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9bba:	7c20      	ldrb	r0, [r4, #16]
   b9bbc:	f7fc fc56 	bl	b646c <HAL_USB_USART_Send_Data>
   b9bc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9bc4:	b002      	add	sp, #8
   b9bc6:	bd10      	pop	{r4, pc}

000b9bc8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9bc8:	7c00      	ldrb	r0, [r0, #16]
   b9bca:	f7fc bc57 	b.w	b647c <HAL_USB_USART_Flush_Data>

000b9bce <_ZN9USBSerialD0Ev>:
   b9bce:	b510      	push	{r4, lr}
   b9bd0:	2114      	movs	r1, #20
   b9bd2:	4604      	mov	r4, r0
   b9bd4:	f7fb f887 	bl	b4ce6 <_ZdlPvj>
   b9bd8:	4620      	mov	r0, r4
   b9bda:	bd10      	pop	{r4, pc}

000b9bdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9bdc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9be2:	4604      	mov	r4, r0
   b9be4:	4608      	mov	r0, r1
   b9be6:	2100      	movs	r1, #0
   b9be8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9bec:	4b04      	ldr	r3, [pc, #16]	; (b9c00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9bee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9bf0:	2301      	movs	r3, #1
  _serial = serial;
   b9bf2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9bf4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9bf6:	4611      	mov	r1, r2
   b9bf8:	f7fc fc18 	bl	b642c <HAL_USB_USART_Init>
}
   b9bfc:	4620      	mov	r0, r4
   b9bfe:	bd10      	pop	{r4, pc}
   b9c00:	000bb3c8 	.word	0x000bb3c8

000b9c04 <_Z19acquireSerialBufferv>:
{
   b9c04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9c06:	2214      	movs	r2, #20
{
   b9c08:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9c0a:	2100      	movs	r1, #0
   b9c0c:	f000 fdee 	bl	ba7ec <memset>
}
   b9c10:	4620      	mov	r0, r4
   b9c12:	bd10      	pop	{r4, pc}

000b9c14 <_Z16_fetch_usbserialv>:
{
   b9c14:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9c16:	4c0f      	ldr	r4, [pc, #60]	; (b9c54 <_Z16_fetch_usbserialv+0x40>)
{
   b9c18:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9c1a:	a803      	add	r0, sp, #12
   b9c1c:	f7ff fff2 	bl	b9c04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9c20:	7821      	ldrb	r1, [r4, #0]
   b9c22:	f3bf 8f5b 	dmb	ish
   b9c26:	f011 0101 	ands.w	r1, r1, #1
   b9c2a:	d10f      	bne.n	b9c4c <_Z16_fetch_usbserialv+0x38>
   b9c2c:	4620      	mov	r0, r4
   b9c2e:	9101      	str	r1, [sp, #4]
   b9c30:	f7fb f868 	bl	b4d04 <__cxa_guard_acquire>
   b9c34:	9901      	ldr	r1, [sp, #4]
   b9c36:	b148      	cbz	r0, b9c4c <_Z16_fetch_usbserialv+0x38>
   b9c38:	aa03      	add	r2, sp, #12
   b9c3a:	4807      	ldr	r0, [pc, #28]	; (b9c58 <_Z16_fetch_usbserialv+0x44>)
   b9c3c:	f7ff ffce 	bl	b9bdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9c40:	4620      	mov	r0, r4
   b9c42:	f7fb f864 	bl	b4d0e <__cxa_guard_release>
   b9c46:	4805      	ldr	r0, [pc, #20]	; (b9c5c <_Z16_fetch_usbserialv+0x48>)
   b9c48:	f000 fd92 	bl	ba770 <atexit>
	return _usbserial;
}
   b9c4c:	4802      	ldr	r0, [pc, #8]	; (b9c58 <_Z16_fetch_usbserialv+0x44>)
   b9c4e:	b008      	add	sp, #32
   b9c50:	bd10      	pop	{r4, pc}
   b9c52:	bf00      	nop
   b9c54:	2003e700 	.word	0x2003e700
   b9c58:	2003e704 	.word	0x2003e704
   b9c5c:	000b9b65 	.word	0x000b9b65

000b9c60 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b9c60:	4700      	bx	r0
	...

000b9c64 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b9c64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b9c68:	2400      	movs	r4, #0
{
   b9c6a:	461d      	mov	r5, r3
   b9c6c:	460f      	mov	r7, r1
   b9c6e:	4690      	mov	r8, r2
   b9c70:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b9c72:	f7fc f9ed 	bl	b6050 <hal_interrupt_detach>
  if (priority >= 0) {
   b9c76:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9c78:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b9c7c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9c80:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b9c84:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b9c88:	bfa2      	ittt	ge
   b9c8a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b9c8e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b9c92:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9c94:	4907      	ldr	r1, [pc, #28]	; (b9cb4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b9c96:	9400      	str	r4, [sp, #0]
   b9c98:	4643      	mov	r3, r8
   b9c9a:	463a      	mov	r2, r7
   b9c9c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b9c9e:	bfa8      	it	ge
   b9ca0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9ca4:	f7fc f9cc 	bl	b6040 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b9ca8:	fab0 f080 	clz	r0, r0
   b9cac:	0940      	lsrs	r0, r0, #5
   b9cae:	b004      	add	sp, #16
   b9cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9cb4:	000b9c61 	.word	0x000b9c61

000b9cb8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9cb8:	4770      	bx	lr

000b9cba <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9cba:	7441      	strb	r1, [r0, #17]
}
   b9cbc:	4770      	bx	lr

000b9cbe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9cbe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9cc0:	7c00      	ldrb	r0, [r0, #16]
   b9cc2:	f7fc fb03 	bl	b62cc <hal_usart_available_data_for_write>
}
   b9cc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9cca:	bd08      	pop	{r3, pc}

000b9ccc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9ccc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9cce:	7c00      	ldrb	r0, [r0, #16]
   b9cd0:	f7fc fad4 	bl	b627c <hal_usart_available>
}
   b9cd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9cd8:	bd08      	pop	{r3, pc}

000b9cda <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9cda:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9cdc:	7c00      	ldrb	r0, [r0, #16]
   b9cde:	f7fc fadd 	bl	b629c <hal_usart_peek>
}
   b9ce2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9ce6:	bd08      	pop	{r3, pc}

000b9ce8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9ce8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9cea:	7c00      	ldrb	r0, [r0, #16]
   b9cec:	f7fc face 	bl	b628c <hal_usart_read>
}
   b9cf0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9cf4:	bd08      	pop	{r3, pc}

000b9cf6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9cf6:	7c00      	ldrb	r0, [r0, #16]
   b9cf8:	f7fc bad8 	b.w	b62ac <hal_usart_flush>

000b9cfc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9cfe:	7c45      	ldrb	r5, [r0, #17]
{
   b9d00:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d02:	b12d      	cbz	r5, b9d10 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9d04:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9d06:	b003      	add	sp, #12
   b9d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9d0c:	f7fc baae 	b.w	b626c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d10:	7c00      	ldrb	r0, [r0, #16]
   b9d12:	9101      	str	r1, [sp, #4]
   b9d14:	f7fc fada 	bl	b62cc <hal_usart_available_data_for_write>
   b9d18:	2800      	cmp	r0, #0
   b9d1a:	9901      	ldr	r1, [sp, #4]
   b9d1c:	dcf2      	bgt.n	b9d04 <_ZN11USARTSerial5writeEh+0x8>
}
   b9d1e:	4628      	mov	r0, r5
   b9d20:	b003      	add	sp, #12
   b9d22:	bd30      	pop	{r4, r5, pc}

000b9d24 <_ZN11USARTSerialD0Ev>:
   b9d24:	b510      	push	{r4, lr}
   b9d26:	2114      	movs	r1, #20
   b9d28:	4604      	mov	r4, r0
   b9d2a:	f7fa ffdc 	bl	b4ce6 <_ZdlPvj>
   b9d2e:	4620      	mov	r0, r4
   b9d30:	bd10      	pop	{r4, pc}
	...

000b9d34 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9d34:	b510      	push	{r4, lr}
   b9d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9d3a:	4604      	mov	r4, r0
   b9d3c:	4608      	mov	r0, r1
   b9d3e:	4611      	mov	r1, r2
   b9d40:	2200      	movs	r2, #0
   b9d42:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9d46:	4b04      	ldr	r3, [pc, #16]	; (b9d58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9d48:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9d4a:	2301      	movs	r3, #1
  _serial = serial;
   b9d4c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9d4e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9d50:	f7fc fac4 	bl	b62dc <hal_usart_init_ex>
}
   b9d54:	4620      	mov	r0, r4
   b9d56:	bd10      	pop	{r4, pc}
   b9d58:	000bb3f8 	.word	0x000bb3f8

000b9d5c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9d5c:	4770      	bx	lr

000b9d5e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9d60:	4606      	mov	r6, r0
   b9d62:	4615      	mov	r5, r2
   b9d64:	460c      	mov	r4, r1
   b9d66:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9d68:	42bc      	cmp	r4, r7
   b9d6a:	d006      	beq.n	b9d7a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9d6c:	6833      	ldr	r3, [r6, #0]
   b9d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9d72:	689b      	ldr	r3, [r3, #8]
   b9d74:	4630      	mov	r0, r6
   b9d76:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9d78:	e7f6      	b.n	b9d68 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9d7a:	4628      	mov	r0, r5
   b9d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9d7e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9d7e:	7c00      	ldrb	r0, [r0, #16]
   b9d80:	2200      	movs	r2, #0
   b9d82:	f7fc bacb 	b.w	b631c <hal_i2c_write>

000b9d86 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9d86:	7c00      	ldrb	r0, [r0, #16]
   b9d88:	2100      	movs	r1, #0
   b9d8a:	f7fc bacf 	b.w	b632c <hal_i2c_available>

000b9d8e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9d8e:	7c00      	ldrb	r0, [r0, #16]
   b9d90:	2100      	movs	r1, #0
   b9d92:	f7fc bad3 	b.w	b633c <hal_i2c_read>

000b9d96 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9d96:	7c00      	ldrb	r0, [r0, #16]
   b9d98:	2100      	movs	r1, #0
   b9d9a:	f7fc bad7 	b.w	b634c <hal_i2c_peek>

000b9d9e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9d9e:	7c00      	ldrb	r0, [r0, #16]
   b9da0:	2100      	movs	r1, #0
   b9da2:	f7fc badb 	b.w	b635c <hal_i2c_flush>

000b9da6 <_ZN7TwoWireD0Ev>:
   b9da6:	b510      	push	{r4, lr}
   b9da8:	2114      	movs	r1, #20
   b9daa:	4604      	mov	r4, r0
   b9dac:	f7fa ff9b 	bl	b4ce6 <_ZdlPvj>
   b9db0:	4620      	mov	r0, r4
   b9db2:	bd10      	pop	{r4, pc}

000b9db4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9db4:	b538      	push	{r3, r4, r5, lr}
   b9db6:	4604      	mov	r4, r0
   b9db8:	4615      	mov	r5, r2
   b9dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9dbe:	2200      	movs	r2, #0
   b9dc0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9dc4:	4b09      	ldr	r3, [pc, #36]	; (b9dec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b9dc6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9dc8:	4608      	mov	r0, r1
   b9dca:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b9dcc:	4629      	mov	r1, r5
   b9dce:	f7fc fad5 	bl	b637c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b9dd2:	30bf      	adds	r0, #191	; 0xbf
   b9dd4:	d108      	bne.n	b9de8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b9dd6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b9dd8:	07db      	lsls	r3, r3, #31
   b9dda:	d505      	bpl.n	b9de8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b9ddc:	6868      	ldr	r0, [r5, #4]
   b9dde:	f7fc fbf9 	bl	b65d4 <free>
    free(conf.tx_buffer);
   b9de2:	68e8      	ldr	r0, [r5, #12]
   b9de4:	f7fc fbf6 	bl	b65d4 <free>
}
   b9de8:	4620      	mov	r0, r4
   b9dea:	bd38      	pop	{r3, r4, r5, pc}
   b9dec:	000bb428 	.word	0x000bb428

000b9df0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9df0:	2300      	movs	r3, #0
   b9df2:	7c00      	ldrb	r0, [r0, #16]
   b9df4:	461a      	mov	r2, r3
   b9df6:	4619      	mov	r1, r3
   b9df8:	f7fc ba78 	b.w	b62ec <hal_i2c_begin>

000b9dfc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9dfc:	7c00      	ldrb	r0, [r0, #16]
   b9dfe:	2200      	movs	r2, #0
   b9e00:	f7fc ba7c 	b.w	b62fc <hal_i2c_begin_transmission>

000b9e04 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9e04:	b2c9      	uxtb	r1, r1
   b9e06:	f7ff bff9 	b.w	b9dfc <_ZN7TwoWire17beginTransmissionEh>

000b9e0a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9e0a:	7c00      	ldrb	r0, [r0, #16]
   b9e0c:	2200      	movs	r2, #0
   b9e0e:	f7fc ba7d 	b.w	b630c <hal_i2c_end_transmission>

000b9e12 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9e12:	2101      	movs	r1, #1
   b9e14:	f7ff bff9 	b.w	b9e0a <_ZN7TwoWire15endTransmissionEh>

000b9e18 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9e18:	2200      	movs	r2, #0
   b9e1a:	6840      	ldr	r0, [r0, #4]
   b9e1c:	4611      	mov	r1, r2
   b9e1e:	f7fc bb81 	b.w	b6524 <network_ready>

000b9e22 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9e22:	2200      	movs	r2, #0
   b9e24:	6840      	ldr	r0, [r0, #4]
   b9e26:	4611      	mov	r1, r2
   b9e28:	f7fc bb9c 	b.w	b6564 <network_listening>

000b9e2c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9e2c:	2200      	movs	r2, #0
   b9e2e:	6840      	ldr	r0, [r0, #4]
   b9e30:	4611      	mov	r1, r2
   b9e32:	f7fc bba7 	b.w	b6584 <network_get_listen_timeout>

000b9e36 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9e36:	6840      	ldr	r0, [r0, #4]
   b9e38:	2200      	movs	r2, #0
   b9e3a:	f7fc bb9b 	b.w	b6574 <network_set_listen_timeout>

000b9e3e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9e3e:	6840      	ldr	r0, [r0, #4]
   b9e40:	2200      	movs	r2, #0
   b9e42:	f081 0101 	eor.w	r1, r1, #1
   b9e46:	f7fc bb85 	b.w	b6554 <network_listen>

000b9e4a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9e4a:	2300      	movs	r3, #0
   b9e4c:	6840      	ldr	r0, [r0, #4]
   b9e4e:	461a      	mov	r2, r3
   b9e50:	4619      	mov	r1, r3
   b9e52:	f7fc bb77 	b.w	b6544 <network_off>

000b9e56 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9e56:	2300      	movs	r3, #0
   b9e58:	6840      	ldr	r0, [r0, #4]
   b9e5a:	461a      	mov	r2, r3
   b9e5c:	4619      	mov	r1, r3
   b9e5e:	f7fc bb69 	b.w	b6534 <network_on>

000b9e62 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9e62:	2200      	movs	r2, #0
   b9e64:	6840      	ldr	r0, [r0, #4]
   b9e66:	4611      	mov	r1, r2
   b9e68:	f7fc bb4c 	b.w	b6504 <network_connecting>

000b9e6c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9e6c:	6840      	ldr	r0, [r0, #4]
   b9e6e:	2200      	movs	r2, #0
   b9e70:	2102      	movs	r1, #2
   b9e72:	f7fc bb4f 	b.w	b6514 <network_disconnect>

000b9e76 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9e76:	2300      	movs	r3, #0
   b9e78:	6840      	ldr	r0, [r0, #4]
   b9e7a:	461a      	mov	r2, r3
   b9e7c:	f7fc bb3a 	b.w	b64f4 <network_connect>

000b9e80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9e80:	4b02      	ldr	r3, [pc, #8]	; (b9e8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9e82:	2204      	movs	r2, #4
   b9e84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9e86:	4a02      	ldr	r2, [pc, #8]	; (b9e90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9e88:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9e8a:	4770      	bx	lr
   b9e8c:	2003e718 	.word	0x2003e718
   b9e90:	000bb450 	.word	0x000bb450

000b9e94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9e94:	2300      	movs	r3, #0
   b9e96:	6840      	ldr	r0, [r0, #4]
   b9e98:	461a      	mov	r2, r3
   b9e9a:	f7fc bb2b 	b.w	b64f4 <network_connect>

000b9e9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9e9e:	6840      	ldr	r0, [r0, #4]
   b9ea0:	2200      	movs	r2, #0
   b9ea2:	2102      	movs	r1, #2
   b9ea4:	f7fc bb36 	b.w	b6514 <network_disconnect>

000b9ea8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9ea8:	2200      	movs	r2, #0
   b9eaa:	6840      	ldr	r0, [r0, #4]
   b9eac:	4611      	mov	r1, r2
   b9eae:	f7fc bb29 	b.w	b6504 <network_connecting>

000b9eb2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9eb2:	2200      	movs	r2, #0
   b9eb4:	6840      	ldr	r0, [r0, #4]
   b9eb6:	4611      	mov	r1, r2
   b9eb8:	f7fc bb34 	b.w	b6524 <network_ready>

000b9ebc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9ebc:	2300      	movs	r3, #0
   b9ebe:	6840      	ldr	r0, [r0, #4]
   b9ec0:	461a      	mov	r2, r3
   b9ec2:	4619      	mov	r1, r3
   b9ec4:	f7fc bb36 	b.w	b6534 <network_on>

000b9ec8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9ec8:	2300      	movs	r3, #0
   b9eca:	6840      	ldr	r0, [r0, #4]
   b9ecc:	461a      	mov	r2, r3
   b9ece:	4619      	mov	r1, r3
   b9ed0:	f7fc bb38 	b.w	b6544 <network_off>

000b9ed4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9ed4:	6840      	ldr	r0, [r0, #4]
   b9ed6:	2100      	movs	r1, #0
   b9ed8:	f7fc bb5c 	b.w	b6594 <network_is_on>

000b9edc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9edc:	6840      	ldr	r0, [r0, #4]
   b9ede:	2100      	movs	r1, #0
   b9ee0:	f7fc bb60 	b.w	b65a4 <network_is_off>

000b9ee4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9ee4:	6840      	ldr	r0, [r0, #4]
   b9ee6:	2200      	movs	r2, #0
   b9ee8:	f081 0101 	eor.w	r1, r1, #1
   b9eec:	f7fc bb32 	b.w	b6554 <network_listen>

000b9ef0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9ef0:	6840      	ldr	r0, [r0, #4]
   b9ef2:	2200      	movs	r2, #0
   b9ef4:	f7fc bb3e 	b.w	b6574 <network_set_listen_timeout>

000b9ef8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9ef8:	2200      	movs	r2, #0
   b9efa:	6840      	ldr	r0, [r0, #4]
   b9efc:	4611      	mov	r1, r2
   b9efe:	f7fc bb41 	b.w	b6584 <network_get_listen_timeout>

000b9f02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9f02:	2200      	movs	r2, #0
   b9f04:	6840      	ldr	r0, [r0, #4]
   b9f06:	4611      	mov	r1, r2
   b9f08:	f7fc bb2c 	b.w	b6564 <network_listening>

000b9f0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9f10:	b095      	sub	sp, #84	; 0x54
   b9f12:	4614      	mov	r4, r2
   b9f14:	460d      	mov	r5, r1
   b9f16:	4607      	mov	r7, r0
    IPAddress addr;
   b9f18:	f7ff fde4 	bl	b9ae4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9f1c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9f1e:	221c      	movs	r2, #28
   b9f20:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9f22:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9f24:	f000 fc62 	bl	ba7ec <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9f28:	2340      	movs	r3, #64	; 0x40
   b9f2a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9f2c:	4620      	mov	r0, r4
   b9f2e:	466b      	mov	r3, sp
   b9f30:	aa0c      	add	r2, sp, #48	; 0x30
   b9f32:	2100      	movs	r1, #0
   b9f34:	f7fc f854 	bl	b5fe0 <netdb_getaddrinfo>
    if (!r) {
   b9f38:	4604      	mov	r4, r0
   b9f3a:	2800      	cmp	r0, #0
   b9f3c:	d14b      	bne.n	b9fd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9f3e:	4602      	mov	r2, r0
   b9f40:	2101      	movs	r1, #1
   b9f42:	6868      	ldr	r0, [r5, #4]
   b9f44:	f7fc faee 	bl	b6524 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9f48:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9f4a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9f4c:	4622      	mov	r2, r4
   b9f4e:	6868      	ldr	r0, [r5, #4]
   b9f50:	f7fc fae8 	bl	b6524 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9f54:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9f56:	4681      	mov	r9, r0
        bool ok = false;
   b9f58:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9f5a:	2e00      	cmp	r6, #0
   b9f5c:	d03b      	beq.n	b9fd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9f5e:	2900      	cmp	r1, #0
   b9f60:	d139      	bne.n	b9fd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9f62:	6873      	ldr	r3, [r6, #4]
   b9f64:	2b02      	cmp	r3, #2
   b9f66:	d003      	beq.n	b9f70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9f68:	2b0a      	cmp	r3, #10
   b9f6a:	d011      	beq.n	b9f90 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9f6c:	69f6      	ldr	r6, [r6, #28]
   b9f6e:	e7f4      	b.n	b9f5a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9f70:	f1b8 0f00 	cmp.w	r8, #0
   b9f74:	d0fa      	beq.n	b9f6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9f76:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9f78:	a806      	add	r0, sp, #24
   b9f7a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9f7c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9f7e:	f7ff fddf 	bl	b9b40 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9f84:	1d3c      	adds	r4, r7, #4
   b9f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9f88:	682b      	ldr	r3, [r5, #0]
   b9f8a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9f8c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9f8e:	e7ed      	b.n	b9f6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9f90:	f1b9 0f00 	cmp.w	r9, #0
   b9f94:	d0ea      	beq.n	b9f6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9f96:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9f98:	2210      	movs	r2, #16
   b9f9a:	a801      	add	r0, sp, #4
   b9f9c:	f000 fc26 	bl	ba7ec <memset>
                    a.v = 6;
   b9fa0:	2306      	movs	r3, #6
   b9fa2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9fa6:	ad01      	add	r5, sp, #4
   b9fa8:	f104 0308 	add.w	r3, r4, #8
   b9fac:	3418      	adds	r4, #24
   b9fae:	6818      	ldr	r0, [r3, #0]
   b9fb0:	6859      	ldr	r1, [r3, #4]
   b9fb2:	462a      	mov	r2, r5
   b9fb4:	c203      	stmia	r2!, {r0, r1}
   b9fb6:	3308      	adds	r3, #8
   b9fb8:	42a3      	cmp	r3, r4
   b9fba:	4615      	mov	r5, r2
   b9fbc:	d1f7      	bne.n	b9fae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9fbe:	a901      	add	r1, sp, #4
   b9fc0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9fc2:	ad07      	add	r5, sp, #28
   b9fc4:	f7ff fd9c 	bl	b9b00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9fca:	1d3c      	adds	r4, r7, #4
   b9fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9fce:	682b      	ldr	r3, [r5, #0]
   b9fd0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9fd2:	4649      	mov	r1, r9
   b9fd4:	e7ca      	b.n	b9f6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9fd6:	9800      	ldr	r0, [sp, #0]
   b9fd8:	f7fb fffa 	bl	b5fd0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9fdc:	4638      	mov	r0, r7
   b9fde:	b015      	add	sp, #84	; 0x54
   b9fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9fe4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9fe4:	4b02      	ldr	r3, [pc, #8]	; (b9ff0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9fe6:	4a03      	ldr	r2, [pc, #12]	; (b9ff4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9fe8:	601a      	str	r2, [r3, #0]
   b9fea:	2200      	movs	r2, #0
   b9fec:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b9fee:	4770      	bx	lr
   b9ff0:	2003e720 	.word	0x2003e720
   b9ff4:	000bb48c 	.word	0x000bb48c

000b9ff8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9ff8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9ffa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9ffc:	d902      	bls.n	ba004 <pinAvailable+0xc>
    return false;
   b9ffe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ba000:	b002      	add	sp, #8
   ba002:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ba004:	f1a0 030b 	sub.w	r3, r0, #11
   ba008:	2b02      	cmp	r3, #2
   ba00a:	d81a      	bhi.n	ba042 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ba00c:	4c17      	ldr	r4, [pc, #92]	; (ba06c <pinAvailable+0x74>)
   ba00e:	7821      	ldrb	r1, [r4, #0]
   ba010:	f3bf 8f5b 	dmb	ish
   ba014:	f011 0101 	ands.w	r1, r1, #1
   ba018:	d10b      	bne.n	ba032 <pinAvailable+0x3a>
   ba01a:	4620      	mov	r0, r4
   ba01c:	9101      	str	r1, [sp, #4]
   ba01e:	f7fa fe71 	bl	b4d04 <__cxa_guard_acquire>
   ba022:	9901      	ldr	r1, [sp, #4]
   ba024:	b128      	cbz	r0, ba032 <pinAvailable+0x3a>
   ba026:	4812      	ldr	r0, [pc, #72]	; (ba070 <pinAvailable+0x78>)
   ba028:	f7fc fb48 	bl	b66bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba02c:	4620      	mov	r0, r4
   ba02e:	f7fa fe6e 	bl	b4d0e <__cxa_guard_release>
   ba032:	4b0f      	ldr	r3, [pc, #60]	; (ba070 <pinAvailable+0x78>)
   ba034:	7818      	ldrb	r0, [r3, #0]
   ba036:	f7fc f9d9 	bl	b63ec <hal_spi_is_enabled>
   ba03a:	2800      	cmp	r0, #0
   ba03c:	d1df      	bne.n	b9ffe <pinAvailable+0x6>
  return true; // 'pin' is available
   ba03e:	2001      	movs	r0, #1
   ba040:	e7de      	b.n	ba000 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ba042:	2801      	cmp	r0, #1
   ba044:	d809      	bhi.n	ba05a <pinAvailable+0x62>
   ba046:	f000 f8ef 	bl	ba228 <_Z19__fetch_global_Wirev>
   ba04a:	2100      	movs	r1, #0
   ba04c:	7c00      	ldrb	r0, [r0, #16]
   ba04e:	f7fc f98d 	bl	b636c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ba052:	f080 0001 	eor.w	r0, r0, #1
   ba056:	b2c0      	uxtb	r0, r0
   ba058:	e7d2      	b.n	ba000 <pinAvailable+0x8>
   ba05a:	3809      	subs	r0, #9
   ba05c:	2801      	cmp	r0, #1
   ba05e:	d8ee      	bhi.n	ba03e <pinAvailable+0x46>
   ba060:	f000 f8a2 	bl	ba1a8 <_Z22__fetch_global_Serial1v>
   ba064:	7c00      	ldrb	r0, [r0, #16]
   ba066:	f7fc f929 	bl	b62bc <hal_usart_is_enabled>
   ba06a:	e7f2      	b.n	ba052 <pinAvailable+0x5a>
   ba06c:	2003e6ac 	.word	0x2003e6ac
   ba070:	2003e6b0 	.word	0x2003e6b0

000ba074 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba074:	2823      	cmp	r0, #35	; 0x23
{
   ba076:	b538      	push	{r3, r4, r5, lr}
   ba078:	4604      	mov	r4, r0
   ba07a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba07c:	d80a      	bhi.n	ba094 <pinMode+0x20>
   ba07e:	29ff      	cmp	r1, #255	; 0xff
   ba080:	d008      	beq.n	ba094 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ba082:	f7ff ffb9 	bl	b9ff8 <pinAvailable>
   ba086:	b128      	cbz	r0, ba094 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   ba088:	4629      	mov	r1, r5
   ba08a:	4620      	mov	r0, r4
}
   ba08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   ba090:	f7fb bfbe 	b.w	b6010 <hal_gpio_mode>
}
   ba094:	bd38      	pop	{r3, r4, r5, pc}

000ba096 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   ba096:	b538      	push	{r3, r4, r5, lr}
   ba098:	4604      	mov	r4, r0
   ba09a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   ba09c:	f7fb ffc0 	bl	b6020 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   ba0a0:	28ff      	cmp	r0, #255	; 0xff
   ba0a2:	d010      	beq.n	ba0c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   ba0a4:	2806      	cmp	r0, #6
   ba0a6:	d804      	bhi.n	ba0b2 <digitalWrite+0x1c>
   ba0a8:	234d      	movs	r3, #77	; 0x4d
   ba0aa:	fa23 f000 	lsr.w	r0, r3, r0
   ba0ae:	07c3      	lsls	r3, r0, #31
   ba0b0:	d409      	bmi.n	ba0c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   ba0b2:	4620      	mov	r0, r4
   ba0b4:	f7ff ffa0 	bl	b9ff8 <pinAvailable>
   ba0b8:	b128      	cbz	r0, ba0c6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   ba0ba:	4629      	mov	r1, r5
   ba0bc:	4620      	mov	r0, r4
}
   ba0be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   ba0c2:	f7fb bfb5 	b.w	b6030 <hal_gpio_write>
}
   ba0c6:	bd38      	pop	{r3, r4, r5, pc}

000ba0c8 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   ba0c8:	280d      	cmp	r0, #13
{
   ba0ca:	b510      	push	{r4, lr}
   ba0cc:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   ba0ce:	bf9c      	itt	ls
   ba0d0:	340e      	addls	r4, #14
   ba0d2:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   ba0d4:	4620      	mov	r0, r4
   ba0d6:	f7ff ff8f 	bl	b9ff8 <pinAvailable>
   ba0da:	b150      	cbz	r0, ba0f2 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   ba0dc:	2103      	movs	r1, #3
   ba0de:	4620      	mov	r0, r4
   ba0e0:	f7fb ff8e 	bl	b6000 <hal_pin_validate_function>
   ba0e4:	2803      	cmp	r0, #3
   ba0e6:	d104      	bne.n	ba0f2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   ba0e8:	4620      	mov	r0, r4
}
   ba0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   ba0ee:	f7fb bfb7 	b.w	b6060 <hal_adc_read>
}
   ba0f2:	2000      	movs	r0, #0
   ba0f4:	bd10      	pop	{r4, pc}

000ba0f6 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(hal_pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   ba0f6:	b570      	push	{r4, r5, r6, lr}
   ba0f8:	4604      	mov	r4, r0
   ba0fa:	460d      	mov	r5, r1
   ba0fc:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   ba0fe:	f7ff ff7b 	bl	b9ff8 <pinAvailable>
   ba102:	b198      	cbz	r0, ba12c <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   ba104:	2102      	movs	r1, #2
   ba106:	4620      	mov	r0, r4
   ba108:	f7fb ff7a 	bl	b6000 <hal_pin_validate_function>
   ba10c:	2802      	cmp	r0, #2
   ba10e:	d10d      	bne.n	ba12c <_Z11analogWritetmm+0x36>
    {
        PinMode mode = hal_gpio_get_mode(pin);
   ba110:	4620      	mov	r0, r4
   ba112:	f7fb ff85 	bl	b6020 <hal_gpio_get_mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   ba116:	2801      	cmp	r0, #1
   ba118:	d001      	beq.n	ba11e <_Z11analogWritetmm+0x28>
   ba11a:	2804      	cmp	r0, #4
   ba11c:	d106      	bne.n	ba12c <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   ba11e:	4632      	mov	r2, r6
   ba120:	4629      	mov	r1, r5
   ba122:	4620      	mov	r0, r4
    }
}
   ba124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   ba128:	f7fb bfa2 	b.w	b6070 <hal_pwm_write_with_frequency_ext>
}
   ba12c:	bd70      	pop	{r4, r5, r6, pc}

000ba12e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   ba12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba132:	4690      	mov	r8, r2
   ba134:	461f      	mov	r7, r3
   ba136:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   ba138:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   ba13a:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   ba13c:	f1c4 0107 	rsb	r1, r4, #7
   ba140:	f1b8 0f00 	cmp.w	r8, #0
   ba144:	d112      	bne.n	ba16c <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   ba146:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   ba14a:	f001 0101 	and.w	r1, r1, #1
   ba14e:	4630      	mov	r0, r6
   ba150:	f7ff ffa1 	bl	ba096 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   ba154:	2101      	movs	r1, #1
   ba156:	4628      	mov	r0, r5
   ba158:	f7ff ff9d 	bl	ba096 <digitalWrite>
    digitalWrite(clockPin, LOW);
   ba15c:	2100      	movs	r1, #0
   ba15e:	4628      	mov	r0, r5
   ba160:	f7ff ff99 	bl	ba096 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   ba164:	3c01      	subs	r4, #1
   ba166:	d2e9      	bcs.n	ba13c <shiftOut+0xe>
  }
}
   ba168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   ba16c:	fa47 f104 	asr.w	r1, r7, r4
   ba170:	e7eb      	b.n	ba14a <shiftOut+0x1c>

000ba172 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba172:	4770      	bx	lr

000ba174 <_Z20acquireSerial1Bufferv>:
{
   ba174:	b538      	push	{r3, r4, r5, lr}
   ba176:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba178:	2514      	movs	r5, #20
   ba17a:	462a      	mov	r2, r5
   ba17c:	2100      	movs	r1, #0
   ba17e:	f000 fb35 	bl	ba7ec <memset>
   ba182:	8025      	strh	r5, [r4, #0]
   ba184:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba186:	4907      	ldr	r1, [pc, #28]	; (ba1a4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba188:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba18a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba18c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba18e:	f000 f86f 	bl	ba270 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba192:	4904      	ldr	r1, [pc, #16]	; (ba1a4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba194:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba196:	4628      	mov	r0, r5
   ba198:	f000 f86a 	bl	ba270 <_ZnajRKSt9nothrow_t>
    };
   ba19c:	60e0      	str	r0, [r4, #12]
}
   ba19e:	4620      	mov	r0, r4
   ba1a0:	bd38      	pop	{r3, r4, r5, pc}
   ba1a2:	bf00      	nop
   ba1a4:	000bb4c0 	.word	0x000bb4c0

000ba1a8 <_Z22__fetch_global_Serial1v>:
{
   ba1a8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba1aa:	4d0e      	ldr	r5, [pc, #56]	; (ba1e4 <_Z22__fetch_global_Serial1v+0x3c>)
   ba1ac:	7829      	ldrb	r1, [r5, #0]
   ba1ae:	f3bf 8f5b 	dmb	ish
   ba1b2:	f011 0401 	ands.w	r4, r1, #1
{
   ba1b6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba1b8:	d111      	bne.n	ba1de <_Z22__fetch_global_Serial1v+0x36>
   ba1ba:	4628      	mov	r0, r5
   ba1bc:	f7fa fda2 	bl	b4d04 <__cxa_guard_acquire>
   ba1c0:	b168      	cbz	r0, ba1de <_Z22__fetch_global_Serial1v+0x36>
   ba1c2:	a801      	add	r0, sp, #4
   ba1c4:	f7ff ffd6 	bl	ba174 <_Z20acquireSerial1Bufferv>
   ba1c8:	aa01      	add	r2, sp, #4
   ba1ca:	4621      	mov	r1, r4
   ba1cc:	4806      	ldr	r0, [pc, #24]	; (ba1e8 <_Z22__fetch_global_Serial1v+0x40>)
   ba1ce:	f7ff fdb1 	bl	b9d34 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba1d2:	4628      	mov	r0, r5
   ba1d4:	f7fa fd9b 	bl	b4d0e <__cxa_guard_release>
   ba1d8:	4804      	ldr	r0, [pc, #16]	; (ba1ec <_Z22__fetch_global_Serial1v+0x44>)
   ba1da:	f000 fac9 	bl	ba770 <atexit>
    return serial1;
}
   ba1de:	4802      	ldr	r0, [pc, #8]	; (ba1e8 <_Z22__fetch_global_Serial1v+0x40>)
   ba1e0:	b007      	add	sp, #28
   ba1e2:	bd30      	pop	{r4, r5, pc}
   ba1e4:	2003e728 	.word	0x2003e728
   ba1e8:	2003e72c 	.word	0x2003e72c
   ba1ec:	000ba173 	.word	0x000ba173

000ba1f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba1f0:	4770      	bx	lr
	...

000ba1f4 <_Z17acquireWireBufferv>:
{
   ba1f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   ba1f6:	4b0a      	ldr	r3, [pc, #40]	; (ba220 <_Z17acquireWireBufferv+0x2c>)
   ba1f8:	6003      	str	r3, [r0, #0]
   ba1fa:	2301      	movs	r3, #1
{
   ba1fc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   ba1fe:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba200:	4908      	ldr	r1, [pc, #32]	; (ba224 <_Z17acquireWireBufferv+0x30>)
   ba202:	2020      	movs	r0, #32
   ba204:	f000 f834 	bl	ba270 <_ZnajRKSt9nothrow_t>
	};
   ba208:	2520      	movs	r5, #32
   ba20a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba20c:	4905      	ldr	r1, [pc, #20]	; (ba224 <_Z17acquireWireBufferv+0x30>)
	};
   ba20e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba210:	4628      	mov	r0, r5
   ba212:	f000 f82d 	bl	ba270 <_ZnajRKSt9nothrow_t>
	};
   ba216:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   ba21a:	4620      	mov	r0, r4
   ba21c:	bd38      	pop	{r3, r4, r5, pc}
   ba21e:	bf00      	nop
   ba220:	00010018 	.word	0x00010018
   ba224:	000bb4c0 	.word	0x000bb4c0

000ba228 <_Z19__fetch_global_Wirev>:
{
   ba228:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba22a:	4d0e      	ldr	r5, [pc, #56]	; (ba264 <_Z19__fetch_global_Wirev+0x3c>)
   ba22c:	7829      	ldrb	r1, [r5, #0]
   ba22e:	f3bf 8f5b 	dmb	ish
   ba232:	f011 0401 	ands.w	r4, r1, #1
{
   ba236:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba238:	d111      	bne.n	ba25e <_Z19__fetch_global_Wirev+0x36>
   ba23a:	4628      	mov	r0, r5
   ba23c:	f7fa fd62 	bl	b4d04 <__cxa_guard_acquire>
   ba240:	b168      	cbz	r0, ba25e <_Z19__fetch_global_Wirev+0x36>
   ba242:	4668      	mov	r0, sp
   ba244:	f7ff ffd6 	bl	ba1f4 <_Z17acquireWireBufferv>
   ba248:	466a      	mov	r2, sp
   ba24a:	4621      	mov	r1, r4
   ba24c:	4806      	ldr	r0, [pc, #24]	; (ba268 <_Z19__fetch_global_Wirev+0x40>)
   ba24e:	f7ff fdb1 	bl	b9db4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba252:	4628      	mov	r0, r5
   ba254:	f7fa fd5b 	bl	b4d0e <__cxa_guard_release>
   ba258:	4804      	ldr	r0, [pc, #16]	; (ba26c <_Z19__fetch_global_Wirev+0x44>)
   ba25a:	f000 fa89 	bl	ba770 <atexit>
	return wire;
}
   ba25e:	4802      	ldr	r0, [pc, #8]	; (ba268 <_Z19__fetch_global_Wirev+0x40>)
   ba260:	b007      	add	sp, #28
   ba262:	bd30      	pop	{r4, r5, pc}
   ba264:	2003e744 	.word	0x2003e744
   ba268:	2003e748 	.word	0x2003e748
   ba26c:	000ba1f1 	.word	0x000ba1f1

000ba270 <_ZnajRKSt9nothrow_t>:
   ba270:	f7fa bd37 	b.w	b4ce2 <_Znaj>

000ba274 <_ZSt25__throw_bad_function_callv>:
   ba274:	b508      	push	{r3, lr}
   ba276:	f7fc f9bd 	bl	b65f4 <abort>
	...

000ba27c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba27c:	4901      	ldr	r1, [pc, #4]	; (ba284 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba27e:	f000 b8f9 	b.w	ba474 <_ZNKSt9type_infoeqERKS_>
   ba282:	bf00      	nop
   ba284:	000bb4dc 	.word	0x000bb4dc

000ba288 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba28a:	2400      	movs	r4, #0
   ba28c:	2310      	movs	r3, #16
   ba28e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba292:	6803      	ldr	r3, [r0, #0]
   ba294:	4615      	mov	r5, r2
   ba296:	699e      	ldr	r6, [r3, #24]
   ba298:	6812      	ldr	r2, [r2, #0]
   ba29a:	466b      	mov	r3, sp
   ba29c:	e9cd 4400 	strd	r4, r4, [sp]
   ba2a0:	47b0      	blx	r6
   ba2a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba2a6:	f003 0306 	and.w	r3, r3, #6
   ba2aa:	2b06      	cmp	r3, #6
   ba2ac:	bf03      	ittte	eq
   ba2ae:	9b00      	ldreq	r3, [sp, #0]
   ba2b0:	602b      	streq	r3, [r5, #0]
   ba2b2:	2001      	moveq	r0, #1
   ba2b4:	4620      	movne	r0, r4
   ba2b6:	b004      	add	sp, #16
   ba2b8:	bd70      	pop	{r4, r5, r6, pc}

000ba2ba <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba2ba:	9800      	ldr	r0, [sp, #0]
   ba2bc:	4290      	cmp	r0, r2
   ba2be:	bf14      	ite	ne
   ba2c0:	2001      	movne	r0, #1
   ba2c2:	2006      	moveq	r0, #6
   ba2c4:	4770      	bx	lr
	...

000ba2c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba2c8:	b510      	push	{r4, lr}
   ba2ca:	4b03      	ldr	r3, [pc, #12]	; (ba2d8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba2cc:	6003      	str	r3, [r0, #0]
   ba2ce:	4604      	mov	r4, r0
   ba2d0:	f000 f8cd 	bl	ba46e <_ZNSt9type_infoD1Ev>
   ba2d4:	4620      	mov	r0, r4
   ba2d6:	bd10      	pop	{r4, pc}
   ba2d8:	000bb51c 	.word	0x000bb51c

000ba2dc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba2dc:	b510      	push	{r4, lr}
   ba2de:	4604      	mov	r4, r0
   ba2e0:	f7ff fff2 	bl	ba2c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba2e4:	4620      	mov	r0, r4
   ba2e6:	2108      	movs	r1, #8
   ba2e8:	f7fa fcfd 	bl	b4ce6 <_ZdlPvj>
   ba2ec:	4620      	mov	r0, r4
   ba2ee:	bd10      	pop	{r4, pc}

000ba2f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba2f4:	461f      	mov	r7, r3
   ba2f6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba2fa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba2fe:	4598      	cmp	r8, r3
   ba300:	4606      	mov	r6, r0
   ba302:	4615      	mov	r5, r2
   ba304:	d107      	bne.n	ba316 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba306:	9907      	ldr	r1, [sp, #28]
   ba308:	f000 f8b4 	bl	ba474 <_ZNKSt9type_infoeqERKS_>
   ba30c:	b118      	cbz	r0, ba316 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba30e:	7165      	strb	r5, [r4, #5]
   ba310:	2000      	movs	r0, #0
   ba312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba316:	4639      	mov	r1, r7
   ba318:	4630      	mov	r0, r6
   ba31a:	f000 f8ab 	bl	ba474 <_ZNKSt9type_infoeqERKS_>
   ba31e:	2800      	cmp	r0, #0
   ba320:	d0f6      	beq.n	ba310 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba322:	2301      	movs	r3, #1
   ba324:	f8c4 8000 	str.w	r8, [r4]
   ba328:	7125      	strb	r5, [r4, #4]
   ba32a:	71a3      	strb	r3, [r4, #6]
   ba32c:	e7f0      	b.n	ba310 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba32e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba32e:	b538      	push	{r3, r4, r5, lr}
   ba330:	4615      	mov	r5, r2
   ba332:	461c      	mov	r4, r3
   ba334:	f000 f89e 	bl	ba474 <_ZNKSt9type_infoeqERKS_>
   ba338:	b120      	cbz	r0, ba344 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba33a:	2308      	movs	r3, #8
   ba33c:	60e3      	str	r3, [r4, #12]
   ba33e:	2306      	movs	r3, #6
   ba340:	6025      	str	r5, [r4, #0]
   ba342:	7123      	strb	r3, [r4, #4]
   ba344:	bd38      	pop	{r3, r4, r5, pc}

000ba346 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba346:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba348:	4605      	mov	r5, r0
   ba34a:	460c      	mov	r4, r1
   ba34c:	9201      	str	r2, [sp, #4]
   ba34e:	461e      	mov	r6, r3
   ba350:	f000 f890 	bl	ba474 <_ZNKSt9type_infoeqERKS_>
   ba354:	b950      	cbnz	r0, ba36c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba356:	2e03      	cmp	r6, #3
   ba358:	d808      	bhi.n	ba36c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba35a:	6823      	ldr	r3, [r4, #0]
   ba35c:	9a01      	ldr	r2, [sp, #4]
   ba35e:	695b      	ldr	r3, [r3, #20]
   ba360:	4629      	mov	r1, r5
   ba362:	4620      	mov	r0, r4
   ba364:	b002      	add	sp, #8
   ba366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba36a:	4718      	bx	r3
   ba36c:	b002      	add	sp, #8
   ba36e:	bd70      	pop	{r4, r5, r6, pc}

000ba370 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba370:	b510      	push	{r4, lr}
   ba372:	4b03      	ldr	r3, [pc, #12]	; (ba380 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba374:	6003      	str	r3, [r0, #0]
   ba376:	4604      	mov	r4, r0
   ba378:	f7ff ffa6 	bl	ba2c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba37c:	4620      	mov	r0, r4
   ba37e:	bd10      	pop	{r4, pc}
   ba380:	000bb57c 	.word	0x000bb57c

000ba384 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba384:	b510      	push	{r4, lr}
   ba386:	4604      	mov	r4, r0
   ba388:	f7ff fff2 	bl	ba370 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba38c:	4620      	mov	r0, r4
   ba38e:	210c      	movs	r1, #12
   ba390:	f7fa fca9 	bl	b4ce6 <_ZdlPvj>
   ba394:	4620      	mov	r0, r4
   ba396:	bd10      	pop	{r4, pc}

000ba398 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba39a:	9f08      	ldr	r7, [sp, #32]
   ba39c:	4297      	cmp	r7, r2
   ba39e:	4605      	mov	r5, r0
   ba3a0:	460e      	mov	r6, r1
   ba3a2:	4614      	mov	r4, r2
   ba3a4:	d00a      	beq.n	ba3bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba3a6:	68a8      	ldr	r0, [r5, #8]
   ba3a8:	6802      	ldr	r2, [r0, #0]
   ba3aa:	9708      	str	r7, [sp, #32]
   ba3ac:	6a15      	ldr	r5, [r2, #32]
   ba3ae:	4631      	mov	r1, r6
   ba3b0:	4622      	mov	r2, r4
   ba3b2:	46ac      	mov	ip, r5
   ba3b4:	b003      	add	sp, #12
   ba3b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba3ba:	4760      	bx	ip
   ba3bc:	4619      	mov	r1, r3
   ba3be:	9301      	str	r3, [sp, #4]
   ba3c0:	f000 f858 	bl	ba474 <_ZNKSt9type_infoeqERKS_>
   ba3c4:	9b01      	ldr	r3, [sp, #4]
   ba3c6:	2800      	cmp	r0, #0
   ba3c8:	d0ed      	beq.n	ba3a6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba3ca:	2006      	movs	r0, #6
   ba3cc:	b003      	add	sp, #12
   ba3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba3d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba3d0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba3d4:	460d      	mov	r5, r1
   ba3d6:	4619      	mov	r1, r3
   ba3d8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba3dc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba3e0:	4681      	mov	r9, r0
   ba3e2:	4617      	mov	r7, r2
   ba3e4:	4698      	mov	r8, r3
   ba3e6:	f000 f845 	bl	ba474 <_ZNKSt9type_infoeqERKS_>
   ba3ea:	b190      	cbz	r0, ba412 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba3ec:	2d00      	cmp	r5, #0
   ba3ee:	6034      	str	r4, [r6, #0]
   ba3f0:	7137      	strb	r7, [r6, #4]
   ba3f2:	db09      	blt.n	ba408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba3f4:	1961      	adds	r1, r4, r5
   ba3f6:	458a      	cmp	sl, r1
   ba3f8:	bf0c      	ite	eq
   ba3fa:	2106      	moveq	r1, #6
   ba3fc:	2101      	movne	r1, #1
   ba3fe:	71b1      	strb	r1, [r6, #6]
   ba400:	2000      	movs	r0, #0
   ba402:	b001      	add	sp, #4
   ba404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba408:	3502      	adds	r5, #2
   ba40a:	d1f9      	bne.n	ba400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba40c:	2301      	movs	r3, #1
   ba40e:	71b3      	strb	r3, [r6, #6]
   ba410:	e7f6      	b.n	ba400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba412:	4554      	cmp	r4, sl
   ba414:	d106      	bne.n	ba424 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba416:	4659      	mov	r1, fp
   ba418:	4648      	mov	r0, r9
   ba41a:	f000 f82b 	bl	ba474 <_ZNKSt9type_infoeqERKS_>
   ba41e:	b108      	cbz	r0, ba424 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba420:	7177      	strb	r7, [r6, #5]
   ba422:	e7ed      	b.n	ba400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba424:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba428:	6803      	ldr	r3, [r0, #0]
   ba42a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba42e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba432:	69dc      	ldr	r4, [r3, #28]
   ba434:	463a      	mov	r2, r7
   ba436:	4643      	mov	r3, r8
   ba438:	4629      	mov	r1, r5
   ba43a:	46a4      	mov	ip, r4
   ba43c:	b001      	add	sp, #4
   ba43e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba442:	4760      	bx	ip

000ba444 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba448:	4607      	mov	r7, r0
   ba44a:	460c      	mov	r4, r1
   ba44c:	4615      	mov	r5, r2
   ba44e:	461e      	mov	r6, r3
   ba450:	f7ff ff6d 	bl	ba32e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba454:	b948      	cbnz	r0, ba46a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba456:	68b8      	ldr	r0, [r7, #8]
   ba458:	6803      	ldr	r3, [r0, #0]
   ba45a:	699f      	ldr	r7, [r3, #24]
   ba45c:	462a      	mov	r2, r5
   ba45e:	4633      	mov	r3, r6
   ba460:	4621      	mov	r1, r4
   ba462:	46bc      	mov	ip, r7
   ba464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba468:	4760      	bx	ip
   ba46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba46e <_ZNSt9type_infoD1Ev>:
   ba46e:	4770      	bx	lr

000ba470 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba470:	2000      	movs	r0, #0
   ba472:	4770      	bx	lr

000ba474 <_ZNKSt9type_infoeqERKS_>:
   ba474:	4281      	cmp	r1, r0
   ba476:	b508      	push	{r3, lr}
   ba478:	d00e      	beq.n	ba498 <_ZNKSt9type_infoeqERKS_+0x24>
   ba47a:	6840      	ldr	r0, [r0, #4]
   ba47c:	7803      	ldrb	r3, [r0, #0]
   ba47e:	2b2a      	cmp	r3, #42	; 0x2a
   ba480:	d00c      	beq.n	ba49c <_ZNKSt9type_infoeqERKS_+0x28>
   ba482:	6849      	ldr	r1, [r1, #4]
   ba484:	780b      	ldrb	r3, [r1, #0]
   ba486:	2b2a      	cmp	r3, #42	; 0x2a
   ba488:	bf08      	it	eq
   ba48a:	3101      	addeq	r1, #1
   ba48c:	f7fa fbda 	bl	b4c44 <strcmp>
   ba490:	fab0 f080 	clz	r0, r0
   ba494:	0940      	lsrs	r0, r0, #5
   ba496:	bd08      	pop	{r3, pc}
   ba498:	2001      	movs	r0, #1
   ba49a:	e7fc      	b.n	ba496 <_ZNKSt9type_infoeqERKS_+0x22>
   ba49c:	2000      	movs	r0, #0
   ba49e:	e7fa      	b.n	ba496 <_ZNKSt9type_infoeqERKS_+0x22>

000ba4a0 <logf>:
   ba4a0:	b508      	push	{r3, lr}
   ba4a2:	ed2d 8b02 	vpush	{d8}
   ba4a6:	eeb0 8a40 	vmov.f32	s16, s0
   ba4aa:	f000 f857 	bl	ba55c <__ieee754_logf>
   ba4ae:	4b14      	ldr	r3, [pc, #80]	; (ba500 <logf+0x60>)
   ba4b0:	f993 3000 	ldrsb.w	r3, [r3]
   ba4b4:	3301      	adds	r3, #1
   ba4b6:	d014      	beq.n	ba4e2 <logf+0x42>
   ba4b8:	eeb4 8a48 	vcmp.f32	s16, s16
   ba4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba4c0:	d60f      	bvs.n	ba4e2 <logf+0x42>
   ba4c2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   ba4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba4ca:	dc0a      	bgt.n	ba4e2 <logf+0x42>
   ba4cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
   ba4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba4d4:	d108      	bne.n	ba4e8 <logf+0x48>
   ba4d6:	f7fc f895 	bl	b6604 <__errno>
   ba4da:	2322      	movs	r3, #34	; 0x22
   ba4dc:	ed9f 0a09 	vldr	s0, [pc, #36]	; ba504 <logf+0x64>
   ba4e0:	6003      	str	r3, [r0, #0]
   ba4e2:	ecbd 8b02 	vpop	{d8}
   ba4e6:	bd08      	pop	{r3, pc}
   ba4e8:	f7fc f88c 	bl	b6604 <__errno>
   ba4ec:	ecbd 8b02 	vpop	{d8}
   ba4f0:	4603      	mov	r3, r0
   ba4f2:	2221      	movs	r2, #33	; 0x21
   ba4f4:	601a      	str	r2, [r3, #0]
   ba4f6:	4804      	ldr	r0, [pc, #16]	; (ba508 <logf+0x68>)
   ba4f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba4fc:	f000 b932 	b.w	ba764 <nanf>
   ba500:	2003dd8c 	.word	0x2003dd8c
   ba504:	ff800000 	.word	0xff800000
   ba508:	000bb5b8 	.word	0x000bb5b8

000ba50c <sqrtf>:
   ba50c:	b508      	push	{r3, lr}
   ba50e:	ed2d 8b02 	vpush	{d8}
   ba512:	eeb0 8a40 	vmov.f32	s16, s0
   ba516:	f000 f921 	bl	ba75c <__ieee754_sqrtf>
   ba51a:	4b0e      	ldr	r3, [pc, #56]	; (ba554 <sqrtf+0x48>)
   ba51c:	f993 3000 	ldrsb.w	r3, [r3]
   ba520:	3301      	adds	r3, #1
   ba522:	d00b      	beq.n	ba53c <sqrtf+0x30>
   ba524:	eeb4 8a48 	vcmp.f32	s16, s16
   ba528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba52c:	d606      	bvs.n	ba53c <sqrtf+0x30>
   ba52e:	eddf 8a0a 	vldr	s17, [pc, #40]	; ba558 <sqrtf+0x4c>
   ba532:	eeb4 8ae8 	vcmpe.f32	s16, s17
   ba536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba53a:	d402      	bmi.n	ba542 <sqrtf+0x36>
   ba53c:	ecbd 8b02 	vpop	{d8}
   ba540:	bd08      	pop	{r3, pc}
   ba542:	f7fc f85f 	bl	b6604 <__errno>
   ba546:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   ba54a:	ecbd 8b02 	vpop	{d8}
   ba54e:	2321      	movs	r3, #33	; 0x21
   ba550:	6003      	str	r3, [r0, #0]
   ba552:	bd08      	pop	{r3, pc}
   ba554:	2003dd8c 	.word	0x2003dd8c
   ba558:	00000000 	.word	0x00000000

000ba55c <__ieee754_logf>:
   ba55c:	ee10 3a10 	vmov	r3, s0
   ba560:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   ba564:	d02e      	beq.n	ba5c4 <__ieee754_logf+0x68>
   ba566:	2b00      	cmp	r3, #0
   ba568:	db33      	blt.n	ba5d2 <__ieee754_logf+0x76>
   ba56a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   ba56e:	da40      	bge.n	ba5f2 <__ieee754_logf+0x96>
   ba570:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   ba574:	db34      	blt.n	ba5e0 <__ieee754_logf+0x84>
   ba576:	f04f 0c00 	mov.w	ip, #0
   ba57a:	4868      	ldr	r0, [pc, #416]	; (ba71c <__ieee754_logf+0x1c0>)
   ba57c:	f3c3 0116 	ubfx	r1, r3, #0, #23
   ba580:	4408      	add	r0, r1
   ba582:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   ba586:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   ba58a:	430a      	orrs	r2, r1
   ba58c:	15db      	asrs	r3, r3, #23
   ba58e:	ee00 2a10 	vmov	s0, r2
   ba592:	3b7f      	subs	r3, #127	; 0x7f
   ba594:	4a62      	ldr	r2, [pc, #392]	; (ba720 <__ieee754_logf+0x1c4>)
   ba596:	4463      	add	r3, ip
   ba598:	f101 0c0f 	add.w	ip, r1, #15
   ba59c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   ba5a0:	ea0c 0202 	and.w	r2, ip, r2
   ba5a4:	ee30 0a67 	vsub.f32	s0, s0, s15
   ba5a8:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   ba5ac:	bb22      	cbnz	r2, ba5f8 <__ieee754_logf+0x9c>
   ba5ae:	eeb5 0a40 	vcmp.f32	s0, #0.0
   ba5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba5b6:	d160      	bne.n	ba67a <__ieee754_logf+0x11e>
   ba5b8:	2b00      	cmp	r3, #0
   ba5ba:	f040 8092 	bne.w	ba6e2 <__ieee754_logf+0x186>
   ba5be:	ed9f 0a59 	vldr	s0, [pc, #356]	; ba724 <__ieee754_logf+0x1c8>
   ba5c2:	4770      	bx	lr
   ba5c4:	ed9f 7a58 	vldr	s14, [pc, #352]	; ba728 <__ieee754_logf+0x1cc>
   ba5c8:	eddf 7a56 	vldr	s15, [pc, #344]	; ba724 <__ieee754_logf+0x1c8>
   ba5cc:	ee87 0a27 	vdiv.f32	s0, s14, s15
   ba5d0:	4770      	bx	lr
   ba5d2:	ee70 7a40 	vsub.f32	s15, s0, s0
   ba5d6:	ed9f 7a53 	vldr	s14, [pc, #332]	; ba724 <__ieee754_logf+0x1c8>
   ba5da:	ee87 0a87 	vdiv.f32	s0, s15, s14
   ba5de:	4770      	bx	lr
   ba5e0:	eddf 7a52 	vldr	s15, [pc, #328]	; ba72c <__ieee754_logf+0x1d0>
   ba5e4:	ee60 7a27 	vmul.f32	s15, s0, s15
   ba5e8:	f06f 0c18 	mvn.w	ip, #24
   ba5ec:	ee17 3a90 	vmov	r3, s15
   ba5f0:	e7c3      	b.n	ba57a <__ieee754_logf+0x1e>
   ba5f2:	ee30 0a00 	vadd.f32	s0, s0, s0
   ba5f6:	4770      	bx	lr
   ba5f8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   ba5fc:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba600:	ee07 3a10 	vmov	s14, r3
   ba604:	ee80 4a27 	vdiv.f32	s8, s0, s15
   ba608:	4849      	ldr	r0, [pc, #292]	; (ba730 <__ieee754_logf+0x1d4>)
   ba60a:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   ba60e:	4408      	add	r0, r1
   ba610:	f502 7222 	add.w	r2, r2, #648	; 0x288
   ba614:	4302      	orrs	r2, r0
   ba616:	2a00      	cmp	r2, #0
   ba618:	ed9f 3a46 	vldr	s6, [pc, #280]	; ba734 <__ieee754_logf+0x1d8>
   ba61c:	eddf 4a46 	vldr	s9, [pc, #280]	; ba738 <__ieee754_logf+0x1dc>
   ba620:	eddf 5a46 	vldr	s11, [pc, #280]	; ba73c <__ieee754_logf+0x1e0>
   ba624:	eddf 3a46 	vldr	s7, [pc, #280]	; ba740 <__ieee754_logf+0x1e4>
   ba628:	ed9f 5a46 	vldr	s10, [pc, #280]	; ba744 <__ieee754_logf+0x1e8>
   ba62c:	eddf 7a46 	vldr	s15, [pc, #280]	; ba748 <__ieee754_logf+0x1ec>
   ba630:	eddf 6a46 	vldr	s13, [pc, #280]	; ba74c <__ieee754_logf+0x1f0>
   ba634:	ee24 6a04 	vmul.f32	s12, s8, s8
   ba638:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   ba63c:	ee26 7a06 	vmul.f32	s14, s12, s12
   ba640:	eee7 4a03 	vfma.f32	s9, s14, s6
   ba644:	eea7 5a23 	vfma.f32	s10, s14, s7
   ba648:	eee4 5a87 	vfma.f32	s11, s9, s14
   ba64c:	eee5 6a07 	vfma.f32	s13, s10, s14
   ba650:	eee5 7a87 	vfma.f32	s15, s11, s14
   ba654:	ee67 7a86 	vmul.f32	s15, s15, s12
   ba658:	eee6 7a87 	vfma.f32	s15, s13, s14
   ba65c:	dd2a      	ble.n	ba6b4 <__ieee754_logf+0x158>
   ba65e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   ba662:	ee20 7a07 	vmul.f32	s14, s0, s14
   ba666:	ee27 7a00 	vmul.f32	s14, s14, s0
   ba66a:	bb4b      	cbnz	r3, ba6c0 <__ieee754_logf+0x164>
   ba66c:	ee77 7a87 	vadd.f32	s15, s15, s14
   ba670:	eea7 7ac4 	vfms.f32	s14, s15, s8
   ba674:	ee30 0a47 	vsub.f32	s0, s0, s14
   ba678:	4770      	bx	lr
   ba67a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   ba67e:	eddf 6a34 	vldr	s13, [pc, #208]	; ba750 <__ieee754_logf+0x1f4>
   ba682:	eef0 7a47 	vmov.f32	s15, s14
   ba686:	eee0 7a66 	vfms.f32	s15, s0, s13
   ba68a:	ee20 7a00 	vmul.f32	s14, s0, s0
   ba68e:	ee27 7a27 	vmul.f32	s14, s14, s15
   ba692:	2b00      	cmp	r3, #0
   ba694:	d0ee      	beq.n	ba674 <__ieee754_logf+0x118>
   ba696:	ee07 3a90 	vmov	s15, r3
   ba69a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; ba754 <__ieee754_logf+0x1f8>
   ba69e:	eddf 6a2e 	vldr	s13, [pc, #184]	; ba758 <__ieee754_logf+0x1fc>
   ba6a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba6a6:	eea7 7ac6 	vfms.f32	s14, s15, s12
   ba6aa:	ee37 0a40 	vsub.f32	s0, s14, s0
   ba6ae:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   ba6b2:	4770      	bx	lr
   ba6b4:	bb13      	cbnz	r3, ba6fc <__ieee754_logf+0x1a0>
   ba6b6:	ee70 7a67 	vsub.f32	s15, s0, s15
   ba6ba:	eea7 0ac4 	vfms.f32	s0, s15, s8
   ba6be:	4770      	bx	lr
   ba6c0:	eddf 6a24 	vldr	s13, [pc, #144]	; ba754 <__ieee754_logf+0x1f8>
   ba6c4:	ed9f 6a24 	vldr	s12, [pc, #144]	; ba758 <__ieee754_logf+0x1fc>
   ba6c8:	ee77 7a87 	vadd.f32	s15, s15, s14
   ba6cc:	ee62 6aa6 	vmul.f32	s13, s5, s13
   ba6d0:	eee7 6a84 	vfma.f32	s13, s15, s8
   ba6d4:	ee37 7a66 	vsub.f32	s14, s14, s13
   ba6d8:	ee37 0a40 	vsub.f32	s0, s14, s0
   ba6dc:	ee92 0a86 	vfnms.f32	s0, s5, s12
   ba6e0:	4770      	bx	lr
   ba6e2:	ee07 3a90 	vmov	s15, r3
   ba6e6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; ba754 <__ieee754_logf+0x1f8>
   ba6ea:	ed9f 7a1b 	vldr	s14, [pc, #108]	; ba758 <__ieee754_logf+0x1fc>
   ba6ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba6f2:	ee27 0a80 	vmul.f32	s0, s15, s0
   ba6f6:	eea7 0a87 	vfma.f32	s0, s15, s14
   ba6fa:	4770      	bx	lr
   ba6fc:	ed9f 7a15 	vldr	s14, [pc, #84]	; ba754 <__ieee754_logf+0x1f8>
   ba700:	eddf 6a15 	vldr	s13, [pc, #84]	; ba758 <__ieee754_logf+0x1fc>
   ba704:	ee70 7a67 	vsub.f32	s15, s0, s15
   ba708:	ee27 7a62 	vnmul.f32	s14, s14, s5
   ba70c:	eea7 7a84 	vfma.f32	s14, s15, s8
   ba710:	ee37 0a40 	vsub.f32	s0, s14, s0
   ba714:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   ba718:	4770      	bx	lr
   ba71a:	bf00      	nop
   ba71c:	004afb20 	.word	0x004afb20
   ba720:	007ffff0 	.word	0x007ffff0
   ba724:	00000000 	.word	0x00000000
   ba728:	cc000000 	.word	0xcc000000
   ba72c:	4c000000 	.word	0x4c000000
   ba730:	ffcf5c30 	.word	0xffcf5c30
   ba734:	3e178897 	.word	0x3e178897
   ba738:	3e3a3325 	.word	0x3e3a3325
   ba73c:	3e924925 	.word	0x3e924925
   ba740:	3e1cd04f 	.word	0x3e1cd04f
   ba744:	3e638e29 	.word	0x3e638e29
   ba748:	3f2aaaab 	.word	0x3f2aaaab
   ba74c:	3ecccccd 	.word	0x3ecccccd
   ba750:	3eaaaaab 	.word	0x3eaaaaab
   ba754:	3717f7d1 	.word	0x3717f7d1
   ba758:	3f317180 	.word	0x3f317180

000ba75c <__ieee754_sqrtf>:
   ba75c:	eeb1 0ac0 	vsqrt.f32	s0, s0
   ba760:	4770      	bx	lr
   ba762:	bf00      	nop

000ba764 <nanf>:
   ba764:	ed9f 0a01 	vldr	s0, [pc, #4]	; ba76c <nanf+0x8>
   ba768:	4770      	bx	lr
   ba76a:	bf00      	nop
   ba76c:	7fc00000 	.word	0x7fc00000

000ba770 <atexit>:
   ba770:	2300      	movs	r3, #0
   ba772:	4601      	mov	r1, r0
   ba774:	461a      	mov	r2, r3
   ba776:	4618      	mov	r0, r3
   ba778:	f000 b882 	b.w	ba880 <__register_exitproc>

000ba77c <memcmp>:
   ba77c:	b510      	push	{r4, lr}
   ba77e:	3901      	subs	r1, #1
   ba780:	4402      	add	r2, r0
   ba782:	4290      	cmp	r0, r2
   ba784:	d101      	bne.n	ba78a <memcmp+0xe>
   ba786:	2000      	movs	r0, #0
   ba788:	e005      	b.n	ba796 <memcmp+0x1a>
   ba78a:	7803      	ldrb	r3, [r0, #0]
   ba78c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba790:	42a3      	cmp	r3, r4
   ba792:	d001      	beq.n	ba798 <memcmp+0x1c>
   ba794:	1b18      	subs	r0, r3, r4
   ba796:	bd10      	pop	{r4, pc}
   ba798:	3001      	adds	r0, #1
   ba79a:	e7f2      	b.n	ba782 <memcmp+0x6>

000ba79c <memcpy>:
   ba79c:	440a      	add	r2, r1
   ba79e:	4291      	cmp	r1, r2
   ba7a0:	f100 33ff 	add.w	r3, r0, #4294967295
   ba7a4:	d100      	bne.n	ba7a8 <memcpy+0xc>
   ba7a6:	4770      	bx	lr
   ba7a8:	b510      	push	{r4, lr}
   ba7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba7ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba7b2:	4291      	cmp	r1, r2
   ba7b4:	d1f9      	bne.n	ba7aa <memcpy+0xe>
   ba7b6:	bd10      	pop	{r4, pc}

000ba7b8 <memmove>:
   ba7b8:	4288      	cmp	r0, r1
   ba7ba:	b510      	push	{r4, lr}
   ba7bc:	eb01 0402 	add.w	r4, r1, r2
   ba7c0:	d902      	bls.n	ba7c8 <memmove+0x10>
   ba7c2:	4284      	cmp	r4, r0
   ba7c4:	4623      	mov	r3, r4
   ba7c6:	d807      	bhi.n	ba7d8 <memmove+0x20>
   ba7c8:	1e43      	subs	r3, r0, #1
   ba7ca:	42a1      	cmp	r1, r4
   ba7cc:	d008      	beq.n	ba7e0 <memmove+0x28>
   ba7ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba7d2:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba7d6:	e7f8      	b.n	ba7ca <memmove+0x12>
   ba7d8:	4402      	add	r2, r0
   ba7da:	4601      	mov	r1, r0
   ba7dc:	428a      	cmp	r2, r1
   ba7de:	d100      	bne.n	ba7e2 <memmove+0x2a>
   ba7e0:	bd10      	pop	{r4, pc}
   ba7e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba7e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba7ea:	e7f7      	b.n	ba7dc <memmove+0x24>

000ba7ec <memset>:
   ba7ec:	4402      	add	r2, r0
   ba7ee:	4603      	mov	r3, r0
   ba7f0:	4293      	cmp	r3, r2
   ba7f2:	d100      	bne.n	ba7f6 <memset+0xa>
   ba7f4:	4770      	bx	lr
   ba7f6:	f803 1b01 	strb.w	r1, [r3], #1
   ba7fa:	e7f9      	b.n	ba7f0 <memset+0x4>

000ba7fc <srand>:
   ba7fc:	b538      	push	{r3, r4, r5, lr}
   ba7fe:	4b10      	ldr	r3, [pc, #64]	; (ba840 <srand+0x44>)
   ba800:	681d      	ldr	r5, [r3, #0]
   ba802:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba804:	4604      	mov	r4, r0
   ba806:	b9b3      	cbnz	r3, ba836 <srand+0x3a>
   ba808:	2018      	movs	r0, #24
   ba80a:	f7fb fedb 	bl	b65c4 <malloc>
   ba80e:	4602      	mov	r2, r0
   ba810:	63a8      	str	r0, [r5, #56]	; 0x38
   ba812:	b920      	cbnz	r0, ba81e <srand+0x22>
   ba814:	4b0b      	ldr	r3, [pc, #44]	; (ba844 <srand+0x48>)
   ba816:	480c      	ldr	r0, [pc, #48]	; (ba848 <srand+0x4c>)
   ba818:	2142      	movs	r1, #66	; 0x42
   ba81a:	f7fb fefb 	bl	b6614 <__assert_func>
   ba81e:	490b      	ldr	r1, [pc, #44]	; (ba84c <srand+0x50>)
   ba820:	4b0b      	ldr	r3, [pc, #44]	; (ba850 <srand+0x54>)
   ba822:	e9c0 1300 	strd	r1, r3, [r0]
   ba826:	4b0b      	ldr	r3, [pc, #44]	; (ba854 <srand+0x58>)
   ba828:	6083      	str	r3, [r0, #8]
   ba82a:	230b      	movs	r3, #11
   ba82c:	8183      	strh	r3, [r0, #12]
   ba82e:	2100      	movs	r1, #0
   ba830:	2001      	movs	r0, #1
   ba832:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba836:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba838:	2200      	movs	r2, #0
   ba83a:	611c      	str	r4, [r3, #16]
   ba83c:	615a      	str	r2, [r3, #20]
   ba83e:	bd38      	pop	{r3, r4, r5, pc}
   ba840:	2003dd90 	.word	0x2003dd90
   ba844:	000bb5b9 	.word	0x000bb5b9
   ba848:	000bb5d0 	.word	0x000bb5d0
   ba84c:	abcd330e 	.word	0xabcd330e
   ba850:	e66d1234 	.word	0xe66d1234
   ba854:	0005deec 	.word	0x0005deec

000ba858 <strcpy>:
   ba858:	4603      	mov	r3, r0
   ba85a:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba85e:	f803 2b01 	strb.w	r2, [r3], #1
   ba862:	2a00      	cmp	r2, #0
   ba864:	d1f9      	bne.n	ba85a <strcpy+0x2>
   ba866:	4770      	bx	lr

000ba868 <strnlen>:
   ba868:	b510      	push	{r4, lr}
   ba86a:	4602      	mov	r2, r0
   ba86c:	4401      	add	r1, r0
   ba86e:	428a      	cmp	r2, r1
   ba870:	4613      	mov	r3, r2
   ba872:	d003      	beq.n	ba87c <strnlen+0x14>
   ba874:	781c      	ldrb	r4, [r3, #0]
   ba876:	3201      	adds	r2, #1
   ba878:	2c00      	cmp	r4, #0
   ba87a:	d1f8      	bne.n	ba86e <strnlen+0x6>
   ba87c:	1a18      	subs	r0, r3, r0
   ba87e:	bd10      	pop	{r4, pc}

000ba880 <__register_exitproc>:
   ba880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba884:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba940 <__register_exitproc+0xc0>
   ba888:	4606      	mov	r6, r0
   ba88a:	f8d8 0000 	ldr.w	r0, [r8]
   ba88e:	461f      	mov	r7, r3
   ba890:	460d      	mov	r5, r1
   ba892:	4691      	mov	r9, r2
   ba894:	f000 f856 	bl	ba944 <__retarget_lock_acquire_recursive>
   ba898:	4b25      	ldr	r3, [pc, #148]	; (ba930 <__register_exitproc+0xb0>)
   ba89a:	681c      	ldr	r4, [r3, #0]
   ba89c:	b934      	cbnz	r4, ba8ac <__register_exitproc+0x2c>
   ba89e:	4c25      	ldr	r4, [pc, #148]	; (ba934 <__register_exitproc+0xb4>)
   ba8a0:	601c      	str	r4, [r3, #0]
   ba8a2:	4b25      	ldr	r3, [pc, #148]	; (ba938 <__register_exitproc+0xb8>)
   ba8a4:	b113      	cbz	r3, ba8ac <__register_exitproc+0x2c>
   ba8a6:	681b      	ldr	r3, [r3, #0]
   ba8a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba8ac:	6863      	ldr	r3, [r4, #4]
   ba8ae:	2b1f      	cmp	r3, #31
   ba8b0:	dd07      	ble.n	ba8c2 <__register_exitproc+0x42>
   ba8b2:	f8d8 0000 	ldr.w	r0, [r8]
   ba8b6:	f000 f847 	bl	ba948 <__retarget_lock_release_recursive>
   ba8ba:	f04f 30ff 	mov.w	r0, #4294967295
   ba8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba8c2:	b34e      	cbz	r6, ba918 <__register_exitproc+0x98>
   ba8c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba8c8:	b988      	cbnz	r0, ba8ee <__register_exitproc+0x6e>
   ba8ca:	4b1c      	ldr	r3, [pc, #112]	; (ba93c <__register_exitproc+0xbc>)
   ba8cc:	b923      	cbnz	r3, ba8d8 <__register_exitproc+0x58>
   ba8ce:	f8d8 0000 	ldr.w	r0, [r8]
   ba8d2:	f000 f838 	bl	ba946 <__retarget_lock_release>
   ba8d6:	e7f0      	b.n	ba8ba <__register_exitproc+0x3a>
   ba8d8:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba8dc:	f7fb fe72 	bl	b65c4 <malloc>
   ba8e0:	2800      	cmp	r0, #0
   ba8e2:	d0f4      	beq.n	ba8ce <__register_exitproc+0x4e>
   ba8e4:	2300      	movs	r3, #0
   ba8e6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba8ea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba8ee:	6863      	ldr	r3, [r4, #4]
   ba8f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba8f4:	2201      	movs	r2, #1
   ba8f6:	409a      	lsls	r2, r3
   ba8f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba8fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba900:	4313      	orrs	r3, r2
   ba902:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba906:	2e02      	cmp	r6, #2
   ba908:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba90c:	bf02      	ittt	eq
   ba90e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba912:	4313      	orreq	r3, r2
   ba914:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba918:	6863      	ldr	r3, [r4, #4]
   ba91a:	f8d8 0000 	ldr.w	r0, [r8]
   ba91e:	1c5a      	adds	r2, r3, #1
   ba920:	3302      	adds	r3, #2
   ba922:	6062      	str	r2, [r4, #4]
   ba924:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba928:	f000 f80e 	bl	ba948 <__retarget_lock_release_recursive>
   ba92c:	2000      	movs	r0, #0
   ba92e:	e7c6      	b.n	ba8be <__register_exitproc+0x3e>
   ba930:	2003e7e8 	.word	0x2003e7e8
   ba934:	2003e75c 	.word	0x2003e75c
   ba938:	00000000 	.word	0x00000000
   ba93c:	000b65c5 	.word	0x000b65c5
   ba940:	2003ddf4 	.word	0x2003ddf4

000ba944 <__retarget_lock_acquire_recursive>:
   ba944:	4770      	bx	lr

000ba946 <__retarget_lock_release>:
   ba946:	4770      	bx	lr

000ba948 <__retarget_lock_release_recursive>:
   ba948:	4770      	bx	lr

000ba94a <link_code_end>:
	...

000ba94c <link_const_data_start>:
   ba94c:	00000000 	.word	0x00000000
   ba950:	34fb0000 	.word	0x34fb0000
   ba954:	00805f9b 	.word	0x00805f9b
   ba958:	10008000 	.word	0x10008000
	...

000ba964 <dynalib_user>:
   ba964:	000b4c69 000b4ca5 000b4ccd 000b4cd1     iL...L...L...L..
   ba974:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   ba984:	72697620 6c617574 6c654800 57206f6c      virtual.Hello W
   ba994:	646c726f 43494d00 6420003a 54004142     orld.MIC:. dBA.T
   ba9a4:	65706d65 72757472 43200065 564f4d00     emperture. C.MOV
   ba9b4:	4e454d45 45442054 54434554 00214445     EMENT DETECTED!.
   ba9c4:	206e6146 65657053 00203a64 73756c43     Fan Speed: .Clus
   ba9d4:	20726574 64616548 746f4e00 6e6f4320     ter Head.Not Con
   ba9e4:	7463656e 46006465 646e756f 44206120     nected.Found a D
   ba9f4:	63697665 64410065 73657264 00203a73     evice.Address: .
   baa04:	73756c43 20726574 64616548 00293a20     Cluster Head :).
   baa14:	73756c43 20726574 64616548 00283a20     Cluster Head :(.
   baa24:	706d6574 756f7300 6d00646e 0065766f     temp.sound.move.
   baa34:	66393839 32663933 6131632d 31342d34     989f39f2-c1a4-41
   baa44:	612d3064 2d376462 61366435 39363030     d0-abd7-5d6a0069
   baa54:	64626230 36326500 39626133 36322d30     0bbd.e263ab90-26
   baa64:	342d6361 2d316537 33326362 3464332d     ac-47e1-bc23-3d4
   baa74:	63656362 35643237 32370065 63393132     bcec72d5e.72219c
   baa84:	302d3331 2d643737 34336634 3739382d     13-077d-4f34-897
   baa94:	39632d38 33306166 63363137 37006332     8-c9fa03716c2c.7
   baaa4:	37343438 2d626134 39613536 6532342d     84474ab-65a9-42e
   baab4:	61392d63 312d3937 37326531 34326139     c-9a79-11e279a24
   baac4:	00336337 38626136 35646530 3661632d     7c3.6ab80ed5-ca6
   baad4:	33342d32 622d6366 2d373339 38366334     2-43fc-b937-4c68
   baae4:	61663730 36383663 66626100 33383438     07fac686.abf8483
   baaf4:	38342d66 342d3539 2d663230 39656439     f-4895-402f-9de9
   bab04:	3933612d 37336634 38326231 00000033     -a394f371b283...

000bab14 <_ZTV16Adafruit_SSD1306>:
	...
   bab1c:	000b5811 000b58a1 000b5f45 000b9689     .X...X..E_......
   bab2c:	000b5815 000b5c5d 000b569d 000b552d     .X..]\...V..-U..
   bab3c:	000b5d1b 000b5db9 000b5def 000b5e0b     .]...]...]...^..

000bab4c <_ZL4font>:
   bab4c:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   bab5c:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   bab6c:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   bab7c:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   bab8c:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   bab9c:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   babac:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   babbc:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   babcc:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   babdc:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   babec:	00000000 5f000000 07000000 14000700     ......._........
   babfc:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   bac0c:	00502056 00030708 41221c00 22410000     V P......."A..A"
   bac1c:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   bac2c:	08080800 00000808 20006060 02040810     ........``. ....
   bac3c:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   bac4c:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   bac5c:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   bac6c:	00001e29 00000014 00003440 22140800     ).......@4....."
   bac7c:	14141441 41001414 02081422 06095901     A......A"....Y..
   bac8c:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   bac9c:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   bacac:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   bacbc:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   baccc:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   bacdc:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   bacec:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   bacfc:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   bad0c:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   bad1c:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   bad2c:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   bad3c:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   bad4c:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   bad5c:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   bad6c:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   bad7c:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   bad8c:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   bad9c:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   badac:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   badbc:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   badcc:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   baddc:	41795555 78545421 54552141 54204078     UUyA!TTxA!UTx@ T
   badec:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   badfc:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   bae0c:	45010042 29f0407c f0f02924 f0282528     B..E|@.)$)..(%(.
   bae1c:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   bae2c:	32494949 48484832 484a3232 413a3048     III22HHH22JHH0:A
   bae3c:	3a7a2141 78204042 a0a09d00 4444397d     A!z:B@ x....}9DD
   bae4c:	403d3944 3c3d4040 2424ff24 43497e48     D9=@@@=<$.$$H~IC
   bae5c:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   bae6c:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   bae7c:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   bae8c:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   bae9c:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   baeac:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   baebc:	005500aa aa55aaaa 0000aa55 1000ff00     ..U...U.U.......
   baecc:	00ff1010 ff141414 ff101000 1010ff00     ................
   baedc:	14f010f0 00fc1414 00f71414 ff0000ff     ................
   baeec:	1414ff00 14fc04f4 1f101714 101f1010     ................
   baefc:	1414141f 1010001f 0000f010 101f0000     ................
   baf0c:	1f101010 10101010 000010f0 1010ff00     ................
   baf1c:	10101010 ff101010 00000010 000014ff     ................
   baf2c:	00ff00ff 17101f00 04fc0000 171414f4     ................
   baf3c:	14141710 00f404f4 f700ff00 14141414     ................
   baf4c:	f7141414 1414f700 10141714 1f101f10     ................
   baf5c:	f4141414 f0101014 0000f010 001f101f     ................
   baf6c:	141f0000 fc000000 f0000014 1010f010     ................
   baf7c:	14ff10ff 14ff1414 1f101010 00000000     ................
   baf8c:	ffff10f0 f0ffffff f0f0f0f0 00ffffff     ................
   baf9c:	00000000 0f0fffff 380f0f0f 44384444     ...........8DD8D
   bafac:	3e2a2a7c 02027e14 7e020606 63027e02     |**>.~.....~.~.c
   bafbc:	63414955 3c444438 207e4004 0206201e     UIAc8DD<.@~ . ..
   bafcc:	9902027e 99a5e7a5 2a492a1c 01724c1c     ~........*I*.Lr.
   bafdc:	4a304c72 30304d4d 30487848 465a62bc     rL0JMM00HxH0.bZF
   bafec:	49493e3d 017e0049 2a7e0101 2a2a2a2a     =>III.~...~*****
   baffc:	445f4444 4a514044 44404044 0040514a     DD_DD@QJD@@DJQ@.
   bb00c:	0301ff00 00ff80e0 6b080800 1236086b     ...........kk.6.
   bb01c:	06362436 060f090f 18180000 10000000     6$6.............
   bb02c:	40300010 000101ff 1e01011f 171d1900     ..0@............
   bb03c:	3c3c0012 00003c3c 00000000              ..<<<<......

000bb048 <_ZTV12Adafruit_GFX>:
	...
   bb058:	000b5f45 000b9689 000b4ced 000b5c5d     E_.......L..]\..
   bb068:	000b5d83 000b5d9f 000b5d1b 000b5db9     .]...]...]...]..
   bb078:	000b5def 000b5e0b                       .]...^..

000bb080 <_ZTVN5spark13EthernetClassE>:
	...
   bb088:	000b6693 000b6689 000b667f 000b6675     .f...f...f..uf..
   bb098:	000b6669 000b665d 000b9ed5 000b9edd     if..]f..........
   bb0a8:	000b6651 000b6649 000b663f 000b6635     Qf..If..?f..5f..
   bb0b8:	000b9f0d                                ....

000bb0bc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bb0bc:	18100800 38302820 65737341 6f697472     .... (08Assertio
   bb0cc:	6961466e 6572756c 6c616620 77006573     nFailure false.w
   bb0dc:	6e697269 6c622e67 74530065 20747261     iring.ble.Start 
   bb0ec:	63736964 7265766f 20676e69 76726573     discovering serv
   bb0fc:	73656369 7341002e 74726573 466e6f69     ices..AssertionF
   bb10c:	756c6961 68206572 625f6c61 735f656c     ailure hal_ble_s
   bb11c:	6b636174 696e695f 756e2874 74706c6c     tack_init(nullpt
   bb12c:	3d202972 5953203d 4d455453 5252455f     r) == SYSTEM_ERR
   bb13c:	4e5f524f 00454e4f 72656550 76656420     OR_NONE.Peer dev
   bb14c:	20656369 6d207369 69737369 0021676e     ice is missing!.
   bb15c:	6c696146 74206465 6c61206f 61636f6c     Failed to alloca
   bb16c:	6d206574 726f6d65 46002179 656c6961     te memory!.Faile
   bb17c:	6f742064 70706120 20646e65 72656570     d to append peer
   bb18c:	6e654320 6c617274 76656420 2e656369      Central device.
   bb19c:	73694400 6e6e6f63 65746365 61460064     .Disconnected.Fa
   bb1ac:	64656c69 206f7420 65707061 6420646e     iled to append d
   bb1bc:	6f637369 65726576 65732064 63697672     iscovered servic
   bb1cc:	53002e65 74726174 73696420 65766f63     e..Start discove
   bb1dc:	676e6972 61686320 74636172 73697265     ring characteris
   bb1ec:	73636974 20666f20 76726573 3a656369     tics of service:
   bb1fc:	2e732520 6e614300 20746f6e 20646461      %s..Cannot add 
   bb20c:	2077656e 72656570 76656420 2e656369     new peer device.
   bb21c:	77654e00 72657020 65687069 206c6172     .New peripheral 
   bb22c:	63207369 656e6e6f 64657463 6843002e     is connected..Ch
   bb23c:	63617261 69726574 63697473 73696420     aracteristic dis
   bb24c:	65766f63 2e646572 73694400 65766f63     covered..Discove
   bb25c:	20646572 72616863 65746361 74736972     red characterist
   bb26c:	73276369 6e616820 20656c64 69207369     ic's handle is i
   bb27c:	6c61766e 002e6469 6c696146 74206465     nvalid..Failed t
   bb28c:	7061206f 646e6570 73696420 65766f63     o append discove
   bb29c:	20646572 72616863 65746361 74736972     red characterist
   bb2ac:	002e6369 6c707544 74616369 63206465     ic..Duplicated c
   bb2bc:	61726168 72657463 69747369 61632063     haracteristic ca
   bb2cc:	746f6e6e 20656220 65646461 46002e64     nnot be added..F
   bb2dc:	656c6961 6f742064 70706120 20646e65     ailed to append 
   bb2ec:	61636f6c 6863206c 63617261 69726574     local characteri
   bb2fc:	63697473 0000002e                       stic....

000bb304 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb30c:	000b6a4d 000b6ab1 000b6c39 000b6adb     Mj...j..9l...j..
   bb31c:	000b6a51                                Qj..

000bb320 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb328:	000b6a49 000b6abf 000b6a4b 000b6ae1     Ij...j..Kj...j..
   bb338:	000b6a71                                qj..

000bb33c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb344:	000b6a47 000b6acd 000b792f 000b6ae7     Gj...j../y...j..
   bb354:	000b6a91                                .j..

000bb358 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bb360 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bb360:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000bb370 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bb370:	5f9b34fb 80000080 00001000 00000000     .4._............
   bb380:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   bb390:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   bb3a0:	007a2553 74637361 00656d69              S%z.asctime.

000bb3ac <_ZTV9IPAddress>:
	...
   bb3b4:	000b9a81 000b9a71 000b9a73              ....q...s...

000bb3c0 <_ZTV9USBSerial>:
	...
   bb3c8:	000b9b67 000b9bcf 000b9ba5 000b9689     g...............
   bb3d8:	000b9b97 000b9b69 000b9b79 000b9bc9     ....i...y.......
   bb3e8:	000b9b89 000b9b61                       ....a...

000bb3f0 <_ZTV11USARTSerial>:
	...
   bb3f8:	000b9cb9 000b9d25 000b9cfd 000b9689     ....%...........
   bb408:	000b9ccd 000b9ce9 000b9cdb 000b9cf7     ................
   bb418:	000b9cbb 000b9cbf                       ........

000bb420 <_ZTV7TwoWire>:
	...
   bb428:	000b9d5d 000b9da7 000b9d7f 000b9d5f     ]..........._...
   bb438:	000b9d87 000b9d8f 000b9d97 000b9d9f     ................

000bb448 <_ZTVN5spark9WiFiClassE>:
	...
   bb450:	000b9e77 000b9e6d 000b9e63 000b9e19     w...m...c.......
   bb460:	000b9e57 000b9e4b 000b9ed5 000b9edd     W...K...........
   bb470:	000b9e3f 000b9e37 000b9e2d 000b9e23     ?...7...-...#...
   bb480:	000b9f0d                                ....

000bb484 <_ZTVN5spark12NetworkClassE>:
	...
   bb48c:	000b9e95 000b9e9f 000b9ea9 000b9eb3     ................
   bb49c:	000b9ebd 000b9ec9 000b9ed5 000b9edd     ................
   bb4ac:	000b9ee5 000b9ef1 000b9ef9 000b9f03     ................
   bb4bc:	000b9f0d                                ....

000bb4c0 <_ZSt7nothrow>:
	...

000bb4c1 <_ZTSSt19_Sp_make_shared_tag>:
   bb4c1:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bb4d1:	5f646572 00676174                        red_tag....

000bb4dc <_ZTISt19_Sp_make_shared_tag>:
   bb4dc:	000bb51c 000bb4c1                       ........

000bb4e4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb4e4:	000bb57c 000bb4f0 000bb5a0              |...........

000bb4f0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb4f0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bb500:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bb510:	00000045                                E...

000bb514 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb514:	00000000 000bb4e4 000ba2c9 000ba2dd     ................
   bb524:	000ba471 000ba471 000ba347 000ba289     q...q...G.......
   bb534:	000ba32f 000ba2f1 000ba2bb              /...........

000bb540 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb540:	000bb57c 000bb54c 000bb4e4              |...L.......

000bb54c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb54c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bb55c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bb56c:	456f666e 00000000                       nfoE....

000bb574 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb574:	00000000 000bb540 000ba371 000ba385     ....@...q.......
   bb584:	000ba471 000ba471 000ba347 000ba289     q...q...G.......
   bb594:	000ba445 000ba3d1 000ba399              E...........

000bb5a0 <_ZTISt9type_info>:
   bb5a0:	000bb51c 000bb5a8                       ........

000bb5a8 <_ZTSSt9type_info>:
   bb5a8:	74397453 5f657079 6f666e69 00000000     St9type_info....
   bb5b8:	45455200 6d20544e 6f6c6c61 75732063     .REENT malloc su
   bb5c8:	65656363 00646564 746e6d2f 726f772f     cceeded./mnt/wor
   bb5d8:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   bb5e8:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   bb5f8:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   bb608:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   bb618:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   bb628:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   bb638:	696c2f62 732f6362 696c6474 61722f62     b/libc/stdlib/ra
   bb648:	632e646e                                 nd.c.

000bb64d <link_const_data_end>:
   bb64d:	00          	.byte	0x00
	...

000bb650 <link_constructors_location>:
   bb650:	000b5441 	.word	0x000b5441
   bb654:	000b551d 	.word	0x000b551d
   bb658:	000b669d 	.word	0x000b669d
   bb65c:	000b6831 	.word	0x000b6831
   bb660:	000b9679 	.word	0x000b9679
   bb664:	000b9901 	.word	0x000b9901
   bb668:	000b9911 	.word	0x000b9911
   bb66c:	000b992d 	.word	0x000b992d
   bb670:	000b9e81 	.word	0x000b9e81
   bb674:	000b9fe5 	.word	0x000b9fe5
