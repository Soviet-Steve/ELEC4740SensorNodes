
c:/Users/Clayton/Documents/University/Fifta_Gear/Forma_Siexmonaþ/ELEC4740/Project/Particle/ELEC4740SensorNodes/test2/target/5.3.2/argon/test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000039b4  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b79d4  000b79d4  000079d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000480  2003da04  000b79f8  0000da04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000096c  2003de88  2003de88  0001de88  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000b7e78  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b7e7c  000b7e7c  00017e7c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b7e82  000b7e82  00017e82  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b7ea6  000b7ea6  00017ea6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0010eb9d  00000000  00000000  00017eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00012dfa  00000000  00000000  00126a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00039145  00000000  00000000  00139841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002bc0  00000000  00000000  00172986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a190  00000000  00000000  00175546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ca17  00000000  00000000  0017f6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000422f2  00000000  00000000  001bc0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013b284  00000000  00000000  001fe3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007d84  00000000  00000000  00339664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <__aeabi_frsub>:
   b4a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b4a2c:	e002      	b.n	b4a34 <__addsf3>
   b4a2e:	bf00      	nop

000b4a30 <__aeabi_fsub>:
   b4a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b4a34 <__addsf3>:
   b4a34:	0042      	lsls	r2, r0, #1
   b4a36:	bf1f      	itttt	ne
   b4a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b4a3c:	ea92 0f03 	teqne	r2, r3
   b4a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b4a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4a48:	d06a      	beq.n	b4b20 <__addsf3+0xec>
   b4a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b4a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b4a52:	bfc1      	itttt	gt
   b4a54:	18d2      	addgt	r2, r2, r3
   b4a56:	4041      	eorgt	r1, r0
   b4a58:	4048      	eorgt	r0, r1
   b4a5a:	4041      	eorgt	r1, r0
   b4a5c:	bfb8      	it	lt
   b4a5e:	425b      	neglt	r3, r3
   b4a60:	2b19      	cmp	r3, #25
   b4a62:	bf88      	it	hi
   b4a64:	4770      	bxhi	lr
   b4a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b4a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b4a72:	bf18      	it	ne
   b4a74:	4240      	negne	r0, r0
   b4a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b4a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b4a82:	bf18      	it	ne
   b4a84:	4249      	negne	r1, r1
   b4a86:	ea92 0f03 	teq	r2, r3
   b4a8a:	d03f      	beq.n	b4b0c <__addsf3+0xd8>
   b4a8c:	f1a2 0201 	sub.w	r2, r2, #1
   b4a90:	fa41 fc03 	asr.w	ip, r1, r3
   b4a94:	eb10 000c 	adds.w	r0, r0, ip
   b4a98:	f1c3 0320 	rsb	r3, r3, #32
   b4a9c:	fa01 f103 	lsl.w	r1, r1, r3
   b4aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4aa4:	d502      	bpl.n	b4aac <__addsf3+0x78>
   b4aa6:	4249      	negs	r1, r1
   b4aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b4aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4ab0:	d313      	bcc.n	b4ada <__addsf3+0xa6>
   b4ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b4ab6:	d306      	bcc.n	b4ac6 <__addsf3+0x92>
   b4ab8:	0840      	lsrs	r0, r0, #1
   b4aba:	ea4f 0131 	mov.w	r1, r1, rrx
   b4abe:	f102 0201 	add.w	r2, r2, #1
   b4ac2:	2afe      	cmp	r2, #254	; 0xfe
   b4ac4:	d251      	bcs.n	b4b6a <__addsf3+0x136>
   b4ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b4aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b4ace:	bf08      	it	eq
   b4ad0:	f020 0001 	biceq.w	r0, r0, #1
   b4ad4:	ea40 0003 	orr.w	r0, r0, r3
   b4ad8:	4770      	bx	lr
   b4ada:	0049      	lsls	r1, r1, #1
   b4adc:	eb40 0000 	adc.w	r0, r0, r0
   b4ae0:	3a01      	subs	r2, #1
   b4ae2:	bf28      	it	cs
   b4ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b4ae8:	d2ed      	bcs.n	b4ac6 <__addsf3+0x92>
   b4aea:	fab0 fc80 	clz	ip, r0
   b4aee:	f1ac 0c08 	sub.w	ip, ip, #8
   b4af2:	ebb2 020c 	subs.w	r2, r2, ip
   b4af6:	fa00 f00c 	lsl.w	r0, r0, ip
   b4afa:	bfaa      	itet	ge
   b4afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b4b00:	4252      	neglt	r2, r2
   b4b02:	4318      	orrge	r0, r3
   b4b04:	bfbc      	itt	lt
   b4b06:	40d0      	lsrlt	r0, r2
   b4b08:	4318      	orrlt	r0, r3
   b4b0a:	4770      	bx	lr
   b4b0c:	f092 0f00 	teq	r2, #0
   b4b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b4b14:	bf06      	itte	eq
   b4b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b4b1a:	3201      	addeq	r2, #1
   b4b1c:	3b01      	subne	r3, #1
   b4b1e:	e7b5      	b.n	b4a8c <__addsf3+0x58>
   b4b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b4b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b4b28:	bf18      	it	ne
   b4b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4b2e:	d021      	beq.n	b4b74 <__addsf3+0x140>
   b4b30:	ea92 0f03 	teq	r2, r3
   b4b34:	d004      	beq.n	b4b40 <__addsf3+0x10c>
   b4b36:	f092 0f00 	teq	r2, #0
   b4b3a:	bf08      	it	eq
   b4b3c:	4608      	moveq	r0, r1
   b4b3e:	4770      	bx	lr
   b4b40:	ea90 0f01 	teq	r0, r1
   b4b44:	bf1c      	itt	ne
   b4b46:	2000      	movne	r0, #0
   b4b48:	4770      	bxne	lr
   b4b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b4b4e:	d104      	bne.n	b4b5a <__addsf3+0x126>
   b4b50:	0040      	lsls	r0, r0, #1
   b4b52:	bf28      	it	cs
   b4b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b4b58:	4770      	bx	lr
   b4b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b4b5e:	bf3c      	itt	cc
   b4b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b4b64:	4770      	bxcc	lr
   b4b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b4b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4b72:	4770      	bx	lr
   b4b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b4b78:	bf16      	itet	ne
   b4b7a:	4608      	movne	r0, r1
   b4b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b4b80:	4601      	movne	r1, r0
   b4b82:	0242      	lsls	r2, r0, #9
   b4b84:	bf06      	itte	eq
   b4b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b4b8a:	ea90 0f01 	teqeq	r0, r1
   b4b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b4b92:	4770      	bx	lr

000b4b94 <__aeabi_ui2f>:
   b4b94:	f04f 0300 	mov.w	r3, #0
   b4b98:	e004      	b.n	b4ba4 <__aeabi_i2f+0x8>
   b4b9a:	bf00      	nop

000b4b9c <__aeabi_i2f>:
   b4b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b4ba0:	bf48      	it	mi
   b4ba2:	4240      	negmi	r0, r0
   b4ba4:	ea5f 0c00 	movs.w	ip, r0
   b4ba8:	bf08      	it	eq
   b4baa:	4770      	bxeq	lr
   b4bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b4bb0:	4601      	mov	r1, r0
   b4bb2:	f04f 0000 	mov.w	r0, #0
   b4bb6:	e01c      	b.n	b4bf2 <__aeabi_l2f+0x2a>

000b4bb8 <__aeabi_ul2f>:
   b4bb8:	ea50 0201 	orrs.w	r2, r0, r1
   b4bbc:	bf08      	it	eq
   b4bbe:	4770      	bxeq	lr
   b4bc0:	f04f 0300 	mov.w	r3, #0
   b4bc4:	e00a      	b.n	b4bdc <__aeabi_l2f+0x14>
   b4bc6:	bf00      	nop

000b4bc8 <__aeabi_l2f>:
   b4bc8:	ea50 0201 	orrs.w	r2, r0, r1
   b4bcc:	bf08      	it	eq
   b4bce:	4770      	bxeq	lr
   b4bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b4bd4:	d502      	bpl.n	b4bdc <__aeabi_l2f+0x14>
   b4bd6:	4240      	negs	r0, r0
   b4bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4bdc:	ea5f 0c01 	movs.w	ip, r1
   b4be0:	bf02      	ittt	eq
   b4be2:	4684      	moveq	ip, r0
   b4be4:	4601      	moveq	r1, r0
   b4be6:	2000      	moveq	r0, #0
   b4be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b4bec:	bf08      	it	eq
   b4bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b4bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b4bf6:	fabc f28c 	clz	r2, ip
   b4bfa:	3a08      	subs	r2, #8
   b4bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b4c00:	db10      	blt.n	b4c24 <__aeabi_l2f+0x5c>
   b4c02:	fa01 fc02 	lsl.w	ip, r1, r2
   b4c06:	4463      	add	r3, ip
   b4c08:	fa00 fc02 	lsl.w	ip, r0, r2
   b4c0c:	f1c2 0220 	rsb	r2, r2, #32
   b4c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4c14:	fa20 f202 	lsr.w	r2, r0, r2
   b4c18:	eb43 0002 	adc.w	r0, r3, r2
   b4c1c:	bf08      	it	eq
   b4c1e:	f020 0001 	biceq.w	r0, r0, #1
   b4c22:	4770      	bx	lr
   b4c24:	f102 0220 	add.w	r2, r2, #32
   b4c28:	fa01 fc02 	lsl.w	ip, r1, r2
   b4c2c:	f1c2 0220 	rsb	r2, r2, #32
   b4c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b4c34:	fa21 f202 	lsr.w	r2, r1, r2
   b4c38:	eb43 0002 	adc.w	r0, r3, r2
   b4c3c:	bf08      	it	eq
   b4c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b4c42:	4770      	bx	lr

000b4c44 <strlen>:
   b4c44:	4603      	mov	r3, r0
   b4c46:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4c4a:	2a00      	cmp	r2, #0
   b4c4c:	d1fb      	bne.n	b4c46 <strlen+0x2>
   b4c4e:	1a18      	subs	r0, r3, r0
   b4c50:	3801      	subs	r0, #1
   b4c52:	4770      	bx	lr

000b4c54 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4c54:	4809      	ldr	r0, [pc, #36]	; (b4c7c <module_user_pre_init+0x28>)
   b4c56:	490a      	ldr	r1, [pc, #40]	; (b4c80 <module_user_pre_init+0x2c>)
   b4c58:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4c5a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4c5c:	d005      	beq.n	b4c6a <module_user_pre_init+0x16>
   b4c5e:	4a09      	ldr	r2, [pc, #36]	; (b4c84 <module_user_pre_init+0x30>)
   b4c60:	4282      	cmp	r2, r0
   b4c62:	d002      	beq.n	b4c6a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4c64:	1a12      	subs	r2, r2, r0
   b4c66:	f002 f9ff 	bl	b7068 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4c6a:	4807      	ldr	r0, [pc, #28]	; (b4c88 <module_user_pre_init+0x34>)
   b4c6c:	4a07      	ldr	r2, [pc, #28]	; (b4c8c <module_user_pre_init+0x38>)
   b4c6e:	2100      	movs	r1, #0
   b4c70:	1a12      	subs	r2, r2, r0
   b4c72:	f002 fa07 	bl	b7084 <memset>
    return &link_global_data_start;
}
   b4c76:	4801      	ldr	r0, [pc, #4]	; (b4c7c <module_user_pre_init+0x28>)
   b4c78:	bd08      	pop	{r3, pc}
   b4c7a:	bf00      	nop
   b4c7c:	2003da04 	.word	0x2003da04
   b4c80:	000b79f8 	.word	0x000b79f8
   b4c84:	2003de84 	.word	0x2003de84
   b4c88:	2003de88 	.word	0x2003de88
   b4c8c:	2003e7f4 	.word	0x2003e7f4

000b4c90 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4c90:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4c92:	4e07      	ldr	r6, [pc, #28]	; (b4cb0 <module_user_init+0x20>)
   b4c94:	4c07      	ldr	r4, [pc, #28]	; (b4cb4 <module_user_init+0x24>)
    module_user_init_hook();
   b4c96:	f001 fc3b 	bl	b6510 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4c9a:	1ba4      	subs	r4, r4, r6
   b4c9c:	08a4      	lsrs	r4, r4, #2
   b4c9e:	2500      	movs	r5, #0
   b4ca0:	42ac      	cmp	r4, r5
   b4ca2:	d100      	bne.n	b4ca6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4ca4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4ca6:	f856 3b04 	ldr.w	r3, [r6], #4
   b4caa:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4cac:	3501      	adds	r5, #1
   b4cae:	e7f7      	b.n	b4ca0 <module_user_init+0x10>
   b4cb0:	000b79ac 	.word	0x000b79ac
   b4cb4:	000b79d4 	.word	0x000b79d4

000b4cb8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4cb8:	f000 b82c 	b.w	b4d14 <setup>

000b4cbc <module_user_loop>:
}

void module_user_loop() {
   b4cbc:	b508      	push	{r3, lr}
    loop();
   b4cbe:	f000 f913 	bl	b4ee8 <loop>
    _post_loop();
}
   b4cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4cc6:	f001 bbdb 	b.w	b6480 <_post_loop>

000b4cca <_Znaj>:
   b4cca:	f001 b923 	b.w	b5f14 <malloc>

000b4cce <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4cce:	f001 b929 	b.w	b5f24 <free>
	...

000b4cd4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4cd4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4cd6:	4a03      	ldr	r2, [pc, #12]	; (b4ce4 <__cxa_pure_virtual+0x10>)
   b4cd8:	4903      	ldr	r1, [pc, #12]	; (b4ce8 <__cxa_pure_virtual+0x14>)
   b4cda:	200c      	movs	r0, #12
   b4cdc:	f001 f886 	bl	b5dec <panic_>
  while (1);
   b4ce0:	e7fe      	b.n	b4ce0 <__cxa_pure_virtual+0xc>
   b4ce2:	bf00      	nop
   b4ce4:	000b5b8d 	.word	0x000b5b8d
   b4ce8:	000b71d0 	.word	0x000b71d0

000b4cec <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4cec:	7800      	ldrb	r0, [r0, #0]
   b4cee:	fab0 f080 	clz	r0, r0
   b4cf2:	0940      	lsrs	r0, r0, #5
   b4cf4:	4770      	bx	lr

000b4cf6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4cf6:	2301      	movs	r3, #1
   b4cf8:	7003      	strb	r3, [r0, #0]
   b4cfa:	4770      	bx	lr

000b4cfc <_Z15fnvdMovementIsrv>:
   b4cfc:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4cfe:	f000 ff4d 	bl	b5b9c <HAL_Timer_Get_Milli_Seconds>
   b4d02:	4903      	ldr	r1, [pc, #12]	; (b4d10 <_Z15fnvdMovementIsrv+0x14>)
   b4d04:	4602      	mov	r2, r0
   b4d06:	2300      	movs	r3, #0
   b4d08:	e9c1 2300 	strd	r2, r3, [r1]
   b4d0c:	bd08      	pop	{r3, pc}
   b4d0e:	bf00      	nop
   b4d10:	2003e6b0 	.word	0x2003e6b0

000b4d14 <setup>:
   b4d14:	b513      	push	{r0, r1, r4, lr}
   b4d16:	2400      	movs	r4, #0
   b4d18:	f04f 33ff 	mov.w	r3, #4294967295
   b4d1c:	4622      	mov	r2, r4
   b4d1e:	491d      	ldr	r1, [pc, #116]	; (b4d94 <setup+0x80>)
   b4d20:	9400      	str	r4, [sp, #0]
   b4d22:	2005      	movs	r0, #5
   b4d24:	f001 fd20 	bl	b6768 <_Z15attachInterrupttPFvvE13InterruptModeah>
   b4d28:	4621      	mov	r1, r4
   b4d2a:	2005      	movs	r0, #5
   b4d2c:	f001 ff24 	bl	b6b78 <pinMode>
   b4d30:	f002 f806 	bl	b6d40 <_Z19__fetch_global_Wirev>
   b4d34:	f001 fdde 	bl	b68f4 <_ZN7TwoWire5beginEv>
   b4d38:	223c      	movs	r2, #60	; 0x3c
   b4d3a:	2102      	movs	r1, #2
   b4d3c:	4816      	ldr	r0, [pc, #88]	; (b4d98 <setup+0x84>)
   b4d3e:	f000 fc2b 	bl	b5598 <_ZN16Adafruit_SSD13065beginEhh>
   b4d42:	4815      	ldr	r0, [pc, #84]	; (b4d98 <setup+0x84>)
   b4d44:	f000 fbb8 	bl	b54b8 <_ZN16Adafruit_SSD13067displayEv>
   b4d48:	4813      	ldr	r0, [pc, #76]	; (b4d98 <setup+0x84>)
   b4d4a:	f000 fb3d 	bl	b53c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4d4e:	4812      	ldr	r0, [pc, #72]	; (b4d98 <setup+0x84>)
   b4d50:	2101      	movs	r1, #1
   b4d52:	f000 fea2 	bl	b5a9a <_ZN12Adafruit_GFX11setTextSizeEh>
   b4d56:	4810      	ldr	r0, [pc, #64]	; (b4d98 <setup+0x84>)
   b4d58:	2101      	movs	r1, #1
   b4d5a:	f000 fea3 	bl	b5aa4 <_ZN12Adafruit_GFX12setTextColorEt>
   b4d5e:	4622      	mov	r2, r4
   b4d60:	480d      	ldr	r0, [pc, #52]	; (b4d98 <setup+0x84>)
   b4d62:	4621      	mov	r1, r4
   b4d64:	f000 fe96 	bl	b5a94 <_ZN12Adafruit_GFX9setCursorEss>
   b4d68:	490c      	ldr	r1, [pc, #48]	; (b4d9c <setup+0x88>)
   b4d6a:	480b      	ldr	r0, [pc, #44]	; (b4d98 <setup+0x84>)
   b4d6c:	f001 fa49 	bl	b6202 <_ZN5Print7printlnEPKc>
   b4d70:	4809      	ldr	r0, [pc, #36]	; (b4d98 <setup+0x84>)
   b4d72:	f000 fba1 	bl	b54b8 <_ZN16Adafruit_SSD13067displayEv>
   b4d76:	4808      	ldr	r0, [pc, #32]	; (b4d98 <setup+0x84>)
   b4d78:	f000 fb26 	bl	b53c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4d7c:	4b08      	ldr	r3, [pc, #32]	; (b4da0 <setup+0x8c>)
   b4d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b4d82:	3401      	adds	r4, #1
   b4d84:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   b4d88:	f843 2b04 	str.w	r2, [r3], #4
   b4d8c:	d1f9      	bne.n	b4d82 <setup+0x6e>
   b4d8e:	b002      	add	sp, #8
   b4d90:	bd10      	pop	{r4, pc}
   b4d92:	bf00      	nop
   b4d94:	000b4cfd 	.word	0x000b4cfd
   b4d98:	2003e688 	.word	0x2003e688
   b4d9c:	000b71e5 	.word	0x000b71e5
   b4da0:	2003de88 	.word	0x2003de88

000b4da4 <_Z17fnboCheckMovementv>:
   b4da4:	b508      	push	{r3, lr}
   b4da6:	f000 fef9 	bl	b5b9c <HAL_Timer_Get_Milli_Seconds>
   b4daa:	4b07      	ldr	r3, [pc, #28]	; (b4dc8 <_Z17fnboCheckMovementv+0x24>)
   b4dac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4db0:	1a80      	subs	r0, r0, r2
   b4db2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4db6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4dba:	f173 0300 	sbcs.w	r3, r3, #0
   b4dbe:	bf34      	ite	cc
   b4dc0:	2001      	movcc	r0, #1
   b4dc2:	2000      	movcs	r0, #0
   b4dc4:	bd08      	pop	{r3, pc}
   b4dc6:	bf00      	nop
   b4dc8:	2003e6b0 	.word	0x2003e6b0
   b4dcc:	00000000 	.word	0x00000000

000b4dd0 <_Z13fnflGetMicRMSv>:
   b4dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4dd4:	4e28      	ldr	r6, [pc, #160]	; (b4e78 <_Z13fnflGetMicRMSv+0xa8>)
   b4dd6:	ed2d 8b02 	vpush	{d8}
   b4dda:	2700      	movs	r7, #0
   b4ddc:	46b0      	mov	r8, r6
   b4dde:	463c      	mov	r4, r7
   b4de0:	463d      	mov	r5, r7
   b4de2:	2013      	movs	r0, #19
   b4de4:	f001 fef2 	bl	b6bcc <analogRead>
   b4de8:	3701      	adds	r7, #1
   b4dea:	1904      	adds	r4, r0, r4
   b4dec:	f145 0500 	adc.w	r5, r5, #0
   b4df0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   b4df4:	f848 0b04 	str.w	r0, [r8], #4
   b4df8:	d1f3      	bne.n	b4de2 <_Z13fnflGetMicRMSv+0x12>
   b4dfa:	0a64      	lsrs	r4, r4, #9
   b4dfc:	ed9f 8a1f 	vldr	s16, [pc, #124]	; b4e7c <_Z13fnflGetMicRMSv+0xac>
   b4e00:	ea44 54c5 	orr.w	r4, r4, r5, lsl #23
   b4e04:	2700      	movs	r7, #0
   b4e06:	0a6d      	lsrs	r5, r5, #9
   b4e08:	f856 0b04 	ldr.w	r0, [r6], #4
   b4e0c:	1b00      	subs	r0, r0, r4
   b4e0e:	eb65 0345 	sbc.w	r3, r5, r5, lsl #1
   b4e12:	4343      	muls	r3, r0
   b4e14:	fba0 0100 	umull	r0, r1, r0, r0
   b4e18:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   b4e1c:	f7ff fecc 	bl	b4bb8 <__aeabi_ul2f>
   b4e20:	3701      	adds	r7, #1
   b4e22:	ee07 0a90 	vmov	s15, r0
   b4e26:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   b4e2a:	ee38 8a27 	vadd.f32	s16, s16, s15
   b4e2e:	d1eb      	bne.n	b4e08 <_Z13fnflGetMicRMSv+0x38>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b4e30:	ed9f 0a13 	vldr	s0, [pc, #76]	; b4e80 <_Z13fnflGetMicRMSv+0xb0>
   b4e34:	ee28 0a00 	vmul.f32	s0, s16, s0
   b4e38:	f001 ffde 	bl	b6df8 <sqrtf>
   b4e3c:	ee10 0a10 	vmov	r0, s0
   b4e40:	f7ff fa52 	bl	b42e8 <__aeabi_f2d>
   b4e44:	a308      	add	r3, pc, #32	; (adr r3, b4e68 <_Z13fnflGetMicRMSv+0x98>)
   b4e46:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e4a:	f7ff f8ed 	bl	b4028 <__aeabi_dsub>
   b4e4e:	a308      	add	r3, pc, #32	; (adr r3, b4e70 <_Z13fnflGetMicRMSv+0xa0>)
   b4e50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e54:	f7ff fbca 	bl	b45ec <__aeabi_ddiv>
   b4e58:	f7ff fd96 	bl	b4988 <__aeabi_d2f>
   b4e5c:	ecbd 8b02 	vpop	{d8}
   b4e60:	ee00 0a10 	vmov	s0, r0
   b4e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4e68:	56041893 	.word	0x56041893
   b4e6c:	4003ad0e 	.word	0x4003ad0e
   b4e70:	07c84b5e 	.word	0x07c84b5e
   b4e74:	3ff39b3d 	.word	0x3ff39b3d
   b4e78:	2003de88 	.word	0x2003de88
   b4e7c:	00000000 	.word	0x00000000
   b4e80:	3b000000 	.word	0x3b000000
   b4e84:	00000000 	.word	0x00000000

000b4e88 <_Z12fnflRMStodBaf>:
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	f001 ff7f 	bl	b6d8c <logf>
   b4e8e:	ee10 0a10 	vmov	r0, s0
   b4e92:	f7ff fa29 	bl	b42e8 <__aeabi_f2d>
   b4e96:	a308      	add	r3, pc, #32	; (adr r3, b4eb8 <_Z12fnflRMStodBaf+0x30>)
   b4e98:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e9c:	f7ff fa7c 	bl	b4398 <__aeabi_dmul>
   b4ea0:	a307      	add	r3, pc, #28	; (adr r3, b4ec0 <_Z12fnflRMStodBaf+0x38>)
   b4ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ea6:	f7ff f8c1 	bl	b402c <__adddf3>
   b4eaa:	f7ff fd6d 	bl	b4988 <__aeabi_d2f>
   b4eae:	ee00 0a10 	vmov	s0, r0
   b4eb2:	bd08      	pop	{r3, pc}
   b4eb4:	f3af 8000 	nop.w
   b4eb8:	33333333 	.word	0x33333333
   b4ebc:	40243333 	.word	0x40243333
   b4ec0:	872b020c 	.word	0x872b020c
   b4ec4:	403a3916 	.word	0x403a3916

000b4ec8 <_Z20fnflGetTemperaturemVv>:
   b4ec8:	b508      	push	{r3, lr}
   b4eca:	2011      	movs	r0, #17
   b4ecc:	f001 fe7e 	bl	b6bcc <analogRead>
   b4ed0:	f640 43e4 	movw	r3, #3300	; 0xce4
   b4ed4:	4358      	muls	r0, r3
   b4ed6:	bf48      	it	mi
   b4ed8:	f600 70ff 	addwmi	r0, r0, #4095	; 0xfff
   b4edc:	1303      	asrs	r3, r0, #12
   b4ede:	ee00 3a10 	vmov	s0, r3
   b4ee2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b4ee6:	bd08      	pop	{r3, pc}

000b4ee8 <loop>:
   b4ee8:	b510      	push	{r4, lr}
   b4eea:	ed2d 8b02 	vpush	{d8}
   b4eee:	f7ff ff6f 	bl	b4dd0 <_Z13fnflGetMicRMSv>
   b4ef2:	eef0 8a40 	vmov.f32	s17, s0
   b4ef6:	f7ff ffe7 	bl	b4ec8 <_Z20fnflGetTemperaturemVv>
   b4efa:	2409      	movs	r4, #9
   b4efc:	eeb0 8a40 	vmov.f32	s16, s0
   b4f00:	f7ff ffe2 	bl	b4ec8 <_Z20fnflGetTemperaturemVv>
   b4f04:	3c01      	subs	r4, #1
   b4f06:	ee38 8a00 	vadd.f32	s16, s16, s0
   b4f0a:	d1f9      	bne.n	b4f00 <loop+0x18>
   b4f0c:	4834      	ldr	r0, [pc, #208]	; (b4fe0 <loop+0xf8>)
   b4f0e:	f000 fa5b 	bl	b53c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4f12:	4622      	mov	r2, r4
   b4f14:	4832      	ldr	r0, [pc, #200]	; (b4fe0 <loop+0xf8>)
   b4f16:	4621      	mov	r1, r4
   b4f18:	f000 fdbc 	bl	b5a94 <_ZN12Adafruit_GFX9setCursorEss>
   b4f1c:	4931      	ldr	r1, [pc, #196]	; (b4fe4 <loop+0xfc>)
   b4f1e:	4830      	ldr	r0, [pc, #192]	; (b4fe0 <loop+0xf8>)
   b4f20:	f001 f96f 	bl	b6202 <_ZN5Print7printlnEPKc>
   b4f24:	eeb0 0a68 	vmov.f32	s0, s17
   b4f28:	f7ff ffae 	bl	b4e88 <_Z12fnflRMStodBaf>
   b4f2c:	2102      	movs	r1, #2
   b4f2e:	482c      	ldr	r0, [pc, #176]	; (b4fe0 <loop+0xf8>)
   b4f30:	f001 fa58 	bl	b63e4 <_ZN5Print5printEfi>
   b4f34:	492c      	ldr	r1, [pc, #176]	; (b4fe8 <loop+0x100>)
   b4f36:	482a      	ldr	r0, [pc, #168]	; (b4fe0 <loop+0xf8>)
   b4f38:	f001 f963 	bl	b6202 <_ZN5Print7printlnEPKc>
   b4f3c:	492b      	ldr	r1, [pc, #172]	; (b4fec <loop+0x104>)
   b4f3e:	4828      	ldr	r0, [pc, #160]	; (b4fe0 <loop+0xf8>)
   b4f40:	f001 f95f 	bl	b6202 <_ZN5Print7printlnEPKc>
   b4f44:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   b4f48:	eec8 7a27 	vdiv.f32	s15, s16, s15
   b4f4c:	ee17 0a90 	vmov	r0, s15
   b4f50:	f7ff f9ca 	bl	b42e8 <__aeabi_f2d>
   b4f54:	a31e      	add	r3, pc, #120	; (adr r3, b4fd0 <loop+0xe8>)
   b4f56:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f5a:	f7ff fa1d 	bl	b4398 <__aeabi_dmul>
   b4f5e:	a31e      	add	r3, pc, #120	; (adr r3, b4fd8 <loop+0xf0>)
   b4f60:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f64:	f7ff f862 	bl	b402c <__adddf3>
   b4f68:	f7ff fd0e 	bl	b4988 <__aeabi_d2f>
   b4f6c:	2102      	movs	r1, #2
   b4f6e:	ee00 0a10 	vmov	s0, r0
   b4f72:	ee08 0a10 	vmov	s16, r0
   b4f76:	481a      	ldr	r0, [pc, #104]	; (b4fe0 <loop+0xf8>)
   b4f78:	f001 fa34 	bl	b63e4 <_ZN5Print5printEfi>
   b4f7c:	491c      	ldr	r1, [pc, #112]	; (b4ff0 <loop+0x108>)
   b4f7e:	4818      	ldr	r0, [pc, #96]	; (b4fe0 <loop+0xf8>)
   b4f80:	f001 f93f 	bl	b6202 <_ZN5Print7printlnEPKc>
   b4f84:	f7ff ff0e 	bl	b4da4 <_Z17fnboCheckMovementv>
   b4f88:	b118      	cbz	r0, b4f92 <loop+0xaa>
   b4f8a:	491a      	ldr	r1, [pc, #104]	; (b4ff4 <loop+0x10c>)
   b4f8c:	4814      	ldr	r0, [pc, #80]	; (b4fe0 <loop+0xf8>)
   b4f8e:	f001 f938 	bl	b6202 <_ZN5Print7printlnEPKc>
   b4f92:	4813      	ldr	r0, [pc, #76]	; (b4fe0 <loop+0xf8>)
   b4f94:	f000 fa90 	bl	b54b8 <_ZN16Adafruit_SSD13067displayEv>
   b4f98:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   b4f9c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fa4:	d507      	bpl.n	b4fb6 <loop+0xce>
   b4fa6:	2100      	movs	r1, #0
   b4fa8:	ecbd 8b02 	vpop	{d8}
   b4fac:	2002      	movs	r0, #2
   b4fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4fb2:	f001 be22 	b.w	b6bfa <_Z11analogWritetm>
   b4fb6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
   b4fba:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fc2:	bf4c      	ite	mi
   b4fc4:	2180      	movmi	r1, #128	; 0x80
   b4fc6:	21ff      	movpl	r1, #255	; 0xff
   b4fc8:	e7ee      	b.n	b4fa8 <loop+0xc0>
   b4fca:	bf00      	nop
   b4fcc:	f3af 8000 	nop.w
   b4fd0:	39581062 	.word	0x39581062
   b4fd4:	3fa6c8b4 	.word	0x3fa6c8b4
   b4fd8:	dd2f1aa0 	.word	0xdd2f1aa0
   b4fdc:	402a4624 	.word	0x402a4624
   b4fe0:	2003e688 	.word	0x2003e688
   b4fe4:	000b71f1 	.word	0x000b71f1
   b4fe8:	000b71f6 	.word	0x000b71f6
   b4fec:	000b71fb 	.word	0x000b71fb
   b4ff0:	000b7206 	.word	0x000b7206
   b4ff4:	000b7209 	.word	0x000b7209

000b4ff8 <_GLOBAL__sub_I_display>:
   b4ff8:	4802      	ldr	r0, [pc, #8]	; (b5004 <_GLOBAL__sub_I_display+0xc>)
   b4ffa:	f04f 31ff 	mov.w	r1, #4294967295
   b4ffe:	f000 b9cd 	b.w	b539c <_ZN16Adafruit_SSD1306C1Ea>
   b5002:	bf00      	nop
   b5004:	2003e688 	.word	0x2003e688

000b5008 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b5008:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = hal_pin_map();
   b500a:	f000 fd67 	bl	b5adc <hal_pin_map>
   b500e:	4b01      	ldr	r3, [pc, #4]	; (b5014 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b5010:	6018      	str	r0, [r3, #0]
}
   b5012:	bd08      	pop	{r3, pc}
   b5014:	2003e6b8 	.word	0x2003e6b8

000b5018 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5018:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b501a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b501c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5020:	2d02      	cmp	r5, #2
   b5022:	d069      	beq.n	b50f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b5024:	2d03      	cmp	r5, #3
   b5026:	f000 8099 	beq.w	b515c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b502a:	2d01      	cmp	r5, #1
   b502c:	d16c      	bne.n	b5108 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b502e:	8905      	ldrh	r5, [r0, #8]
   b5030:	43d2      	mvns	r2, r2
   b5032:	442a      	add	r2, r5
   b5034:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b5036:	2a00      	cmp	r2, #0
   b5038:	db5d      	blt.n	b50f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b503a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b503e:	4295      	cmp	r5, r2
   b5040:	dd59      	ble.n	b50f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b5042:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b5044:	bfbe      	ittt	lt
   b5046:	185b      	addlt	r3, r3, r1
   b5048:	b21b      	sxthlt	r3, r3
    __y = 0;
   b504a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b504c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5050:	18cd      	adds	r5, r1, r3
   b5052:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5054:	bfc4      	itt	gt
   b5056:	1a43      	subgt	r3, r0, r1
   b5058:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b505a:	2b00      	cmp	r3, #0
   b505c:	dd4b      	ble.n	b50f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b505e:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b5062:	f8df c120 	ldr.w	ip, [pc, #288]	; b5184 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b5066:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b506a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b506e:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5070:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5074:	d01a      	beq.n	b50ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b5076:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b507a:	4e40      	ldr	r6, [pc, #256]	; (b517c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b507c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b507e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5080:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5082:	bf3f      	itttt	cc
   b5084:	eba5 0e03 	subcc.w	lr, r5, r3
   b5088:	26ff      	movcc	r6, #255	; 0xff
   b508a:	fa46 f60e 	asrcc.w	r6, r6, lr
   b508e:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b5090:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b5094:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5096:	bf0c      	ite	eq
   b5098:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b509a:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b509c:	42ab      	cmp	r3, r5
   b509e:	f80c 6002 	strb.w	r6, [ip, r2]
   b50a2:	d328      	bcc.n	b50f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b50a4:	3908      	subs	r1, #8
   b50a6:	440b      	add	r3, r1
   b50a8:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b50aa:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b50ac:	2b07      	cmp	r3, #7
   b50ae:	d919      	bls.n	b50e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b50b0:	2c01      	cmp	r4, #1
   b50b2:	f04f 35ff 	mov.w	r5, #4294967295
   b50b6:	bf18      	it	ne
   b50b8:	2500      	movne	r5, #0
   b50ba:	b2ed      	uxtb	r5, r5
   b50bc:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b50c0:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b50c2:	3a08      	subs	r2, #8
   b50c4:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b50c6:	2a07      	cmp	r2, #7
      *pBuf = val;
   b50c8:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b50cc:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b50d0:	d8f7      	bhi.n	b50c2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b50d2:	f1a3 0208 	sub.w	r2, r3, #8
   b50d6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b50da:	3201      	adds	r2, #1
   b50dc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b50e0:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b50e4:	b13b      	cbz	r3, b50f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b50e6:	4a26      	ldr	r2, [pc, #152]	; (b5180 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b50e8:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b50ea:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b50ec:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b50ee:	bf0c      	ite	eq
   b50f0:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b50f2:	4393      	bicne	r3, r2
   b50f4:	7003      	strb	r3, [r0, #0]
}
   b50f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b50f8:	8945      	ldrh	r5, [r0, #10]
   b50fa:	43d2      	mvns	r2, r2
   b50fc:	442a      	add	r2, r5
      x -= (w-1);
   b50fe:	18cd      	adds	r5, r1, r3
   b5100:	8901      	ldrh	r1, [r0, #8]
   b5102:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b5104:	b212      	sxth	r2, r2
      x -= (w-1);
   b5106:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b5108:	2a00      	cmp	r2, #0
   b510a:	dbf4      	blt.n	b50f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b510c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5110:	4295      	cmp	r5, r2
   b5112:	ddf0      	ble.n	b50f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b5114:	2900      	cmp	r1, #0
    w += x;
   b5116:	bfbe      	ittt	lt
   b5118:	185b      	addlt	r3, r3, r1
   b511a:	b21b      	sxthlt	r3, r3
    x = 0;
   b511c:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b511e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5122:	18ce      	adds	r6, r1, r3
   b5124:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5126:	bfc4      	itt	gt
   b5128:	1a6b      	subgt	r3, r5, r1
   b512a:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b512c:	2b00      	cmp	r3, #0
   b512e:	dde2      	ble.n	b50f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5130:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b5132:	2580      	movs	r5, #128	; 0x80
   b5134:	fb10 1105 	smlabb	r1, r0, r5, r1
   b5138:	4812      	ldr	r0, [pc, #72]	; (b5184 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b513a:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b513c:	f002 0007 	and.w	r0, r2, #7
   b5140:	2201      	movs	r2, #1
   b5142:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5144:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5146:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b5148:	440b      	add	r3, r1
   b514a:	d10c      	bne.n	b5166 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b514c:	428b      	cmp	r3, r1
   b514e:	d0d2      	beq.n	b50f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5150:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5154:	4310      	orrs	r0, r2
   b5156:	f801 0c01 	strb.w	r0, [r1, #-1]
   b515a:	e7f7      	b.n	b514c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b515c:	18cd      	adds	r5, r1, r3
   b515e:	8941      	ldrh	r1, [r0, #10]
   b5160:	1b49      	subs	r1, r1, r5
   b5162:	b209      	sxth	r1, r1
      break;
   b5164:	e767      	b.n	b5036 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b5166:	43d2      	mvns	r2, r2
   b5168:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b516a:	428b      	cmp	r3, r1
   b516c:	d0c3      	beq.n	b50f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b516e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5172:	4010      	ands	r0, r2
   b5174:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5178:	e7f7      	b.n	b516a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b517a:	bf00      	nop
   b517c:	2003da0c 	.word	0x2003da0c
   b5180:	2003da04 	.word	0x2003da04
   b5184:	2003da14 	.word	0x2003da14

000b5188 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5188:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b518a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b518c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5190:	2d02      	cmp	r5, #2
   b5192:	d034      	beq.n	b51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b5194:	2d03      	cmp	r5, #3
   b5196:	f000 809b 	beq.w	b52d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b519a:	2d01      	cmp	r5, #1
   b519c:	d137      	bne.n	b520e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b519e:	18d5      	adds	r5, r2, r3
   b51a0:	8902      	ldrh	r2, [r0, #8]
   b51a2:	1b52      	subs	r2, r2, r5
   b51a4:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b51a6:	2900      	cmp	r1, #0
   b51a8:	f2c0 8091 	blt.w	b52ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b51ac:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b51b0:	428d      	cmp	r5, r1
   b51b2:	f340 808c 	ble.w	b52ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b51b6:	2a00      	cmp	r2, #0
    w += x;
   b51b8:	bfbe      	ittt	lt
   b51ba:	189b      	addlt	r3, r3, r2
   b51bc:	b21b      	sxthlt	r3, r3
    x = 0;
   b51be:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b51c0:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b51c4:	18d6      	adds	r6, r2, r3
   b51c6:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b51c8:	bfc4      	itt	gt
   b51ca:	1aab      	subgt	r3, r5, r2
   b51cc:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b51ce:	2b00      	cmp	r3, #0
   b51d0:	dd7d      	ble.n	b52ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b51d2:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b51d4:	2580      	movs	r5, #128	; 0x80
   b51d6:	fb10 2205 	smlabb	r2, r0, r5, r2
   b51da:	4845      	ldr	r0, [pc, #276]	; (b52f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b51dc:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b51de:	f001 0007 	and.w	r0, r1, #7
   b51e2:	2101      	movs	r1, #1
   b51e4:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b51e6:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b51e8:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b51ea:	4413      	add	r3, r2
   b51ec:	d175      	bne.n	b52da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b51ee:	429a      	cmp	r2, r3
   b51f0:	d06d      	beq.n	b52ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b51f2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b51f6:	4308      	orrs	r0, r1
   b51f8:	f802 0c01 	strb.w	r0, [r2, #-1]
   b51fc:	e7f7      	b.n	b51ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b51fe:	8905      	ldrh	r5, [r0, #8]
   b5200:	43c9      	mvns	r1, r1
   b5202:	4429      	add	r1, r5
      y -= (h-1);
   b5204:	18d5      	adds	r5, r2, r3
   b5206:	8942      	ldrh	r2, [r0, #10]
   b5208:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b520a:	b209      	sxth	r1, r1
      y -= (h-1);
   b520c:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b520e:	2900      	cmp	r1, #0
   b5210:	db5d      	blt.n	b52ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5212:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5216:	428d      	cmp	r5, r1
   b5218:	dd59      	ble.n	b52ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b521a:	2a00      	cmp	r2, #0
    __h += __y;
   b521c:	bfbe      	ittt	lt
   b521e:	189b      	addlt	r3, r3, r2
   b5220:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5222:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5224:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5228:	18d5      	adds	r5, r2, r3
   b522a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b522c:	bfc4      	itt	gt
   b522e:	1a83      	subgt	r3, r0, r2
   b5230:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b5232:	2b00      	cmp	r3, #0
   b5234:	dd4b      	ble.n	b52ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b5236:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b523a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b52f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b523e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5242:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b5246:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5248:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b524c:	d01a      	beq.n	b5284 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b524e:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5252:	4e28      	ldr	r6, [pc, #160]	; (b52f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5254:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b5256:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5258:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b525a:	bf3f      	itttt	cc
   b525c:	eba5 0e03 	subcc.w	lr, r5, r3
   b5260:	26ff      	movcc	r6, #255	; 0xff
   b5262:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5266:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b5268:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b526c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b526e:	bf0c      	ite	eq
   b5270:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5272:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5274:	42ab      	cmp	r3, r5
   b5276:	f80c 6001 	strb.w	r6, [ip, r1]
   b527a:	d328      	bcc.n	b52ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b527c:	3a08      	subs	r2, #8
   b527e:	4413      	add	r3, r2
   b5280:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5282:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5284:	2b07      	cmp	r3, #7
   b5286:	d919      	bls.n	b52bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5288:	2c01      	cmp	r4, #1
   b528a:	f04f 35ff 	mov.w	r5, #4294967295
   b528e:	bf18      	it	ne
   b5290:	2500      	movne	r5, #0
   b5292:	b2ed      	uxtb	r5, r5
   b5294:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5298:	461a      	mov	r2, r3
      h -= 8;
   b529a:	3a08      	subs	r2, #8
   b529c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b529e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b52a0:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b52a4:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b52a8:	d8f7      	bhi.n	b529a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b52aa:	f1a3 0208 	sub.w	r2, r3, #8
   b52ae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b52b2:	3201      	adds	r2, #1
   b52b4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b52b8:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b52bc:	b13b      	cbz	r3, b52ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b52be:	4a0e      	ldr	r2, [pc, #56]	; (b52f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b52c0:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b52c2:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b52c4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b52c6:	bf0c      	ite	eq
   b52c8:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b52ca:	4393      	bicne	r3, r2
   b52cc:	7003      	strb	r3, [r0, #0]
}
   b52ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b52d0:	8945      	ldrh	r5, [r0, #10]
   b52d2:	43c9      	mvns	r1, r1
   b52d4:	4429      	add	r1, r5
   b52d6:	b209      	sxth	r1, r1
      break;
   b52d8:	e765      	b.n	b51a6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b52da:	43c9      	mvns	r1, r1
   b52dc:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b52de:	429a      	cmp	r2, r3
   b52e0:	d0f5      	beq.n	b52ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b52e2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b52e6:	4008      	ands	r0, r1
   b52e8:	f802 0c01 	strb.w	r0, [r2, #-1]
   b52ec:	e7f7      	b.n	b52de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b52ee:	bf00      	nop
   b52f0:	2003da14 	.word	0x2003da14
   b52f4:	2003da0c 	.word	0x2003da0c
   b52f8:	2003da04 	.word	0x2003da04

000b52fc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b52fc:	4770      	bx	lr
	...

000b5300 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5302:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5304:	4606      	mov	r6, r0
   b5306:	4614      	mov	r4, r2
   b5308:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b530a:	db2d      	blt.n	b5368 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b530c:	f000 fbcf 	bl	b5aae <_ZN12Adafruit_GFX5widthEv>
   b5310:	42a8      	cmp	r0, r5
   b5312:	dd29      	ble.n	b5368 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5314:	2c00      	cmp	r4, #0
   b5316:	db27      	blt.n	b5368 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5318:	4630      	mov	r0, r6
   b531a:	f000 fbcb 	bl	b5ab4 <_ZN12Adafruit_GFX6heightEv>
   b531e:	42a0      	cmp	r0, r4
   b5320:	dd22      	ble.n	b5368 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5322:	4630      	mov	r0, r6
   b5324:	f000 fbc1 	bl	b5aaa <_ZN12Adafruit_GFX11getRotationEv>
   b5328:	2802      	cmp	r0, #2
   b532a:	d01e      	beq.n	b536a <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b532c:	2803      	cmp	r0, #3
   b532e:	d025      	beq.n	b537c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5330:	2801      	cmp	r0, #1
   b5332:	d104      	bne.n	b533e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5334:	8933      	ldrh	r3, [r6, #8]
   b5336:	43e2      	mvns	r2, r4
   b5338:	441a      	add	r2, r3
    break;
   b533a:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b533c:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b533e:	2c00      	cmp	r4, #0
   b5340:	4622      	mov	r2, r4
   b5342:	bfb8      	it	lt
   b5344:	1de2      	addlt	r2, r4, #7
   b5346:	10d2      	asrs	r2, r2, #3
   b5348:	2180      	movs	r1, #128	; 0x80
   b534a:	fb12 5501 	smlabb	r5, r2, r1, r5
   b534e:	490e      	ldr	r1, [pc, #56]	; (b5388 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5350:	2201      	movs	r2, #1
   b5352:	f004 0407 	and.w	r4, r4, #7
   b5356:	574b      	ldrsb	r3, [r1, r5]
   b5358:	fa02 f404 	lsl.w	r4, r2, r4
   b535c:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b535e:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5360:	bf0c      	ite	eq
   b5362:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5364:	43a3      	bicne	r3, r4
   b5366:	554b      	strb	r3, [r1, r5]
}
   b5368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b536a:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b536c:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b536e:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5370:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5372:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5374:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b5376:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b5378:	b224      	sxth	r4, r4
    break;
   b537a:	e7e0      	b.n	b533e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b537c:	8973      	ldrh	r3, [r6, #10]
   b537e:	3b01      	subs	r3, #1
   b5380:	1b5b      	subs	r3, r3, r5
    break;
   b5382:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5384:	b21c      	sxth	r4, r3
    break;
   b5386:	e7da      	b.n	b533e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b5388:	2003da14 	.word	0x2003da14

000b538c <_ZN16Adafruit_SSD1306D0Ev>:
   b538c:	b510      	push	{r4, lr}
   b538e:	2124      	movs	r1, #36	; 0x24
   b5390:	4604      	mov	r4, r0
   b5392:	f7ff fc9c 	bl	b4cce <_ZdlPvj>
   b5396:	4620      	mov	r0, r4
   b5398:	bd10      	pop	{r4, pc}
	...

000b539c <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b539c:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b539e:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b53a0:	4604      	mov	r4, r0
   b53a2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b53a4:	2180      	movs	r1, #128	; 0x80
   b53a6:	f000 faa7 	bl	b58f8 <_ZN12Adafruit_GFXC1Ess>
   b53aa:	4b06      	ldr	r3, [pc, #24]	; (b53c4 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b53ac:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b53ae:	23ff      	movs	r3, #255	; 0xff
   b53b0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b53b4:	7763      	strb	r3, [r4, #29]
   b53b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b53ba:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b53bc:	f884 5020 	strb.w	r5, [r4, #32]
}
   b53c0:	4620      	mov	r0, r4
   b53c2:	bd38      	pop	{r3, r4, r5, pc}
   b53c4:	000b7224 	.word	0x000b7224

000b53c8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b53c8:	4802      	ldr	r0, [pc, #8]	; (b53d4 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b53ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b53ce:	2100      	movs	r1, #0
   b53d0:	f001 be58 	b.w	b7084 <memset>
   b53d4:	2003da14 	.word	0x2003da14

000b53d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b53d8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b53da:	4c0b      	ldr	r4, [pc, #44]	; (b5408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b53dc:	7821      	ldrb	r1, [r4, #0]
   b53de:	f3bf 8f5b 	dmb	ish
   b53e2:	f011 0101 	ands.w	r1, r1, #1
   b53e6:	d10b      	bne.n	b5400 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b53e8:	4620      	mov	r0, r4
   b53ea:	9101      	str	r1, [sp, #4]
   b53ec:	f7ff fc7e 	bl	b4cec <__cxa_guard_acquire>
   b53f0:	9901      	ldr	r1, [sp, #4]
   b53f2:	b128      	cbz	r0, b5400 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b53f4:	4805      	ldr	r0, [pc, #20]	; (b540c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b53f6:	f000 fdf9 	bl	b5fec <_ZN8SPIClassC1E19hal_spi_interface_t>
   b53fa:	4620      	mov	r0, r4
   b53fc:	f7ff fc7b 	bl	b4cf6 <__cxa_guard_release>
        return instance;
    }
   b5400:	4802      	ldr	r0, [pc, #8]	; (b540c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5402:	b002      	add	sp, #8
   b5404:	bd10      	pop	{r4, pc}
   b5406:	bf00      	nop
   b5408:	2003e6bc 	.word	0x2003e6bc
   b540c:	2003e6c0 	.word	0x2003e6c0

000b5410 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5410:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b5412:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b5416:	b143      	cbz	r3, b542a <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5418:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b541a:	f7ff ffdd 	bl	b53d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b541e:	9901      	ldr	r1, [sp, #4]
}
   b5420:	b003      	add	sp, #12
   b5422:	f85d eb04 	ldr.w	lr, [sp], #4
   b5426:	f000 be95 	b.w	b6154 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b542a:	460b      	mov	r3, r1
   b542c:	7f81      	ldrb	r1, [r0, #30]
   b542e:	7f40      	ldrb	r0, [r0, #29]
   b5430:	2201      	movs	r2, #1
}
   b5432:	b003      	add	sp, #12
   b5434:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5438:	f001 bc05 	b.w	b6c46 <shiftOut>

000b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b543c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b543e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5442:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5444:	4604      	mov	r4, r0
   b5446:	460d      	mov	r5, r1
  if (sid != -1)
   b5448:	d01d      	beq.n	b5486 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b544a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b544e:	2101      	movs	r1, #1
   b5450:	b280      	uxth	r0, r0
   b5452:	f001 fba2 	bl	b6b9a <digitalWrite>
    digitalWrite(dc, LOW);
   b5456:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b545a:	2100      	movs	r1, #0
   b545c:	b280      	uxth	r0, r0
   b545e:	f001 fb9c 	bl	b6b9a <digitalWrite>
    digitalWrite(cs, LOW);
   b5462:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5466:	2100      	movs	r1, #0
   b5468:	b280      	uxth	r0, r0
   b546a:	f001 fb96 	bl	b6b9a <digitalWrite>
    fastSPIwrite(c);
   b546e:	4629      	mov	r1, r5
   b5470:	4620      	mov	r0, r4
   b5472:	f7ff ffcd 	bl	b5410 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b5476:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b547a:	2101      	movs	r1, #1
}
   b547c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5480:	b280      	uxth	r0, r0
   b5482:	f001 bb8a 	b.w	b6b9a <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b5486:	f001 fc5b 	bl	b6d40 <_Z19__fetch_global_Wirev>
   b548a:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b548e:	f001 fa3b 	bl	b6908 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b5492:	f001 fc55 	bl	b6d40 <_Z19__fetch_global_Wirev>
   b5496:	6803      	ldr	r3, [r0, #0]
   b5498:	2100      	movs	r1, #0
   b549a:	689b      	ldr	r3, [r3, #8]
   b549c:	4798      	blx	r3
    Wire.write(c);
   b549e:	f001 fc4f 	bl	b6d40 <_Z19__fetch_global_Wirev>
   b54a2:	6803      	ldr	r3, [r0, #0]
   b54a4:	4629      	mov	r1, r5
   b54a6:	689b      	ldr	r3, [r3, #8]
   b54a8:	4798      	blx	r3
    Wire.endTransmission();
   b54aa:	f001 fc49 	bl	b6d40 <_Z19__fetch_global_Wirev>
}
   b54ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b54b2:	f001 ba30 	b.w	b6916 <_ZN7TwoWire15endTransmissionEv>
	...

000b54b8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b54b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b54ba:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b54bc:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b54be:	f7ff ffbd 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b54c2:	2100      	movs	r1, #0
   b54c4:	4620      	mov	r0, r4
   b54c6:	f7ff ffb9 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b54ca:	217f      	movs	r1, #127	; 0x7f
   b54cc:	4620      	mov	r0, r4
   b54ce:	f7ff ffb5 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b54d2:	2122      	movs	r1, #34	; 0x22
   b54d4:	4620      	mov	r0, r4
   b54d6:	f7ff ffb1 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b54da:	2100      	movs	r1, #0
   b54dc:	4620      	mov	r0, r4
   b54de:	f7ff ffad 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b54e2:	2107      	movs	r1, #7
   b54e4:	4620      	mov	r0, r4
   b54e6:	f7ff ffa9 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b54ea:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b54ee:	4f29      	ldr	r7, [pc, #164]	; (b5594 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b54f0:	3301      	adds	r3, #1
   b54f2:	d02a      	beq.n	b554a <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b54f4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b54f8:	2101      	movs	r1, #1
   b54fa:	b280      	uxth	r0, r0
   b54fc:	f001 fb4d 	bl	b6b9a <digitalWrite>
    digitalWrite(dc, HIGH);
   b5500:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5504:	2101      	movs	r1, #1
   b5506:	b280      	uxth	r0, r0
   b5508:	f001 fb47 	bl	b6b9a <digitalWrite>
    digitalWrite(cs, LOW);
   b550c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5510:	2100      	movs	r1, #0
   b5512:	b280      	uxth	r0, r0
   b5514:	f001 fb41 	bl	b6b9a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5518:	2001      	movs	r0, #1
   b551a:	f000 fb37 	bl	b5b8c <HAL_Delay_Microseconds>
   b551e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5522:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5524:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5528:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b552a:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b552c:	f7ff ff70 	bl	b5410 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5530:	2d00      	cmp	r5, #0
   b5532:	d1f6      	bne.n	b5522 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5534:	2001      	movs	r0, #1
   b5536:	f000 fb29 	bl	b5b8c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b553a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b553e:	2101      	movs	r1, #1
}
   b5540:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5544:	b280      	uxth	r0, r0
   b5546:	f001 bb28 	b.w	b6b9a <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b554a:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b554c:	f001 fbf8 	bl	b6d40 <_Z19__fetch_global_Wirev>
   b5550:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5554:	f001 f9d8 	bl	b6908 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5558:	f001 fbf2 	bl	b6d40 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b555c:	6803      	ldr	r3, [r0, #0]
   b555e:	2140      	movs	r1, #64	; 0x40
   b5560:	689b      	ldr	r3, [r3, #8]
   b5562:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5564:	f105 0610 	add.w	r6, r5, #16
   b5568:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b556a:	f001 fbe9 	bl	b6d40 <_Z19__fetch_global_Wirev>
   b556e:	6803      	ldr	r3, [r0, #0]
   b5570:	5d79      	ldrb	r1, [r7, r5]
   b5572:	689b      	ldr	r3, [r3, #8]
   b5574:	4798      	blx	r3
		i++;
   b5576:	1c6b      	adds	r3, r5, #1
   b5578:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b557a:	42ae      	cmp	r6, r5
   b557c:	d1f5      	bne.n	b556a <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b557e:	f001 fbdf 	bl	b6d40 <_Z19__fetch_global_Wirev>
   b5582:	f001 f9c8 	bl	b6916 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5586:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b558a:	d100      	bne.n	b558e <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b558c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b558e:	4635      	mov	r5, r6
   b5590:	e7dc      	b.n	b554c <_ZN16Adafruit_SSD13067displayEv+0x94>
   b5592:	bf00      	nop
   b5594:	2003da14 	.word	0x2003da14

000b5598 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5598:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b559a:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b559e:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b55a0:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b55a2:	4604      	mov	r4, r0
   b55a4:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b55a6:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b55a8:	f000 80c9 	beq.w	b573e <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b55ac:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b55b0:	2101      	movs	r1, #1
   b55b2:	b280      	uxth	r0, r0
   b55b4:	f001 fae0 	bl	b6b78 <pinMode>
    pinMode(cs, OUTPUT);
   b55b8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b55bc:	2101      	movs	r1, #1
   b55be:	b280      	uxth	r0, r0
   b55c0:	f001 fada 	bl	b6b78 <pinMode>
    if (!hwSPI){
   b55c4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b55c8:	2b00      	cmp	r3, #0
   b55ca:	f000 80a6 	beq.w	b571a <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b55ce:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b55d2:	2101      	movs	r1, #1
   b55d4:	b280      	uxth	r0, r0
   b55d6:	f001 fae0 	bl	b6b9a <digitalWrite>
        instance().setBitOrder(order);
   b55da:	f7ff fefd 	bl	b53d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b55de:	2101      	movs	r1, #1
   b55e0:	f000 fd22 	bl	b6028 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b55e4:	f7ff fef8 	bl	b53d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b55e8:	2110      	movs	r1, #16
   b55ea:	f000 fd8d 	bl	b6108 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b55ee:	f7ff fef3 	bl	b53d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b55f2:	2100      	movs	r1, #0
   b55f4:	f000 fd2c 	bl	b6050 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b55f8:	f7ff feee 	bl	b53d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b55fc:	f000 fd00 	bl	b6000 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5600:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5604:	2101      	movs	r1, #1
   b5606:	b280      	uxth	r0, r0
   b5608:	f001 fab6 	bl	b6b78 <pinMode>
  digitalWrite(rst, HIGH);
   b560c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5610:	2101      	movs	r1, #1
   b5612:	b280      	uxth	r0, r0
   b5614:	f001 fac1 	bl	b6b9a <digitalWrite>
  delay(1);
   b5618:	2001      	movs	r0, #1
   b561a:	f000 ff05 	bl	b6428 <delay>
  digitalWrite(rst, LOW);
   b561e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5622:	2100      	movs	r1, #0
   b5624:	b280      	uxth	r0, r0
   b5626:	f001 fab8 	bl	b6b9a <digitalWrite>
  delay(10);
   b562a:	200a      	movs	r0, #10
   b562c:	f000 fefc 	bl	b6428 <delay>
  digitalWrite(rst, HIGH);
   b5630:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5634:	2101      	movs	r1, #1
   b5636:	b280      	uxth	r0, r0
   b5638:	f001 faaf 	bl	b6b9a <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b563c:	4620      	mov	r0, r4
   b563e:	21ae      	movs	r1, #174	; 0xae
   b5640:	f7ff fefc 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5644:	4620      	mov	r0, r4
   b5646:	21d5      	movs	r1, #213	; 0xd5
   b5648:	f7ff fef8 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b564c:	4620      	mov	r0, r4
   b564e:	2180      	movs	r1, #128	; 0x80
   b5650:	f7ff fef4 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5654:	4620      	mov	r0, r4
   b5656:	21a8      	movs	r1, #168	; 0xa8
   b5658:	f7ff fef0 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b565c:	4620      	mov	r0, r4
   b565e:	213f      	movs	r1, #63	; 0x3f
   b5660:	f7ff feec 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5664:	4620      	mov	r0, r4
   b5666:	21d3      	movs	r1, #211	; 0xd3
   b5668:	f7ff fee8 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b566c:	4620      	mov	r0, r4
   b566e:	2100      	movs	r1, #0
   b5670:	f7ff fee4 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5674:	4620      	mov	r0, r4
   b5676:	2140      	movs	r1, #64	; 0x40
   b5678:	f7ff fee0 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b567c:	218d      	movs	r1, #141	; 0x8d
   b567e:	4620      	mov	r0, r4
   b5680:	f7ff fedc 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5684:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5686:	bf0c      	ite	eq
   b5688:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b568a:	2114      	movne	r1, #20
   b568c:	4620      	mov	r0, r4
   b568e:	f7ff fed5 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5692:	4620      	mov	r0, r4
   b5694:	2120      	movs	r1, #32
   b5696:	f7ff fed1 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b569a:	4620      	mov	r0, r4
   b569c:	2100      	movs	r1, #0
   b569e:	f7ff fecd 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b56a2:	4620      	mov	r0, r4
   b56a4:	21a1      	movs	r1, #161	; 0xa1
   b56a6:	f7ff fec9 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b56aa:	4620      	mov	r0, r4
   b56ac:	21c8      	movs	r1, #200	; 0xc8
   b56ae:	f7ff fec5 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b56b2:	4620      	mov	r0, r4
   b56b4:	21da      	movs	r1, #218	; 0xda
   b56b6:	f7ff fec1 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b56ba:	4620      	mov	r0, r4
   b56bc:	2112      	movs	r1, #18
   b56be:	f7ff febd 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b56c2:	2181      	movs	r1, #129	; 0x81
   b56c4:	4620      	mov	r0, r4
   b56c6:	f7ff feb9 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b56ca:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b56cc:	bf0c      	ite	eq
   b56ce:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b56d0:	21cf      	movne	r1, #207	; 0xcf
   b56d2:	4620      	mov	r0, r4
   b56d4:	f7ff feb2 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b56d8:	21d9      	movs	r1, #217	; 0xd9
   b56da:	4620      	mov	r0, r4
   b56dc:	f7ff feae 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b56e0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b56e2:	bf0c      	ite	eq
   b56e4:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b56e6:	21f1      	movne	r1, #241	; 0xf1
   b56e8:	4620      	mov	r0, r4
   b56ea:	f7ff fea7 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b56ee:	4620      	mov	r0, r4
   b56f0:	21db      	movs	r1, #219	; 0xdb
   b56f2:	f7ff fea3 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b56f6:	4620      	mov	r0, r4
   b56f8:	2140      	movs	r1, #64	; 0x40
   b56fa:	f7ff fe9f 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b56fe:	4620      	mov	r0, r4
   b5700:	21a4      	movs	r1, #164	; 0xa4
   b5702:	f7ff fe9b 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b5706:	4620      	mov	r0, r4
   b5708:	21a6      	movs	r1, #166	; 0xa6
   b570a:	f7ff fe97 	bl	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b570e:	4620      	mov	r0, r4
   b5710:	21af      	movs	r1, #175	; 0xaf
}
   b5712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5716:	f7ff be91 	b.w	b543c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b571a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b571e:	2101      	movs	r1, #1
   b5720:	b280      	uxth	r0, r0
   b5722:	f001 fa29 	bl	b6b78 <pinMode>
    	pinMode(sclk, OUTPUT);
   b5726:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b572a:	2101      	movs	r1, #1
   b572c:	b280      	uxth	r0, r0
   b572e:	f001 fa23 	bl	b6b78 <pinMode>
    if (hwSPI){
   b5732:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5736:	2b00      	cmp	r3, #0
   b5738:	f43f af62 	beq.w	b5600 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b573c:	e747      	b.n	b55ce <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b573e:	f001 faff 	bl	b6d40 <_Z19__fetch_global_Wirev>
   b5742:	f001 f8d7 	bl	b68f4 <_ZN7TwoWire5beginEv>
   b5746:	e75b      	b.n	b5600 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5748 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b5748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b574c:	b085      	sub	sp, #20
   b574e:	461f      	mov	r7, r3
   b5750:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5754:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5758:	eba8 0902 	sub.w	r9, r8, r2
   b575c:	eba7 0a01 	sub.w	sl, r7, r1
   b5760:	f1b9 0f00 	cmp.w	r9, #0
   b5764:	bfb8      	it	lt
   b5766:	f1c9 0900 	rsblt	r9, r9, #0
   b576a:	f1ba 0f00 	cmp.w	sl, #0
   b576e:	bfb8      	it	lt
   b5770:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5774:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b5776:	4683      	mov	fp, r0
   b5778:	460c      	mov	r4, r1
   b577a:	4615      	mov	r5, r2
  if (steep) {
   b577c:	dd04      	ble.n	b5788 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b577e:	463a      	mov	r2, r7
    swap(x0, y0);
   b5780:	462c      	mov	r4, r5
    swap(x1, y1);
   b5782:	4647      	mov	r7, r8
    swap(x0, y0);
   b5784:	460d      	mov	r5, r1
    swap(x1, y1);
   b5786:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b5788:	42bc      	cmp	r4, r7
   b578a:	dd05      	ble.n	b5798 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b578c:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b578e:	4645      	mov	r5, r8
   b5790:	4690      	mov	r8, r2
  if (x0 > x1) {
   b5792:	4622      	mov	r2, r4
   b5794:	463c      	mov	r4, r7
   b5796:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b5798:	1b3e      	subs	r6, r7, r4
   b579a:	b2b2      	uxth	r2, r6
   b579c:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b579e:	eba8 0205 	sub.w	r2, r8, r5
   b57a2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b57a6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b57aa:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b57ae:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b57b2:	4545      	cmp	r5, r8
   b57b4:	bfb4      	ite	lt
   b57b6:	2201      	movlt	r2, #1
   b57b8:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b57bc:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b57be:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b57c0:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b57c2:	42bc      	cmp	r4, r7
   b57c4:	dc1c      	bgt.n	b5800 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b57c6:	f8db 2000 	ldr.w	r2, [fp]
   b57ca:	9303      	str	r3, [sp, #12]
    if (steep) {
   b57cc:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b57ce:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b57d2:	bfc7      	ittee	gt
   b57d4:	4629      	movgt	r1, r5
   b57d6:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b57d8:	462a      	movle	r2, r5
   b57da:	4621      	movle	r1, r4
   b57dc:	4658      	mov	r0, fp
   b57de:	47c0      	blx	r8
    }
    err -= dy;
   b57e0:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b57e2:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b57e4:	1ab6      	subs	r6, r6, r2
   b57e6:	b2b1      	uxth	r1, r6
   b57e8:	b236      	sxth	r6, r6
    if (err < 0) {
   b57ea:	2e00      	cmp	r6, #0
   b57ec:	da05      	bge.n	b57fa <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b57ee:	9a02      	ldr	r2, [sp, #8]
   b57f0:	4415      	add	r5, r2
      err += dx;
   b57f2:	9a00      	ldr	r2, [sp, #0]
   b57f4:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b57f6:	b22d      	sxth	r5, r5
      err += dx;
   b57f8:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b57fa:	3401      	adds	r4, #1
   b57fc:	b224      	sxth	r4, r4
   b57fe:	e7e0      	b.n	b57c2 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5800:	b005      	add	sp, #20
   b5802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5806 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b5806:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b580a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b580e:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b5810:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b5814:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b5818:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b581a:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b581c:	4616      	mov	r6, r2
   b581e:	468a      	mov	sl, r1
   b5820:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b5822:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b5824:	6823      	ldr	r3, [r4, #0]
   b5826:	f8cd 8000 	str.w	r8, [sp]
   b582a:	f109 32ff 	add.w	r2, r9, #4294967295
   b582e:	4432      	add	r2, r6
   b5830:	69df      	ldr	r7, [r3, #28]
   b5832:	4651      	mov	r1, sl
   b5834:	462b      	mov	r3, r5
   b5836:	4620      	mov	r0, r4
   b5838:	b212      	sxth	r2, r2
   b583a:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b583c:	6823      	ldr	r3, [r4, #0]
   b583e:	f8cd 8000 	str.w	r8, [sp]
   b5842:	699f      	ldr	r7, [r3, #24]
   b5844:	4632      	mov	r2, r6
   b5846:	464b      	mov	r3, r9
   b5848:	4651      	mov	r1, sl
   b584a:	4620      	mov	r0, r4
   b584c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b584e:	1e6b      	subs	r3, r5, #1
   b5850:	eb03 010a 	add.w	r1, r3, sl
   b5854:	6823      	ldr	r3, [r4, #0]
   b5856:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b585a:	699d      	ldr	r5, [r3, #24]
   b585c:	4632      	mov	r2, r6
   b585e:	464b      	mov	r3, r9
   b5860:	b209      	sxth	r1, r1
   b5862:	4620      	mov	r0, r4
   b5864:	46ac      	mov	ip, r5
}
   b5866:	b002      	add	sp, #8
   b5868:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b586c:	4760      	bx	ip

000b586e <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b586e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5870:	3b01      	subs	r3, #1
   b5872:	4413      	add	r3, r2
   b5874:	6804      	ldr	r4, [r0, #0]
   b5876:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b587a:	9501      	str	r5, [sp, #4]
   b587c:	b21b      	sxth	r3, r3
   b587e:	9300      	str	r3, [sp, #0]
   b5880:	6964      	ldr	r4, [r4, #20]
   b5882:	460b      	mov	r3, r1
   b5884:	47a0      	blx	r4
}
   b5886:	b003      	add	sp, #12
   b5888:	bd30      	pop	{r4, r5, pc}

000b588a <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b588a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b588c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5890:	6804      	ldr	r4, [r0, #0]
   b5892:	e9cd 2500 	strd	r2, r5, [sp]
   b5896:	3b01      	subs	r3, #1
   b5898:	440b      	add	r3, r1
   b589a:	6964      	ldr	r4, [r4, #20]
   b589c:	b21b      	sxth	r3, r3
   b589e:	47a0      	blx	r4
}
   b58a0:	b003      	add	sp, #12
   b58a2:	bd30      	pop	{r4, r5, pc}

000b58a4 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b58a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b58a8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b58ac:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b58b0:	4605      	mov	r5, r0
   b58b2:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b58b4:	460c      	mov	r4, r1
   b58b6:	18ce      	adds	r6, r1, r3
   b58b8:	42b4      	cmp	r4, r6
   b58ba:	da0b      	bge.n	b58d4 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b58bc:	682b      	ldr	r3, [r5, #0]
   b58be:	f8cd 8000 	str.w	r8, [sp]
   b58c2:	699f      	ldr	r7, [r3, #24]
   b58c4:	4621      	mov	r1, r4
   b58c6:	464b      	mov	r3, r9
   b58c8:	4652      	mov	r2, sl
   b58ca:	4628      	mov	r0, r5
   b58cc:	3401      	adds	r4, #1
   b58ce:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b58d0:	b224      	sxth	r4, r4
   b58d2:	e7f1      	b.n	b58b8 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b58d4:	b002      	add	sp, #8
   b58d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b58da <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b58da:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b58dc:	6802      	ldr	r2, [r0, #0]
   b58de:	9101      	str	r1, [sp, #4]
   b58e0:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b58e4:	9100      	str	r1, [sp, #0]
   b58e6:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b58e8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b58ec:	2200      	movs	r2, #0
   b58ee:	4611      	mov	r1, r2
   b58f0:	47a0      	blx	r4
}
   b58f2:	b002      	add	sp, #8
   b58f4:	bd10      	pop	{r4, pc}

000b58f6 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b58f6:	4770      	bx	lr

000b58f8 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b58f8:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b58fa:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b58fc:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b58fe:	f04f 32ff 	mov.w	r2, #4294967295
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b5902:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5904:	4d05      	ldr	r5, [pc, #20]	; (b591c <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b5906:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5908:	2201      	movs	r2, #1
   b590a:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b590c:	6005      	str	r5, [r0, #0]
   b590e:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5910:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b5912:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b5914:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b5916:	7682      	strb	r2, [r0, #26]
}
   b5918:	bd30      	pop	{r4, r5, pc}
   b591a:	bf00      	nop
   b591c:	000b7758 	.word	0x000b7758

000b5920 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5924:	ed2d 8b02 	vpush	{d8}
   b5928:	b08d      	sub	sp, #52	; 0x34
   b592a:	4607      	mov	r7, r0
   b592c:	9104      	str	r1, [sp, #16]
   b592e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b5932:	9105      	str	r1, [sp, #20]
   b5934:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5938:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b593a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b593e:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5940:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5944:	4281      	cmp	r1, r0
   b5946:	dd52      	ble.n	b59ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5948:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b594c:	4291      	cmp	r1, r2
   b594e:	dd4e      	ble.n	b59ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5950:	2106      	movs	r1, #6
   b5952:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5956:	2c00      	cmp	r4, #0
   b5958:	dd49      	ble.n	b59ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b595a:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b595e:	2c00      	cmp	r4, #0
   b5960:	dd45      	ble.n	b59ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5962:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5966:	930b      	str	r3, [sp, #44]	; 0x2c
   b5968:	b293      	uxth	r3, r2
   b596a:	9307      	str	r3, [sp, #28]
   b596c:	3308      	adds	r3, #8
   b596e:	b29b      	uxth	r3, r3
   b5970:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5972:	2400      	movs	r4, #0
   b5974:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5976:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5978:	bf1c      	itt	ne
   b597a:	4b2c      	ldrne	r3, [pc, #176]	; (b5a2c <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b597c:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b597e:	9e07      	ldr	r6, [sp, #28]
   b5980:	bf16      	itet	ne
   b5982:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5984:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5986:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5988:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b598a:	9a04      	ldr	r2, [sp, #16]
   b598c:	b2ab      	uxth	r3, r5
   b598e:	930a      	str	r3, [sp, #40]	; 0x28
   b5990:	fb04 f305 	mul.w	r3, r4, r5
   b5994:	fa13 f382 	uxtah	r3, r3, r2
   b5998:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b599a:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b599e:	ee08 3a10 	vmov	s16, r3
   b59a2:	46b0      	mov	r8, r6
   b59a4:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b59a8:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b59ac:	9b03      	ldr	r3, [sp, #12]
   b59ae:	07db      	lsls	r3, r3, #31
   b59b0:	d52f      	bpl.n	b5a12 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b59b2:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b59b4:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b59b6:	d11f      	bne.n	b59f8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b59b8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b59bc:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b59be:	b232      	sxth	r2, r6
   b59c0:	4651      	mov	r1, sl
   b59c2:	4638      	mov	r0, r7
   b59c4:	47d8      	blx	fp
      line >>= 1;
   b59c6:	9b03      	ldr	r3, [sp, #12]
   b59c8:	085b      	lsrs	r3, r3, #1
   b59ca:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b59cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b59ce:	3601      	adds	r6, #1
   b59d0:	4498      	add	r8, r3
   b59d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b59d4:	b2b6      	uxth	r6, r6
   b59d6:	42b3      	cmp	r3, r6
   b59d8:	fa1f f888 	uxth.w	r8, r8
   b59dc:	d1e6      	bne.n	b59ac <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b59de:	9b08      	ldr	r3, [sp, #32]
   b59e0:	3b01      	subs	r3, #1
   b59e2:	3401      	adds	r4, #1
   b59e4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b59e8:	b264      	sxtb	r4, r4
   b59ea:	9308      	str	r3, [sp, #32]
   b59ec:	d1c3      	bne.n	b5976 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b59ee:	b00d      	add	sp, #52	; 0x34
   b59f0:	ecbd 8b02 	vpop	{d8}
   b59f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b59f8:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b59fa:	e9cd 9200 	strd	r9, r2, [sp]
   b59fe:	ee18 1a10 	vmov	r1, s16
   b5a02:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b5a06:	fa0f f288 	sxth.w	r2, r8
   b5a0a:	464b      	mov	r3, r9
   b5a0c:	4638      	mov	r0, r7
   b5a0e:	47d8      	blx	fp
   b5a10:	e7d9      	b.n	b59c6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5a12:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b5a16:	4293      	cmp	r3, r2
   b5a18:	d0d5      	beq.n	b59c6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5a1a:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5a1c:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5a1e:	d103      	bne.n	b5a28 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5a20:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5a24:	9b06      	ldr	r3, [sp, #24]
   b5a26:	e7ca      	b.n	b59be <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5a28:	9a06      	ldr	r2, [sp, #24]
   b5a2a:	e7e6      	b.n	b59fa <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5a2c:	000b7254 	.word	0x000b7254

000b5a30 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5a30:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5a32:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5a34:	b085      	sub	sp, #20
   b5a36:	4604      	mov	r4, r0
  if (c == '\n') {
   b5a38:	d107      	bne.n	b5a4a <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5a3a:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5a3c:	8a63      	ldrh	r3, [r4, #18]
   b5a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5a42:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5a44:	2300      	movs	r3, #0
   b5a46:	8223      	strh	r3, [r4, #16]
   b5a48:	e021      	b.n	b5a8e <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b5a4a:	290d      	cmp	r1, #13
   b5a4c:	d01f      	beq.n	b5a8e <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b5a4e:	7e03      	ldrb	r3, [r0, #24]
   b5a50:	9302      	str	r3, [sp, #8]
   b5a52:	8ac3      	ldrh	r3, [r0, #22]
   b5a54:	9301      	str	r3, [sp, #4]
   b5a56:	8a83      	ldrh	r3, [r0, #20]
   b5a58:	9300      	str	r3, [sp, #0]
   b5a5a:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5a5e:	460b      	mov	r3, r1
   b5a60:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5a64:	f7ff ff5c 	bl	b5920 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5a68:	7e20      	ldrb	r0, [r4, #24]
   b5a6a:	8a23      	ldrh	r3, [r4, #16]
   b5a6c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5a70:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5a74:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5a76:	b21b      	sxth	r3, r3
   b5a78:	4602      	mov	r2, r0
   b5a7a:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5a7c:	b139      	cbz	r1, b5a8e <_ZN12Adafruit_GFX5writeEh+0x5e>
   b5a7e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5a82:	f06f 0505 	mvn.w	r5, #5
   b5a86:	fb05 1100 	mla	r1, r5, r0, r1
   b5a8a:	428b      	cmp	r3, r1
   b5a8c:	dcd6      	bgt.n	b5a3c <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b5a8e:	2001      	movs	r0, #1
   b5a90:	b005      	add	sp, #20
   b5a92:	bd30      	pop	{r4, r5, pc}

000b5a94 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5a94:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5a96:	8242      	strh	r2, [r0, #18]
}
   b5a98:	4770      	bx	lr

000b5a9a <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5a9a:	2901      	cmp	r1, #1
   b5a9c:	bf38      	it	cc
   b5a9e:	2101      	movcc	r1, #1
   b5aa0:	7601      	strb	r1, [r0, #24]
}
   b5aa2:	4770      	bx	lr

000b5aa4 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5aa4:	82c1      	strh	r1, [r0, #22]
   b5aa6:	8281      	strh	r1, [r0, #20]
}
   b5aa8:	4770      	bx	lr

000b5aaa <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5aaa:	7e40      	ldrb	r0, [r0, #25]
   b5aac:	4770      	bx	lr

000b5aae <_ZN12Adafruit_GFX5widthEv>:
}
   b5aae:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5ab2:	4770      	bx	lr

000b5ab4 <_ZN12Adafruit_GFX6heightEv>:
}
   b5ab4:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5ab8:	4770      	bx	lr
	...

000b5abc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5abc:	b508      	push	{r3, lr}
   b5abe:	4b02      	ldr	r3, [pc, #8]	; (b5ac8 <netdb_freeaddrinfo+0xc>)
   b5ac0:	681b      	ldr	r3, [r3, #0]
   b5ac2:	689b      	ldr	r3, [r3, #8]
   b5ac4:	9301      	str	r3, [sp, #4]
   b5ac6:	bd08      	pop	{r3, pc}
   b5ac8:	00030268 	.word	0x00030268

000b5acc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5acc:	b508      	push	{r3, lr}
   b5ace:	4b02      	ldr	r3, [pc, #8]	; (b5ad8 <netdb_getaddrinfo+0xc>)
   b5ad0:	681b      	ldr	r3, [r3, #0]
   b5ad2:	68db      	ldr	r3, [r3, #12]
   b5ad4:	9301      	str	r3, [sp, #4]
   b5ad6:	bd08      	pop	{r3, pc}
   b5ad8:	00030268 	.word	0x00030268

000b5adc <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
   b5adc:	b508      	push	{r3, lr}
   b5ade:	4b02      	ldr	r3, [pc, #8]	; (b5ae8 <hal_pin_map+0xc>)
   b5ae0:	681b      	ldr	r3, [r3, #0]
   b5ae2:	681b      	ldr	r3, [r3, #0]
   b5ae4:	9301      	str	r3, [sp, #4]
   b5ae6:	bd08      	pop	{r3, pc}
   b5ae8:	0003022c 	.word	0x0003022c

000b5aec <hal_pin_validate_function>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b5aec:	b508      	push	{r3, lr}
   b5aee:	4b02      	ldr	r3, [pc, #8]	; (b5af8 <hal_pin_validate_function+0xc>)
   b5af0:	681b      	ldr	r3, [r3, #0]
   b5af2:	685b      	ldr	r3, [r3, #4]
   b5af4:	9301      	str	r3, [sp, #4]
   b5af6:	bd08      	pop	{r3, pc}
   b5af8:	0003022c 	.word	0x0003022c

000b5afc <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5afc:	b508      	push	{r3, lr}
   b5afe:	4b02      	ldr	r3, [pc, #8]	; (b5b08 <hal_gpio_mode+0xc>)
   b5b00:	681b      	ldr	r3, [r3, #0]
   b5b02:	689b      	ldr	r3, [r3, #8]
   b5b04:	9301      	str	r3, [sp, #4]
   b5b06:	bd08      	pop	{r3, pc}
   b5b08:	0003022c 	.word	0x0003022c

000b5b0c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b5b0c:	b508      	push	{r3, lr}
   b5b0e:	4b02      	ldr	r3, [pc, #8]	; (b5b18 <hal_gpio_get_mode+0xc>)
   b5b10:	681b      	ldr	r3, [r3, #0]
   b5b12:	68db      	ldr	r3, [r3, #12]
   b5b14:	9301      	str	r3, [sp, #4]
   b5b16:	bd08      	pop	{r3, pc}
   b5b18:	0003022c 	.word	0x0003022c

000b5b1c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b5b1c:	b508      	push	{r3, lr}
   b5b1e:	4b02      	ldr	r3, [pc, #8]	; (b5b28 <hal_gpio_write+0xc>)
   b5b20:	681b      	ldr	r3, [r3, #0]
   b5b22:	691b      	ldr	r3, [r3, #16]
   b5b24:	9301      	str	r3, [sp, #4]
   b5b26:	bd08      	pop	{r3, pc}
   b5b28:	0003022c 	.word	0x0003022c

000b5b2c <hal_interrupt_attach>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b5b2c:	b508      	push	{r3, lr}
   b5b2e:	4b02      	ldr	r3, [pc, #8]	; (b5b38 <hal_interrupt_attach+0xc>)
   b5b30:	681b      	ldr	r3, [r3, #0]
   b5b32:	699b      	ldr	r3, [r3, #24]
   b5b34:	9301      	str	r3, [sp, #4]
   b5b36:	bd08      	pop	{r3, pc}
   b5b38:	0003022c 	.word	0x0003022c

000b5b3c <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b5b3c:	b508      	push	{r3, lr}
   b5b3e:	4b02      	ldr	r3, [pc, #8]	; (b5b48 <hal_interrupt_detach+0xc>)
   b5b40:	681b      	ldr	r3, [r3, #0]
   b5b42:	69db      	ldr	r3, [r3, #28]
   b5b44:	9301      	str	r3, [sp, #4]
   b5b46:	bd08      	pop	{r3, pc}
   b5b48:	0003022c 	.word	0x0003022c

000b5b4c <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b5b4c:	b508      	push	{r3, lr}
   b5b4e:	4b02      	ldr	r3, [pc, #8]	; (b5b58 <HAL_DAC_Write+0xc>)
   b5b50:	681b      	ldr	r3, [r3, #0]
   b5b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b54:	9301      	str	r3, [sp, #4]
   b5b56:	bd08      	pop	{r3, pc}
   b5b58:	0003022c 	.word	0x0003022c

000b5b5c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5b5c:	b508      	push	{r3, lr}
   b5b5e:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <hal_adc_read+0xc>)
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5b64:	9301      	str	r3, [sp, #4]
   b5b66:	bd08      	pop	{r3, pc}
   b5b68:	0003022c 	.word	0x0003022c

000b5b6c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b5b6c:	b508      	push	{r3, lr}
   b5b6e:	4b02      	ldr	r3, [pc, #8]	; (b5b78 <hal_pwm_write_ext+0xc>)
   b5b70:	681b      	ldr	r3, [r3, #0]
   b5b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b5b74:	9301      	str	r3, [sp, #4]
   b5b76:	bd08      	pop	{r3, pc}
   b5b78:	0003022c 	.word	0x0003022c

000b5b7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5b7c:	b508      	push	{r3, lr}
   b5b7e:	4b02      	ldr	r3, [pc, #8]	; (b5b88 <HAL_RNG_GetRandomNumber+0xc>)
   b5b80:	681b      	ldr	r3, [r3, #0]
   b5b82:	685b      	ldr	r3, [r3, #4]
   b5b84:	9301      	str	r3, [sp, #4]
   b5b86:	bd08      	pop	{r3, pc}
   b5b88:	00030218 	.word	0x00030218

000b5b8c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5b8c:	b508      	push	{r3, lr}
   b5b8e:	4b02      	ldr	r3, [pc, #8]	; (b5b98 <HAL_Delay_Microseconds+0xc>)
   b5b90:	681b      	ldr	r3, [r3, #0]
   b5b92:	68db      	ldr	r3, [r3, #12]
   b5b94:	9301      	str	r3, [sp, #4]
   b5b96:	bd08      	pop	{r3, pc}
   b5b98:	00030218 	.word	0x00030218

000b5b9c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5b9c:	b508      	push	{r3, lr}
   b5b9e:	4b02      	ldr	r3, [pc, #8]	; (b5ba8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5ba0:	681b      	ldr	r3, [r3, #0]
   b5ba2:	695b      	ldr	r3, [r3, #20]
   b5ba4:	9301      	str	r3, [sp, #4]
   b5ba6:	bd08      	pop	{r3, pc}
   b5ba8:	00030218 	.word	0x00030218

000b5bac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5bac:	b508      	push	{r3, lr}
   b5bae:	4b02      	ldr	r3, [pc, #8]	; (b5bb8 <os_mutex_recursive_create+0xc>)
   b5bb0:	681b      	ldr	r3, [r3, #0]
   b5bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5bb4:	9301      	str	r3, [sp, #4]
   b5bb6:	bd08      	pop	{r3, pc}
   b5bb8:	00030248 	.word	0x00030248

000b5bbc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5bbc:	b508      	push	{r3, lr}
   b5bbe:	4b02      	ldr	r3, [pc, #8]	; (b5bc8 <inet_inet_ntop+0xc>)
   b5bc0:	681b      	ldr	r3, [r3, #0]
   b5bc2:	695b      	ldr	r3, [r3, #20]
   b5bc4:	9301      	str	r3, [sp, #4]
   b5bc6:	bd08      	pop	{r3, pc}
   b5bc8:	00030264 	.word	0x00030264

000b5bcc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5bcc:	b508      	push	{r3, lr}
   b5bce:	4b02      	ldr	r3, [pc, #8]	; (b5bd8 <hal_usart_write+0xc>)
   b5bd0:	681b      	ldr	r3, [r3, #0]
   b5bd2:	68db      	ldr	r3, [r3, #12]
   b5bd4:	9301      	str	r3, [sp, #4]
   b5bd6:	bd08      	pop	{r3, pc}
   b5bd8:	0003023c 	.word	0x0003023c

000b5bdc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5bdc:	b508      	push	{r3, lr}
   b5bde:	4b02      	ldr	r3, [pc, #8]	; (b5be8 <hal_usart_available+0xc>)
   b5be0:	681b      	ldr	r3, [r3, #0]
   b5be2:	691b      	ldr	r3, [r3, #16]
   b5be4:	9301      	str	r3, [sp, #4]
   b5be6:	bd08      	pop	{r3, pc}
   b5be8:	0003023c 	.word	0x0003023c

000b5bec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5bec:	b508      	push	{r3, lr}
   b5bee:	4b02      	ldr	r3, [pc, #8]	; (b5bf8 <hal_usart_read+0xc>)
   b5bf0:	681b      	ldr	r3, [r3, #0]
   b5bf2:	695b      	ldr	r3, [r3, #20]
   b5bf4:	9301      	str	r3, [sp, #4]
   b5bf6:	bd08      	pop	{r3, pc}
   b5bf8:	0003023c 	.word	0x0003023c

000b5bfc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5bfc:	b508      	push	{r3, lr}
   b5bfe:	4b02      	ldr	r3, [pc, #8]	; (b5c08 <hal_usart_peek+0xc>)
   b5c00:	681b      	ldr	r3, [r3, #0]
   b5c02:	699b      	ldr	r3, [r3, #24]
   b5c04:	9301      	str	r3, [sp, #4]
   b5c06:	bd08      	pop	{r3, pc}
   b5c08:	0003023c 	.word	0x0003023c

000b5c0c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5c0c:	b508      	push	{r3, lr}
   b5c0e:	4b02      	ldr	r3, [pc, #8]	; (b5c18 <hal_usart_flush+0xc>)
   b5c10:	681b      	ldr	r3, [r3, #0]
   b5c12:	69db      	ldr	r3, [r3, #28]
   b5c14:	9301      	str	r3, [sp, #4]
   b5c16:	bd08      	pop	{r3, pc}
   b5c18:	0003023c 	.word	0x0003023c

000b5c1c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5c1c:	b508      	push	{r3, lr}
   b5c1e:	4b02      	ldr	r3, [pc, #8]	; (b5c28 <hal_usart_is_enabled+0xc>)
   b5c20:	681b      	ldr	r3, [r3, #0]
   b5c22:	6a1b      	ldr	r3, [r3, #32]
   b5c24:	9301      	str	r3, [sp, #4]
   b5c26:	bd08      	pop	{r3, pc}
   b5c28:	0003023c 	.word	0x0003023c

000b5c2c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5c2c:	b508      	push	{r3, lr}
   b5c2e:	4b02      	ldr	r3, [pc, #8]	; (b5c38 <hal_usart_available_data_for_write+0xc>)
   b5c30:	681b      	ldr	r3, [r3, #0]
   b5c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c34:	9301      	str	r3, [sp, #4]
   b5c36:	bd08      	pop	{r3, pc}
   b5c38:	0003023c 	.word	0x0003023c

000b5c3c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5c3c:	b508      	push	{r3, lr}
   b5c3e:	4b02      	ldr	r3, [pc, #8]	; (b5c48 <hal_usart_init_ex+0xc>)
   b5c40:	681b      	ldr	r3, [r3, #0]
   b5c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c44:	9301      	str	r3, [sp, #4]
   b5c46:	bd08      	pop	{r3, pc}
   b5c48:	0003023c 	.word	0x0003023c

000b5c4c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5c4c:	b508      	push	{r3, lr}
   b5c4e:	4b02      	ldr	r3, [pc, #8]	; (b5c58 <hal_i2c_begin+0xc>)
   b5c50:	681b      	ldr	r3, [r3, #0]
   b5c52:	68db      	ldr	r3, [r3, #12]
   b5c54:	9301      	str	r3, [sp, #4]
   b5c56:	bd08      	pop	{r3, pc}
   b5c58:	00030228 	.word	0x00030228

000b5c5c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5c5c:	b508      	push	{r3, lr}
   b5c5e:	4b02      	ldr	r3, [pc, #8]	; (b5c68 <hal_i2c_begin_transmission+0xc>)
   b5c60:	681b      	ldr	r3, [r3, #0]
   b5c62:	699b      	ldr	r3, [r3, #24]
   b5c64:	9301      	str	r3, [sp, #4]
   b5c66:	bd08      	pop	{r3, pc}
   b5c68:	00030228 	.word	0x00030228

000b5c6c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5c6c:	b508      	push	{r3, lr}
   b5c6e:	4b02      	ldr	r3, [pc, #8]	; (b5c78 <hal_i2c_end_transmission+0xc>)
   b5c70:	681b      	ldr	r3, [r3, #0]
   b5c72:	69db      	ldr	r3, [r3, #28]
   b5c74:	9301      	str	r3, [sp, #4]
   b5c76:	bd08      	pop	{r3, pc}
   b5c78:	00030228 	.word	0x00030228

000b5c7c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5c7c:	b508      	push	{r3, lr}
   b5c7e:	4b02      	ldr	r3, [pc, #8]	; (b5c88 <hal_i2c_write+0xc>)
   b5c80:	681b      	ldr	r3, [r3, #0]
   b5c82:	6a1b      	ldr	r3, [r3, #32]
   b5c84:	9301      	str	r3, [sp, #4]
   b5c86:	bd08      	pop	{r3, pc}
   b5c88:	00030228 	.word	0x00030228

000b5c8c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5c8c:	b508      	push	{r3, lr}
   b5c8e:	4b02      	ldr	r3, [pc, #8]	; (b5c98 <hal_i2c_available+0xc>)
   b5c90:	681b      	ldr	r3, [r3, #0]
   b5c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c94:	9301      	str	r3, [sp, #4]
   b5c96:	bd08      	pop	{r3, pc}
   b5c98:	00030228 	.word	0x00030228

000b5c9c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5c9c:	b508      	push	{r3, lr}
   b5c9e:	4b02      	ldr	r3, [pc, #8]	; (b5ca8 <hal_i2c_read+0xc>)
   b5ca0:	681b      	ldr	r3, [r3, #0]
   b5ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ca4:	9301      	str	r3, [sp, #4]
   b5ca6:	bd08      	pop	{r3, pc}
   b5ca8:	00030228 	.word	0x00030228

000b5cac <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5cac:	b508      	push	{r3, lr}
   b5cae:	4b02      	ldr	r3, [pc, #8]	; (b5cb8 <hal_i2c_peek+0xc>)
   b5cb0:	681b      	ldr	r3, [r3, #0]
   b5cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cb4:	9301      	str	r3, [sp, #4]
   b5cb6:	bd08      	pop	{r3, pc}
   b5cb8:	00030228 	.word	0x00030228

000b5cbc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5cbc:	b508      	push	{r3, lr}
   b5cbe:	4b02      	ldr	r3, [pc, #8]	; (b5cc8 <hal_i2c_flush+0xc>)
   b5cc0:	681b      	ldr	r3, [r3, #0]
   b5cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5cc4:	9301      	str	r3, [sp, #4]
   b5cc6:	bd08      	pop	{r3, pc}
   b5cc8:	00030228 	.word	0x00030228

000b5ccc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5ccc:	b508      	push	{r3, lr}
   b5cce:	4b02      	ldr	r3, [pc, #8]	; (b5cd8 <hal_i2c_is_enabled+0xc>)
   b5cd0:	681b      	ldr	r3, [r3, #0]
   b5cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5cd4:	9301      	str	r3, [sp, #4]
   b5cd6:	bd08      	pop	{r3, pc}
   b5cd8:	00030228 	.word	0x00030228

000b5cdc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5cdc:	b508      	push	{r3, lr}
   b5cde:	4b02      	ldr	r3, [pc, #8]	; (b5ce8 <hal_i2c_init+0xc>)
   b5ce0:	681b      	ldr	r3, [r3, #0]
   b5ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ce4:	9301      	str	r3, [sp, #4]
   b5ce6:	bd08      	pop	{r3, pc}
   b5ce8:	00030228 	.word	0x00030228

000b5cec <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5cec:	b508      	push	{r3, lr}
   b5cee:	4b02      	ldr	r3, [pc, #8]	; (b5cf8 <hal_spi_begin+0xc>)
   b5cf0:	681b      	ldr	r3, [r3, #0]
   b5cf2:	681b      	ldr	r3, [r3, #0]
   b5cf4:	9301      	str	r3, [sp, #4]
   b5cf6:	bd08      	pop	{r3, pc}
   b5cf8:	00030230 	.word	0x00030230

000b5cfc <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5cfc:	b508      	push	{r3, lr}
   b5cfe:	4b02      	ldr	r3, [pc, #8]	; (b5d08 <hal_spi_set_bit_order+0xc>)
   b5d00:	681b      	ldr	r3, [r3, #0]
   b5d02:	689b      	ldr	r3, [r3, #8]
   b5d04:	9301      	str	r3, [sp, #4]
   b5d06:	bd08      	pop	{r3, pc}
   b5d08:	00030230 	.word	0x00030230

000b5d0c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5d0c:	b508      	push	{r3, lr}
   b5d0e:	4b02      	ldr	r3, [pc, #8]	; (b5d18 <hal_spi_set_data_mode+0xc>)
   b5d10:	681b      	ldr	r3, [r3, #0]
   b5d12:	68db      	ldr	r3, [r3, #12]
   b5d14:	9301      	str	r3, [sp, #4]
   b5d16:	bd08      	pop	{r3, pc}
   b5d18:	00030230 	.word	0x00030230

000b5d1c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5d1c:	b508      	push	{r3, lr}
   b5d1e:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <hal_spi_set_clock_divider+0xc>)
   b5d20:	681b      	ldr	r3, [r3, #0]
   b5d22:	691b      	ldr	r3, [r3, #16]
   b5d24:	9301      	str	r3, [sp, #4]
   b5d26:	bd08      	pop	{r3, pc}
   b5d28:	00030230 	.word	0x00030230

000b5d2c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5d2c:	b508      	push	{r3, lr}
   b5d2e:	4b02      	ldr	r3, [pc, #8]	; (b5d38 <hal_spi_transfer+0xc>)
   b5d30:	681b      	ldr	r3, [r3, #0]
   b5d32:	695b      	ldr	r3, [r3, #20]
   b5d34:	9301      	str	r3, [sp, #4]
   b5d36:	bd08      	pop	{r3, pc}
   b5d38:	00030230 	.word	0x00030230

000b5d3c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5d3c:	b508      	push	{r3, lr}
   b5d3e:	4b02      	ldr	r3, [pc, #8]	; (b5d48 <hal_spi_init+0xc>)
   b5d40:	681b      	ldr	r3, [r3, #0]
   b5d42:	69db      	ldr	r3, [r3, #28]
   b5d44:	9301      	str	r3, [sp, #4]
   b5d46:	bd08      	pop	{r3, pc}
   b5d48:	00030230 	.word	0x00030230

000b5d4c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5d4c:	b508      	push	{r3, lr}
   b5d4e:	4b02      	ldr	r3, [pc, #8]	; (b5d58 <hal_spi_is_enabled+0xc>)
   b5d50:	681b      	ldr	r3, [r3, #0]
   b5d52:	6a1b      	ldr	r3, [r3, #32]
   b5d54:	9301      	str	r3, [sp, #4]
   b5d56:	bd08      	pop	{r3, pc}
   b5d58:	00030230 	.word	0x00030230

000b5d5c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5d5c:	b508      	push	{r3, lr}
   b5d5e:	4b02      	ldr	r3, [pc, #8]	; (b5d68 <hal_spi_info+0xc>)
   b5d60:	681b      	ldr	r3, [r3, #0]
   b5d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d64:	9301      	str	r3, [sp, #4]
   b5d66:	bd08      	pop	{r3, pc}
   b5d68:	00030230 	.word	0x00030230

000b5d6c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5d6c:	b508      	push	{r3, lr}
   b5d6e:	4b02      	ldr	r3, [pc, #8]	; (b5d78 <hal_spi_acquire+0xc>)
   b5d70:	681b      	ldr	r3, [r3, #0]
   b5d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d74:	9301      	str	r3, [sp, #4]
   b5d76:	bd08      	pop	{r3, pc}
   b5d78:	00030230 	.word	0x00030230

000b5d7c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5d7c:	b508      	push	{r3, lr}
   b5d7e:	4b02      	ldr	r3, [pc, #8]	; (b5d88 <hal_spi_release+0xc>)
   b5d80:	681b      	ldr	r3, [r3, #0]
   b5d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d84:	9301      	str	r3, [sp, #4]
   b5d86:	bd08      	pop	{r3, pc}
   b5d88:	00030230 	.word	0x00030230

000b5d8c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5d8c:	b508      	push	{r3, lr}
   b5d8e:	4b02      	ldr	r3, [pc, #8]	; (b5d98 <HAL_USB_USART_Init+0xc>)
   b5d90:	681b      	ldr	r3, [r3, #0]
   b5d92:	681b      	ldr	r3, [r3, #0]
   b5d94:	9301      	str	r3, [sp, #4]
   b5d96:	bd08      	pop	{r3, pc}
   b5d98:	0003024c 	.word	0x0003024c

000b5d9c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5d9c:	b508      	push	{r3, lr}
   b5d9e:	4b02      	ldr	r3, [pc, #8]	; (b5da8 <HAL_USB_USART_Available_Data+0xc>)
   b5da0:	681b      	ldr	r3, [r3, #0]
   b5da2:	691b      	ldr	r3, [r3, #16]
   b5da4:	9301      	str	r3, [sp, #4]
   b5da6:	bd08      	pop	{r3, pc}
   b5da8:	0003024c 	.word	0x0003024c

000b5dac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5dac:	b508      	push	{r3, lr}
   b5dae:	4b02      	ldr	r3, [pc, #8]	; (b5db8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5db0:	681b      	ldr	r3, [r3, #0]
   b5db2:	695b      	ldr	r3, [r3, #20]
   b5db4:	9301      	str	r3, [sp, #4]
   b5db6:	bd08      	pop	{r3, pc}
   b5db8:	0003024c 	.word	0x0003024c

000b5dbc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <HAL_USB_USART_Receive_Data+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	699b      	ldr	r3, [r3, #24]
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	0003024c 	.word	0x0003024c

000b5dcc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <HAL_USB_USART_Send_Data+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	69db      	ldr	r3, [r3, #28]
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	0003024c 	.word	0x0003024c

000b5ddc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <HAL_USB_USART_Flush_Data+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	6a1b      	ldr	r3, [r3, #32]
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	0003024c 	.word	0x0003024c

000b5dec <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <panic_+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	00030260 	.word	0x00030260

000b5dfc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <set_system_mode+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	685b      	ldr	r3, [r3, #4]
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	00030220 	.word	0x00030220

000b5e0c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <system_delay_ms+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	695b      	ldr	r3, [r3, #20]
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	00030220 	.word	0x00030220

000b5e1c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b03      	ldr	r3, [pc, #12]	; (b5e2c <system_ctrl_set_app_request_handler+0x10>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5e26:	9301      	str	r3, [sp, #4]
   b5e28:	bd08      	pop	{r3, pc}
   b5e2a:	0000      	.short	0x0000
   b5e2c:	00030220 	.word	0x00030220

000b5e30 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b03      	ldr	r3, [pc, #12]	; (b5e40 <system_ctrl_set_result+0x10>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5e3a:	9301      	str	r3, [sp, #4]
   b5e3c:	bd08      	pop	{r3, pc}
   b5e3e:	0000      	.short	0x0000
   b5e40:	00030220 	.word	0x00030220

000b5e44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e44:	b508      	push	{r3, lr}
   b5e46:	4b02      	ldr	r3, [pc, #8]	; (b5e50 <network_connect+0xc>)
   b5e48:	681b      	ldr	r3, [r3, #0]
   b5e4a:	685b      	ldr	r3, [r3, #4]
   b5e4c:	9301      	str	r3, [sp, #4]
   b5e4e:	bd08      	pop	{r3, pc}
   b5e50:	00030240 	.word	0x00030240

000b5e54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5e54:	b508      	push	{r3, lr}
   b5e56:	4b02      	ldr	r3, [pc, #8]	; (b5e60 <network_connecting+0xc>)
   b5e58:	681b      	ldr	r3, [r3, #0]
   b5e5a:	689b      	ldr	r3, [r3, #8]
   b5e5c:	9301      	str	r3, [sp, #4]
   b5e5e:	bd08      	pop	{r3, pc}
   b5e60:	00030240 	.word	0x00030240

000b5e64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5e64:	b508      	push	{r3, lr}
   b5e66:	4b02      	ldr	r3, [pc, #8]	; (b5e70 <network_disconnect+0xc>)
   b5e68:	681b      	ldr	r3, [r3, #0]
   b5e6a:	68db      	ldr	r3, [r3, #12]
   b5e6c:	9301      	str	r3, [sp, #4]
   b5e6e:	bd08      	pop	{r3, pc}
   b5e70:	00030240 	.word	0x00030240

000b5e74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5e74:	b508      	push	{r3, lr}
   b5e76:	4b02      	ldr	r3, [pc, #8]	; (b5e80 <network_ready+0xc>)
   b5e78:	681b      	ldr	r3, [r3, #0]
   b5e7a:	691b      	ldr	r3, [r3, #16]
   b5e7c:	9301      	str	r3, [sp, #4]
   b5e7e:	bd08      	pop	{r3, pc}
   b5e80:	00030240 	.word	0x00030240

000b5e84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e84:	b508      	push	{r3, lr}
   b5e86:	4b02      	ldr	r3, [pc, #8]	; (b5e90 <network_on+0xc>)
   b5e88:	681b      	ldr	r3, [r3, #0]
   b5e8a:	695b      	ldr	r3, [r3, #20]
   b5e8c:	9301      	str	r3, [sp, #4]
   b5e8e:	bd08      	pop	{r3, pc}
   b5e90:	00030240 	.word	0x00030240

000b5e94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e94:	b508      	push	{r3, lr}
   b5e96:	4b02      	ldr	r3, [pc, #8]	; (b5ea0 <network_off+0xc>)
   b5e98:	681b      	ldr	r3, [r3, #0]
   b5e9a:	699b      	ldr	r3, [r3, #24]
   b5e9c:	9301      	str	r3, [sp, #4]
   b5e9e:	bd08      	pop	{r3, pc}
   b5ea0:	00030240 	.word	0x00030240

000b5ea4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5ea4:	b508      	push	{r3, lr}
   b5ea6:	4b02      	ldr	r3, [pc, #8]	; (b5eb0 <network_listen+0xc>)
   b5ea8:	681b      	ldr	r3, [r3, #0]
   b5eaa:	69db      	ldr	r3, [r3, #28]
   b5eac:	9301      	str	r3, [sp, #4]
   b5eae:	bd08      	pop	{r3, pc}
   b5eb0:	00030240 	.word	0x00030240

000b5eb4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5eb4:	b508      	push	{r3, lr}
   b5eb6:	4b02      	ldr	r3, [pc, #8]	; (b5ec0 <network_listening+0xc>)
   b5eb8:	681b      	ldr	r3, [r3, #0]
   b5eba:	6a1b      	ldr	r3, [r3, #32]
   b5ebc:	9301      	str	r3, [sp, #4]
   b5ebe:	bd08      	pop	{r3, pc}
   b5ec0:	00030240 	.word	0x00030240

000b5ec4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5ec4:	b508      	push	{r3, lr}
   b5ec6:	4b02      	ldr	r3, [pc, #8]	; (b5ed0 <network_set_listen_timeout+0xc>)
   b5ec8:	681b      	ldr	r3, [r3, #0]
   b5eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ecc:	9301      	str	r3, [sp, #4]
   b5ece:	bd08      	pop	{r3, pc}
   b5ed0:	00030240 	.word	0x00030240

000b5ed4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5ed4:	b508      	push	{r3, lr}
   b5ed6:	4b02      	ldr	r3, [pc, #8]	; (b5ee0 <network_get_listen_timeout+0xc>)
   b5ed8:	681b      	ldr	r3, [r3, #0]
   b5eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5edc:	9301      	str	r3, [sp, #4]
   b5ede:	bd08      	pop	{r3, pc}
   b5ee0:	00030240 	.word	0x00030240

000b5ee4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5ee4:	b508      	push	{r3, lr}
   b5ee6:	4b02      	ldr	r3, [pc, #8]	; (b5ef0 <network_is_on+0xc>)
   b5ee8:	681b      	ldr	r3, [r3, #0]
   b5eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5eec:	9301      	str	r3, [sp, #4]
   b5eee:	bd08      	pop	{r3, pc}
   b5ef0:	00030240 	.word	0x00030240

000b5ef4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5ef4:	b508      	push	{r3, lr}
   b5ef6:	4b02      	ldr	r3, [pc, #8]	; (b5f00 <network_is_off+0xc>)
   b5ef8:	681b      	ldr	r3, [r3, #0]
   b5efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5efc:	9301      	str	r3, [sp, #4]
   b5efe:	bd08      	pop	{r3, pc}
   b5f00:	00030240 	.word	0x00030240

000b5f04 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5f04:	b508      	push	{r3, lr}
   b5f06:	4b02      	ldr	r3, [pc, #8]	; (b5f10 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5f08:	681b      	ldr	r3, [r3, #0]
   b5f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5f0c:	9301      	str	r3, [sp, #4]
   b5f0e:	bd08      	pop	{r3, pc}
   b5f10:	00030244 	.word	0x00030244

000b5f14 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5f14:	b508      	push	{r3, lr}
   b5f16:	4b02      	ldr	r3, [pc, #8]	; (b5f20 <malloc+0xc>)
   b5f18:	681b      	ldr	r3, [r3, #0]
   b5f1a:	681b      	ldr	r3, [r3, #0]
   b5f1c:	9301      	str	r3, [sp, #4]
   b5f1e:	bd08      	pop	{r3, pc}
   b5f20:	0003021c 	.word	0x0003021c

000b5f24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5f24:	b508      	push	{r3, lr}
   b5f26:	4b02      	ldr	r3, [pc, #8]	; (b5f30 <free+0xc>)
   b5f28:	681b      	ldr	r3, [r3, #0]
   b5f2a:	685b      	ldr	r3, [r3, #4]
   b5f2c:	9301      	str	r3, [sp, #4]
   b5f2e:	bd08      	pop	{r3, pc}
   b5f30:	0003021c 	.word	0x0003021c

000b5f34 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5f34:	b508      	push	{r3, lr}
   b5f36:	4b02      	ldr	r3, [pc, #8]	; (b5f40 <__errno+0xc>)
   b5f38:	681b      	ldr	r3, [r3, #0]
   b5f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5f3c:	9301      	str	r3, [sp, #4]
   b5f3e:	bd08      	pop	{r3, pc}
   b5f40:	0003021c 	.word	0x0003021c

000b5f44 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5f44:	b508      	push	{r3, lr}
   b5f46:	4b02      	ldr	r3, [pc, #8]	; (b5f50 <__assert_func+0xc>)
   b5f48:	681b      	ldr	r3, [r3, #0]
   b5f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f4c:	9301      	str	r3, [sp, #4]
   b5f4e:	bd08      	pop	{r3, pc}
   b5f50:	0003021c 	.word	0x0003021c

000b5f54 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5f54:	b508      	push	{r3, lr}
   b5f56:	4b02      	ldr	r3, [pc, #8]	; (b5f60 <newlib_impure_ptr_callback+0xc>)
   b5f58:	681b      	ldr	r3, [r3, #0]
   b5f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f5c:	9301      	str	r3, [sp, #4]
   b5f5e:	bd08      	pop	{r3, pc}
   b5f60:	0003021c 	.word	0x0003021c

000b5f64 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5f64:	2200      	movs	r2, #0
   b5f66:	6840      	ldr	r0, [r0, #4]
   b5f68:	4611      	mov	r1, r2
   b5f6a:	f7ff bfa3 	b.w	b5eb4 <network_listening>

000b5f6e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5f6e:	2200      	movs	r2, #0
   b5f70:	6840      	ldr	r0, [r0, #4]
   b5f72:	4611      	mov	r1, r2
   b5f74:	f7ff bfae 	b.w	b5ed4 <network_get_listen_timeout>

000b5f78 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5f78:	6840      	ldr	r0, [r0, #4]
   b5f7a:	2200      	movs	r2, #0
   b5f7c:	f7ff bfa2 	b.w	b5ec4 <network_set_listen_timeout>

000b5f80 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5f80:	6840      	ldr	r0, [r0, #4]
   b5f82:	2200      	movs	r2, #0
   b5f84:	f081 0101 	eor.w	r1, r1, #1
   b5f88:	f7ff bf8c 	b.w	b5ea4 <network_listen>

000b5f8c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5f8c:	2300      	movs	r3, #0
   b5f8e:	6840      	ldr	r0, [r0, #4]
   b5f90:	461a      	mov	r2, r3
   b5f92:	4619      	mov	r1, r3
   b5f94:	f7ff bf7e 	b.w	b5e94 <network_off>

000b5f98 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5f98:	2300      	movs	r3, #0
   b5f9a:	6840      	ldr	r0, [r0, #4]
   b5f9c:	461a      	mov	r2, r3
   b5f9e:	4619      	mov	r1, r3
   b5fa0:	f7ff bf70 	b.w	b5e84 <network_on>

000b5fa4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5fa4:	2200      	movs	r2, #0
   b5fa6:	6840      	ldr	r0, [r0, #4]
   b5fa8:	4611      	mov	r1, r2
   b5faa:	f7ff bf63 	b.w	b5e74 <network_ready>

000b5fae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5fae:	2200      	movs	r2, #0
   b5fb0:	6840      	ldr	r0, [r0, #4]
   b5fb2:	4611      	mov	r1, r2
   b5fb4:	f7ff bf4e 	b.w	b5e54 <network_connecting>

000b5fb8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5fb8:	6840      	ldr	r0, [r0, #4]
   b5fba:	2200      	movs	r2, #0
   b5fbc:	2102      	movs	r1, #2
   b5fbe:	f7ff bf51 	b.w	b5e64 <network_disconnect>

000b5fc2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5fc2:	2300      	movs	r3, #0
   b5fc4:	6840      	ldr	r0, [r0, #4]
   b5fc6:	461a      	mov	r2, r3
   b5fc8:	f7ff bf3c 	b.w	b5e44 <network_connect>

000b5fcc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5fcc:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5fce:	2203      	movs	r2, #3
   b5fd0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5fd2:	4a02      	ldr	r2, [pc, #8]	; (b5fdc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5fd4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5fd6:	4770      	bx	lr
   b5fd8:	2003e6c8 	.word	0x2003e6c8
   b5fdc:	000b7790 	.word	0x000b7790

000b5fe0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5fe0:	2100      	movs	r1, #0
   b5fe2:	f7ff becb 	b.w	b5d7c <hal_spi_release>

000b5fe6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5fe6:	2100      	movs	r1, #0
   b5fe8:	f7ff bec0 	b.w	b5d6c <hal_spi_acquire>

000b5fec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5fec:	b510      	push	{r4, lr}
   b5fee:	4604      	mov	r4, r0
   b5ff0:	4608      	mov	r0, r1
{
    _spi = spi;
   b5ff2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5ff4:	f7ff fea2 	bl	b5d3c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5ff8:	2300      	movs	r3, #0
   b5ffa:	6063      	str	r3, [r4, #4]
}
   b5ffc:	4620      	mov	r0, r4
   b5ffe:	bd10      	pop	{r4, pc}

000b6000 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6000:	b513      	push	{r0, r1, r4, lr}
   b6002:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6004:	7800      	ldrb	r0, [r0, #0]
   b6006:	f7ff ffee 	bl	b5fe6 <_ZN8SPIClass4lockEv.isra.0>
   b600a:	b958      	cbnz	r0, b6024 <_ZN8SPIClass5beginEv+0x24>
   b600c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b600e:	9001      	str	r0, [sp, #4]
   b6010:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6014:	f7ff fe6a 	bl	b5cec <hal_spi_begin>
        unlock();
   b6018:	9801      	ldr	r0, [sp, #4]
    }
}
   b601a:	b002      	add	sp, #8
   b601c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6020:	f7ff bfde 	b.w	b5fe0 <_ZN8SPIClass6unlockEv.isra.0>
   b6024:	b002      	add	sp, #8
   b6026:	bd10      	pop	{r4, pc}

000b6028 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b6028:	b513      	push	{r0, r1, r4, lr}
   b602a:	4604      	mov	r4, r0
    if (!lock())
   b602c:	7800      	ldrb	r0, [r0, #0]
{
   b602e:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6030:	f7ff ffd9 	bl	b5fe6 <_ZN8SPIClass4lockEv.isra.0>
   b6034:	9901      	ldr	r1, [sp, #4]
   b6036:	b948      	cbnz	r0, b604c <_ZN8SPIClass11setBitOrderEh+0x24>
   b6038:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b603a:	9001      	str	r0, [sp, #4]
   b603c:	f7ff fe5e 	bl	b5cfc <hal_spi_set_bit_order>
        unlock();
   b6040:	9801      	ldr	r0, [sp, #4]
    }
}
   b6042:	b002      	add	sp, #8
   b6044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6048:	f7ff bfca 	b.w	b5fe0 <_ZN8SPIClass6unlockEv.isra.0>
   b604c:	b002      	add	sp, #8
   b604e:	bd10      	pop	{r4, pc}

000b6050 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6050:	b513      	push	{r0, r1, r4, lr}
   b6052:	4604      	mov	r4, r0
    if (!lock())
   b6054:	7800      	ldrb	r0, [r0, #0]
{
   b6056:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6058:	f7ff ffc5 	bl	b5fe6 <_ZN8SPIClass4lockEv.isra.0>
   b605c:	9901      	ldr	r1, [sp, #4]
   b605e:	b948      	cbnz	r0, b6074 <_ZN8SPIClass11setDataModeEh+0x24>
   b6060:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b6062:	9001      	str	r0, [sp, #4]
   b6064:	f7ff fe52 	bl	b5d0c <hal_spi_set_data_mode>
        unlock();
   b6068:	9801      	ldr	r0, [sp, #4]
    }
}
   b606a:	b002      	add	sp, #8
   b606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6070:	f7ff bfb6 	b.w	b5fe0 <_ZN8SPIClass6unlockEv.isra.0>
   b6074:	b002      	add	sp, #8
   b6076:	bd10      	pop	{r4, pc}

000b6078 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6078:	0840      	lsrs	r0, r0, #1
{
   b607a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b607c:	6018      	str	r0, [r3, #0]
   b607e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6080:	6818      	ldr	r0, [r3, #0]
   b6082:	4288      	cmp	r0, r1
   b6084:	b2e5      	uxtb	r5, r4
   b6086:	d906      	bls.n	b6096 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6088:	3401      	adds	r4, #1
   b608a:	2c08      	cmp	r4, #8
   b608c:	d002      	beq.n	b6094 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b608e:	0840      	lsrs	r0, r0, #1
   b6090:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6092:	e7f5      	b.n	b6080 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6094:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6096:	4b02      	ldr	r3, [pc, #8]	; (b60a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6098:	5d5b      	ldrb	r3, [r3, r5]
   b609a:	7013      	strb	r3, [r2, #0]
}
   b609c:	bd30      	pop	{r4, r5, pc}
   b609e:	bf00      	nop
   b60a0:	000b77c4 	.word	0x000b77c4

000b60a4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b60a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b60a8:	b088      	sub	sp, #32
    unsigned clock = 0;
   b60aa:	2300      	movs	r3, #0
{
   b60ac:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b60ae:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b60b0:	9302      	str	r3, [sp, #8]
{
   b60b2:	460e      	mov	r6, r1
   b60b4:	4617      	mov	r7, r2
    if (!lock())
   b60b6:	f7ff ff96 	bl	b5fe6 <_ZN8SPIClass4lockEv.isra.0>
   b60ba:	4605      	mov	r5, r0
   b60bc:	bb00      	cbnz	r0, b6100 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b60be:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b60c2:	4601      	mov	r1, r0
   b60c4:	2214      	movs	r2, #20
   b60c6:	a803      	add	r0, sp, #12
   b60c8:	f000 ffdc 	bl	b7084 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b60cc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b60ce:	462a      	mov	r2, r5
   b60d0:	a903      	add	r1, sp, #12
   b60d2:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b60d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b60d8:	f7ff fe40 	bl	b5d5c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b60dc:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b60de:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b60e2:	ab02      	add	r3, sp, #8
   b60e4:	f10d 0207 	add.w	r2, sp, #7
   b60e8:	fb07 f106 	mul.w	r1, r7, r6
   b60ec:	f7ff ffc4 	bl	b6078 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b60f0:	7820      	ldrb	r0, [r4, #0]
   b60f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b60f6:	f7ff fe11 	bl	b5d1c <hal_spi_set_clock_divider>
        unlock();
   b60fa:	7820      	ldrb	r0, [r4, #0]
   b60fc:	f7ff ff70 	bl	b5fe0 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6100:	9802      	ldr	r0, [sp, #8]
   b6102:	b008      	add	sp, #32
   b6104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6108 <_ZN8SPIClass15setClockDividerEh>:
{
   b6108:	b538      	push	{r3, r4, r5, lr}
   b610a:	4604      	mov	r4, r0
    if (!lock())
   b610c:	7800      	ldrb	r0, [r0, #0]
{
   b610e:	460d      	mov	r5, r1
    if (!lock())
   b6110:	f7ff ff69 	bl	b5fe6 <_ZN8SPIClass4lockEv.isra.0>
   b6114:	4603      	mov	r3, r0
   b6116:	b9d0      	cbnz	r0, b614e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6118:	6861      	ldr	r1, [r4, #4]
   b611a:	b199      	cbz	r1, b6144 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b611c:	4a0c      	ldr	r2, [pc, #48]	; (b6150 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b611e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6122:	4285      	cmp	r5, r0
   b6124:	d002      	beq.n	b612c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b6126:	3301      	adds	r3, #1
   b6128:	2b08      	cmp	r3, #8
   b612a:	d1f8      	bne.n	b611e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b612c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b612e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6130:	2201      	movs	r2, #1
   b6132:	40d9      	lsrs	r1, r3
   b6134:	4620      	mov	r0, r4
   b6136:	f7ff ffb5 	bl	b60a4 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b613a:	7820      	ldrb	r0, [r4, #0]
}
   b613c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6140:	f7ff bf4e 	b.w	b5fe0 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6144:	7820      	ldrb	r0, [r4, #0]
   b6146:	4629      	mov	r1, r5
   b6148:	f7ff fde8 	bl	b5d1c <hal_spi_set_clock_divider>
   b614c:	e7f5      	b.n	b613a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b614e:	bd38      	pop	{r3, r4, r5, pc}
   b6150:	000b77c4 	.word	0x000b77c4

000b6154 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6154:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6156:	7800      	ldrb	r0, [r0, #0]
   b6158:	f7ff fde8 	bl	b5d2c <hal_spi_transfer>
}
   b615c:	b2c0      	uxtb	r0, r0
   b615e:	bd08      	pop	{r3, pc}

000b6160 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6160:	4b05      	ldr	r3, [pc, #20]	; (b6178 <_GLOBAL__sub_I_System+0x18>)
   b6162:	2202      	movs	r2, #2
   b6164:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6166:	4b05      	ldr	r3, [pc, #20]	; (b617c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6168:	4a05      	ldr	r2, [pc, #20]	; (b6180 <_GLOBAL__sub_I_System+0x20>)
   b616a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b616c:	2000      	movs	r0, #0
   b616e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6172:	f7ff be43 	b.w	b5dfc <set_system_mode>
   b6176:	bf00      	nop
   b6178:	2003e6dc 	.word	0x2003e6dc
   b617c:	2003e6d0 	.word	0x2003e6d0
   b6180:	ffff0000 	.word	0xffff0000

000b6184 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6184:	4802      	ldr	r0, [pc, #8]	; (b6190 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6186:	2300      	movs	r3, #0
   b6188:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b618a:	f7ff bd0f 	b.w	b5bac <os_mutex_recursive_create>
   b618e:	bf00      	nop
   b6190:	2003e6e0 	.word	0x2003e6e0

000b6194 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6196:	4606      	mov	r6, r0
   b6198:	460d      	mov	r5, r1
  size_t n = 0;
   b619a:	188f      	adds	r7, r1, r2
   b619c:	2400      	movs	r4, #0
  while (size--) {
   b619e:	42bd      	cmp	r5, r7
   b61a0:	d00c      	beq.n	b61bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b61a2:	6833      	ldr	r3, [r6, #0]
   b61a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b61a8:	689b      	ldr	r3, [r3, #8]
   b61aa:	4630      	mov	r0, r6
   b61ac:	4798      	blx	r3
     if (chunk>=0)
   b61ae:	1e03      	subs	r3, r0, #0
   b61b0:	db01      	blt.n	b61b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b61b2:	441c      	add	r4, r3
  while (size--) {
   b61b4:	e7f3      	b.n	b619e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b61b6:	2c00      	cmp	r4, #0
   b61b8:	bf08      	it	eq
   b61ba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b61bc:	4620      	mov	r0, r4
   b61be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b61c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b61c0:	b513      	push	{r0, r1, r4, lr}
   b61c2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b61c4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b61c6:	b159      	cbz	r1, b61e0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b61c8:	9101      	str	r1, [sp, #4]
   b61ca:	f7fe fd3b 	bl	b4c44 <strlen>
   b61ce:	6823      	ldr	r3, [r4, #0]
   b61d0:	9901      	ldr	r1, [sp, #4]
   b61d2:	68db      	ldr	r3, [r3, #12]
   b61d4:	4602      	mov	r2, r0
   b61d6:	4620      	mov	r0, r4
    }
   b61d8:	b002      	add	sp, #8
   b61da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b61de:	4718      	bx	r3
    }
   b61e0:	b002      	add	sp, #8
   b61e2:	bd10      	pop	{r4, pc}

000b61e4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b61e4:	6803      	ldr	r3, [r0, #0]
   b61e6:	689b      	ldr	r3, [r3, #8]
   b61e8:	4718      	bx	r3

000b61ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b61ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b61ec:	210d      	movs	r1, #13
{
   b61ee:	4605      	mov	r5, r0
  size_t n = print('\r');
   b61f0:	f7ff fff8 	bl	b61e4 <_ZN5Print5printEc>
  n += print('\n');
   b61f4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b61f6:	4604      	mov	r4, r0
  n += print('\n');
   b61f8:	4628      	mov	r0, r5
   b61fa:	f7ff fff3 	bl	b61e4 <_ZN5Print5printEc>
  return n;
}
   b61fe:	4420      	add	r0, r4
   b6200:	bd38      	pop	{r3, r4, r5, pc}

000b6202 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6202:	b538      	push	{r3, r4, r5, lr}
   b6204:	4605      	mov	r5, r0
  return write(str);
   b6206:	f7ff ffdb 	bl	b61c0 <_ZN5Print5writeEPKc>
   b620a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b620c:	4628      	mov	r0, r5
   b620e:	f7ff ffec 	bl	b61ea <_ZN5Print7printlnEv>
  return n;
}
   b6212:	4420      	add	r0, r4
   b6214:	bd38      	pop	{r3, r4, r5, pc}

000b6216 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6216:	b530      	push	{r4, r5, lr}
   b6218:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b621a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b621c:	2a01      	cmp	r2, #1
  *str = '\0';
   b621e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6222:	bf98      	it	ls
   b6224:	220a      	movls	r2, #10
   b6226:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6228:	460d      	mov	r5, r1
   b622a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b622e:	fb01 5312 	mls	r3, r1, r2, r5
   b6232:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6236:	2b09      	cmp	r3, #9
   b6238:	bf94      	ite	ls
   b623a:	3330      	addls	r3, #48	; 0x30
   b623c:	3337      	addhi	r3, #55	; 0x37
   b623e:	b2db      	uxtb	r3, r3
  } while(n);
   b6240:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6242:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6246:	d9ef      	bls.n	b6228 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6248:	4621      	mov	r1, r4
   b624a:	f7ff ffb9 	bl	b61c0 <_ZN5Print5writeEPKc>
}
   b624e:	b00b      	add	sp, #44	; 0x2c
   b6250:	bd30      	pop	{r4, r5, pc}
	...

000b6254 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b6254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6258:	ec55 4b10 	vmov	r4, r5, d0
   b625c:	4606      	mov	r6, r0
   b625e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b6260:	ee10 2a10 	vmov	r2, s0
   b6264:	ee10 0a10 	vmov	r0, s0
   b6268:	462b      	mov	r3, r5
   b626a:	4629      	mov	r1, r5
   b626c:	f7fe fb2e 	bl	b48cc <__aeabi_dcmpun>
   b6270:	b140      	cbz	r0, b6284 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b6272:	4953      	ldr	r1, [pc, #332]	; (b63c0 <_ZN5Print10printFloatEdh+0x16c>)
   b6274:	4630      	mov	r0, r6
   b6276:	f7ff ffa3 	bl	b61c0 <_ZN5Print5writeEPKc>
   b627a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b627c:	4650      	mov	r0, sl
   b627e:	b003      	add	sp, #12
   b6280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6284:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b6288:	4b4e      	ldr	r3, [pc, #312]	; (b63c4 <_ZN5Print10printFloatEdh+0x170>)
   b628a:	f04f 32ff 	mov.w	r2, #4294967295
   b628e:	4620      	mov	r0, r4
   b6290:	4649      	mov	r1, r9
   b6292:	f7fe fb1b 	bl	b48cc <__aeabi_dcmpun>
   b6296:	b948      	cbnz	r0, b62ac <_ZN5Print10printFloatEdh+0x58>
   b6298:	4b4a      	ldr	r3, [pc, #296]	; (b63c4 <_ZN5Print10printFloatEdh+0x170>)
   b629a:	f04f 32ff 	mov.w	r2, #4294967295
   b629e:	4620      	mov	r0, r4
   b62a0:	4649      	mov	r1, r9
   b62a2:	f7fe faf5 	bl	b4890 <__aeabi_dcmple>
   b62a6:	b908      	cbnz	r0, b62ac <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b62a8:	4947      	ldr	r1, [pc, #284]	; (b63c8 <_ZN5Print10printFloatEdh+0x174>)
   b62aa:	e7e3      	b.n	b6274 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b62ac:	4b47      	ldr	r3, [pc, #284]	; (b63cc <_ZN5Print10printFloatEdh+0x178>)
   b62ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b62b2:	4620      	mov	r0, r4
   b62b4:	4629      	mov	r1, r5
   b62b6:	f7fe faff 	bl	b48b8 <__aeabi_dcmpgt>
   b62ba:	b108      	cbz	r0, b62c0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b62bc:	4944      	ldr	r1, [pc, #272]	; (b63d0 <_ZN5Print10printFloatEdh+0x17c>)
   b62be:	e7d9      	b.n	b6274 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b62c0:	4b44      	ldr	r3, [pc, #272]	; (b63d4 <_ZN5Print10printFloatEdh+0x180>)
   b62c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b62c6:	4620      	mov	r0, r4
   b62c8:	4629      	mov	r1, r5
   b62ca:	f7fe fad7 	bl	b487c <__aeabi_dcmplt>
   b62ce:	2800      	cmp	r0, #0
   b62d0:	d1f4      	bne.n	b62bc <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b62d2:	2200      	movs	r2, #0
   b62d4:	2300      	movs	r3, #0
   b62d6:	4620      	mov	r0, r4
   b62d8:	4629      	mov	r1, r5
   b62da:	f7fe facf 	bl	b487c <__aeabi_dcmplt>
   b62de:	b1d0      	cbz	r0, b6316 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b62e0:	212d      	movs	r1, #45	; 0x2d
   b62e2:	4630      	mov	r0, r6
   b62e4:	f7ff ff7e 	bl	b61e4 <_ZN5Print5printEc>
     number = -number;
   b62e8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b62ec:	4682      	mov	sl, r0
     number = -number;
   b62ee:	461d      	mov	r5, r3
  double rounding = 0.5;
   b62f0:	4939      	ldr	r1, [pc, #228]	; (b63d8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b62f2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b63e0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b62f6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b62fa:	2000      	movs	r0, #0
    rounding /= 10.0;
   b62fc:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b6300:	fa5f f38b 	uxtb.w	r3, fp
   b6304:	429f      	cmp	r7, r3
   b6306:	d908      	bls.n	b631a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b6308:	4642      	mov	r2, r8
   b630a:	464b      	mov	r3, r9
   b630c:	f7fe f96e 	bl	b45ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b6310:	f10b 0b01 	add.w	fp, fp, #1
   b6314:	e7f4      	b.n	b6300 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b6316:	4682      	mov	sl, r0
   b6318:	e7ea      	b.n	b62f0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b631a:	4622      	mov	r2, r4
   b631c:	462b      	mov	r3, r5
   b631e:	f7fd fe85 	bl	b402c <__adddf3>
   b6322:	460d      	mov	r5, r1
   b6324:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b6326:	f7fe fb0f 	bl	b4948 <__aeabi_d2uiz>
   b632a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b632c:	f7fd ffba 	bl	b42a4 <__aeabi_ui2d>
   b6330:	4602      	mov	r2, r0
   b6332:	460b      	mov	r3, r1
   b6334:	4620      	mov	r0, r4
   b6336:	4629      	mov	r1, r5
   b6338:	f7fd fe76 	bl	b4028 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b633c:	220a      	movs	r2, #10
   b633e:	4604      	mov	r4, r0
   b6340:	460d      	mov	r5, r1
   b6342:	4630      	mov	r0, r6
   b6344:	4641      	mov	r1, r8
   b6346:	f7ff ff66 	bl	b6216 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b634a:	4482      	add	sl, r0
  if (digits > 0) {
   b634c:	2f00      	cmp	r7, #0
   b634e:	d095      	beq.n	b627c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b6350:	4922      	ldr	r1, [pc, #136]	; (b63dc <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b6352:	f8df 908c 	ldr.w	r9, [pc, #140]	; b63e0 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b6356:	4630      	mov	r0, r6
   b6358:	f7ff ff32 	bl	b61c0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b635c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b6360:	4482      	add	sl, r0
  while (digits-- > 0)
   b6362:	2f00      	cmp	r7, #0
   b6364:	d08a      	beq.n	b627c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b6366:	4642      	mov	r2, r8
   b6368:	464b      	mov	r3, r9
   b636a:	4620      	mov	r0, r4
   b636c:	4629      	mov	r1, r5
   b636e:	f7fe f813 	bl	b4398 <__aeabi_dmul>
   b6372:	4604      	mov	r4, r0
   b6374:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b6376:	f7fe fabf 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b637a:	f1b0 0b00 	subs.w	fp, r0, #0
   b637e:	da1c      	bge.n	b63ba <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b6380:	212d      	movs	r1, #45	; 0x2d
   b6382:	4630      	mov	r0, r6
   b6384:	f7ff ff2e 	bl	b61e4 <_ZN5Print5printEc>
            val = -n;
   b6388:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b638c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b638e:	220a      	movs	r2, #10
   b6390:	4630      	mov	r0, r6
   b6392:	9301      	str	r3, [sp, #4]
   b6394:	f7ff ff3f 	bl	b6216 <_ZN5Print11printNumberEmh>
   b6398:	9b01      	ldr	r3, [sp, #4]
   b639a:	4418      	add	r0, r3
    n += print(toPrint);
   b639c:	4482      	add	sl, r0
    remainder -= toPrint;
   b639e:	4658      	mov	r0, fp
   b63a0:	f7fd ff90 	bl	b42c4 <__aeabi_i2d>
   b63a4:	4602      	mov	r2, r0
   b63a6:	460b      	mov	r3, r1
   b63a8:	4620      	mov	r0, r4
   b63aa:	4629      	mov	r1, r5
   b63ac:	f7fd fe3c 	bl	b4028 <__aeabi_dsub>
   b63b0:	3f01      	subs	r7, #1
   b63b2:	4604      	mov	r4, r0
   b63b4:	460d      	mov	r5, r1
   b63b6:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b63b8:	e7d3      	b.n	b6362 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b63ba:	4659      	mov	r1, fp
        size_t t = 0;
   b63bc:	2300      	movs	r3, #0
   b63be:	e7e6      	b.n	b638e <_ZN5Print10printFloatEdh+0x13a>
   b63c0:	000b77cc 	.word	0x000b77cc
   b63c4:	7fefffff 	.word	0x7fefffff
   b63c8:	000b77d0 	.word	0x000b77d0
   b63cc:	41efffff 	.word	0x41efffff
   b63d0:	000b77d4 	.word	0x000b77d4
   b63d4:	c1efffff 	.word	0xc1efffff
   b63d8:	3fe00000 	.word	0x3fe00000
   b63dc:	000b77d8 	.word	0x000b77d8
   b63e0:	40240000 	.word	0x40240000

000b63e4 <_ZN5Print5printEfi>:
{
   b63e4:	b538      	push	{r3, r4, r5, lr}
   b63e6:	4604      	mov	r4, r0
   b63e8:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b63ec:	b2cd      	uxtb	r5, r1
   b63ee:	f7fd ff7b 	bl	b42e8 <__aeabi_f2d>
   b63f2:	ec41 0b10 	vmov	d0, r0, r1
   b63f6:	4629      	mov	r1, r5
   b63f8:	4620      	mov	r0, r4
}
   b63fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b63fe:	f7ff bf29 	b.w	b6254 <_ZN5Print10printFloatEdh>
	...

000b6404 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6404:	4b01      	ldr	r3, [pc, #4]	; (b640c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6406:	4a02      	ldr	r2, [pc, #8]	; (b6410 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6408:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b640a:	4770      	bx	lr
   b640c:	2003e6e4 	.word	0x2003e6e4
   b6410:	000b77da 	.word	0x000b77da

000b6414 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6414:	4b02      	ldr	r3, [pc, #8]	; (b6420 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6416:	681a      	ldr	r2, [r3, #0]
   b6418:	4b02      	ldr	r3, [pc, #8]	; (b6424 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b641a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b641c:	4770      	bx	lr
   b641e:	bf00      	nop
   b6420:	2003de14 	.word	0x2003de14
   b6424:	2003e6e8 	.word	0x2003e6e8

000b6428 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6428:	2100      	movs	r1, #0
   b642a:	f7ff bcef 	b.w	b5e0c <system_delay_ms>
	...

000b6430 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6430:	4b01      	ldr	r3, [pc, #4]	; (b6438 <_GLOBAL__sub_I_RGB+0x8>)
   b6432:	2200      	movs	r2, #0
   b6434:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6436:	4770      	bx	lr
   b6438:	2003e6ec 	.word	0x2003e6ec

000b643c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b643c:	4b01      	ldr	r3, [pc, #4]	; (b6444 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b643e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6440:	4770      	bx	lr
   b6442:	bf00      	nop
   b6444:	2003de1c 	.word	0x2003de1c

000b6448 <serialEventRun>:
{
   b6448:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b644a:	4b0b      	ldr	r3, [pc, #44]	; (b6478 <serialEventRun+0x30>)
   b644c:	b143      	cbz	r3, b6460 <serialEventRun+0x18>
   b644e:	f000 f963 	bl	b6718 <_Z16_fetch_usbserialv>
   b6452:	6803      	ldr	r3, [r0, #0]
   b6454:	691b      	ldr	r3, [r3, #16]
   b6456:	4798      	blx	r3
   b6458:	2800      	cmp	r0, #0
   b645a:	dd01      	ble.n	b6460 <serialEventRun+0x18>
        serialEvent();
   b645c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6460:	4b06      	ldr	r3, [pc, #24]	; (b647c <serialEventRun+0x34>)
   b6462:	b143      	cbz	r3, b6476 <serialEventRun+0x2e>
   b6464:	f000 fc2c 	bl	b6cc0 <_Z22__fetch_global_Serial1v>
   b6468:	6803      	ldr	r3, [r0, #0]
   b646a:	691b      	ldr	r3, [r3, #16]
   b646c:	4798      	blx	r3
   b646e:	2800      	cmp	r0, #0
   b6470:	dd01      	ble.n	b6476 <serialEventRun+0x2e>
        serialEvent1();
   b6472:	f3af 8000 	nop.w
}
   b6476:	bd08      	pop	{r3, pc}
	...

000b6480 <_post_loop>:
{
   b6480:	b508      	push	{r3, lr}
	serialEventRun();
   b6482:	f7ff ffe1 	bl	b6448 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6486:	f7ff fb89 	bl	b5b9c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b648a:	4b01      	ldr	r3, [pc, #4]	; (b6490 <_post_loop+0x10>)
   b648c:	6018      	str	r0, [r3, #0]
}
   b648e:	bd08      	pop	{r3, pc}
   b6490:	2003e744 	.word	0x2003e744

000b6494 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6494:	4805      	ldr	r0, [pc, #20]	; (b64ac <_Z33system_initialize_user_backup_ramv+0x18>)
   b6496:	4a06      	ldr	r2, [pc, #24]	; (b64b0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6498:	4906      	ldr	r1, [pc, #24]	; (b64b4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b649a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b649c:	1a12      	subs	r2, r2, r0
   b649e:	f000 fde3 	bl	b7068 <memcpy>
    __backup_sram_signature = signature;
   b64a2:	4b05      	ldr	r3, [pc, #20]	; (b64b8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b64a4:	4a05      	ldr	r2, [pc, #20]	; (b64bc <_Z33system_initialize_user_backup_ramv+0x28>)
   b64a6:	601a      	str	r2, [r3, #0]
}
   b64a8:	bd08      	pop	{r3, pc}
   b64aa:	bf00      	nop
   b64ac:	2003f400 	.word	0x2003f400
   b64b0:	2003f404 	.word	0x2003f404
   b64b4:	000b7e78 	.word	0x000b7e78
   b64b8:	2003f400 	.word	0x2003f400
   b64bc:	9a271c1e 	.word	0x9a271c1e

000b64c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b64c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b64c2:	2300      	movs	r3, #0
   b64c4:	9300      	str	r3, [sp, #0]
   b64c6:	461a      	mov	r2, r3
   b64c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b64cc:	f7ff fcb0 	bl	b5e30 <system_ctrl_set_result>
}
   b64d0:	b003      	add	sp, #12
   b64d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b64d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b64d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b64da:	8843      	ldrh	r3, [r0, #2]
   b64dc:	2b0a      	cmp	r3, #10
   b64de:	d008      	beq.n	b64f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b64e0:	2b50      	cmp	r3, #80	; 0x50
   b64e2:	d10b      	bne.n	b64fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b64e4:	4b09      	ldr	r3, [pc, #36]	; (b650c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b64e6:	681b      	ldr	r3, [r3, #0]
   b64e8:	b14b      	cbz	r3, b64fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b64ea:	b003      	add	sp, #12
   b64ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b64f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b64f2:	f7ff ffe5 	bl	b64c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b64f6:	b003      	add	sp, #12
   b64f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b64fc:	2300      	movs	r3, #0
   b64fe:	9300      	str	r3, [sp, #0]
   b6500:	461a      	mov	r2, r3
   b6502:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6506:	f7ff fc93 	bl	b5e30 <system_ctrl_set_result>
}
   b650a:	e7f4      	b.n	b64f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b650c:	2003e700 	.word	0x2003e700

000b6510 <module_user_init_hook>:
{
   b6510:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6512:	4812      	ldr	r0, [pc, #72]	; (b655c <module_user_init_hook+0x4c>)
   b6514:	2100      	movs	r1, #0
   b6516:	f7ff fd1d 	bl	b5f54 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b651a:	4b11      	ldr	r3, [pc, #68]	; (b6560 <module_user_init_hook+0x50>)
   b651c:	681a      	ldr	r2, [r3, #0]
   b651e:	4b11      	ldr	r3, [pc, #68]	; (b6564 <module_user_init_hook+0x54>)
   b6520:	429a      	cmp	r2, r3
   b6522:	4b11      	ldr	r3, [pc, #68]	; (b6568 <module_user_init_hook+0x58>)
   b6524:	bf0c      	ite	eq
   b6526:	2201      	moveq	r2, #1
   b6528:	2200      	movne	r2, #0
   b652a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b652c:	d001      	beq.n	b6532 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b652e:	f7ff ffb1 	bl	b6494 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6532:	f7ff fb23 	bl	b5b7c <HAL_RNG_GetRandomNumber>
   b6536:	4604      	mov	r4, r0
    srand(seed);
   b6538:	f000 fdac 	bl	b7094 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b653c:	4b0b      	ldr	r3, [pc, #44]	; (b656c <module_user_init_hook+0x5c>)
   b653e:	b113      	cbz	r3, b6546 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6540:	4620      	mov	r0, r4
   b6542:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6546:	2100      	movs	r1, #0
   b6548:	4808      	ldr	r0, [pc, #32]	; (b656c <module_user_init_hook+0x5c>)
   b654a:	f7ff fcdb 	bl	b5f04 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b654e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6552:	4807      	ldr	r0, [pc, #28]	; (b6570 <module_user_init_hook+0x60>)
   b6554:	2100      	movs	r1, #0
   b6556:	f7ff bc61 	b.w	b5e1c <system_ctrl_set_app_request_handler>
   b655a:	bf00      	nop
   b655c:	000b643d 	.word	0x000b643d
   b6560:	2003f400 	.word	0x2003f400
   b6564:	9a271c1e 	.word	0x9a271c1e
   b6568:	2003e6fc 	.word	0x2003e6fc
   b656c:	00000000 	.word	0x00000000
   b6570:	000b64d9 	.word	0x000b64d9

000b6574 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6574:	4770      	bx	lr

000b6576 <_ZN9IPAddressD0Ev>:
   b6576:	b510      	push	{r4, lr}
   b6578:	2118      	movs	r1, #24
   b657a:	4604      	mov	r4, r0
   b657c:	f7fe fba7 	bl	b4cce <_ZdlPvj>
   b6580:	4620      	mov	r0, r4
   b6582:	bd10      	pop	{r4, pc}

000b6584 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6584:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6586:	7d03      	ldrb	r3, [r0, #20]
   b6588:	2b06      	cmp	r3, #6
{
   b658a:	b08d      	sub	sp, #52	; 0x34
   b658c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b658e:	f100 0704 	add.w	r7, r0, #4
   b6592:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6596:	d012      	beq.n	b65be <_ZNK9IPAddress7printToER5Print+0x3a>
   b6598:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b659c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b65a0:	220a      	movs	r2, #10
   b65a2:	4630      	mov	r0, r6
   b65a4:	f7ff fe37 	bl	b6216 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b65a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b65aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b65ac:	d019      	beq.n	b65e2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b65ae:	2c00      	cmp	r4, #0
   b65b0:	d0f4      	beq.n	b659c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b65b2:	212e      	movs	r1, #46	; 0x2e
   b65b4:	4630      	mov	r0, r6
   b65b6:	f7ff fe15 	bl	b61e4 <_ZN5Print5printEc>
   b65ba:	4404      	add	r4, r0
   b65bc:	e7ee      	b.n	b659c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b65be:	232f      	movs	r3, #47	; 0x2f
   b65c0:	466a      	mov	r2, sp
   b65c2:	4639      	mov	r1, r7
   b65c4:	200a      	movs	r0, #10
		buf[0] = 0;
   b65c6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b65ca:	f7ff faf7 	bl	b5bbc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b65ce:	4668      	mov	r0, sp
   b65d0:	f7fe fb38 	bl	b4c44 <strlen>
   b65d4:	6833      	ldr	r3, [r6, #0]
   b65d6:	4602      	mov	r2, r0
   b65d8:	68db      	ldr	r3, [r3, #12]
   b65da:	4669      	mov	r1, sp
   b65dc:	4630      	mov	r0, r6
   b65de:	4798      	blx	r3
   b65e0:	4604      	mov	r4, r0
    }
    return n;
}
   b65e2:	4620      	mov	r0, r4
   b65e4:	b00d      	add	sp, #52	; 0x34
   b65e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b65e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b65e8:	b510      	push	{r4, lr}
   b65ea:	4b05      	ldr	r3, [pc, #20]	; (b6600 <_ZN9IPAddressC1Ev+0x18>)
   b65ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b65ee:	2211      	movs	r2, #17
   b65f0:	f840 3b04 	str.w	r3, [r0], #4
   b65f4:	2100      	movs	r1, #0
   b65f6:	f000 fd45 	bl	b7084 <memset>
}
   b65fa:	4620      	mov	r0, r4
   b65fc:	bd10      	pop	{r4, pc}
   b65fe:	bf00      	nop
   b6600:	000b7804 	.word	0x000b7804

000b6604 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6604:	4603      	mov	r3, r0
   b6606:	4a07      	ldr	r2, [pc, #28]	; (b6624 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6608:	b510      	push	{r4, lr}
   b660a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b660e:	f101 0210 	add.w	r2, r1, #16
   b6612:	f851 4b04 	ldr.w	r4, [r1], #4
   b6616:	f843 4b04 	str.w	r4, [r3], #4
   b661a:	4291      	cmp	r1, r2
   b661c:	d1f9      	bne.n	b6612 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b661e:	780a      	ldrb	r2, [r1, #0]
   b6620:	701a      	strb	r2, [r3, #0]
}
   b6622:	bd10      	pop	{r4, pc}
   b6624:	000b7804 	.word	0x000b7804

000b6628 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6628:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b662a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b662e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6632:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6636:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b663a:	2304      	movs	r3, #4
   b663c:	6041      	str	r1, [r0, #4]
   b663e:	7503      	strb	r3, [r0, #20]
}
   b6640:	bd10      	pop	{r4, pc}
	...

000b6644 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6644:	b507      	push	{r0, r1, r2, lr}
   b6646:	4b06      	ldr	r3, [pc, #24]	; (b6660 <_ZN9IPAddressC1EPKh+0x1c>)
   b6648:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b664a:	78cb      	ldrb	r3, [r1, #3]
   b664c:	9300      	str	r3, [sp, #0]
   b664e:	788b      	ldrb	r3, [r1, #2]
   b6650:	784a      	ldrb	r2, [r1, #1]
   b6652:	7809      	ldrb	r1, [r1, #0]
   b6654:	f7ff ffe8 	bl	b6628 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6658:	b003      	add	sp, #12
   b665a:	f85d fb04 	ldr.w	pc, [sp], #4
   b665e:	bf00      	nop
   b6660:	000b7804 	.word	0x000b7804

000b6664 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6664:	7441      	strb	r1, [r0, #17]
}
   b6666:	4770      	bx	lr

000b6668 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6668:	4770      	bx	lr

000b666a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b666a:	4770      	bx	lr

000b666c <_ZN9USBSerial4readEv>:
{
   b666c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b666e:	2100      	movs	r1, #0
   b6670:	7c00      	ldrb	r0, [r0, #16]
   b6672:	f7ff fba3 	bl	b5dbc <HAL_USB_USART_Receive_Data>
}
   b6676:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b667a:	bd08      	pop	{r3, pc}

000b667c <_ZN9USBSerial4peekEv>:
{
   b667c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b667e:	2101      	movs	r1, #1
   b6680:	7c00      	ldrb	r0, [r0, #16]
   b6682:	f7ff fb9b 	bl	b5dbc <HAL_USB_USART_Receive_Data>
}
   b6686:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b668a:	bd08      	pop	{r3, pc}

000b668c <_ZN9USBSerial17availableForWriteEv>:
{
   b668c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b668e:	7c00      	ldrb	r0, [r0, #16]
   b6690:	f7ff fb8c 	bl	b5dac <HAL_USB_USART_Available_Data_For_Write>
}
   b6694:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6698:	bd08      	pop	{r3, pc}

000b669a <_ZN9USBSerial9availableEv>:
{
   b669a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b669c:	7c00      	ldrb	r0, [r0, #16]
   b669e:	f7ff fb7d 	bl	b5d9c <HAL_USB_USART_Available_Data>
}
   b66a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b66a6:	bd08      	pop	{r3, pc}

000b66a8 <_ZN9USBSerial5writeEh>:
{
   b66a8:	b513      	push	{r0, r1, r4, lr}
   b66aa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b66ac:	7c00      	ldrb	r0, [r0, #16]
{
   b66ae:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b66b0:	f7ff fb7c 	bl	b5dac <HAL_USB_USART_Available_Data_For_Write>
   b66b4:	2800      	cmp	r0, #0
   b66b6:	9901      	ldr	r1, [sp, #4]
   b66b8:	dc01      	bgt.n	b66be <_ZN9USBSerial5writeEh+0x16>
   b66ba:	7c60      	ldrb	r0, [r4, #17]
   b66bc:	b120      	cbz	r0, b66c8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b66be:	7c20      	ldrb	r0, [r4, #16]
   b66c0:	f7ff fb84 	bl	b5dcc <HAL_USB_USART_Send_Data>
   b66c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b66c8:	b002      	add	sp, #8
   b66ca:	bd10      	pop	{r4, pc}

000b66cc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b66cc:	7c00      	ldrb	r0, [r0, #16]
   b66ce:	f7ff bb85 	b.w	b5ddc <HAL_USB_USART_Flush_Data>

000b66d2 <_ZN9USBSerialD0Ev>:
   b66d2:	b510      	push	{r4, lr}
   b66d4:	2114      	movs	r1, #20
   b66d6:	4604      	mov	r4, r0
   b66d8:	f7fe faf9 	bl	b4cce <_ZdlPvj>
   b66dc:	4620      	mov	r0, r4
   b66de:	bd10      	pop	{r4, pc}

000b66e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b66e0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b66e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b66e6:	4604      	mov	r4, r0
   b66e8:	4608      	mov	r0, r1
   b66ea:	2100      	movs	r1, #0
   b66ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b66f0:	4b04      	ldr	r3, [pc, #16]	; (b6704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b66f2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b66f4:	2301      	movs	r3, #1
  _serial = serial;
   b66f6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b66f8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b66fa:	4611      	mov	r1, r2
   b66fc:	f7ff fb46 	bl	b5d8c <HAL_USB_USART_Init>
}
   b6700:	4620      	mov	r0, r4
   b6702:	bd10      	pop	{r4, pc}
   b6704:	000b7818 	.word	0x000b7818

000b6708 <_Z19acquireSerialBufferv>:
{
   b6708:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b670a:	2214      	movs	r2, #20
{
   b670c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b670e:	2100      	movs	r1, #0
   b6710:	f000 fcb8 	bl	b7084 <memset>
}
   b6714:	4620      	mov	r0, r4
   b6716:	bd10      	pop	{r4, pc}

000b6718 <_Z16_fetch_usbserialv>:
{
   b6718:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b671a:	4c0f      	ldr	r4, [pc, #60]	; (b6758 <_Z16_fetch_usbserialv+0x40>)
{
   b671c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b671e:	a803      	add	r0, sp, #12
   b6720:	f7ff fff2 	bl	b6708 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6724:	7821      	ldrb	r1, [r4, #0]
   b6726:	f3bf 8f5b 	dmb	ish
   b672a:	f011 0101 	ands.w	r1, r1, #1
   b672e:	d10f      	bne.n	b6750 <_Z16_fetch_usbserialv+0x38>
   b6730:	4620      	mov	r0, r4
   b6732:	9101      	str	r1, [sp, #4]
   b6734:	f7fe fada 	bl	b4cec <__cxa_guard_acquire>
   b6738:	9901      	ldr	r1, [sp, #4]
   b673a:	b148      	cbz	r0, b6750 <_Z16_fetch_usbserialv+0x38>
   b673c:	aa03      	add	r2, sp, #12
   b673e:	4807      	ldr	r0, [pc, #28]	; (b675c <_Z16_fetch_usbserialv+0x44>)
   b6740:	f7ff ffce 	bl	b66e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6744:	4620      	mov	r0, r4
   b6746:	f7fe fad6 	bl	b4cf6 <__cxa_guard_release>
   b674a:	4805      	ldr	r0, [pc, #20]	; (b6760 <_Z16_fetch_usbserialv+0x48>)
   b674c:	f000 fc86 	bl	b705c <atexit>
	return _usbserial;
}
   b6750:	4802      	ldr	r0, [pc, #8]	; (b675c <_Z16_fetch_usbserialv+0x44>)
   b6752:	b008      	add	sp, #32
   b6754:	bd10      	pop	{r4, pc}
   b6756:	bf00      	nop
   b6758:	2003e704 	.word	0x2003e704
   b675c:	2003e708 	.word	0x2003e708
   b6760:	000b6669 	.word	0x000b6669

000b6764 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b6764:	4700      	bx	r0
	...

000b6768 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b6768:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b676c:	2400      	movs	r4, #0
{
   b676e:	461d      	mov	r5, r3
   b6770:	460f      	mov	r7, r1
   b6772:	4690      	mov	r8, r2
   b6774:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b6776:	f7ff f9e1 	bl	b5b3c <hal_interrupt_detach>
  if (priority >= 0) {
   b677a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b677c:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b6780:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6784:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b6788:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b678c:	bfa2      	ittt	ge
   b678e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b6792:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b6796:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6798:	4907      	ldr	r1, [pc, #28]	; (b67b8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b679a:	9400      	str	r4, [sp, #0]
   b679c:	4643      	mov	r3, r8
   b679e:	463a      	mov	r2, r7
   b67a0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b67a2:	bfa8      	it	ge
   b67a4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b67a8:	f7ff f9c0 	bl	b5b2c <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b67ac:	fab0 f080 	clz	r0, r0
   b67b0:	0940      	lsrs	r0, r0, #5
   b67b2:	b004      	add	sp, #16
   b67b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b67b8:	000b6765 	.word	0x000b6765

000b67bc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b67bc:	4770      	bx	lr

000b67be <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b67be:	7441      	strb	r1, [r0, #17]
}
   b67c0:	4770      	bx	lr

000b67c2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b67c2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b67c4:	7c00      	ldrb	r0, [r0, #16]
   b67c6:	f7ff fa31 	bl	b5c2c <hal_usart_available_data_for_write>
}
   b67ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b67ce:	bd08      	pop	{r3, pc}

000b67d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b67d0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b67d2:	7c00      	ldrb	r0, [r0, #16]
   b67d4:	f7ff fa02 	bl	b5bdc <hal_usart_available>
}
   b67d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b67dc:	bd08      	pop	{r3, pc}

000b67de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b67de:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b67e0:	7c00      	ldrb	r0, [r0, #16]
   b67e2:	f7ff fa0b 	bl	b5bfc <hal_usart_peek>
}
   b67e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b67ea:	bd08      	pop	{r3, pc}

000b67ec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b67ec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b67ee:	7c00      	ldrb	r0, [r0, #16]
   b67f0:	f7ff f9fc 	bl	b5bec <hal_usart_read>
}
   b67f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b67f8:	bd08      	pop	{r3, pc}

000b67fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b67fa:	7c00      	ldrb	r0, [r0, #16]
   b67fc:	f7ff ba06 	b.w	b5c0c <hal_usart_flush>

000b6800 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6800:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6802:	7c45      	ldrb	r5, [r0, #17]
{
   b6804:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6806:	b12d      	cbz	r5, b6814 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6808:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b680a:	b003      	add	sp, #12
   b680c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6810:	f7ff b9dc 	b.w	b5bcc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6814:	7c00      	ldrb	r0, [r0, #16]
   b6816:	9101      	str	r1, [sp, #4]
   b6818:	f7ff fa08 	bl	b5c2c <hal_usart_available_data_for_write>
   b681c:	2800      	cmp	r0, #0
   b681e:	9901      	ldr	r1, [sp, #4]
   b6820:	dcf2      	bgt.n	b6808 <_ZN11USARTSerial5writeEh+0x8>
}
   b6822:	4628      	mov	r0, r5
   b6824:	b003      	add	sp, #12
   b6826:	bd30      	pop	{r4, r5, pc}

000b6828 <_ZN11USARTSerialD0Ev>:
   b6828:	b510      	push	{r4, lr}
   b682a:	2114      	movs	r1, #20
   b682c:	4604      	mov	r4, r0
   b682e:	f7fe fa4e 	bl	b4cce <_ZdlPvj>
   b6832:	4620      	mov	r0, r4
   b6834:	bd10      	pop	{r4, pc}
	...

000b6838 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6838:	b510      	push	{r4, lr}
   b683a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b683e:	4604      	mov	r4, r0
   b6840:	4608      	mov	r0, r1
   b6842:	4611      	mov	r1, r2
   b6844:	2200      	movs	r2, #0
   b6846:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b684a:	4b04      	ldr	r3, [pc, #16]	; (b685c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b684c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b684e:	2301      	movs	r3, #1
  _serial = serial;
   b6850:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6852:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6854:	f7ff f9f2 	bl	b5c3c <hal_usart_init_ex>
}
   b6858:	4620      	mov	r0, r4
   b685a:	bd10      	pop	{r4, pc}
   b685c:	000b7848 	.word	0x000b7848

000b6860 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6860:	4770      	bx	lr

000b6862 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6864:	4606      	mov	r6, r0
   b6866:	4615      	mov	r5, r2
   b6868:	460c      	mov	r4, r1
   b686a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b686c:	42bc      	cmp	r4, r7
   b686e:	d006      	beq.n	b687e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6870:	6833      	ldr	r3, [r6, #0]
   b6872:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6876:	689b      	ldr	r3, [r3, #8]
   b6878:	4630      	mov	r0, r6
   b687a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b687c:	e7f6      	b.n	b686c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b687e:	4628      	mov	r0, r5
   b6880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6882 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6882:	7c00      	ldrb	r0, [r0, #16]
   b6884:	2200      	movs	r2, #0
   b6886:	f7ff b9f9 	b.w	b5c7c <hal_i2c_write>

000b688a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b688a:	7c00      	ldrb	r0, [r0, #16]
   b688c:	2100      	movs	r1, #0
   b688e:	f7ff b9fd 	b.w	b5c8c <hal_i2c_available>

000b6892 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6892:	7c00      	ldrb	r0, [r0, #16]
   b6894:	2100      	movs	r1, #0
   b6896:	f7ff ba01 	b.w	b5c9c <hal_i2c_read>

000b689a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b689a:	7c00      	ldrb	r0, [r0, #16]
   b689c:	2100      	movs	r1, #0
   b689e:	f7ff ba05 	b.w	b5cac <hal_i2c_peek>

000b68a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b68a2:	7c00      	ldrb	r0, [r0, #16]
   b68a4:	2100      	movs	r1, #0
   b68a6:	f7ff ba09 	b.w	b5cbc <hal_i2c_flush>

000b68aa <_ZN7TwoWireD0Ev>:
   b68aa:	b510      	push	{r4, lr}
   b68ac:	2114      	movs	r1, #20
   b68ae:	4604      	mov	r4, r0
   b68b0:	f7fe fa0d 	bl	b4cce <_ZdlPvj>
   b68b4:	4620      	mov	r0, r4
   b68b6:	bd10      	pop	{r4, pc}

000b68b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b68b8:	b538      	push	{r3, r4, r5, lr}
   b68ba:	4604      	mov	r4, r0
   b68bc:	4615      	mov	r5, r2
   b68be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b68c2:	2200      	movs	r2, #0
   b68c4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b68c8:	4b09      	ldr	r3, [pc, #36]	; (b68f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b68ca:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b68cc:	4608      	mov	r0, r1
   b68ce:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b68d0:	4629      	mov	r1, r5
   b68d2:	f7ff fa03 	bl	b5cdc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b68d6:	30bf      	adds	r0, #191	; 0xbf
   b68d8:	d108      	bne.n	b68ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b68da:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b68dc:	07db      	lsls	r3, r3, #31
   b68de:	d505      	bpl.n	b68ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b68e0:	6868      	ldr	r0, [r5, #4]
   b68e2:	f7ff fb1f 	bl	b5f24 <free>
    free(conf.tx_buffer);
   b68e6:	68e8      	ldr	r0, [r5, #12]
   b68e8:	f7ff fb1c 	bl	b5f24 <free>
}
   b68ec:	4620      	mov	r0, r4
   b68ee:	bd38      	pop	{r3, r4, r5, pc}
   b68f0:	000b7878 	.word	0x000b7878

000b68f4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b68f4:	2300      	movs	r3, #0
   b68f6:	7c00      	ldrb	r0, [r0, #16]
   b68f8:	461a      	mov	r2, r3
   b68fa:	4619      	mov	r1, r3
   b68fc:	f7ff b9a6 	b.w	b5c4c <hal_i2c_begin>

000b6900 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6900:	7c00      	ldrb	r0, [r0, #16]
   b6902:	2200      	movs	r2, #0
   b6904:	f7ff b9aa 	b.w	b5c5c <hal_i2c_begin_transmission>

000b6908 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6908:	b2c9      	uxtb	r1, r1
   b690a:	f7ff bff9 	b.w	b6900 <_ZN7TwoWire17beginTransmissionEh>

000b690e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b690e:	7c00      	ldrb	r0, [r0, #16]
   b6910:	2200      	movs	r2, #0
   b6912:	f7ff b9ab 	b.w	b5c6c <hal_i2c_end_transmission>

000b6916 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6916:	2101      	movs	r1, #1
   b6918:	f7ff bff9 	b.w	b690e <_ZN7TwoWire15endTransmissionEh>

000b691c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b691c:	2200      	movs	r2, #0
   b691e:	6840      	ldr	r0, [r0, #4]
   b6920:	4611      	mov	r1, r2
   b6922:	f7ff baa7 	b.w	b5e74 <network_ready>

000b6926 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6926:	2200      	movs	r2, #0
   b6928:	6840      	ldr	r0, [r0, #4]
   b692a:	4611      	mov	r1, r2
   b692c:	f7ff bac2 	b.w	b5eb4 <network_listening>

000b6930 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6930:	2200      	movs	r2, #0
   b6932:	6840      	ldr	r0, [r0, #4]
   b6934:	4611      	mov	r1, r2
   b6936:	f7ff bacd 	b.w	b5ed4 <network_get_listen_timeout>

000b693a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b693a:	6840      	ldr	r0, [r0, #4]
   b693c:	2200      	movs	r2, #0
   b693e:	f7ff bac1 	b.w	b5ec4 <network_set_listen_timeout>

000b6942 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6942:	6840      	ldr	r0, [r0, #4]
   b6944:	2200      	movs	r2, #0
   b6946:	f081 0101 	eor.w	r1, r1, #1
   b694a:	f7ff baab 	b.w	b5ea4 <network_listen>

000b694e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b694e:	2300      	movs	r3, #0
   b6950:	6840      	ldr	r0, [r0, #4]
   b6952:	461a      	mov	r2, r3
   b6954:	4619      	mov	r1, r3
   b6956:	f7ff ba9d 	b.w	b5e94 <network_off>

000b695a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b695a:	2300      	movs	r3, #0
   b695c:	6840      	ldr	r0, [r0, #4]
   b695e:	461a      	mov	r2, r3
   b6960:	4619      	mov	r1, r3
   b6962:	f7ff ba8f 	b.w	b5e84 <network_on>

000b6966 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6966:	2200      	movs	r2, #0
   b6968:	6840      	ldr	r0, [r0, #4]
   b696a:	4611      	mov	r1, r2
   b696c:	f7ff ba72 	b.w	b5e54 <network_connecting>

000b6970 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6970:	6840      	ldr	r0, [r0, #4]
   b6972:	2200      	movs	r2, #0
   b6974:	2102      	movs	r1, #2
   b6976:	f7ff ba75 	b.w	b5e64 <network_disconnect>

000b697a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b697a:	2300      	movs	r3, #0
   b697c:	6840      	ldr	r0, [r0, #4]
   b697e:	461a      	mov	r2, r3
   b6980:	f7ff ba60 	b.w	b5e44 <network_connect>

000b6984 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6984:	4b02      	ldr	r3, [pc, #8]	; (b6990 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6986:	2204      	movs	r2, #4
   b6988:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b698a:	4a02      	ldr	r2, [pc, #8]	; (b6994 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b698c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b698e:	4770      	bx	lr
   b6990:	2003e71c 	.word	0x2003e71c
   b6994:	000b78a0 	.word	0x000b78a0

000b6998 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6998:	2300      	movs	r3, #0
   b699a:	6840      	ldr	r0, [r0, #4]
   b699c:	461a      	mov	r2, r3
   b699e:	f7ff ba51 	b.w	b5e44 <network_connect>

000b69a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b69a2:	6840      	ldr	r0, [r0, #4]
   b69a4:	2200      	movs	r2, #0
   b69a6:	2102      	movs	r1, #2
   b69a8:	f7ff ba5c 	b.w	b5e64 <network_disconnect>

000b69ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b69ac:	2200      	movs	r2, #0
   b69ae:	6840      	ldr	r0, [r0, #4]
   b69b0:	4611      	mov	r1, r2
   b69b2:	f7ff ba4f 	b.w	b5e54 <network_connecting>

000b69b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b69b6:	2200      	movs	r2, #0
   b69b8:	6840      	ldr	r0, [r0, #4]
   b69ba:	4611      	mov	r1, r2
   b69bc:	f7ff ba5a 	b.w	b5e74 <network_ready>

000b69c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b69c0:	2300      	movs	r3, #0
   b69c2:	6840      	ldr	r0, [r0, #4]
   b69c4:	461a      	mov	r2, r3
   b69c6:	4619      	mov	r1, r3
   b69c8:	f7ff ba5c 	b.w	b5e84 <network_on>

000b69cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b69cc:	2300      	movs	r3, #0
   b69ce:	6840      	ldr	r0, [r0, #4]
   b69d0:	461a      	mov	r2, r3
   b69d2:	4619      	mov	r1, r3
   b69d4:	f7ff ba5e 	b.w	b5e94 <network_off>

000b69d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b69d8:	6840      	ldr	r0, [r0, #4]
   b69da:	2100      	movs	r1, #0
   b69dc:	f7ff ba82 	b.w	b5ee4 <network_is_on>

000b69e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b69e0:	6840      	ldr	r0, [r0, #4]
   b69e2:	2100      	movs	r1, #0
   b69e4:	f7ff ba86 	b.w	b5ef4 <network_is_off>

000b69e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b69e8:	6840      	ldr	r0, [r0, #4]
   b69ea:	2200      	movs	r2, #0
   b69ec:	f081 0101 	eor.w	r1, r1, #1
   b69f0:	f7ff ba58 	b.w	b5ea4 <network_listen>

000b69f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b69f4:	6840      	ldr	r0, [r0, #4]
   b69f6:	2200      	movs	r2, #0
   b69f8:	f7ff ba64 	b.w	b5ec4 <network_set_listen_timeout>

000b69fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b69fc:	2200      	movs	r2, #0
   b69fe:	6840      	ldr	r0, [r0, #4]
   b6a00:	4611      	mov	r1, r2
   b6a02:	f7ff ba67 	b.w	b5ed4 <network_get_listen_timeout>

000b6a06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6a06:	2200      	movs	r2, #0
   b6a08:	6840      	ldr	r0, [r0, #4]
   b6a0a:	4611      	mov	r1, r2
   b6a0c:	f7ff ba52 	b.w	b5eb4 <network_listening>

000b6a10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a14:	b095      	sub	sp, #84	; 0x54
   b6a16:	4614      	mov	r4, r2
   b6a18:	460d      	mov	r5, r1
   b6a1a:	4607      	mov	r7, r0
    IPAddress addr;
   b6a1c:	f7ff fde4 	bl	b65e8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6a20:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6a22:	221c      	movs	r2, #28
   b6a24:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6a26:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6a28:	f000 fb2c 	bl	b7084 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6a2c:	2340      	movs	r3, #64	; 0x40
   b6a2e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6a30:	4620      	mov	r0, r4
   b6a32:	466b      	mov	r3, sp
   b6a34:	aa0c      	add	r2, sp, #48	; 0x30
   b6a36:	2100      	movs	r1, #0
   b6a38:	f7ff f848 	bl	b5acc <netdb_getaddrinfo>
    if (!r) {
   b6a3c:	4604      	mov	r4, r0
   b6a3e:	2800      	cmp	r0, #0
   b6a40:	d14b      	bne.n	b6ada <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6a42:	4602      	mov	r2, r0
   b6a44:	2101      	movs	r1, #1
   b6a46:	6868      	ldr	r0, [r5, #4]
   b6a48:	f7ff fa14 	bl	b5e74 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a4c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6a4e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a50:	4622      	mov	r2, r4
   b6a52:	6868      	ldr	r0, [r5, #4]
   b6a54:	f7ff fa0e 	bl	b5e74 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6a58:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a5a:	4681      	mov	r9, r0
        bool ok = false;
   b6a5c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6a5e:	2e00      	cmp	r6, #0
   b6a60:	d03b      	beq.n	b6ada <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6a62:	2900      	cmp	r1, #0
   b6a64:	d139      	bne.n	b6ada <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6a66:	6873      	ldr	r3, [r6, #4]
   b6a68:	2b02      	cmp	r3, #2
   b6a6a:	d003      	beq.n	b6a74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6a6c:	2b0a      	cmp	r3, #10
   b6a6e:	d011      	beq.n	b6a94 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6a70:	69f6      	ldr	r6, [r6, #28]
   b6a72:	e7f4      	b.n	b6a5e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6a74:	f1b8 0f00 	cmp.w	r8, #0
   b6a78:	d0fa      	beq.n	b6a70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6a7a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6a7c:	a806      	add	r0, sp, #24
   b6a7e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6a80:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6a82:	f7ff fddf 	bl	b6644 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6a88:	1d3c      	adds	r4, r7, #4
   b6a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a8c:	682b      	ldr	r3, [r5, #0]
   b6a8e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6a90:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6a92:	e7ed      	b.n	b6a70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6a94:	f1b9 0f00 	cmp.w	r9, #0
   b6a98:	d0ea      	beq.n	b6a70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6a9a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6a9c:	2210      	movs	r2, #16
   b6a9e:	a801      	add	r0, sp, #4
   b6aa0:	f000 faf0 	bl	b7084 <memset>
                    a.v = 6;
   b6aa4:	2306      	movs	r3, #6
   b6aa6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6aaa:	ad01      	add	r5, sp, #4
   b6aac:	f104 0308 	add.w	r3, r4, #8
   b6ab0:	3418      	adds	r4, #24
   b6ab2:	6818      	ldr	r0, [r3, #0]
   b6ab4:	6859      	ldr	r1, [r3, #4]
   b6ab6:	462a      	mov	r2, r5
   b6ab8:	c203      	stmia	r2!, {r0, r1}
   b6aba:	3308      	adds	r3, #8
   b6abc:	42a3      	cmp	r3, r4
   b6abe:	4615      	mov	r5, r2
   b6ac0:	d1f7      	bne.n	b6ab2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6ac2:	a901      	add	r1, sp, #4
   b6ac4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6ac6:	ad07      	add	r5, sp, #28
   b6ac8:	f7ff fd9c 	bl	b6604 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ace:	1d3c      	adds	r4, r7, #4
   b6ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ad2:	682b      	ldr	r3, [r5, #0]
   b6ad4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6ad6:	4649      	mov	r1, r9
   b6ad8:	e7ca      	b.n	b6a70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6ada:	9800      	ldr	r0, [sp, #0]
   b6adc:	f7fe ffee 	bl	b5abc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6ae0:	4638      	mov	r0, r7
   b6ae2:	b015      	add	sp, #84	; 0x54
   b6ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6ae8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6ae8:	4b02      	ldr	r3, [pc, #8]	; (b6af4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6aea:	4a03      	ldr	r2, [pc, #12]	; (b6af8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6aec:	601a      	str	r2, [r3, #0]
   b6aee:	2200      	movs	r2, #0
   b6af0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b6af2:	4770      	bx	lr
   b6af4:	2003e724 	.word	0x2003e724
   b6af8:	000b78dc 	.word	0x000b78dc

000b6afc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6afc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6afe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6b00:	d902      	bls.n	b6b08 <pinAvailable+0xc>
    return false;
   b6b02:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6b04:	b002      	add	sp, #8
   b6b06:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6b08:	f1a0 030b 	sub.w	r3, r0, #11
   b6b0c:	2b02      	cmp	r3, #2
   b6b0e:	d81a      	bhi.n	b6b46 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6b10:	4c17      	ldr	r4, [pc, #92]	; (b6b70 <pinAvailable+0x74>)
   b6b12:	7821      	ldrb	r1, [r4, #0]
   b6b14:	f3bf 8f5b 	dmb	ish
   b6b18:	f011 0101 	ands.w	r1, r1, #1
   b6b1c:	d10b      	bne.n	b6b36 <pinAvailable+0x3a>
   b6b1e:	4620      	mov	r0, r4
   b6b20:	9101      	str	r1, [sp, #4]
   b6b22:	f7fe f8e3 	bl	b4cec <__cxa_guard_acquire>
   b6b26:	9901      	ldr	r1, [sp, #4]
   b6b28:	b128      	cbz	r0, b6b36 <pinAvailable+0x3a>
   b6b2a:	4812      	ldr	r0, [pc, #72]	; (b6b74 <pinAvailable+0x78>)
   b6b2c:	f7ff fa5e 	bl	b5fec <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6b30:	4620      	mov	r0, r4
   b6b32:	f7fe f8e0 	bl	b4cf6 <__cxa_guard_release>
   b6b36:	4b0f      	ldr	r3, [pc, #60]	; (b6b74 <pinAvailable+0x78>)
   b6b38:	7818      	ldrb	r0, [r3, #0]
   b6b3a:	f7ff f907 	bl	b5d4c <hal_spi_is_enabled>
   b6b3e:	2800      	cmp	r0, #0
   b6b40:	d1df      	bne.n	b6b02 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6b42:	2001      	movs	r0, #1
   b6b44:	e7de      	b.n	b6b04 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6b46:	2801      	cmp	r0, #1
   b6b48:	d809      	bhi.n	b6b5e <pinAvailable+0x62>
   b6b4a:	f000 f8f9 	bl	b6d40 <_Z19__fetch_global_Wirev>
   b6b4e:	2100      	movs	r1, #0
   b6b50:	7c00      	ldrb	r0, [r0, #16]
   b6b52:	f7ff f8bb 	bl	b5ccc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6b56:	f080 0001 	eor.w	r0, r0, #1
   b6b5a:	b2c0      	uxtb	r0, r0
   b6b5c:	e7d2      	b.n	b6b04 <pinAvailable+0x8>
   b6b5e:	3809      	subs	r0, #9
   b6b60:	2801      	cmp	r0, #1
   b6b62:	d8ee      	bhi.n	b6b42 <pinAvailable+0x46>
   b6b64:	f000 f8ac 	bl	b6cc0 <_Z22__fetch_global_Serial1v>
   b6b68:	7c00      	ldrb	r0, [r0, #16]
   b6b6a:	f7ff f857 	bl	b5c1c <hal_usart_is_enabled>
   b6b6e:	e7f2      	b.n	b6b56 <pinAvailable+0x5a>
   b6b70:	2003e6bc 	.word	0x2003e6bc
   b6b74:	2003e6c0 	.word	0x2003e6c0

000b6b78 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6b78:	2823      	cmp	r0, #35	; 0x23
{
   b6b7a:	b538      	push	{r3, r4, r5, lr}
   b6b7c:	4604      	mov	r4, r0
   b6b7e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6b80:	d80a      	bhi.n	b6b98 <pinMode+0x20>
   b6b82:	29ff      	cmp	r1, #255	; 0xff
   b6b84:	d008      	beq.n	b6b98 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6b86:	f7ff ffb9 	bl	b6afc <pinAvailable>
   b6b8a:	b128      	cbz	r0, b6b98 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b6b8c:	4629      	mov	r1, r5
   b6b8e:	4620      	mov	r0, r4
}
   b6b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b6b94:	f7fe bfb2 	b.w	b5afc <hal_gpio_mode>
}
   b6b98:	bd38      	pop	{r3, r4, r5, pc}

000b6b9a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b6b9a:	b538      	push	{r3, r4, r5, lr}
   b6b9c:	4604      	mov	r4, r0
   b6b9e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b6ba0:	f7fe ffb4 	bl	b5b0c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6ba4:	28ff      	cmp	r0, #255	; 0xff
   b6ba6:	d010      	beq.n	b6bca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6ba8:	2806      	cmp	r0, #6
   b6baa:	d804      	bhi.n	b6bb6 <digitalWrite+0x1c>
   b6bac:	234d      	movs	r3, #77	; 0x4d
   b6bae:	fa23 f000 	lsr.w	r0, r3, r0
   b6bb2:	07c3      	lsls	r3, r0, #31
   b6bb4:	d409      	bmi.n	b6bca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6bb6:	4620      	mov	r0, r4
   b6bb8:	f7ff ffa0 	bl	b6afc <pinAvailable>
   b6bbc:	b128      	cbz	r0, b6bca <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b6bbe:	4629      	mov	r1, r5
   b6bc0:	4620      	mov	r0, r4
}
   b6bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b6bc6:	f7fe bfa9 	b.w	b5b1c <hal_gpio_write>
}
   b6bca:	bd38      	pop	{r3, r4, r5, pc}

000b6bcc <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6bcc:	280d      	cmp	r0, #13
{
   b6bce:	b510      	push	{r4, lr}
   b6bd0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6bd2:	bf9c      	itt	ls
   b6bd4:	340e      	addls	r4, #14
   b6bd6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b6bd8:	4620      	mov	r0, r4
   b6bda:	f7ff ff8f 	bl	b6afc <pinAvailable>
   b6bde:	b150      	cbz	r0, b6bf6 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b6be0:	2103      	movs	r1, #3
   b6be2:	4620      	mov	r0, r4
   b6be4:	f7fe ff82 	bl	b5aec <hal_pin_validate_function>
   b6be8:	2803      	cmp	r0, #3
   b6bea:	d104      	bne.n	b6bf6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6bec:	4620      	mov	r0, r4
}
   b6bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6bf2:	f7fe bfb3 	b.w	b5b5c <hal_adc_read>
}
   b6bf6:	2000      	movs	r0, #0
   b6bf8:	bd10      	pop	{r4, pc}

000b6bfa <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b6bfa:	b538      	push	{r3, r4, r5, lr}
   b6bfc:	4604      	mov	r4, r0
   b6bfe:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b6c00:	f7ff ff7c 	bl	b6afc <pinAvailable>
   b6c04:	b1f0      	cbz	r0, b6c44 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b6c06:	2104      	movs	r1, #4
   b6c08:	4620      	mov	r0, r4
   b6c0a:	f7fe ff6f 	bl	b5aec <hal_pin_validate_function>
   b6c0e:	2804      	cmp	r0, #4
   b6c10:	d105      	bne.n	b6c1e <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b6c12:	b2a9      	uxth	r1, r5
   b6c14:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b6c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b6c1a:	f7fe bf97 	b.w	b5b4c <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b6c1e:	2102      	movs	r1, #2
   b6c20:	4620      	mov	r0, r4
   b6c22:	f7fe ff63 	bl	b5aec <hal_pin_validate_function>
   b6c26:	2802      	cmp	r0, #2
   b6c28:	d10c      	bne.n	b6c44 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b6c2a:	4620      	mov	r0, r4
   b6c2c:	f7fe ff6e 	bl	b5b0c <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b6c30:	2801      	cmp	r0, #1
   b6c32:	d001      	beq.n	b6c38 <_Z11analogWritetm+0x3e>
   b6c34:	2804      	cmp	r0, #4
   b6c36:	d105      	bne.n	b6c44 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b6c38:	4629      	mov	r1, r5
   b6c3a:	4620      	mov	r0, r4
}
   b6c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b6c40:	f7fe bf94 	b.w	b5b6c <hal_pwm_write_ext>
}
   b6c44:	bd38      	pop	{r3, r4, r5, pc}

000b6c46 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b6c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6c4a:	4690      	mov	r8, r2
   b6c4c:	461f      	mov	r7, r3
   b6c4e:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6c50:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b6c52:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b6c54:	f1c4 0107 	rsb	r1, r4, #7
   b6c58:	f1b8 0f00 	cmp.w	r8, #0
   b6c5c:	d112      	bne.n	b6c84 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6c5e:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6c62:	f001 0101 	and.w	r1, r1, #1
   b6c66:	4630      	mov	r0, r6
   b6c68:	f7ff ff97 	bl	b6b9a <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b6c6c:	2101      	movs	r1, #1
   b6c6e:	4628      	mov	r0, r5
   b6c70:	f7ff ff93 	bl	b6b9a <digitalWrite>
    digitalWrite(clockPin, LOW);
   b6c74:	2100      	movs	r1, #0
   b6c76:	4628      	mov	r0, r5
   b6c78:	f7ff ff8f 	bl	b6b9a <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b6c7c:	3c01      	subs	r4, #1
   b6c7e:	d2e9      	bcs.n	b6c54 <shiftOut+0xe>
  }
}
   b6c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6c84:	fa47 f104 	asr.w	r1, r7, r4
   b6c88:	e7eb      	b.n	b6c62 <shiftOut+0x1c>

000b6c8a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6c8a:	4770      	bx	lr

000b6c8c <_Z20acquireSerial1Bufferv>:
{
   b6c8c:	b538      	push	{r3, r4, r5, lr}
   b6c8e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6c90:	2514      	movs	r5, #20
   b6c92:	462a      	mov	r2, r5
   b6c94:	2100      	movs	r1, #0
   b6c96:	f000 f9f5 	bl	b7084 <memset>
   b6c9a:	8025      	strh	r5, [r4, #0]
   b6c9c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6c9e:	4907      	ldr	r1, [pc, #28]	; (b6cbc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6ca0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6ca2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6ca4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6ca6:	f000 f86f 	bl	b6d88 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6caa:	4904      	ldr	r1, [pc, #16]	; (b6cbc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6cac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cae:	4628      	mov	r0, r5
   b6cb0:	f000 f86a 	bl	b6d88 <_ZnajRKSt9nothrow_t>
    };
   b6cb4:	60e0      	str	r0, [r4, #12]
}
   b6cb6:	4620      	mov	r0, r4
   b6cb8:	bd38      	pop	{r3, r4, r5, pc}
   b6cba:	bf00      	nop
   b6cbc:	000b7910 	.word	0x000b7910

000b6cc0 <_Z22__fetch_global_Serial1v>:
{
   b6cc0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6cc2:	4d0e      	ldr	r5, [pc, #56]	; (b6cfc <_Z22__fetch_global_Serial1v+0x3c>)
   b6cc4:	7829      	ldrb	r1, [r5, #0]
   b6cc6:	f3bf 8f5b 	dmb	ish
   b6cca:	f011 0401 	ands.w	r4, r1, #1
{
   b6cce:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6cd0:	d111      	bne.n	b6cf6 <_Z22__fetch_global_Serial1v+0x36>
   b6cd2:	4628      	mov	r0, r5
   b6cd4:	f7fe f80a 	bl	b4cec <__cxa_guard_acquire>
   b6cd8:	b168      	cbz	r0, b6cf6 <_Z22__fetch_global_Serial1v+0x36>
   b6cda:	a801      	add	r0, sp, #4
   b6cdc:	f7ff ffd6 	bl	b6c8c <_Z20acquireSerial1Bufferv>
   b6ce0:	aa01      	add	r2, sp, #4
   b6ce2:	4621      	mov	r1, r4
   b6ce4:	4806      	ldr	r0, [pc, #24]	; (b6d00 <_Z22__fetch_global_Serial1v+0x40>)
   b6ce6:	f7ff fda7 	bl	b6838 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6cea:	4628      	mov	r0, r5
   b6cec:	f7fe f803 	bl	b4cf6 <__cxa_guard_release>
   b6cf0:	4804      	ldr	r0, [pc, #16]	; (b6d04 <_Z22__fetch_global_Serial1v+0x44>)
   b6cf2:	f000 f9b3 	bl	b705c <atexit>
    return serial1;
}
   b6cf6:	4802      	ldr	r0, [pc, #8]	; (b6d00 <_Z22__fetch_global_Serial1v+0x40>)
   b6cf8:	b007      	add	sp, #28
   b6cfa:	bd30      	pop	{r4, r5, pc}
   b6cfc:	2003e72c 	.word	0x2003e72c
   b6d00:	2003e730 	.word	0x2003e730
   b6d04:	000b6c8b 	.word	0x000b6c8b

000b6d08 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6d08:	4770      	bx	lr
	...

000b6d0c <_Z17acquireWireBufferv>:
{
   b6d0c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6d0e:	4b0a      	ldr	r3, [pc, #40]	; (b6d38 <_Z17acquireWireBufferv+0x2c>)
   b6d10:	6003      	str	r3, [r0, #0]
   b6d12:	2301      	movs	r3, #1
{
   b6d14:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6d16:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6d18:	4908      	ldr	r1, [pc, #32]	; (b6d3c <_Z17acquireWireBufferv+0x30>)
   b6d1a:	2020      	movs	r0, #32
   b6d1c:	f000 f834 	bl	b6d88 <_ZnajRKSt9nothrow_t>
	};
   b6d20:	2520      	movs	r5, #32
   b6d22:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6d24:	4905      	ldr	r1, [pc, #20]	; (b6d3c <_Z17acquireWireBufferv+0x30>)
	};
   b6d26:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6d28:	4628      	mov	r0, r5
   b6d2a:	f000 f82d 	bl	b6d88 <_ZnajRKSt9nothrow_t>
	};
   b6d2e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6d32:	4620      	mov	r0, r4
   b6d34:	bd38      	pop	{r3, r4, r5, pc}
   b6d36:	bf00      	nop
   b6d38:	00010018 	.word	0x00010018
   b6d3c:	000b7910 	.word	0x000b7910

000b6d40 <_Z19__fetch_global_Wirev>:
{
   b6d40:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6d42:	4d0e      	ldr	r5, [pc, #56]	; (b6d7c <_Z19__fetch_global_Wirev+0x3c>)
   b6d44:	7829      	ldrb	r1, [r5, #0]
   b6d46:	f3bf 8f5b 	dmb	ish
   b6d4a:	f011 0401 	ands.w	r4, r1, #1
{
   b6d4e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6d50:	d111      	bne.n	b6d76 <_Z19__fetch_global_Wirev+0x36>
   b6d52:	4628      	mov	r0, r5
   b6d54:	f7fd ffca 	bl	b4cec <__cxa_guard_acquire>
   b6d58:	b168      	cbz	r0, b6d76 <_Z19__fetch_global_Wirev+0x36>
   b6d5a:	4668      	mov	r0, sp
   b6d5c:	f7ff ffd6 	bl	b6d0c <_Z17acquireWireBufferv>
   b6d60:	466a      	mov	r2, sp
   b6d62:	4621      	mov	r1, r4
   b6d64:	4806      	ldr	r0, [pc, #24]	; (b6d80 <_Z19__fetch_global_Wirev+0x40>)
   b6d66:	f7ff fda7 	bl	b68b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6d6a:	4628      	mov	r0, r5
   b6d6c:	f7fd ffc3 	bl	b4cf6 <__cxa_guard_release>
   b6d70:	4804      	ldr	r0, [pc, #16]	; (b6d84 <_Z19__fetch_global_Wirev+0x44>)
   b6d72:	f000 f973 	bl	b705c <atexit>
	return wire;
}
   b6d76:	4802      	ldr	r0, [pc, #8]	; (b6d80 <_Z19__fetch_global_Wirev+0x40>)
   b6d78:	b007      	add	sp, #28
   b6d7a:	bd30      	pop	{r4, r5, pc}
   b6d7c:	2003e748 	.word	0x2003e748
   b6d80:	2003e74c 	.word	0x2003e74c
   b6d84:	000b6d09 	.word	0x000b6d09

000b6d88 <_ZnajRKSt9nothrow_t>:
   b6d88:	f7fd bf9f 	b.w	b4cca <_Znaj>

000b6d8c <logf>:
   b6d8c:	b508      	push	{r3, lr}
   b6d8e:	ed2d 8b02 	vpush	{d8}
   b6d92:	eeb0 8a40 	vmov.f32	s16, s0
   b6d96:	f000 f857 	bl	b6e48 <__ieee754_logf>
   b6d9a:	4b14      	ldr	r3, [pc, #80]	; (b6dec <logf+0x60>)
   b6d9c:	f993 3000 	ldrsb.w	r3, [r3]
   b6da0:	3301      	adds	r3, #1
   b6da2:	d014      	beq.n	b6dce <logf+0x42>
   b6da4:	eeb4 8a48 	vcmp.f32	s16, s16
   b6da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6dac:	d60f      	bvs.n	b6dce <logf+0x42>
   b6dae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b6db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6db6:	dc0a      	bgt.n	b6dce <logf+0x42>
   b6db8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   b6dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6dc0:	d108      	bne.n	b6dd4 <logf+0x48>
   b6dc2:	f7ff f8b7 	bl	b5f34 <__errno>
   b6dc6:	2322      	movs	r3, #34	; 0x22
   b6dc8:	ed9f 0a09 	vldr	s0, [pc, #36]	; b6df0 <logf+0x64>
   b6dcc:	6003      	str	r3, [r0, #0]
   b6dce:	ecbd 8b02 	vpop	{d8}
   b6dd2:	bd08      	pop	{r3, pc}
   b6dd4:	f7ff f8ae 	bl	b5f34 <__errno>
   b6dd8:	ecbd 8b02 	vpop	{d8}
   b6ddc:	4603      	mov	r3, r0
   b6dde:	2221      	movs	r2, #33	; 0x21
   b6de0:	601a      	str	r2, [r3, #0]
   b6de2:	4804      	ldr	r0, [pc, #16]	; (b6df4 <logf+0x68>)
   b6de4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6de8:	f000 b932 	b.w	b7050 <nanf>
   b6dec:	2003de18 	.word	0x2003de18
   b6df0:	ff800000 	.word	0xff800000
   b6df4:	000b7914 	.word	0x000b7914

000b6df8 <sqrtf>:
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	ed2d 8b02 	vpush	{d8}
   b6dfe:	eeb0 8a40 	vmov.f32	s16, s0
   b6e02:	f000 f921 	bl	b7048 <__ieee754_sqrtf>
   b6e06:	4b0e      	ldr	r3, [pc, #56]	; (b6e40 <sqrtf+0x48>)
   b6e08:	f993 3000 	ldrsb.w	r3, [r3]
   b6e0c:	3301      	adds	r3, #1
   b6e0e:	d00b      	beq.n	b6e28 <sqrtf+0x30>
   b6e10:	eeb4 8a48 	vcmp.f32	s16, s16
   b6e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6e18:	d606      	bvs.n	b6e28 <sqrtf+0x30>
   b6e1a:	eddf 8a0a 	vldr	s17, [pc, #40]	; b6e44 <sqrtf+0x4c>
   b6e1e:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b6e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6e26:	d402      	bmi.n	b6e2e <sqrtf+0x36>
   b6e28:	ecbd 8b02 	vpop	{d8}
   b6e2c:	bd08      	pop	{r3, pc}
   b6e2e:	f7ff f881 	bl	b5f34 <__errno>
   b6e32:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   b6e36:	ecbd 8b02 	vpop	{d8}
   b6e3a:	2321      	movs	r3, #33	; 0x21
   b6e3c:	6003      	str	r3, [r0, #0]
   b6e3e:	bd08      	pop	{r3, pc}
   b6e40:	2003de18 	.word	0x2003de18
   b6e44:	00000000 	.word	0x00000000

000b6e48 <__ieee754_logf>:
   b6e48:	ee10 3a10 	vmov	r3, s0
   b6e4c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   b6e50:	d02e      	beq.n	b6eb0 <__ieee754_logf+0x68>
   b6e52:	2b00      	cmp	r3, #0
   b6e54:	db33      	blt.n	b6ebe <__ieee754_logf+0x76>
   b6e56:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   b6e5a:	da40      	bge.n	b6ede <__ieee754_logf+0x96>
   b6e5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   b6e60:	db34      	blt.n	b6ecc <__ieee754_logf+0x84>
   b6e62:	f04f 0c00 	mov.w	ip, #0
   b6e66:	4868      	ldr	r0, [pc, #416]	; (b7008 <__ieee754_logf+0x1c0>)
   b6e68:	f3c3 0116 	ubfx	r1, r3, #0, #23
   b6e6c:	4408      	add	r0, r1
   b6e6e:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   b6e72:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   b6e76:	430a      	orrs	r2, r1
   b6e78:	15db      	asrs	r3, r3, #23
   b6e7a:	ee00 2a10 	vmov	s0, r2
   b6e7e:	3b7f      	subs	r3, #127	; 0x7f
   b6e80:	4a62      	ldr	r2, [pc, #392]	; (b700c <__ieee754_logf+0x1c4>)
   b6e82:	4463      	add	r3, ip
   b6e84:	f101 0c0f 	add.w	ip, r1, #15
   b6e88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b6e8c:	ea0c 0202 	and.w	r2, ip, r2
   b6e90:	ee30 0a67 	vsub.f32	s0, s0, s15
   b6e94:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   b6e98:	bb22      	cbnz	r2, b6ee4 <__ieee754_logf+0x9c>
   b6e9a:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b6e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6ea2:	d160      	bne.n	b6f66 <__ieee754_logf+0x11e>
   b6ea4:	2b00      	cmp	r3, #0
   b6ea6:	f040 8092 	bne.w	b6fce <__ieee754_logf+0x186>
   b6eaa:	ed9f 0a59 	vldr	s0, [pc, #356]	; b7010 <__ieee754_logf+0x1c8>
   b6eae:	4770      	bx	lr
   b6eb0:	ed9f 7a58 	vldr	s14, [pc, #352]	; b7014 <__ieee754_logf+0x1cc>
   b6eb4:	eddf 7a56 	vldr	s15, [pc, #344]	; b7010 <__ieee754_logf+0x1c8>
   b6eb8:	ee87 0a27 	vdiv.f32	s0, s14, s15
   b6ebc:	4770      	bx	lr
   b6ebe:	ee70 7a40 	vsub.f32	s15, s0, s0
   b6ec2:	ed9f 7a53 	vldr	s14, [pc, #332]	; b7010 <__ieee754_logf+0x1c8>
   b6ec6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b6eca:	4770      	bx	lr
   b6ecc:	eddf 7a52 	vldr	s15, [pc, #328]	; b7018 <__ieee754_logf+0x1d0>
   b6ed0:	ee60 7a27 	vmul.f32	s15, s0, s15
   b6ed4:	f06f 0c18 	mvn.w	ip, #24
   b6ed8:	ee17 3a90 	vmov	r3, s15
   b6edc:	e7c3      	b.n	b6e66 <__ieee754_logf+0x1e>
   b6ede:	ee30 0a00 	vadd.f32	s0, s0, s0
   b6ee2:	4770      	bx	lr
   b6ee4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b6ee8:	ee70 7a27 	vadd.f32	s15, s0, s15
   b6eec:	ee07 3a10 	vmov	s14, r3
   b6ef0:	ee80 4a27 	vdiv.f32	s8, s0, s15
   b6ef4:	4849      	ldr	r0, [pc, #292]	; (b701c <__ieee754_logf+0x1d4>)
   b6ef6:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   b6efa:	4408      	add	r0, r1
   b6efc:	f502 7222 	add.w	r2, r2, #648	; 0x288
   b6f00:	4302      	orrs	r2, r0
   b6f02:	2a00      	cmp	r2, #0
   b6f04:	ed9f 3a46 	vldr	s6, [pc, #280]	; b7020 <__ieee754_logf+0x1d8>
   b6f08:	eddf 4a46 	vldr	s9, [pc, #280]	; b7024 <__ieee754_logf+0x1dc>
   b6f0c:	eddf 5a46 	vldr	s11, [pc, #280]	; b7028 <__ieee754_logf+0x1e0>
   b6f10:	eddf 3a46 	vldr	s7, [pc, #280]	; b702c <__ieee754_logf+0x1e4>
   b6f14:	ed9f 5a46 	vldr	s10, [pc, #280]	; b7030 <__ieee754_logf+0x1e8>
   b6f18:	eddf 7a46 	vldr	s15, [pc, #280]	; b7034 <__ieee754_logf+0x1ec>
   b6f1c:	eddf 6a46 	vldr	s13, [pc, #280]	; b7038 <__ieee754_logf+0x1f0>
   b6f20:	ee24 6a04 	vmul.f32	s12, s8, s8
   b6f24:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   b6f28:	ee26 7a06 	vmul.f32	s14, s12, s12
   b6f2c:	eee7 4a03 	vfma.f32	s9, s14, s6
   b6f30:	eea7 5a23 	vfma.f32	s10, s14, s7
   b6f34:	eee4 5a87 	vfma.f32	s11, s9, s14
   b6f38:	eee5 6a07 	vfma.f32	s13, s10, s14
   b6f3c:	eee5 7a87 	vfma.f32	s15, s11, s14
   b6f40:	ee67 7a86 	vmul.f32	s15, s15, s12
   b6f44:	eee6 7a87 	vfma.f32	s15, s13, s14
   b6f48:	dd2a      	ble.n	b6fa0 <__ieee754_logf+0x158>
   b6f4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b6f4e:	ee20 7a07 	vmul.f32	s14, s0, s14
   b6f52:	ee27 7a00 	vmul.f32	s14, s14, s0
   b6f56:	bb4b      	cbnz	r3, b6fac <__ieee754_logf+0x164>
   b6f58:	ee77 7a87 	vadd.f32	s15, s15, s14
   b6f5c:	eea7 7ac4 	vfms.f32	s14, s15, s8
   b6f60:	ee30 0a47 	vsub.f32	s0, s0, s14
   b6f64:	4770      	bx	lr
   b6f66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b6f6a:	eddf 6a34 	vldr	s13, [pc, #208]	; b703c <__ieee754_logf+0x1f4>
   b6f6e:	eef0 7a47 	vmov.f32	s15, s14
   b6f72:	eee0 7a66 	vfms.f32	s15, s0, s13
   b6f76:	ee20 7a00 	vmul.f32	s14, s0, s0
   b6f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
   b6f7e:	2b00      	cmp	r3, #0
   b6f80:	d0ee      	beq.n	b6f60 <__ieee754_logf+0x118>
   b6f82:	ee07 3a90 	vmov	s15, r3
   b6f86:	ed9f 6a2e 	vldr	s12, [pc, #184]	; b7040 <__ieee754_logf+0x1f8>
   b6f8a:	eddf 6a2e 	vldr	s13, [pc, #184]	; b7044 <__ieee754_logf+0x1fc>
   b6f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6f92:	eea7 7ac6 	vfms.f32	s14, s15, s12
   b6f96:	ee37 0a40 	vsub.f32	s0, s14, s0
   b6f9a:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   b6f9e:	4770      	bx	lr
   b6fa0:	bb13      	cbnz	r3, b6fe8 <__ieee754_logf+0x1a0>
   b6fa2:	ee70 7a67 	vsub.f32	s15, s0, s15
   b6fa6:	eea7 0ac4 	vfms.f32	s0, s15, s8
   b6faa:	4770      	bx	lr
   b6fac:	eddf 6a24 	vldr	s13, [pc, #144]	; b7040 <__ieee754_logf+0x1f8>
   b6fb0:	ed9f 6a24 	vldr	s12, [pc, #144]	; b7044 <__ieee754_logf+0x1fc>
   b6fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
   b6fb8:	ee62 6aa6 	vmul.f32	s13, s5, s13
   b6fbc:	eee7 6a84 	vfma.f32	s13, s15, s8
   b6fc0:	ee37 7a66 	vsub.f32	s14, s14, s13
   b6fc4:	ee37 0a40 	vsub.f32	s0, s14, s0
   b6fc8:	ee92 0a86 	vfnms.f32	s0, s5, s12
   b6fcc:	4770      	bx	lr
   b6fce:	ee07 3a90 	vmov	s15, r3
   b6fd2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; b7040 <__ieee754_logf+0x1f8>
   b6fd6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; b7044 <__ieee754_logf+0x1fc>
   b6fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6fde:	ee27 0a80 	vmul.f32	s0, s15, s0
   b6fe2:	eea7 0a87 	vfma.f32	s0, s15, s14
   b6fe6:	4770      	bx	lr
   b6fe8:	ed9f 7a15 	vldr	s14, [pc, #84]	; b7040 <__ieee754_logf+0x1f8>
   b6fec:	eddf 6a15 	vldr	s13, [pc, #84]	; b7044 <__ieee754_logf+0x1fc>
   b6ff0:	ee70 7a67 	vsub.f32	s15, s0, s15
   b6ff4:	ee27 7a62 	vnmul.f32	s14, s14, s5
   b6ff8:	eea7 7a84 	vfma.f32	s14, s15, s8
   b6ffc:	ee37 0a40 	vsub.f32	s0, s14, s0
   b7000:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   b7004:	4770      	bx	lr
   b7006:	bf00      	nop
   b7008:	004afb20 	.word	0x004afb20
   b700c:	007ffff0 	.word	0x007ffff0
   b7010:	00000000 	.word	0x00000000
   b7014:	cc000000 	.word	0xcc000000
   b7018:	4c000000 	.word	0x4c000000
   b701c:	ffcf5c30 	.word	0xffcf5c30
   b7020:	3e178897 	.word	0x3e178897
   b7024:	3e3a3325 	.word	0x3e3a3325
   b7028:	3e924925 	.word	0x3e924925
   b702c:	3e1cd04f 	.word	0x3e1cd04f
   b7030:	3e638e29 	.word	0x3e638e29
   b7034:	3f2aaaab 	.word	0x3f2aaaab
   b7038:	3ecccccd 	.word	0x3ecccccd
   b703c:	3eaaaaab 	.word	0x3eaaaaab
   b7040:	3717f7d1 	.word	0x3717f7d1
   b7044:	3f317180 	.word	0x3f317180

000b7048 <__ieee754_sqrtf>:
   b7048:	eeb1 0ac0 	vsqrt.f32	s0, s0
   b704c:	4770      	bx	lr
   b704e:	bf00      	nop

000b7050 <nanf>:
   b7050:	ed9f 0a01 	vldr	s0, [pc, #4]	; b7058 <nanf+0x8>
   b7054:	4770      	bx	lr
   b7056:	bf00      	nop
   b7058:	7fc00000 	.word	0x7fc00000

000b705c <atexit>:
   b705c:	2300      	movs	r3, #0
   b705e:	4601      	mov	r1, r0
   b7060:	461a      	mov	r2, r3
   b7062:	4618      	mov	r0, r3
   b7064:	f000 b844 	b.w	b70f0 <__register_exitproc>

000b7068 <memcpy>:
   b7068:	440a      	add	r2, r1
   b706a:	4291      	cmp	r1, r2
   b706c:	f100 33ff 	add.w	r3, r0, #4294967295
   b7070:	d100      	bne.n	b7074 <memcpy+0xc>
   b7072:	4770      	bx	lr
   b7074:	b510      	push	{r4, lr}
   b7076:	f811 4b01 	ldrb.w	r4, [r1], #1
   b707a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b707e:	4291      	cmp	r1, r2
   b7080:	d1f9      	bne.n	b7076 <memcpy+0xe>
   b7082:	bd10      	pop	{r4, pc}

000b7084 <memset>:
   b7084:	4402      	add	r2, r0
   b7086:	4603      	mov	r3, r0
   b7088:	4293      	cmp	r3, r2
   b708a:	d100      	bne.n	b708e <memset+0xa>
   b708c:	4770      	bx	lr
   b708e:	f803 1b01 	strb.w	r1, [r3], #1
   b7092:	e7f9      	b.n	b7088 <memset+0x4>

000b7094 <srand>:
   b7094:	b538      	push	{r3, r4, r5, lr}
   b7096:	4b10      	ldr	r3, [pc, #64]	; (b70d8 <srand+0x44>)
   b7098:	681d      	ldr	r5, [r3, #0]
   b709a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b709c:	4604      	mov	r4, r0
   b709e:	b9b3      	cbnz	r3, b70ce <srand+0x3a>
   b70a0:	2018      	movs	r0, #24
   b70a2:	f7fe ff37 	bl	b5f14 <malloc>
   b70a6:	4602      	mov	r2, r0
   b70a8:	63a8      	str	r0, [r5, #56]	; 0x38
   b70aa:	b920      	cbnz	r0, b70b6 <srand+0x22>
   b70ac:	4b0b      	ldr	r3, [pc, #44]	; (b70dc <srand+0x48>)
   b70ae:	480c      	ldr	r0, [pc, #48]	; (b70e0 <srand+0x4c>)
   b70b0:	2142      	movs	r1, #66	; 0x42
   b70b2:	f7fe ff47 	bl	b5f44 <__assert_func>
   b70b6:	490b      	ldr	r1, [pc, #44]	; (b70e4 <srand+0x50>)
   b70b8:	4b0b      	ldr	r3, [pc, #44]	; (b70e8 <srand+0x54>)
   b70ba:	e9c0 1300 	strd	r1, r3, [r0]
   b70be:	4b0b      	ldr	r3, [pc, #44]	; (b70ec <srand+0x58>)
   b70c0:	6083      	str	r3, [r0, #8]
   b70c2:	230b      	movs	r3, #11
   b70c4:	8183      	strh	r3, [r0, #12]
   b70c6:	2100      	movs	r1, #0
   b70c8:	2001      	movs	r0, #1
   b70ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b70ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b70d0:	2200      	movs	r2, #0
   b70d2:	611c      	str	r4, [r3, #16]
   b70d4:	615a      	str	r2, [r3, #20]
   b70d6:	bd38      	pop	{r3, r4, r5, pc}
   b70d8:	2003de1c 	.word	0x2003de1c
   b70dc:	000b7915 	.word	0x000b7915
   b70e0:	000b792c 	.word	0x000b792c
   b70e4:	abcd330e 	.word	0xabcd330e
   b70e8:	e66d1234 	.word	0xe66d1234
   b70ec:	0005deec 	.word	0x0005deec

000b70f0 <__register_exitproc>:
   b70f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b70f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b71b0 <__register_exitproc+0xc0>
   b70f8:	4606      	mov	r6, r0
   b70fa:	f8d8 0000 	ldr.w	r0, [r8]
   b70fe:	461f      	mov	r7, r3
   b7100:	460d      	mov	r5, r1
   b7102:	4691      	mov	r9, r2
   b7104:	f000 f856 	bl	b71b4 <__retarget_lock_acquire_recursive>
   b7108:	4b25      	ldr	r3, [pc, #148]	; (b71a0 <__register_exitproc+0xb0>)
   b710a:	681c      	ldr	r4, [r3, #0]
   b710c:	b934      	cbnz	r4, b711c <__register_exitproc+0x2c>
   b710e:	4c25      	ldr	r4, [pc, #148]	; (b71a4 <__register_exitproc+0xb4>)
   b7110:	601c      	str	r4, [r3, #0]
   b7112:	4b25      	ldr	r3, [pc, #148]	; (b71a8 <__register_exitproc+0xb8>)
   b7114:	b113      	cbz	r3, b711c <__register_exitproc+0x2c>
   b7116:	681b      	ldr	r3, [r3, #0]
   b7118:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b711c:	6863      	ldr	r3, [r4, #4]
   b711e:	2b1f      	cmp	r3, #31
   b7120:	dd07      	ble.n	b7132 <__register_exitproc+0x42>
   b7122:	f8d8 0000 	ldr.w	r0, [r8]
   b7126:	f000 f847 	bl	b71b8 <__retarget_lock_release_recursive>
   b712a:	f04f 30ff 	mov.w	r0, #4294967295
   b712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7132:	b34e      	cbz	r6, b7188 <__register_exitproc+0x98>
   b7134:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7138:	b988      	cbnz	r0, b715e <__register_exitproc+0x6e>
   b713a:	4b1c      	ldr	r3, [pc, #112]	; (b71ac <__register_exitproc+0xbc>)
   b713c:	b923      	cbnz	r3, b7148 <__register_exitproc+0x58>
   b713e:	f8d8 0000 	ldr.w	r0, [r8]
   b7142:	f000 f838 	bl	b71b6 <__retarget_lock_release>
   b7146:	e7f0      	b.n	b712a <__register_exitproc+0x3a>
   b7148:	f44f 7084 	mov.w	r0, #264	; 0x108
   b714c:	f7fe fee2 	bl	b5f14 <malloc>
   b7150:	2800      	cmp	r0, #0
   b7152:	d0f4      	beq.n	b713e <__register_exitproc+0x4e>
   b7154:	2300      	movs	r3, #0
   b7156:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b715a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b715e:	6863      	ldr	r3, [r4, #4]
   b7160:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7164:	2201      	movs	r2, #1
   b7166:	409a      	lsls	r2, r3
   b7168:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b716c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7170:	4313      	orrs	r3, r2
   b7172:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7176:	2e02      	cmp	r6, #2
   b7178:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b717c:	bf02      	ittt	eq
   b717e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7182:	4313      	orreq	r3, r2
   b7184:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7188:	6863      	ldr	r3, [r4, #4]
   b718a:	f8d8 0000 	ldr.w	r0, [r8]
   b718e:	1c5a      	adds	r2, r3, #1
   b7190:	3302      	adds	r3, #2
   b7192:	6062      	str	r2, [r4, #4]
   b7194:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7198:	f000 f80e 	bl	b71b8 <__retarget_lock_release_recursive>
   b719c:	2000      	movs	r0, #0
   b719e:	e7c6      	b.n	b712e <__register_exitproc+0x3e>
   b71a0:	2003e7ec 	.word	0x2003e7ec
   b71a4:	2003e760 	.word	0x2003e760
   b71a8:	00000000 	.word	0x00000000
   b71ac:	000b5f15 	.word	0x000b5f15
   b71b0:	2003de80 	.word	0x2003de80

000b71b4 <__retarget_lock_acquire_recursive>:
   b71b4:	4770      	bx	lr

000b71b6 <__retarget_lock_release>:
   b71b6:	4770      	bx	lr

000b71b8 <__retarget_lock_release_recursive>:
   b71b8:	4770      	bx	lr

000b71ba <link_code_end>:
	...

000b71bc <dynalib_user>:
   b71bc:	4c55 000b 4c91 000b 4cb9 000b 4cbd 000b     UL...L...L...L..
   b71cc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b71dc:	7620 7269 7574 6c61 4800 6c65 6f6c 5720      virtual.Hello W
   b71ec:	726f 646c 4d00 4349 003a 6420 4142 5400     orld.MIC:. dBA.T
   b71fc:	6d65 6570 7472 7275 0065 4320 4d00 564f     emperture. C.MOV
   b720c:	4d45 4e45 2054 4544 4554 5443 4445 0021     EMENT DETECTED!.

000b721c <_ZTV16Adafruit_SSD1306>:
	...
   b7224:	52fd 000b 538d 000b 5a31 000b 6195 000b     .R...S..1Z...a..
   b7234:	5301 000b 5749 000b 5189 000b 5019 000b     .S..IW...Q...P..
   b7244:	5807 000b 58a5 000b 58db 000b 58f7 000b     .X...X...X...X..

000b7254 <_ZL4font>:
   b7254:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7264:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7274:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7284:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7294:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b72a4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b72b4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b72c4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b72d4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b72e4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b72f4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7304:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7314:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7324:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7334:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7344:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7354:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7364:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7374:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7384:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7394:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b73a4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b73b4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b73c4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b73d4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b73e4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b73f4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b7404:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b7414:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b7424:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b7434:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b7444:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7454:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7464:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7474:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b7484:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b7494:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b74a4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b74b4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b74c4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b74d4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b74e4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b74f4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b7504:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b7514:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b7524:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b7534:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b7544:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b7554:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b7564:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7574:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b7584:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b7594:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b75a4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b75b4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b75c4:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b75d4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b75e4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b75f4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b7604:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b7614:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b7624:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b7634:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b7644:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b7654:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b7664:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b7674:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b7684:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b7694:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b76a4:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b76b4:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b76c4:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b76d4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b76e4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b76f4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b7704:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b7714:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b7724:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b7734:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b7744:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b7750 <_ZTV12Adafruit_GFX>:
	...
   b7760:	5a31 000b 6195 000b 4cd5 000b 5749 000b     1Z...a...L..IW..
   b7770:	586f 000b 588b 000b 5807 000b 58a5 000b     oX...X...X...X..
   b7780:	58db 000b 58f7 000b                         .X...X..

000b7788 <_ZTVN5spark13EthernetClassE>:
	...
   b7790:	5fc3 000b 5fb9 000b 5faf 000b 5fa5 000b     ._..._..._..._..
   b77a0:	5f99 000b 5f8d 000b 69d9 000b 69e1 000b     ._..._...i...i..
   b77b0:	5f81 000b 5f79 000b 5f6f 000b 5f65 000b     ._..y_..o_..e_..
   b77c0:	6a11 000b                                   .j..

000b77c4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b77c4:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   b77d4:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
   b77e4:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   b77f4:	7463 6d69 0065 0000                         ctime...

000b77fc <_ZTV9IPAddress>:
	...
   b7804:	6585 000b 6575 000b 6577 000b               .e..ue..we..

000b7810 <_ZTV9USBSerial>:
	...
   b7818:	666b 000b 66d3 000b 66a9 000b 6195 000b     kf...f...f...a..
   b7828:	669b 000b 666d 000b 667d 000b 66cd 000b     .f..mf..}f...f..
   b7838:	668d 000b 6665 000b                         .f..ef..

000b7840 <_ZTV11USARTSerial>:
	...
   b7848:	67bd 000b 6829 000b 6801 000b 6195 000b     .g..)h...h...a..
   b7858:	67d1 000b 67ed 000b 67df 000b 67fb 000b     .g...g...g...g..
   b7868:	67bf 000b 67c3 000b                         .g...g..

000b7870 <_ZTV7TwoWire>:
	...
   b7878:	6861 000b 68ab 000b 6883 000b 6863 000b     ah...h...h..ch..
   b7888:	688b 000b 6893 000b 689b 000b 68a3 000b     .h...h...h...h..

000b7898 <_ZTVN5spark9WiFiClassE>:
	...
   b78a0:	697b 000b 6971 000b 6967 000b 691d 000b     {i..qi..gi...i..
   b78b0:	695b 000b 694f 000b 69d9 000b 69e1 000b     [i..Oi...i...i..
   b78c0:	6943 000b 693b 000b 6931 000b 6927 000b     Ci..;i..1i..'i..
   b78d0:	6a11 000b                                   .j..

000b78d4 <_ZTVN5spark12NetworkClassE>:
	...
   b78dc:	6999 000b 69a3 000b 69ad 000b 69b7 000b     .i...i...i...i..
   b78ec:	69c1 000b 69cd 000b 69d9 000b 69e1 000b     .i...i...i...i..
   b78fc:	69e9 000b 69f5 000b 69fd 000b 6a07 000b     .i...i...i...j..
   b790c:	6a11 000b                                   .j..

000b7910 <_ZSt7nothrow>:
   b7910:	0000 0000 5200 4545 544e 6d20 6c61 6f6c     .....REENT mallo
   b7920:	2063 7573 6363 6565 6564 0064 6d2f 746e     c succeeded./mnt
   b7930:	772f 726f 736b 6170 6563 772f 726f 736b     /workspace/works
   b7940:	6170 6563 472f 4343 312d 2d30 6970 6570     pace/GCC-10-pipe
   b7950:	696c 656e 6a2f 6e65 696b 736e 472d 4343     line/jenkins-GCC
   b7960:	312d 2d30 6970 6570 696c 656e 342d 5f38     -10-pipeline-48_
   b7970:	3032 3032 3131 3432 315f 3036 3136 3038     20201124_1606180
   b7980:	3436 2f31 7273 2f63 656e 6c77 6269 6e2f     641/src/newlib/n
   b7990:	7765 696c 2f62 696c 6362 732f 6474 696c     ewlib/libc/stdli
   b79a0:	2f62 6172 646e 632e                          b/rand.c.

000b79a9 <link_const_data_end>:
   b79a9:	00          	.byte	0x00
	...

000b79ac <link_constructors_location>:
   b79ac:	000b4ff9 	.word	0x000b4ff9
   b79b0:	000b5009 	.word	0x000b5009
   b79b4:	000b5fcd 	.word	0x000b5fcd
   b79b8:	000b6161 	.word	0x000b6161
   b79bc:	000b6185 	.word	0x000b6185
   b79c0:	000b6405 	.word	0x000b6405
   b79c4:	000b6415 	.word	0x000b6415
   b79c8:	000b6431 	.word	0x000b6431
   b79cc:	000b6985 	.word	0x000b6985
   b79d0:	000b6ae9 	.word	0x000b6ae9
