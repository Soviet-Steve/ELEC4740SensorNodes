
c:/Users/Clayton/Documents/Particle/node_2/target/5.3.0/argon/node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005718  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9738  000b9738  00009738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000070  2003e5dc  000b975c  0000e5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001a4  2003e64c  2003e64c  0001e64c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b97cc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b97d0  000b97d0  000197d0  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b97d6  000b97d6  000197d6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b97fa  000b97fa  000197fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0010bc27  00000000  00000000  000197fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00010aff  00000000  00000000  00125425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00036d2e  00000000  00000000  00135f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002df0  00000000  00000000  0016cc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a510  00000000  00000000  0016fa42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036bfc  00000000  00000000  00179f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003939a  00000000  00000000  001b0b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013729a  00000000  00000000  001e9ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000087a8  00000000  00000000  00321184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <strcmp>:
   b4a28:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a30:	2a01      	cmp	r2, #1
   b4a32:	bf28      	it	cs
   b4a34:	429a      	cmpcs	r2, r3
   b4a36:	d0f7      	beq.n	b4a28 <strcmp>
   b4a38:	1ad0      	subs	r0, r2, r3
   b4a3a:	4770      	bx	lr

000b4a3c <strlen>:
   b4a3c:	4603      	mov	r3, r0
   b4a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a42:	2a00      	cmp	r2, #0
   b4a44:	d1fb      	bne.n	b4a3e <strlen+0x2>
   b4a46:	1a18      	subs	r0, r3, r0
   b4a48:	3801      	subs	r0, #1
   b4a4a:	4770      	bx	lr

000b4a4c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a4c:	4809      	ldr	r0, [pc, #36]	; (b4a74 <module_user_pre_init+0x28>)
   b4a4e:	490a      	ldr	r1, [pc, #40]	; (b4a78 <module_user_pre_init+0x2c>)
   b4a50:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a52:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a54:	d005      	beq.n	b4a62 <module_user_pre_init+0x16>
   b4a56:	4a09      	ldr	r2, [pc, #36]	; (b4a7c <module_user_pre_init+0x30>)
   b4a58:	4282      	cmp	r2, r0
   b4a5a:	d002      	beq.n	b4a62 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a5c:	1a12      	subs	r2, r2, r0
   b4a5e:	f004 fae7 	bl	b9030 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a62:	4807      	ldr	r0, [pc, #28]	; (b4a80 <module_user_pre_init+0x34>)
   b4a64:	4a07      	ldr	r2, [pc, #28]	; (b4a84 <module_user_pre_init+0x38>)
   b4a66:	2100      	movs	r1, #0
   b4a68:	1a12      	subs	r2, r2, r0
   b4a6a:	f004 fb09 	bl	b9080 <memset>
    return &link_global_data_start;
}
   b4a6e:	4801      	ldr	r0, [pc, #4]	; (b4a74 <module_user_pre_init+0x28>)
   b4a70:	bd08      	pop	{r3, pc}
   b4a72:	bf00      	nop
   b4a74:	2003e5dc 	.word	0x2003e5dc
   b4a78:	000b975c 	.word	0x000b975c
   b4a7c:	2003e64c 	.word	0x2003e64c
   b4a80:	2003e64c 	.word	0x2003e64c
   b4a84:	2003e7f0 	.word	0x2003e7f0

000b4a88 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a88:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a8a:	4e07      	ldr	r6, [pc, #28]	; (b4aa8 <module_user_init+0x20>)
   b4a8c:	4c07      	ldr	r4, [pc, #28]	; (b4aac <module_user_init+0x24>)
    module_user_init_hook();
   b4a8e:	f002 f9fb 	bl	b6e88 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a92:	1ba4      	subs	r4, r4, r6
   b4a94:	08a4      	lsrs	r4, r4, #2
   b4a96:	2500      	movs	r5, #0
   b4a98:	42ac      	cmp	r4, r5
   b4a9a:	d100      	bne.n	b4a9e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a9c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a9e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4aa2:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4aa4:	3501      	adds	r5, #1
   b4aa6:	e7f7      	b.n	b4a98 <module_user_init+0x10>
   b4aa8:	000b9714 	.word	0x000b9714
   b4aac:	000b9738 	.word	0x000b9738

000b4ab0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4ab0:	f000 b81a 	b.w	b4ae8 <setup>

000b4ab4 <module_user_loop>:
}

void module_user_loop() {
   b4ab4:	b508      	push	{r3, lr}
    loop();
   b4ab6:	f000 f95d 	bl	b4d74 <loop>
    _post_loop();
}
   b4aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4abe:	f002 b99b 	b.w	b6df8 <_post_loop>

000b4ac2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ac2:	f000 bde1 	b.w	b5688 <malloc>

000b4ac6 <_Znaj>:
   b4ac6:	f000 bddf 	b.w	b5688 <malloc>

000b4aca <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4aca:	f000 bde5 	b.w	b5698 <free>

000b4ace <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4ace:	7800      	ldrb	r0, [r0, #0]
   b4ad0:	fab0 f080 	clz	r0, r0
   b4ad4:	0940      	lsrs	r0, r0, #5
   b4ad6:	4770      	bx	lr

000b4ad8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ad8:	2301      	movs	r3, #1
   b4ada:	7003      	strb	r3, [r0, #0]
   b4adc:	4770      	bx	lr

000b4ade <_ZN8particle17BleCharacteristic8setValueIfEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>:
    ssize_t setValue(const String& str, BleTxRxType type = BleTxRxType::AUTO);
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
   b4ade:	4613      	mov	r3, r2
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b4ae0:	2204      	movs	r2, #4
   b4ae2:	f001 b893 	b.w	b5c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b4ae8 <setup>:
float distance_value = 0;   // mm

/*
~~~ Set-up ~~~
*/
void setup() {
   b4ae8:	b570      	push	{r4, r5, r6, lr}
   b4aea:	b090      	sub	sp, #64	; 0x40
    // Begin the serial connection.
    Serial.begin(9600);
   b4aec:	f002 fad4 	bl	b7098 <_Z16_fetch_usbserialv>
   b4af0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4af4:	f002 fac4 	bl	b7080 <_ZN9USBSerial5beginEl>

    // Turn the BLE on and add the stuff on.
    BLE.on();
   b4af8:	f001 f998 	bl	b5e2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4afc:	f001 f9e0 	bl	b5ec0 <_ZNK8particle14BleLocalDevice2onEv>

    BLE.setDeviceName("Clayton_Node_Two");
   b4b00:	f001 f994 	bl	b5e2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b04:	4941      	ldr	r1, [pc, #260]	; (b4c0c <setup+0x124>)
   b4b06:	4c42      	ldr	r4, [pc, #264]	; (b4c10 <setup+0x128>)
   b4b08:	f001 f9e1 	bl	b5ece <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>

    BLE.addCharacteristic(light_characteristic);
   b4b0c:	f001 f98e 	bl	b5e2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b10:	4a40      	ldr	r2, [pc, #256]	; (b4c14 <setup+0x12c>)
   b4b12:	4601      	mov	r1, r0
   b4b14:	a80b      	add	r0, sp, #44	; 0x2c
   b4b16:	f001 fee5 	bl	b68e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4b1a:	a80b      	add	r0, sp, #44	; 0x2c
   b4b1c:	f001 fa8b 	bl	b6036 <_ZN8particle17BleCharacteristicD1Ev>
    light_characteristic.setValue(light_value);
   b4b20:	493d      	ldr	r1, [pc, #244]	; (b4c18 <setup+0x130>)
   b4b22:	483c      	ldr	r0, [pc, #240]	; (b4c14 <setup+0x12c>)
   b4b24:	2200      	movs	r2, #0
   b4b26:	f7ff ffda 	bl	b4ade <_ZN8particle17BleCharacteristic8setValueIfEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
    BLE.addCharacteristic(sound_characteristic);
   b4b2a:	f001 f97f 	bl	b5e2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b2e:	4a3b      	ldr	r2, [pc, #236]	; (b4c1c <setup+0x134>)
   b4b30:	4601      	mov	r1, r0
   b4b32:	a80b      	add	r0, sp, #44	; 0x2c
   b4b34:	f001 fed6 	bl	b68e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4b38:	a80b      	add	r0, sp, #44	; 0x2c
   b4b3a:	f001 fa7c 	bl	b6036 <_ZN8particle17BleCharacteristicD1Ev>
    sound_characteristic.setValue(sound_value);
   b4b3e:	4938      	ldr	r1, [pc, #224]	; (b4c20 <setup+0x138>)
   b4b40:	4836      	ldr	r0, [pc, #216]	; (b4c1c <setup+0x134>)
   b4b42:	2200      	movs	r2, #0
   b4b44:	f7ff ffcb 	bl	b4ade <_ZN8particle17BleCharacteristic8setValueIfEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
    BLE.addCharacteristic(distance_characteristic);
   b4b48:	f001 f970 	bl	b5e2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4b4c:	4a35      	ldr	r2, [pc, #212]	; (b4c24 <setup+0x13c>)
   b4b4e:	4601      	mov	r1, r0
   b4b50:	a80b      	add	r0, sp, #44	; 0x2c
   b4b52:	f001 fec7 	bl	b68e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4b56:	a80b      	add	r0, sp, #44	; 0x2c
   b4b58:	f001 fa6d 	bl	b6036 <_ZN8particle17BleCharacteristicD1Ev>
    distance_characteristic.setValue(distance_value);
   b4b5c:	4932      	ldr	r1, [pc, #200]	; (b4c28 <setup+0x140>)
   b4b5e:	4831      	ldr	r0, [pc, #196]	; (b4c24 <setup+0x13c>)
   b4b60:	2200      	movs	r2, #0
   b4b62:	f7ff ffbc 	bl	b4ade <_ZN8particle17BleCharacteristic8setValueIfEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>

    BleAdvertisingData adv_data;
   b4b66:	a803      	add	r0, sp, #12
   b4b68:	f001 fb9b 	bl	b62a2 <_ZN8particle18BleAdvertisingDataC1Ev>

    adv_data.appendServiceUUID(node_two_service);
   b4b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4b6e:	ad06      	add	r5, sp, #24
   b4b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        BleUuid tempUUID(uuid);
   b4b72:	ad06      	add	r5, sp, #24
   b4b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4b76:	6826      	ldr	r6, [r4, #0]
   b4b78:	ac0b      	add	r4, sp, #44	; 0x2c
   b4b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4b7c:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4b7e:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4b80:	f000 ffe4 	bl	b5b4c <_ZNK8particle7BleUuid4typeEv>
   b4b84:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4b86:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4b88:	bbbc      	cbnz	r4, b4bfa <setup+0x112>
            uint16_t uuid16 = tempUUID.shorted();
   b4b8a:	f000 fffb 	bl	b5b84 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4b8e:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4b90:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4b94:	2302      	movs	r3, #2
   b4b96:	f10d 020a 	add.w	r2, sp, #10
   b4b9a:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4b9c:	a803      	add	r0, sp, #12
   b4b9e:	f001 fb75 	bl	b628c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    adv_data.appendLocalName("Clayton_Node_Two");
   b4ba2:	491a      	ldr	r1, [pc, #104]	; (b4c0c <setup+0x124>)
    pinMode(D2, OUTPUT);

    // Print a greeting eight times.
	delay(1000);
	for (int i = 0; i < 8; i++) {
		Serial.println("Hello, World!");
   b4ba4:	4d21      	ldr	r5, [pc, #132]	; (b4c2c <setup+0x144>)
    adv_data.appendLocalName("Clayton_Node_Two");
   b4ba6:	a803      	add	r0, sp, #12
   b4ba8:	f001 fb8e 	bl	b62c8 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    BLE.advertise(&adv_data);
   b4bac:	f001 f93e 	bl	b5e2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4bb0:	2200      	movs	r2, #0
   b4bb2:	a903      	add	r1, sp, #12
   b4bb4:	f001 f9e3 	bl	b5f7e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    pinMode(trigger_pin, OUTPUT);
   b4bb8:	2101      	movs	r1, #1
   b4bba:	2007      	movs	r0, #7
   b4bbc:	f002 fc5c 	bl	b7478 <pinMode>
    pinMode(echo_pin, INPUT);
   b4bc0:	2100      	movs	r1, #0
   b4bc2:	2008      	movs	r0, #8
   b4bc4:	f002 fc58 	bl	b7478 <pinMode>
    pinMode(D2, OUTPUT);
   b4bc8:	2101      	movs	r1, #1
   b4bca:	2002      	movs	r0, #2
   b4bcc:	f002 fc54 	bl	b7478 <pinMode>
	delay(1000);
   b4bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4bd4:	f002 f8e4 	bl	b6da0 <delay>
   b4bd8:	2408      	movs	r4, #8
		Serial.println("Hello, World!");
   b4bda:	f002 fa5d 	bl	b7098 <_Z16_fetch_usbserialv>
   b4bde:	4629      	mov	r1, r5
   b4be0:	f001 ffcb 	bl	b6b7a <_ZN5Print7printlnEPKc>
		delay(1000);
   b4be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4be8:	f002 f8da 	bl	b6da0 <delay>
	for (int i = 0; i < 8; i++) {
   b4bec:	3c01      	subs	r4, #1
   b4bee:	d1f4      	bne.n	b4bda <setup+0xf2>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4bf0:	9803      	ldr	r0, [sp, #12]
   b4bf2:	f000 fd51 	bl	b5698 <free>
	}
}
   b4bf6:	b010      	add	sp, #64	; 0x40
   b4bf8:	bd70      	pop	{r4, r5, r6, pc}
   b4bfa:	f000 ffc5 	bl	b5b88 <_ZNK8particle7BleUuid8rawBytesEv>
   b4bfe:	2300      	movs	r3, #0
   b4c00:	9300      	str	r3, [sp, #0]
   b4c02:	4602      	mov	r2, r0
   b4c04:	2310      	movs	r3, #16
   b4c06:	2107      	movs	r1, #7
   b4c08:	e7c8      	b.n	b4b9c <setup+0xb4>
   b4c0a:	bf00      	nop
   b4c0c:	000b91fc 	.word	0x000b91fc
   b4c10:	2003e68c 	.word	0x2003e68c
   b4c14:	2003e680 	.word	0x2003e680
   b4c18:	2003e688 	.word	0x2003e688
   b4c1c:	2003e6a0 	.word	0x2003e6a0
   b4c20:	2003e6a8 	.word	0x2003e6a8
   b4c24:	2003e674 	.word	0x2003e674
   b4c28:	2003e67c 	.word	0x2003e67c
   b4c2c:	000b920d 	.word	0x000b920d

000b4c30 <_Z17convert_from_peakf>:
@brief  converts the peak voltage read on the ADC to the sound-intensity 
        according to the inverse transfer-function.
@param  the peak voltage in V,
@return the sound-intensity in dBA,
*/
const float convert_from_peak(const float peak) {
   b4c30:	b508      	push	{r3, lr}
   b4c32:	ee10 0a10 	vmov	r0, s0
        back through the voltage divider and the amplifier.
@param  the peak voltage in V,
@return the sound-intensity in dBA,
*/
const float get_raw_voltage(const float v) {
    return (v * 5.0 / 3.3) / 100.0;
   b4c36:	f7ff fb57 	bl	b42e8 <__aeabi_f2d>
   b4c3a:	4b15      	ldr	r3, [pc, #84]	; (b4c90 <_Z17convert_from_peakf+0x60>)
   b4c3c:	2200      	movs	r2, #0
   b4c3e:	f7ff fbab 	bl	b4398 <__aeabi_dmul>
   b4c42:	a311      	add	r3, pc, #68	; (adr r3, b4c88 <_Z17convert_from_peakf+0x58>)
   b4c44:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c48:	f7ff fcd0 	bl	b45ec <__aeabi_ddiv>
   b4c4c:	4b11      	ldr	r3, [pc, #68]	; (b4c94 <_Z17convert_from_peakf+0x64>)
   b4c4e:	2200      	movs	r2, #0
   b4c50:	f7ff fccc 	bl	b45ec <__aeabi_ddiv>
   b4c54:	f7ff fe98 	bl	b4988 <__aeabi_d2f>
   b4c58:	ee07 0a90 	vmov	s15, r0
  using ::log10;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log10(float __x)
  { return __builtin_log10f(__x); }
   b4c5c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; b4c98 <_Z17convert_from_peakf+0x68>
   b4c60:	ed9f 0a0e 	vldr	s0, [pc, #56]	; b4c9c <_Z17convert_from_peakf+0x6c>
    return (log10(2*get_raw_voltage(peak)*1000 - b) + k)*10;
   b4c64:	ee77 7aa7 	vadd.f32	s15, s15, s15
   b4c68:	eea7 0a87 	vfma.f32	s0, s15, s14
   b4c6c:	f002 ff4a 	bl	b7b04 <log10f>
   b4c70:	eddf 7a0b 	vldr	s15, [pc, #44]	; b4ca0 <_Z17convert_from_peakf+0x70>
   b4c74:	ee30 0a27 	vadd.f32	s0, s0, s15
}
   b4c78:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   b4c7c:	ee20 0a27 	vmul.f32	s0, s0, s15
   b4c80:	bd08      	pop	{r3, pc}
   b4c82:	bf00      	nop
   b4c84:	f3af 8000 	nop.w
   b4c88:	66666666 	.word	0x66666666
   b4c8c:	400a6666 	.word	0x400a6666
   b4c90:	40140000 	.word	0x40140000
   b4c94:	40590000 	.word	0x40590000
   b4c98:	447a0000 	.word	0x447a0000
   b4c9c:	c176978d 	.word	0xc176978d
   b4ca0:	41027a78 	.word	0x41027a78
   b4ca4:	00000000 	.word	0x00000000

000b4ca8 <_Z16convert_from_rmsf>:
const float convert_from_rms(const float rms) {
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	ee10 0a10 	vmov	r0, s0
    return (v * 5.0 / 3.3) / 100.0;
   b4cae:	f7ff fb1b 	bl	b42e8 <__aeabi_f2d>
   b4cb2:	4b13      	ldr	r3, [pc, #76]	; (b4d00 <_Z16convert_from_rmsf+0x58>)
   b4cb4:	2200      	movs	r2, #0
   b4cb6:	f7ff fb6f 	bl	b4398 <__aeabi_dmul>
   b4cba:	a30f      	add	r3, pc, #60	; (adr r3, b4cf8 <_Z16convert_from_rmsf+0x50>)
   b4cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cc0:	f7ff fc94 	bl	b45ec <__aeabi_ddiv>
   b4cc4:	4b0f      	ldr	r3, [pc, #60]	; (b4d04 <_Z16convert_from_rmsf+0x5c>)
   b4cc6:	2200      	movs	r2, #0
   b4cc8:	f7ff fc90 	bl	b45ec <__aeabi_ddiv>
   b4ccc:	f7ff fe5c 	bl	b4988 <__aeabi_d2f>
   b4cd0:	eddf 7a0d 	vldr	s15, [pc, #52]	; b4d08 <_Z16convert_from_rmsf+0x60>
   b4cd4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; b4d0c <_Z16convert_from_rmsf+0x64>
   b4cd8:	ee07 0a10 	vmov	s14, r0
   b4cdc:	eea7 0a27 	vfma.f32	s0, s14, s15
   b4ce0:	f002 ff10 	bl	b7b04 <log10f>
    return (log10(get_raw_voltage(rms)*1000 - b) + k)*10;
   b4ce4:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   b4ce8:	ee30 0a27 	vadd.f32	s0, s0, s15
}
   b4cec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   b4cf0:	ee20 0a27 	vmul.f32	s0, s0, s15
   b4cf4:	bd08      	pop	{r3, pc}
   b4cf6:	bf00      	nop
   b4cf8:	66666666 	.word	0x66666666
   b4cfc:	400a6666 	.word	0x400a6666
   b4d00:	40140000 	.word	0x40140000
   b4d04:	40590000 	.word	0x40590000
   b4d08:	447a0000 	.word	0x447a0000
   b4d0c:	c05786c2 	.word	0xc05786c2

000b4d10 <_Z14convert_to_luxf>:
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4d10:	eddf 7a0d 	vldr	s15, [pc, #52]	; b4d48 <_Z14convert_to_luxf+0x38>
   b4d14:	eec0 7a27 	vdiv.f32	s15, s0, s15
@brief  converts the voltage read on the ADC to the light-intensity
        according to the inverse transfer-function.
@param  the voltage in V,
@return the light-intensity in lux,
*/
const float convert_to_lux(const float v) {
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	ee17 0a90 	vmov	r0, s15
   b4d1e:	f7ff fae3 	bl	b42e8 <__aeabi_f2d>
   b4d22:	ed9f 1b07 	vldr	d1, [pc, #28]	; b4d40 <_Z14convert_to_luxf+0x30>
   b4d26:	ec41 0b10 	vmov	d0, r0, r1
   b4d2a:	f002 fda5 	bl	b7878 <pow>
   b4d2e:	ec51 0b10 	vmov	r0, r1, d0
    const float b = 2.4037;
    const float m = -0.5275;
    return pow(v/(exp(b)),1.0/m);
   b4d32:	f7ff fe29 	bl	b4988 <__aeabi_d2f>
}
   b4d36:	ee00 0a10 	vmov	s0, r0
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	f3af 8000 	nop.w
   b4d40:	e657d3c9 	.word	0xe657d3c9
   b4d44:	bffe54ed 	.word	0xbffe54ed
   b4d48:	4131064e 	.word	0x4131064e

000b4d4c <_Z15calibrate_lightf>:
@brief  calibrates and corrects the output of the transfer-function for the 
        light-sensor.
@param  the measured light-intensity in lux,
@return the calbirated light-intensity in lux,
*/
const float calibrate_light(const float measured) {
   b4d4c:	b508      	push	{r3, lr}
  { return __builtin_logf(__x); }
   b4d4e:	f002 fea3 	bl	b7a98 <logf>
    const float b = -0.2592;
    const float m = 1.0851;
    return exp((log(measured)-b)/m);
   b4d52:	eddf 7a06 	vldr	s15, [pc, #24]	; b4d6c <_Z15calibrate_lightf+0x20>
   b4d56:	ee30 0a27 	vadd.f32	s0, s0, s15
  { return __builtin_expf(__x); }
   b4d5a:	eddf 7a05 	vldr	s15, [pc, #20]	; b4d70 <_Z15calibrate_lightf+0x24>
}
   b4d5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4d62:	ee80 0a27 	vdiv.f32	s0, s0, s15
   b4d66:	f002 be59 	b.w	b7a1c <expf>
   b4d6a:	bf00      	nop
   b4d6c:	3e84b5dd 	.word	0x3e84b5dd
   b4d70:	3f8ae48f 	.word	0x3f8ae48f

000b4d74 <loop>:
void loop() {
   b4d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d78:	ed2d 8b04 	vpush	{d8-d9}
    sound_volts[1] = analogRead(sound_pin) * max_volt / 4096;
   b4d7c:	2013      	movs	r0, #19
void loop() {
   b4d7e:	b083      	sub	sp, #12
    sound_volts[1] = analogRead(sound_pin) * max_volt / 4096;
   b4d80:	f002 fba4 	bl	b74cc <analogRead>
   b4d84:	ee07 0a90 	vmov	s15, r0
   b4d88:	4ba0      	ldr	r3, [pc, #640]	; (b500c <loop+0x298>)
   b4d8a:	eddf 8aa1 	vldr	s17, [pc, #644]	; b5010 <loop+0x29c>
    sound_volts[0] += weights[0]*sound_volts[1] + weights[1]*sound_volts[0];
   b4d8e:	ed93 7a00 	vldr	s14, [r3]
    sound_volts[1] = analogRead(sound_pin) * max_volt / 4096;
   b4d92:	ed9f 8aa0 	vldr	s16, [pc, #640]	; b5014 <loop+0x2a0>
    if (sound_volts[1] > highest_volt)
   b4d96:	4fa0      	ldr	r7, [pc, #640]	; (b5018 <loop+0x2a4>)
    if (peak > highest_peak)
   b4d98:	4ca0      	ldr	r4, [pc, #640]	; (b501c <loop+0x2a8>)
    square_sum += (sound_volts[1] - mid_volt) * (sound_volts[1] - mid_volt);
   b4d9a:	4ea1      	ldr	r6, [pc, #644]	; (b5020 <loop+0x2ac>)
    light_volt += analogRead(light_pin) * max_volt / 4096;
   b4d9c:	4da1      	ldr	r5, [pc, #644]	; (b5024 <loop+0x2b0>)
    if (!watchdog) {
   b4d9e:	f8df 92bc 	ldr.w	r9, [pc, #700]	; b505c <loop+0x2e8>
    sound_volts[1] = analogRead(sound_pin) * max_volt / 4096;
   b4da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    sound_volts[0] += weights[0]*sound_volts[1] + weights[1]*sound_volts[0];
   b4da6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    sound_volts[1] = analogRead(sound_pin) * max_volt / 4096;
   b4daa:	ee67 7aa8 	vmul.f32	s15, s15, s17
    sound_volts[0] += weights[0]*sound_volts[1] + weights[1]*sound_volts[0];
   b4dae:	ee67 6a06 	vmul.f32	s13, s14, s12
    sound_volts[1] = analogRead(sound_pin) * max_volt / 4096;
   b4db2:	ee67 7a88 	vmul.f32	s15, s15, s16
    light_volt += analogRead(light_pin) * max_volt / 4096;
   b4db6:	2012      	movs	r0, #18
    sound_volts[0] += weights[0]*sound_volts[1] + weights[1]*sound_volts[0];
   b4db8:	eee7 6a86 	vfma.f32	s13, s15, s12
    sound_volts[1] = analogRead(sound_pin) * max_volt / 4096;
   b4dbc:	edc3 7a01 	vstr	s15, [r3, #4]
    sound_volts[0] += weights[0]*sound_volts[1] + weights[1]*sound_volts[0];
   b4dc0:	ee37 7a26 	vadd.f32	s14, s14, s13
    if (peak > highest_peak)
   b4dc4:	edd4 6a00 	vldr	s13, [r4]
    sound_volts[0] += weights[0]*sound_volts[1] + weights[1]*sound_volts[0];
   b4dc8:	ed83 7a00 	vstr	s14, [r3]
    if (sound_volts[1] > highest_volt)
   b4dcc:	ed97 7a00 	vldr	s14, [r7]
   b4dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
    peak = abs(sound_volts[1] - mid_volt);
   b4dd4:	ed9f 7a94 	vldr	s14, [pc, #592]	; b5028 <loop+0x2b4>
    if (sound_volts[1] > highest_volt)
   b4dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        highest_volt = sound_volts[1];
   b4ddc:	bfc8      	it	gt
   b4dde:	edc7 7a00 	vstrgt	s15, [r7]
    peak = abs(sound_volts[1] - mid_volt);
   b4de2:	ee77 7ac7 	vsub.f32	s15, s15, s14
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
   b4de6:	eeb0 7ae7 	vabs.f32	s14, s15
    if (peak > highest_peak)
   b4dea:	eef4 6ac7 	vcmpe.f32	s13, s14
   b4dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        highest_peak = peak;
   b4df2:	bf48      	it	mi
   b4df4:	ed84 7a00 	vstrmi	s14, [r4]
    square_sum += (sound_volts[1] - mid_volt) * (sound_volts[1] - mid_volt);
   b4df8:	ed96 7a00 	vldr	s14, [r6]
   b4dfc:	eea7 7aa7 	vfma.f32	s14, s15, s15
   b4e00:	ed86 7a00 	vstr	s14, [r6]
    light_volt += analogRead(light_pin) * max_volt / 4096;
   b4e04:	f002 fb62 	bl	b74cc <analogRead>
   b4e08:	ee07 0a90 	vmov	s15, r0
   b4e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4e10:	ed95 7a00 	vldr	s14, [r5]
    if (!watchdog) {
   b4e14:	f8b9 2000 	ldrh.w	r2, [r9]
    light_volt += analogRead(light_pin) * max_volt / 4096;
   b4e18:	ee67 7aa8 	vmul.f32	s15, s15, s17
   b4e1c:	eea7 7a88 	vfma.f32	s14, s15, s16
   b4e20:	ed85 7a00 	vstr	s14, [r5]
    if (!watchdog) {
   b4e24:	2a00      	cmp	r2, #0
   b4e26:	f040 80dc 	bne.w	b4fe2 <loop+0x26e>
        const float rms = sqrt(square_sum/UINT16_MAX);
   b4e2a:	ed96 0a00 	vldr	s0, [r6]
   b4e2e:	eddf 9a7f 	vldr	s19, [pc, #508]	; b502c <loop+0x2b8>
   b4e32:	9200      	str	r2, [sp, #0]
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b4e34:	ee80 0a29 	vdiv.f32	s0, s0, s19
   b4e38:	f002 fe9a 	bl	b7b70 <sqrtf>
        digitalWrite(trigger_pin, LOW);
   b4e3c:	9a00      	ldr	r2, [sp, #0]
        sound_value = calibrate_sound(convert_from_peak(highest_peak));
   b4e3e:	f8df b220 	ldr.w	fp, [pc, #544]	; b5060 <loop+0x2ec>
        light_value = calibrate_light(convert_to_lux(light_volt/UINT16_MAX));
   b4e42:	f8df 8220 	ldr.w	r8, [pc, #544]	; b5064 <loop+0x2f0>
        distance_value = calibrate_distance(mm);
   b4e46:	f8df a220 	ldr.w	sl, [pc, #544]	; b5068 <loop+0x2f4>
        digitalWrite(trigger_pin, LOW);
   b4e4a:	4611      	mov	r1, r2
   b4e4c:	2007      	movs	r0, #7
   b4e4e:	eeb0 8a40 	vmov.f32	s16, s0
   b4e52:	f002 fb22 	bl	b749a <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4e56:	2002      	movs	r0, #2
   b4e58:	f000 fa00 	bl	b525c <HAL_Delay_Microseconds>
        digitalWrite(trigger_pin, HIGH);
   b4e5c:	2101      	movs	r1, #1
   b4e5e:	2007      	movs	r0, #7
   b4e60:	f002 fb1b 	bl	b749a <digitalWrite>
   b4e64:	2005      	movs	r0, #5
   b4e66:	f000 f9f9 	bl	b525c <HAL_Delay_Microseconds>
        digitalWrite(trigger_pin, LOW);
   b4e6a:	9a00      	ldr	r2, [sp, #0]
   b4e6c:	9201      	str	r2, [sp, #4]
   b4e6e:	4611      	mov	r1, r2
   b4e70:	2007      	movs	r0, #7
   b4e72:	f002 fb12 	bl	b749a <digitalWrite>
        lag = pulseIn(echo_pin, HIGH);
   b4e76:	2101      	movs	r1, #1
   b4e78:	2008      	movs	r0, #8
   b4e7a:	f002 fb64 	bl	b7546 <pulseIn>
        sound_value = calibrate_sound(convert_from_peak(highest_peak));
   b4e7e:	ed94 0a00 	vldr	s0, [r4]
        lag = pulseIn(echo_pin, HIGH);
   b4e82:	9000      	str	r0, [sp, #0]
        sound_value = calibrate_sound(convert_from_peak(highest_peak));
   b4e84:	f7ff fed4 	bl	b4c30 <_Z17convert_from_peakf>
@return the calbirated sound-intensity in dBA,
*/
const float calibrate_sound(const float measured) {
    const float b = 72.783;
    const float m = 0.2689;
    return (measured-b)/m;
   b4e88:	ed9f 9a69 	vldr	s18, [pc, #420]	; b5030 <loop+0x2bc>
   b4e8c:	eddf 8a69 	vldr	s17, [pc, #420]	; b5034 <loop+0x2c0>
   b4e90:	ee30 0a49 	vsub.f32	s0, s0, s18
   b4e94:	eec0 7a28 	vdiv.f32	s15, s0, s17
        light_value = calibrate_light(convert_to_lux(light_volt/UINT16_MAX));
   b4e98:	ed95 0a00 	vldr	s0, [r5]
        sound_value = calibrate_sound(convert_from_peak(highest_peak));
   b4e9c:	edcb 7a00 	vstr	s15, [fp]
        light_value = calibrate_light(convert_to_lux(light_volt/UINT16_MAX));
   b4ea0:	ee80 0a29 	vdiv.f32	s0, s0, s19
   b4ea4:	f7ff ff34 	bl	b4d10 <_Z14convert_to_luxf>
   b4ea8:	f7ff ff50 	bl	b4d4c <_Z15calibrate_lightf>
        mm = lag * 343 / 2 / 1000;
   b4eac:	9800      	ldr	r0, [sp, #0]
   b4eae:	f240 1357 	movw	r3, #343	; 0x157
   b4eb2:	4358      	muls	r0, r3
   b4eb4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b4eb8:	fbb0 f0f3 	udiv	r0, r0, r3
        distance_value = calibrate_distance(mm);
   b4ebc:	ee07 0a90 	vmov	s15, r0
@return the calbirated distance in mm,
*/
const float calibrate_distance(const float measured) {
    const float b = -15.571;
    const float m = 0.9971;
    return (measured-b)/m;
   b4ec0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; b5038 <loop+0x2c4>
   b4ec4:	eddf 6a5d 	vldr	s13, [pc, #372]	; b503c <loop+0x2c8>
        light_value = calibrate_light(convert_to_lux(light_volt/UINT16_MAX));
   b4ec8:	ed88 0a00 	vstr	s0, [r8]
        distance_value = calibrate_distance(mm);
   b4ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return (measured-b)/m;
   b4ed0:	ee77 7a87 	vadd.f32	s15, s15, s14
   b4ed4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        distance_value = calibrate_distance(mm);
   b4ed8:	ed8a 7a00 	vstr	s14, [sl]
        Serial.print(highest_volt);                     Serial.print(",\t");
   b4edc:	f002 f8dc 	bl	b7098 <_Z16_fetch_usbserialv>
   b4ee0:	ed97 0a00 	vldr	s0, [r7]
   b4ee4:	2102      	movs	r1, #2
   b4ee6:	f001 ff39 	bl	b6d5c <_ZN5Print5printEfi>
   b4eea:	f002 f8d5 	bl	b7098 <_Z16_fetch_usbserialv>
   b4eee:	4954      	ldr	r1, [pc, #336]	; (b5040 <loop+0x2cc>)
   b4ef0:	f001 fe30 	bl	b6b54 <_ZN5Print5printEPKc>
        Serial.print(highest_peak);                     Serial.print(",\t");
   b4ef4:	f002 f8d0 	bl	b7098 <_Z16_fetch_usbserialv>
   b4ef8:	ed94 0a00 	vldr	s0, [r4]
   b4efc:	2102      	movs	r1, #2
   b4efe:	f001 ff2d 	bl	b6d5c <_ZN5Print5printEfi>
   b4f02:	f002 f8c9 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f06:	494e      	ldr	r1, [pc, #312]	; (b5040 <loop+0x2cc>)
   b4f08:	f001 fe24 	bl	b6b54 <_ZN5Print5printEPKc>
        Serial.print(rms);                              Serial.print(",\t");
   b4f0c:	f002 f8c4 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f10:	eeb0 0a48 	vmov.f32	s0, s16
   b4f14:	2102      	movs	r1, #2
   b4f16:	f001 ff21 	bl	b6d5c <_ZN5Print5printEfi>
   b4f1a:	f002 f8bd 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f1e:	4948      	ldr	r1, [pc, #288]	; (b5040 <loop+0x2cc>)
   b4f20:	f001 fe18 	bl	b6b54 <_ZN5Print5printEPKc>
        Serial.print(sound_value);                      Serial.print(",\t");
   b4f24:	f002 f8b8 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f28:	ed9b 0a00 	vldr	s0, [fp]
   b4f2c:	2102      	movs	r1, #2
   b4f2e:	f001 ff15 	bl	b6d5c <_ZN5Print5printEfi>
   b4f32:	f002 f8b1 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f36:	4942      	ldr	r1, [pc, #264]	; (b5040 <loop+0x2cc>)
   b4f38:	f001 fe0c 	bl	b6b54 <_ZN5Print5printEPKc>
        Serial.print(calibrate_sound(convert_from_rms(rms)));
   b4f3c:	f002 f8ac 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f40:	eeb0 0a48 	vmov.f32	s0, s16
   b4f44:	9000      	str	r0, [sp, #0]
   b4f46:	f7ff feaf 	bl	b4ca8 <_Z16convert_from_rmsf>
    return (measured-b)/m;
   b4f4a:	ee30 0a49 	vsub.f32	s0, s0, s18
        Serial.print(calibrate_sound(convert_from_rms(rms)));
   b4f4e:	2102      	movs	r1, #2
   b4f50:	ee80 0a28 	vdiv.f32	s0, s0, s17
   b4f54:	9800      	ldr	r0, [sp, #0]
   b4f56:	f001 ff01 	bl	b6d5c <_ZN5Print5printEfi>
        Serial.print(",\t");
   b4f5a:	f002 f89d 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f5e:	4938      	ldr	r1, [pc, #224]	; (b5040 <loop+0x2cc>)
   b4f60:	f001 fdf8 	bl	b6b54 <_ZN5Print5printEPKc>
        Serial.print(light_value);                      Serial.print(",\t");
   b4f64:	f002 f898 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f68:	ed98 0a00 	vldr	s0, [r8]
   b4f6c:	2102      	movs	r1, #2
   b4f6e:	f001 fef5 	bl	b6d5c <_ZN5Print5printEfi>
   b4f72:	f002 f891 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f76:	4932      	ldr	r1, [pc, #200]	; (b5040 <loop+0x2cc>)
   b4f78:	f001 fdec 	bl	b6b54 <_ZN5Print5printEPKc>
        Serial.print(distance_value);                   Serial.print("\r\n");
   b4f7c:	f002 f88c 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f80:	ed9a 0a00 	vldr	s0, [sl]
   b4f84:	2102      	movs	r1, #2
   b4f86:	f001 fee9 	bl	b6d5c <_ZN5Print5printEfi>
   b4f8a:	f002 f885 	bl	b7098 <_Z16_fetch_usbserialv>
   b4f8e:	492d      	ldr	r1, [pc, #180]	; (b5044 <loop+0x2d0>)
   b4f90:	f001 fde0 	bl	b6b54 <_ZN5Print5printEPKc>
        if (BLE.connected()) {
   b4f94:	f000 ff4a 	bl	b5e2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f98:	f000 ffb0 	bl	b5efc <_ZNK8particle14BleLocalDevice9connectedEv>
   b4f9c:	9a01      	ldr	r2, [sp, #4]
   b4f9e:	b170      	cbz	r0, b4fbe <loop+0x24a>
            light_characteristic.setValue(light_value);
   b4fa0:	4829      	ldr	r0, [pc, #164]	; (b5048 <loop+0x2d4>)
   b4fa2:	9200      	str	r2, [sp, #0]
   b4fa4:	4641      	mov	r1, r8
   b4fa6:	f7ff fd9a 	bl	b4ade <_ZN8particle17BleCharacteristic8setValueIfEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
            sound_characteristic.setValue(sound_value);
   b4faa:	9a00      	ldr	r2, [sp, #0]
   b4fac:	4827      	ldr	r0, [pc, #156]	; (b504c <loop+0x2d8>)
   b4fae:	4659      	mov	r1, fp
   b4fb0:	f7ff fd95 	bl	b4ade <_ZN8particle17BleCharacteristic8setValueIfEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
            distance_characteristic.setValue(distance_value);
   b4fb4:	9a00      	ldr	r2, [sp, #0]
   b4fb6:	4826      	ldr	r0, [pc, #152]	; (b5050 <loop+0x2dc>)
   b4fb8:	4651      	mov	r1, sl
   b4fba:	f7ff fd90 	bl	b4ade <_ZN8particle17BleCharacteristic8setValueIfEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
        if (light_value < 200)
   b4fbe:	edd8 7a00 	vldr	s15, [r8]
   b4fc2:	ed9f 7a24 	vldr	s14, [pc, #144]	; b5054 <loop+0x2e0>
   b4fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fce:	d512      	bpl.n	b4ff6 <loop+0x282>
            analogWrite(led_pin, 255); // 100 %
   b4fd0:	21ff      	movs	r1, #255	; 0xff
            analogWrite(led_pin, 128); // 50 %
   b4fd2:	2002      	movs	r0, #2
   b4fd4:	f002 fa91 	bl	b74fa <_Z11analogWritetm>
        highest_volt = 0.0;
   b4fd8:	2300      	movs	r3, #0
   b4fda:	603b      	str	r3, [r7, #0]
        highest_peak = 0.0;
   b4fdc:	6023      	str	r3, [r4, #0]
        square_sum = 0.0;
   b4fde:	6033      	str	r3, [r6, #0]
        light_volt = 0.0;
   b4fe0:	602b      	str	r3, [r5, #0]
    watchdog++;
   b4fe2:	f8b9 3000 	ldrh.w	r3, [r9]
   b4fe6:	3301      	adds	r3, #1
   b4fe8:	f8a9 3000 	strh.w	r3, [r9]
}
   b4fec:	b003      	add	sp, #12
   b4fee:	ecbd 8b04 	vpop	{d8-d9}
   b4ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (light_value < 400)
   b4ff6:	ed9f 7a18 	vldr	s14, [pc, #96]	; b5058 <loop+0x2e4>
   b4ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            analogWrite(led_pin, 192); // 75 %
   b5002:	bf4c      	ite	mi
   b5004:	21c0      	movmi	r1, #192	; 0xc0
            analogWrite(led_pin, 128); // 50 %
   b5006:	2180      	movpl	r1, #128	; 0x80
   b5008:	e7e3      	b.n	b4fd2 <loop+0x25e>
   b500a:	bf00      	nop
   b500c:	2003e664 	.word	0x2003e664
   b5010:	40533333 	.word	0x40533333
   b5014:	39800000 	.word	0x39800000
   b5018:	2003e670 	.word	0x2003e670
   b501c:	2003e66c 	.word	0x2003e66c
   b5020:	2003e660 	.word	0x2003e660
   b5024:	2003e65c 	.word	0x2003e65c
   b5028:	3fd33333 	.word	0x3fd33333
   b502c:	477fff00 	.word	0x477fff00
   b5030:	429190e5 	.word	0x429190e5
   b5034:	3e89ad43 	.word	0x3e89ad43
   b5038:	417922d1 	.word	0x417922d1
   b503c:	3f7f41f2 	.word	0x3f7f41f2
   b5040:	000b921b 	.word	0x000b921b
   b5044:	000b921e 	.word	0x000b921e
   b5048:	2003e680 	.word	0x2003e680
   b504c:	2003e6a0 	.word	0x2003e6a0
   b5050:	2003e674 	.word	0x2003e674
   b5054:	43480000 	.word	0x43480000
   b5058:	43c80000 	.word	0x43c80000
   b505c:	2003e658 	.word	0x2003e658
   b5060:	2003e6a8 	.word	0x2003e6a8
   b5064:	2003e688 	.word	0x2003e688
   b5068:	2003e67c 	.word	0x2003e67c

000b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b506c:	b082      	sub	sp, #8
   b506e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5070:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b5072:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5074:	9315      	str	r3, [sp, #84]	; 0x54
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b5076:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5078:	e9c0 3300 	strd	r3, r3, [r0]
   b507c:	4606      	mov	r6, r0
   b507e:	4694      	mov	ip, r2
   b5080:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b5082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5084:	ac04      	add	r4, sp, #16
   b5086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5088:	682b      	ldr	r3, [r5, #0]
   b508a:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b508c:	ad1a      	add	r5, sp, #104	; 0x68
   b508e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5090:	ac09      	add	r4, sp, #36	; 0x24
   b5092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5094:	682b      	ldr	r3, [r5, #0]
   b5096:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5098:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b509a:	9302      	str	r3, [sp, #8]
   b509c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b509e:	9301      	str	r3, [sp, #4]
   b50a0:	ab09      	add	r3, sp, #36	; 0x24
   b50a2:	9300      	str	r3, [sp, #0]
   b50a4:	4630      	mov	r0, r6
   b50a6:	ab04      	add	r3, sp, #16
   b50a8:	4662      	mov	r2, ip
   b50aa:	4639      	mov	r1, r7
   b50ac:	f001 faf0 	bl	b6690 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b50b0:	4630      	mov	r0, r6
   b50b2:	b00f      	add	sp, #60	; 0x3c
   b50b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b50b8:	b002      	add	sp, #8
   b50ba:	4770      	bx	lr

000b50bc <_GLOBAL__sub_I_SystemMode>:
   b50bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b50c0:	4b31      	ldr	r3, [pc, #196]	; (b5188 <_GLOBAL__sub_I_SystemMode+0xcc>)
    SleepResult() {}
   b50c2:	4a32      	ldr	r2, [pc, #200]	; (b518c <_GLOBAL__sub_I_SystemMode+0xd0>)
   b50c4:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b50c6:	2700      	movs	r7, #0
   b50c8:	b092      	sub	sp, #72	; 0x48
   b50ca:	e9c3 7700 	strd	r7, r7, [r3]
BleUuid node_two_service(0xc1a7);
   b50ce:	4d30      	ldr	r5, [pc, #192]	; (b5190 <_GLOBAL__sub_I_SystemMode+0xd4>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b50d0:	2003      	movs	r0, #3
   b50d2:	f000 fa45 	bl	b5560 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b50d6:	4639      	mov	r1, r7
   b50d8:	2001      	movs	r0, #1
   b50da:	f000 fa51 	bl	b5580 <system_thread_set_state>
BleUuid node_two_service(0xc1a7);
   b50de:	f24c 11a7 	movw	r1, #49575	; 0xc1a7
   b50e2:	4628      	mov	r0, r5
   b50e4:	f000 fd0f 	bl	b5b06 <_ZN8particle7BleUuidC1Et>
    BleUuid(0x2afb),                    // illuminance
   b50e8:	f642 21fb 	movw	r1, #11003	; 0x2afb
   b50ec:	a80d      	add	r0, sp, #52	; 0x34
   b50ee:	f000 fd0a 	bl	b5b06 <_ZN8particle7BleUuidC1Et>
);
   b50f2:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
   b50f6:	462e      	mov	r6, r5
   b50f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b50fa:	f04f 0810 	mov.w	r8, #16
   b50fe:	eb0d 0408 	add.w	r4, sp, r8
   b5102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5104:	6833      	ldr	r3, [r6, #0]
   b5106:	6023      	str	r3, [r4, #0]
   b5108:	ac0e      	add	r4, sp, #56	; 0x38
   b510a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b510e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b5114:	491f      	ldr	r1, [pc, #124]	; (b5194 <_GLOBAL__sub_I_SystemMode+0xd8>)
   b5116:	4820      	ldr	r0, [pc, #128]	; (b5198 <_GLOBAL__sub_I_SystemMode+0xdc>)
   b5118:	4642      	mov	r2, r8
   b511a:	f7ff ffa7 	bl	b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
    BleUuid(0x2b83),                    // audio output description
   b511e:	f642 3183 	movw	r1, #11139	; 0x2b83
   b5122:	a80d      	add	r0, sp, #52	; 0x34
   b5124:	f000 fcef 	bl	b5b06 <_ZN8particle7BleUuidC1Et>
); // Could not find a better UUID.
   b5128:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
   b512c:	46ae      	mov	lr, r5
   b512e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5132:	eb0d 0c08 	add.w	ip, sp, r8
   b5136:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b513a:	6833      	ldr	r3, [r6, #0]
   b513c:	f8cc 3000 	str.w	r3, [ip]
   b5140:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b5144:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b514a:	4914      	ldr	r1, [pc, #80]	; (b519c <_GLOBAL__sub_I_SystemMode+0xe0>)
   b514c:	4814      	ldr	r0, [pc, #80]	; (b51a0 <_GLOBAL__sub_I_SystemMode+0xe4>)
   b514e:	4642      	mov	r2, r8
   b5150:	f7ff ff8c 	bl	b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
    BleUuid(0x2701),                    // distance (arbitrary)
   b5154:	f242 7101 	movw	r1, #9985	; 0x2701
   b5158:	a80d      	add	r0, sp, #52	; 0x34
   b515a:	f000 fcd4 	bl	b5b06 <_ZN8particle7BleUuidC1Et>
);
   b515e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5160:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
   b5164:	eb0d 0708 	add.w	r7, sp, r8
   b5168:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b516a:	6833      	ldr	r3, [r6, #0]
   b516c:	603b      	str	r3, [r7, #0]
   b516e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b5172:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b5178:	490a      	ldr	r1, [pc, #40]	; (b51a4 <_GLOBAL__sub_I_SystemMode+0xe8>)
   b517a:	480b      	ldr	r0, [pc, #44]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0xec>)
   b517c:	4642      	mov	r2, r8
   b517e:	f7ff ff75 	bl	b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b5182:	b012      	add	sp, #72	; 0x48
   b5184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5188:	2003e64c 	.word	0x2003e64c
   b518c:	ffff0000 	.word	0xffff0000
   b5190:	2003e68c 	.word	0x2003e68c
   b5194:	000b9221 	.word	0x000b9221
   b5198:	2003e680 	.word	0x2003e680
   b519c:	000b9227 	.word	0x000b9227
   b51a0:	2003e6a0 	.word	0x2003e6a0
   b51a4:	000b922d 	.word	0x000b922d
   b51a8:	2003e674 	.word	0x2003e674

000b51ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b51ac:	b508      	push	{r3, lr}
   b51ae:	4b02      	ldr	r3, [pc, #8]	; (b51b8 <netdb_freeaddrinfo+0xc>)
   b51b0:	681b      	ldr	r3, [r3, #0]
   b51b2:	689b      	ldr	r3, [r3, #8]
   b51b4:	9301      	str	r3, [sp, #4]
   b51b6:	bd08      	pop	{r3, pc}
   b51b8:	00030268 	.word	0x00030268

000b51bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b51bc:	b508      	push	{r3, lr}
   b51be:	4b02      	ldr	r3, [pc, #8]	; (b51c8 <netdb_getaddrinfo+0xc>)
   b51c0:	681b      	ldr	r3, [r3, #0]
   b51c2:	68db      	ldr	r3, [r3, #12]
   b51c4:	9301      	str	r3, [sp, #4]
   b51c6:	bd08      	pop	{r3, pc}
   b51c8:	00030268 	.word	0x00030268

000b51cc <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b51cc:	b508      	push	{r3, lr}
   b51ce:	4b02      	ldr	r3, [pc, #8]	; (b51d8 <hal_pin_validate_function+0xc>)
   b51d0:	681b      	ldr	r3, [r3, #0]
   b51d2:	685b      	ldr	r3, [r3, #4]
   b51d4:	9301      	str	r3, [sp, #4]
   b51d6:	bd08      	pop	{r3, pc}
   b51d8:	0003022c 	.word	0x0003022c

000b51dc <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b51dc:	b508      	push	{r3, lr}
   b51de:	4b02      	ldr	r3, [pc, #8]	; (b51e8 <hal_gpio_mode+0xc>)
   b51e0:	681b      	ldr	r3, [r3, #0]
   b51e2:	689b      	ldr	r3, [r3, #8]
   b51e4:	9301      	str	r3, [sp, #4]
   b51e6:	bd08      	pop	{r3, pc}
   b51e8:	0003022c 	.word	0x0003022c

000b51ec <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b51ec:	b508      	push	{r3, lr}
   b51ee:	4b02      	ldr	r3, [pc, #8]	; (b51f8 <hal_gpio_get_mode+0xc>)
   b51f0:	681b      	ldr	r3, [r3, #0]
   b51f2:	68db      	ldr	r3, [r3, #12]
   b51f4:	9301      	str	r3, [sp, #4]
   b51f6:	bd08      	pop	{r3, pc}
   b51f8:	0003022c 	.word	0x0003022c

000b51fc <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b51fc:	b508      	push	{r3, lr}
   b51fe:	4b02      	ldr	r3, [pc, #8]	; (b5208 <hal_gpio_write+0xc>)
   b5200:	681b      	ldr	r3, [r3, #0]
   b5202:	691b      	ldr	r3, [r3, #16]
   b5204:	9301      	str	r3, [sp, #4]
   b5206:	bd08      	pop	{r3, pc}
   b5208:	0003022c 	.word	0x0003022c

000b520c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b520c:	b508      	push	{r3, lr}
   b520e:	4b02      	ldr	r3, [pc, #8]	; (b5218 <HAL_DAC_Write+0xc>)
   b5210:	681b      	ldr	r3, [r3, #0]
   b5212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5214:	9301      	str	r3, [sp, #4]
   b5216:	bd08      	pop	{r3, pc}
   b5218:	0003022c 	.word	0x0003022c

000b521c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b521c:	b508      	push	{r3, lr}
   b521e:	4b02      	ldr	r3, [pc, #8]	; (b5228 <hal_adc_read+0xc>)
   b5220:	681b      	ldr	r3, [r3, #0]
   b5222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5224:	9301      	str	r3, [sp, #4]
   b5226:	bd08      	pop	{r3, pc}
   b5228:	0003022c 	.word	0x0003022c

000b522c <hal_gpio_pulse_in>:

DYNALIB_FN(16, hal_gpio, hal_interrupt_set_system_handler, uint8_t(hal_irq_t, const hal_interrupt_callback_t*, hal_interrupt_callback_t*, void*))
DYNALIB_FN(17, hal_gpio, hal_interrupt_get_system_handler, uint8_t(hal_irq_t, hal_interrupt_callback_t*, void*))
DYNALIB_FN(18, hal_gpio, hal_interrupt_trigger_system, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, hal_gpio_pulse_in, uint32_t(hal_pin_t, uint16_t))
   b522c:	b508      	push	{r3, lr}
   b522e:	4b02      	ldr	r3, [pc, #8]	; (b5238 <hal_gpio_pulse_in+0xc>)
   b5230:	681b      	ldr	r3, [r3, #0]
   b5232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5234:	9301      	str	r3, [sp, #4]
   b5236:	bd08      	pop	{r3, pc}
   b5238:	0003022c 	.word	0x0003022c

000b523c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b523c:	b508      	push	{r3, lr}
   b523e:	4b02      	ldr	r3, [pc, #8]	; (b5248 <hal_pwm_write_ext+0xc>)
   b5240:	681b      	ldr	r3, [r3, #0]
   b5242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b5244:	9301      	str	r3, [sp, #4]
   b5246:	bd08      	pop	{r3, pc}
   b5248:	0003022c 	.word	0x0003022c

000b524c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b524c:	b508      	push	{r3, lr}
   b524e:	4b02      	ldr	r3, [pc, #8]	; (b5258 <HAL_RNG_GetRandomNumber+0xc>)
   b5250:	681b      	ldr	r3, [r3, #0]
   b5252:	685b      	ldr	r3, [r3, #4]
   b5254:	9301      	str	r3, [sp, #4]
   b5256:	bd08      	pop	{r3, pc}
   b5258:	00030218 	.word	0x00030218

000b525c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b525c:	b508      	push	{r3, lr}
   b525e:	4b02      	ldr	r3, [pc, #8]	; (b5268 <HAL_Delay_Microseconds+0xc>)
   b5260:	681b      	ldr	r3, [r3, #0]
   b5262:	68db      	ldr	r3, [r3, #12]
   b5264:	9301      	str	r3, [sp, #4]
   b5266:	bd08      	pop	{r3, pc}
   b5268:	00030218 	.word	0x00030218

000b526c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b526c:	b508      	push	{r3, lr}
   b526e:	4b02      	ldr	r3, [pc, #8]	; (b5278 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5270:	681b      	ldr	r3, [r3, #0]
   b5272:	695b      	ldr	r3, [r3, #20]
   b5274:	9301      	str	r3, [sp, #4]
   b5276:	bd08      	pop	{r3, pc}
   b5278:	00030218 	.word	0x00030218

000b527c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b527c:	b508      	push	{r3, lr}
   b527e:	4b02      	ldr	r3, [pc, #8]	; (b5288 <hal_ble_stack_init+0xc>)
   b5280:	681b      	ldr	r3, [r3, #0]
   b5282:	689b      	ldr	r3, [r3, #8]
   b5284:	9301      	str	r3, [sp, #4]
   b5286:	bd08      	pop	{r3, pc}
   b5288:	00030278 	.word	0x00030278

000b528c <hal_ble_gap_set_device_name>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
DYNALIB_FN(8, hal_ble, hal_ble_gap_set_device_name, int(const char*, size_t, void*))
   b528c:	b508      	push	{r3, lr}
   b528e:	4b02      	ldr	r3, [pc, #8]	; (b5298 <hal_ble_gap_set_device_name+0xc>)
   b5290:	681b      	ldr	r3, [r3, #0]
   b5292:	6a1b      	ldr	r3, [r3, #32]
   b5294:	9301      	str	r3, [sp, #4]
   b5296:	bd08      	pop	{r3, pc}
   b5298:	00030278 	.word	0x00030278

000b529c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b529c:	b508      	push	{r3, lr}
   b529e:	4b02      	ldr	r3, [pc, #8]	; (b52a8 <hal_ble_gap_set_advertising_data+0xc>)
   b52a0:	681b      	ldr	r3, [r3, #0]
   b52a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	bd08      	pop	{r3, pc}
   b52a8:	00030278 	.word	0x00030278

000b52ac <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b52ac:	b508      	push	{r3, lr}
   b52ae:	4b02      	ldr	r3, [pc, #8]	; (b52b8 <hal_ble_gap_set_scan_response_data+0xc>)
   b52b0:	681b      	ldr	r3, [r3, #0]
   b52b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b52b4:	9301      	str	r3, [sp, #4]
   b52b6:	bd08      	pop	{r3, pc}
   b52b8:	00030278 	.word	0x00030278

000b52bc <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b52bc:	b508      	push	{r3, lr}
   b52be:	4b02      	ldr	r3, [pc, #8]	; (b52c8 <hal_ble_gap_start_advertising+0xc>)
   b52c0:	681b      	ldr	r3, [r3, #0]
   b52c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b52c4:	9301      	str	r3, [sp, #4]
   b52c6:	bd08      	pop	{r3, pc}
   b52c8:	00030278 	.word	0x00030278

000b52cc <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b52cc:	b508      	push	{r3, lr}
   b52ce:	4b03      	ldr	r3, [pc, #12]	; (b52dc <hal_ble_gap_disconnect+0x10>)
   b52d0:	681b      	ldr	r3, [r3, #0]
   b52d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b52d6:	9301      	str	r3, [sp, #4]
   b52d8:	bd08      	pop	{r3, pc}
   b52da:	0000      	.short	0x0000
   b52dc:	00030278 	.word	0x00030278

000b52e0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b52e0:	b508      	push	{r3, lr}
   b52e2:	4b03      	ldr	r3, [pc, #12]	; (b52f0 <hal_ble_gatt_server_add_service+0x10>)
   b52e4:	681b      	ldr	r3, [r3, #0]
   b52e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b52ea:	9301      	str	r3, [sp, #4]
   b52ec:	bd08      	pop	{r3, pc}
   b52ee:	0000      	.short	0x0000
   b52f0:	00030278 	.word	0x00030278

000b52f4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b52f4:	b508      	push	{r3, lr}
   b52f6:	4b03      	ldr	r3, [pc, #12]	; (b5304 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b52f8:	681b      	ldr	r3, [r3, #0]
   b52fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b52fe:	9301      	str	r3, [sp, #4]
   b5300:	bd08      	pop	{r3, pc}
   b5302:	0000      	.short	0x0000
   b5304:	00030278 	.word	0x00030278

000b5308 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5308:	b508      	push	{r3, lr}
   b530a:	4b03      	ldr	r3, [pc, #12]	; (b5318 <hal_ble_gatt_client_write_with_response+0x10>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5312:	9301      	str	r3, [sp, #4]
   b5314:	bd08      	pop	{r3, pc}
   b5316:	0000      	.short	0x0000
   b5318:	00030278 	.word	0x00030278

000b531c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b531c:	b508      	push	{r3, lr}
   b531e:	4b03      	ldr	r3, [pc, #12]	; (b532c <hal_ble_gatt_client_write_without_response+0x10>)
   b5320:	681b      	ldr	r3, [r3, #0]
   b5322:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b5326:	9301      	str	r3, [sp, #4]
   b5328:	bd08      	pop	{r3, pc}
   b532a:	0000      	.short	0x0000
   b532c:	00030278 	.word	0x00030278

000b5330 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5330:	b508      	push	{r3, lr}
   b5332:	4b03      	ldr	r3, [pc, #12]	; (b5340 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5334:	681b      	ldr	r3, [r3, #0]
   b5336:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b533a:	9301      	str	r3, [sp, #4]
   b533c:	bd08      	pop	{r3, pc}
   b533e:	0000      	.short	0x0000
   b5340:	00030278 	.word	0x00030278

000b5344 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5344:	b508      	push	{r3, lr}
   b5346:	4b03      	ldr	r3, [pc, #12]	; (b5354 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5348:	681b      	ldr	r3, [r3, #0]
   b534a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b534e:	9301      	str	r3, [sp, #4]
   b5350:	bd08      	pop	{r3, pc}
   b5352:	0000      	.short	0x0000
   b5354:	00030278 	.word	0x00030278

000b5358 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5358:	b508      	push	{r3, lr}
   b535a:	4b03      	ldr	r3, [pc, #12]	; (b5368 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b535c:	681b      	ldr	r3, [r3, #0]
   b535e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5362:	9301      	str	r3, [sp, #4]
   b5364:	bd08      	pop	{r3, pc}
   b5366:	0000      	.short	0x0000
   b5368:	00030278 	.word	0x00030278

000b536c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b536c:	b508      	push	{r3, lr}
   b536e:	4b03      	ldr	r3, [pc, #12]	; (b537c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5370:	681b      	ldr	r3, [r3, #0]
   b5372:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5376:	9301      	str	r3, [sp, #4]
   b5378:	bd08      	pop	{r3, pc}
   b537a:	0000      	.short	0x0000
   b537c:	00030278 	.word	0x00030278

000b5380 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <os_mutex_recursive_create+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	00030248 	.word	0x00030248

000b5390 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <os_mutex_recursive_lock+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	00030248 	.word	0x00030248

000b53a0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <os_mutex_recursive_unlock+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	00030248 	.word	0x00030248

000b53b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <inet_inet_ntop+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	695b      	ldr	r3, [r3, #20]
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	00030264 	.word	0x00030264

000b53c0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <hal_usart_write+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	68db      	ldr	r3, [r3, #12]
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	0003023c 	.word	0x0003023c

000b53d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <hal_usart_available+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	691b      	ldr	r3, [r3, #16]
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	0003023c 	.word	0x0003023c

000b53e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <hal_usart_read+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	695b      	ldr	r3, [r3, #20]
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	0003023c 	.word	0x0003023c

000b53f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <hal_usart_peek+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	699b      	ldr	r3, [r3, #24]
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	0003023c 	.word	0x0003023c

000b5400 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <hal_usart_flush+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	69db      	ldr	r3, [r3, #28]
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	0003023c 	.word	0x0003023c

000b5410 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <hal_usart_is_enabled+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	6a1b      	ldr	r3, [r3, #32]
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	0003023c 	.word	0x0003023c

000b5420 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <hal_usart_available_data_for_write+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	0003023c 	.word	0x0003023c

000b5430 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <hal_usart_init_ex+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	0003023c 	.word	0x0003023c

000b5440 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <hal_i2c_write+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	6a1b      	ldr	r3, [r3, #32]
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	00030228 	.word	0x00030228

000b5450 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <hal_i2c_available+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	00030228 	.word	0x00030228

000b5460 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <hal_i2c_read+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	00030228 	.word	0x00030228

000b5470 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <hal_i2c_peek+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	00030228 	.word	0x00030228

000b5480 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <hal_i2c_flush+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	00030228 	.word	0x00030228

000b5490 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <hal_i2c_is_enabled+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	00030228 	.word	0x00030228

000b54a0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <hal_i2c_init+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	00030228 	.word	0x00030228

000b54b0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <hal_spi_init+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	69db      	ldr	r3, [r3, #28]
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	00030230 	.word	0x00030230

000b54c0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <hal_spi_is_enabled+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	6a1b      	ldr	r3, [r3, #32]
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	00030230 	.word	0x00030230

000b54d0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <HAL_USB_USART_Init+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	681b      	ldr	r3, [r3, #0]
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	0003024c 	.word	0x0003024c

000b54e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <HAL_USB_USART_Begin+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	685b      	ldr	r3, [r3, #4]
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	0003024c 	.word	0x0003024c

000b54f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <HAL_USB_USART_Available_Data+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	691b      	ldr	r3, [r3, #16]
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	0003024c 	.word	0x0003024c

000b5500 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	695b      	ldr	r3, [r3, #20]
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	0003024c 	.word	0x0003024c

000b5510 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5510:	b508      	push	{r3, lr}
   b5512:	4b02      	ldr	r3, [pc, #8]	; (b551c <HAL_USB_USART_Receive_Data+0xc>)
   b5514:	681b      	ldr	r3, [r3, #0]
   b5516:	699b      	ldr	r3, [r3, #24]
   b5518:	9301      	str	r3, [sp, #4]
   b551a:	bd08      	pop	{r3, pc}
   b551c:	0003024c 	.word	0x0003024c

000b5520 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5520:	b508      	push	{r3, lr}
   b5522:	4b02      	ldr	r3, [pc, #8]	; (b552c <HAL_USB_USART_Send_Data+0xc>)
   b5524:	681b      	ldr	r3, [r3, #0]
   b5526:	69db      	ldr	r3, [r3, #28]
   b5528:	9301      	str	r3, [sp, #4]
   b552a:	bd08      	pop	{r3, pc}
   b552c:	0003024c 	.word	0x0003024c

000b5530 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5530:	b508      	push	{r3, lr}
   b5532:	4b02      	ldr	r3, [pc, #8]	; (b553c <HAL_USB_USART_Flush_Data+0xc>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	6a1b      	ldr	r3, [r3, #32]
   b5538:	9301      	str	r3, [sp, #4]
   b553a:	bd08      	pop	{r3, pc}
   b553c:	0003024c 	.word	0x0003024c

000b5540 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5540:	b508      	push	{r3, lr}
   b5542:	4b02      	ldr	r3, [pc, #8]	; (b554c <panic_+0xc>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5548:	9301      	str	r3, [sp, #4]
   b554a:	bd08      	pop	{r3, pc}
   b554c:	00030260 	.word	0x00030260

000b5550 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5550:	b508      	push	{r3, lr}
   b5552:	4b02      	ldr	r3, [pc, #8]	; (b555c <log_message+0xc>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5558:	9301      	str	r3, [sp, #4]
   b555a:	bd08      	pop	{r3, pc}
   b555c:	00030260 	.word	0x00030260

000b5560 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5560:	b508      	push	{r3, lr}
   b5562:	4b02      	ldr	r3, [pc, #8]	; (b556c <set_system_mode+0xc>)
   b5564:	681b      	ldr	r3, [r3, #0]
   b5566:	685b      	ldr	r3, [r3, #4]
   b5568:	9301      	str	r3, [sp, #4]
   b556a:	bd08      	pop	{r3, pc}
   b556c:	00030220 	.word	0x00030220

000b5570 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5570:	b508      	push	{r3, lr}
   b5572:	4b02      	ldr	r3, [pc, #8]	; (b557c <system_delay_ms+0xc>)
   b5574:	681b      	ldr	r3, [r3, #0]
   b5576:	695b      	ldr	r3, [r3, #20]
   b5578:	9301      	str	r3, [sp, #4]
   b557a:	bd08      	pop	{r3, pc}
   b557c:	00030220 	.word	0x00030220

000b5580 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5580:	b508      	push	{r3, lr}
   b5582:	4b02      	ldr	r3, [pc, #8]	; (b558c <system_thread_set_state+0xc>)
   b5584:	681b      	ldr	r3, [r3, #0]
   b5586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5588:	9301      	str	r3, [sp, #4]
   b558a:	bd08      	pop	{r3, pc}
   b558c:	00030220 	.word	0x00030220

000b5590 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5590:	b508      	push	{r3, lr}
   b5592:	4b03      	ldr	r3, [pc, #12]	; (b55a0 <system_ctrl_set_app_request_handler+0x10>)
   b5594:	681b      	ldr	r3, [r3, #0]
   b5596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b559a:	9301      	str	r3, [sp, #4]
   b559c:	bd08      	pop	{r3, pc}
   b559e:	0000      	.short	0x0000
   b55a0:	00030220 	.word	0x00030220

000b55a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b55a4:	b508      	push	{r3, lr}
   b55a6:	4b03      	ldr	r3, [pc, #12]	; (b55b4 <system_ctrl_set_result+0x10>)
   b55a8:	681b      	ldr	r3, [r3, #0]
   b55aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b55ae:	9301      	str	r3, [sp, #4]
   b55b0:	bd08      	pop	{r3, pc}
   b55b2:	0000      	.short	0x0000
   b55b4:	00030220 	.word	0x00030220

000b55b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b55b8:	b508      	push	{r3, lr}
   b55ba:	4b02      	ldr	r3, [pc, #8]	; (b55c4 <network_connect+0xc>)
   b55bc:	681b      	ldr	r3, [r3, #0]
   b55be:	685b      	ldr	r3, [r3, #4]
   b55c0:	9301      	str	r3, [sp, #4]
   b55c2:	bd08      	pop	{r3, pc}
   b55c4:	00030240 	.word	0x00030240

000b55c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b55c8:	b508      	push	{r3, lr}
   b55ca:	4b02      	ldr	r3, [pc, #8]	; (b55d4 <network_connecting+0xc>)
   b55cc:	681b      	ldr	r3, [r3, #0]
   b55ce:	689b      	ldr	r3, [r3, #8]
   b55d0:	9301      	str	r3, [sp, #4]
   b55d2:	bd08      	pop	{r3, pc}
   b55d4:	00030240 	.word	0x00030240

000b55d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b55d8:	b508      	push	{r3, lr}
   b55da:	4b02      	ldr	r3, [pc, #8]	; (b55e4 <network_disconnect+0xc>)
   b55dc:	681b      	ldr	r3, [r3, #0]
   b55de:	68db      	ldr	r3, [r3, #12]
   b55e0:	9301      	str	r3, [sp, #4]
   b55e2:	bd08      	pop	{r3, pc}
   b55e4:	00030240 	.word	0x00030240

000b55e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b55e8:	b508      	push	{r3, lr}
   b55ea:	4b02      	ldr	r3, [pc, #8]	; (b55f4 <network_ready+0xc>)
   b55ec:	681b      	ldr	r3, [r3, #0]
   b55ee:	691b      	ldr	r3, [r3, #16]
   b55f0:	9301      	str	r3, [sp, #4]
   b55f2:	bd08      	pop	{r3, pc}
   b55f4:	00030240 	.word	0x00030240

000b55f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b55f8:	b508      	push	{r3, lr}
   b55fa:	4b02      	ldr	r3, [pc, #8]	; (b5604 <network_on+0xc>)
   b55fc:	681b      	ldr	r3, [r3, #0]
   b55fe:	695b      	ldr	r3, [r3, #20]
   b5600:	9301      	str	r3, [sp, #4]
   b5602:	bd08      	pop	{r3, pc}
   b5604:	00030240 	.word	0x00030240

000b5608 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5608:	b508      	push	{r3, lr}
   b560a:	4b02      	ldr	r3, [pc, #8]	; (b5614 <network_off+0xc>)
   b560c:	681b      	ldr	r3, [r3, #0]
   b560e:	699b      	ldr	r3, [r3, #24]
   b5610:	9301      	str	r3, [sp, #4]
   b5612:	bd08      	pop	{r3, pc}
   b5614:	00030240 	.word	0x00030240

000b5618 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5618:	b508      	push	{r3, lr}
   b561a:	4b02      	ldr	r3, [pc, #8]	; (b5624 <network_listen+0xc>)
   b561c:	681b      	ldr	r3, [r3, #0]
   b561e:	69db      	ldr	r3, [r3, #28]
   b5620:	9301      	str	r3, [sp, #4]
   b5622:	bd08      	pop	{r3, pc}
   b5624:	00030240 	.word	0x00030240

000b5628 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5628:	b508      	push	{r3, lr}
   b562a:	4b02      	ldr	r3, [pc, #8]	; (b5634 <network_listening+0xc>)
   b562c:	681b      	ldr	r3, [r3, #0]
   b562e:	6a1b      	ldr	r3, [r3, #32]
   b5630:	9301      	str	r3, [sp, #4]
   b5632:	bd08      	pop	{r3, pc}
   b5634:	00030240 	.word	0x00030240

000b5638 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5638:	b508      	push	{r3, lr}
   b563a:	4b02      	ldr	r3, [pc, #8]	; (b5644 <network_set_listen_timeout+0xc>)
   b563c:	681b      	ldr	r3, [r3, #0]
   b563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5640:	9301      	str	r3, [sp, #4]
   b5642:	bd08      	pop	{r3, pc}
   b5644:	00030240 	.word	0x00030240

000b5648 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5648:	b508      	push	{r3, lr}
   b564a:	4b02      	ldr	r3, [pc, #8]	; (b5654 <network_get_listen_timeout+0xc>)
   b564c:	681b      	ldr	r3, [r3, #0]
   b564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5650:	9301      	str	r3, [sp, #4]
   b5652:	bd08      	pop	{r3, pc}
   b5654:	00030240 	.word	0x00030240

000b5658 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5658:	b508      	push	{r3, lr}
   b565a:	4b02      	ldr	r3, [pc, #8]	; (b5664 <network_is_on+0xc>)
   b565c:	681b      	ldr	r3, [r3, #0]
   b565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5660:	9301      	str	r3, [sp, #4]
   b5662:	bd08      	pop	{r3, pc}
   b5664:	00030240 	.word	0x00030240

000b5668 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5668:	b508      	push	{r3, lr}
   b566a:	4b02      	ldr	r3, [pc, #8]	; (b5674 <network_is_off+0xc>)
   b566c:	681b      	ldr	r3, [r3, #0]
   b566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5670:	9301      	str	r3, [sp, #4]
   b5672:	bd08      	pop	{r3, pc}
   b5674:	00030240 	.word	0x00030240

000b5678 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5678:	b508      	push	{r3, lr}
   b567a:	4b02      	ldr	r3, [pc, #8]	; (b5684 <spark_set_random_seed_from_cloud_handler+0xc>)
   b567c:	681b      	ldr	r3, [r3, #0]
   b567e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5680:	9301      	str	r3, [sp, #4]
   b5682:	bd08      	pop	{r3, pc}
   b5684:	00030244 	.word	0x00030244

000b5688 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5688:	b508      	push	{r3, lr}
   b568a:	4b02      	ldr	r3, [pc, #8]	; (b5694 <malloc+0xc>)
   b568c:	681b      	ldr	r3, [r3, #0]
   b568e:	681b      	ldr	r3, [r3, #0]
   b5690:	9301      	str	r3, [sp, #4]
   b5692:	bd08      	pop	{r3, pc}
   b5694:	0003021c 	.word	0x0003021c

000b5698 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5698:	b508      	push	{r3, lr}
   b569a:	4b02      	ldr	r3, [pc, #8]	; (b56a4 <free+0xc>)
   b569c:	681b      	ldr	r3, [r3, #0]
   b569e:	685b      	ldr	r3, [r3, #4]
   b56a0:	9301      	str	r3, [sp, #4]
   b56a2:	bd08      	pop	{r3, pc}
   b56a4:	0003021c 	.word	0x0003021c

000b56a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b56a8:	b508      	push	{r3, lr}
   b56aa:	4b02      	ldr	r3, [pc, #8]	; (b56b4 <realloc+0xc>)
   b56ac:	681b      	ldr	r3, [r3, #0]
   b56ae:	689b      	ldr	r3, [r3, #8]
   b56b0:	9301      	str	r3, [sp, #4]
   b56b2:	bd08      	pop	{r3, pc}
   b56b4:	0003021c 	.word	0x0003021c

000b56b8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b56b8:	b508      	push	{r3, lr}
   b56ba:	4b02      	ldr	r3, [pc, #8]	; (b56c4 <abort+0xc>)
   b56bc:	681b      	ldr	r3, [r3, #0]
   b56be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56c0:	9301      	str	r3, [sp, #4]
   b56c2:	bd08      	pop	{r3, pc}
   b56c4:	0003021c 	.word	0x0003021c

000b56c8 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b56c8:	b508      	push	{r3, lr}
   b56ca:	4b02      	ldr	r3, [pc, #8]	; (b56d4 <__errno+0xc>)
   b56cc:	681b      	ldr	r3, [r3, #0]
   b56ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b56d0:	9301      	str	r3, [sp, #4]
   b56d2:	bd08      	pop	{r3, pc}
   b56d4:	0003021c 	.word	0x0003021c

000b56d8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b56d8:	b508      	push	{r3, lr}
   b56da:	4b02      	ldr	r3, [pc, #8]	; (b56e4 <__assert_func+0xc>)
   b56dc:	681b      	ldr	r3, [r3, #0]
   b56de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b56e0:	9301      	str	r3, [sp, #4]
   b56e2:	bd08      	pop	{r3, pc}
   b56e4:	0003021c 	.word	0x0003021c

000b56e8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b56e8:	b508      	push	{r3, lr}
   b56ea:	4b02      	ldr	r3, [pc, #8]	; (b56f4 <newlib_impure_ptr_callback+0xc>)
   b56ec:	681b      	ldr	r3, [r3, #0]
   b56ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b56f0:	9301      	str	r3, [sp, #4]
   b56f2:	bd08      	pop	{r3, pc}
   b56f4:	0003021c 	.word	0x0003021c

000b56f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b56f8:	2200      	movs	r2, #0
   b56fa:	6840      	ldr	r0, [r0, #4]
   b56fc:	4611      	mov	r1, r2
   b56fe:	f7ff bf93 	b.w	b5628 <network_listening>

000b5702 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5702:	2200      	movs	r2, #0
   b5704:	6840      	ldr	r0, [r0, #4]
   b5706:	4611      	mov	r1, r2
   b5708:	f7ff bf9e 	b.w	b5648 <network_get_listen_timeout>

000b570c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b570c:	6840      	ldr	r0, [r0, #4]
   b570e:	2200      	movs	r2, #0
   b5710:	f7ff bf92 	b.w	b5638 <network_set_listen_timeout>

000b5714 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5714:	6840      	ldr	r0, [r0, #4]
   b5716:	2200      	movs	r2, #0
   b5718:	f081 0101 	eor.w	r1, r1, #1
   b571c:	f7ff bf7c 	b.w	b5618 <network_listen>

000b5720 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5720:	2300      	movs	r3, #0
   b5722:	6840      	ldr	r0, [r0, #4]
   b5724:	461a      	mov	r2, r3
   b5726:	4619      	mov	r1, r3
   b5728:	f7ff bf6e 	b.w	b5608 <network_off>

000b572c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b572c:	2300      	movs	r3, #0
   b572e:	6840      	ldr	r0, [r0, #4]
   b5730:	461a      	mov	r2, r3
   b5732:	4619      	mov	r1, r3
   b5734:	f7ff bf60 	b.w	b55f8 <network_on>

000b5738 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5738:	2200      	movs	r2, #0
   b573a:	6840      	ldr	r0, [r0, #4]
   b573c:	4611      	mov	r1, r2
   b573e:	f7ff bf53 	b.w	b55e8 <network_ready>

000b5742 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5742:	2200      	movs	r2, #0
   b5744:	6840      	ldr	r0, [r0, #4]
   b5746:	4611      	mov	r1, r2
   b5748:	f7ff bf3e 	b.w	b55c8 <network_connecting>

000b574c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b574c:	6840      	ldr	r0, [r0, #4]
   b574e:	2200      	movs	r2, #0
   b5750:	2102      	movs	r1, #2
   b5752:	f7ff bf41 	b.w	b55d8 <network_disconnect>

000b5756 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5756:	2300      	movs	r3, #0
   b5758:	6840      	ldr	r0, [r0, #4]
   b575a:	461a      	mov	r2, r3
   b575c:	f7ff bf2c 	b.w	b55b8 <network_connect>

000b5760 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5760:	4b02      	ldr	r3, [pc, #8]	; (b576c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5762:	2203      	movs	r2, #3
   b5764:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5766:	4a02      	ldr	r2, [pc, #8]	; (b5770 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5768:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b576a:	4770      	bx	lr
   b576c:	2003e6ac 	.word	0x2003e6ac
   b5770:	000b9240 	.word	0x000b9240

000b5774 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5774:	b510      	push	{r4, lr}
   b5776:	4604      	mov	r4, r0
   b5778:	4608      	mov	r0, r1
{
    _spi = spi;
   b577a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b577c:	f7ff fe98 	bl	b54b0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5780:	2300      	movs	r3, #0
   b5782:	6063      	str	r3, [r4, #4]
}
   b5784:	4620      	mov	r0, r4
   b5786:	bd10      	pop	{r4, pc}

000b5788 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5788:	4b05      	ldr	r3, [pc, #20]	; (b57a0 <_GLOBAL__sub_I_System+0x18>)
   b578a:	2202      	movs	r2, #2
   b578c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b578e:	4b05      	ldr	r3, [pc, #20]	; (b57a4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5790:	4a05      	ldr	r2, [pc, #20]	; (b57a8 <_GLOBAL__sub_I_System+0x20>)
   b5792:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5794:	2000      	movs	r0, #0
   b5796:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b579a:	f7ff bee1 	b.w	b5560 <set_system_mode>
   b579e:	bf00      	nop
   b57a0:	2003e6c0 	.word	0x2003e6c0
   b57a4:	2003e6b4 	.word	0x2003e6b4
   b57a8:	ffff0000 	.word	0xffff0000

000b57ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b57ac:	b510      	push	{r4, lr}
   b57ae:	4604      	mov	r4, r0
{
	free(buffer);
   b57b0:	6800      	ldr	r0, [r0, #0]
   b57b2:	f7ff ff71 	bl	b5698 <free>
}
   b57b6:	4620      	mov	r0, r4
   b57b8:	bd10      	pop	{r4, pc}

000b57ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b57ba:	b510      	push	{r4, lr}
   b57bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b57be:	6800      	ldr	r0, [r0, #0]
   b57c0:	b108      	cbz	r0, b57c6 <_ZN6String10invalidateEv+0xc>
   b57c2:	f7ff ff69 	bl	b5698 <free>
	buffer = NULL;
   b57c6:	2300      	movs	r3, #0
	capacity = len = 0;
   b57c8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b57cc:	6023      	str	r3, [r4, #0]
}
   b57ce:	bd10      	pop	{r4, pc}

000b57d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b57d0:	b538      	push	{r3, r4, r5, lr}
   b57d2:	4604      	mov	r4, r0
   b57d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b57d6:	6800      	ldr	r0, [r0, #0]
   b57d8:	3101      	adds	r1, #1
   b57da:	f7ff ff65 	bl	b56a8 <realloc>
	if (newbuffer) {
   b57de:	b110      	cbz	r0, b57e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b57e0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b57e4:	2001      	movs	r0, #1
	}
	return 0;
}
   b57e6:	bd38      	pop	{r3, r4, r5, pc}

000b57e8 <_ZN6String7reserveEj>:
{
   b57e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b57ea:	6803      	ldr	r3, [r0, #0]
{
   b57ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b57ee:	b123      	cbz	r3, b57fa <_ZN6String7reserveEj+0x12>
   b57f0:	6843      	ldr	r3, [r0, #4]
   b57f2:	428b      	cmp	r3, r1
   b57f4:	d301      	bcc.n	b57fa <_ZN6String7reserveEj+0x12>
   b57f6:	2001      	movs	r0, #1
}
   b57f8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b57fa:	4620      	mov	r0, r4
   b57fc:	f7ff ffe8 	bl	b57d0 <_ZN6String12changeBufferEj>
   b5800:	2800      	cmp	r0, #0
   b5802:	d0f9      	beq.n	b57f8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5804:	68a3      	ldr	r3, [r4, #8]
   b5806:	2b00      	cmp	r3, #0
   b5808:	d1f5      	bne.n	b57f6 <_ZN6String7reserveEj+0xe>
   b580a:	6822      	ldr	r2, [r4, #0]
   b580c:	7013      	strb	r3, [r2, #0]
   b580e:	e7f2      	b.n	b57f6 <_ZN6String7reserveEj+0xe>

000b5810 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5810:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5812:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5814:	4611      	mov	r1, r2
   b5816:	9201      	str	r2, [sp, #4]
{
   b5818:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b581a:	f7ff ffe5 	bl	b57e8 <_ZN6String7reserveEj>
   b581e:	9a01      	ldr	r2, [sp, #4]
   b5820:	b928      	cbnz	r0, b582e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5822:	4620      	mov	r0, r4
   b5824:	f7ff ffc9 	bl	b57ba <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5828:	4620      	mov	r0, r4
   b582a:	b003      	add	sp, #12
   b582c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b582e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5830:	4629      	mov	r1, r5
   b5832:	6820      	ldr	r0, [r4, #0]
   b5834:	f003 fbfc 	bl	b9030 <memcpy>
	buffer[len] = 0;
   b5838:	6822      	ldr	r2, [r4, #0]
   b583a:	68a3      	ldr	r3, [r4, #8]
   b583c:	2100      	movs	r1, #0
   b583e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5840:	e7f2      	b.n	b5828 <_ZN6String4copyEPKcj+0x18>

000b5842 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5842:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5844:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5846:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b584a:	4604      	mov	r4, r0
	len = 0;
   b584c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b584e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5850:	b141      	cbz	r1, b5864 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5852:	4608      	mov	r0, r1
   b5854:	9101      	str	r1, [sp, #4]
   b5856:	f7ff f8f1 	bl	b4a3c <strlen>
   b585a:	9901      	ldr	r1, [sp, #4]
   b585c:	4602      	mov	r2, r0
   b585e:	4620      	mov	r0, r4
   b5860:	f7ff ffd6 	bl	b5810 <_ZN6String4copyEPKcj>
}
   b5864:	4620      	mov	r0, r4
   b5866:	b002      	add	sp, #8
   b5868:	bd10      	pop	{r4, pc}

000b586a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b586a:	b513      	push	{r0, r1, r4, lr}
   b586c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b586e:	b159      	cbz	r1, b5888 <_ZN6StringaSEPKc+0x1e>
   b5870:	4608      	mov	r0, r1
   b5872:	9101      	str	r1, [sp, #4]
   b5874:	f7ff f8e2 	bl	b4a3c <strlen>
   b5878:	9901      	ldr	r1, [sp, #4]
   b587a:	4602      	mov	r2, r0
   b587c:	4620      	mov	r0, r4
   b587e:	f7ff ffc7 	bl	b5810 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5882:	4620      	mov	r0, r4
   b5884:	b002      	add	sp, #8
   b5886:	bd10      	pop	{r4, pc}
	else invalidate();
   b5888:	f7ff ff97 	bl	b57ba <_ZN6String10invalidateEv>
   b588c:	e7f9      	b.n	b5882 <_ZN6StringaSEPKc+0x18>

000b588e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b588e:	4770      	bx	lr

000b5890 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5890:	4770      	bx	lr

000b5892 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5892:	4770      	bx	lr

000b5894 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5894:	4770      	bx	lr
	...

000b5898 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5898:	4b06      	ldr	r3, [pc, #24]	; (b58b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b589a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b589c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b589e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b58a2:	d005      	beq.n	b58b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b58a4:	4608      	mov	r0, r1
   b58a6:	f001 fed5 	bl	b7654 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b58aa:	2800      	cmp	r0, #0
   b58ac:	bf08      	it	eq
   b58ae:	2400      	moveq	r4, #0
      }
   b58b0:	4620      	mov	r0, r4
   b58b2:	bd10      	pop	{r4, pc}
   b58b4:	000b93f0 	.word	0x000b93f0

000b58b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b58b8:	4b06      	ldr	r3, [pc, #24]	; (b58d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b58ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b58bc:	b510      	push	{r4, lr}
   b58be:	f100 040c 	add.w	r4, r0, #12
	    ||
   b58c2:	d005      	beq.n	b58d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b58c4:	4608      	mov	r0, r1
   b58c6:	f001 fec5 	bl	b7654 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b58ca:	2800      	cmp	r0, #0
   b58cc:	bf08      	it	eq
   b58ce:	2400      	moveq	r4, #0
      }
   b58d0:	4620      	mov	r0, r4
   b58d2:	bd10      	pop	{r4, pc}
   b58d4:	000b93f0 	.word	0x000b93f0

000b58d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b58d8:	4b06      	ldr	r3, [pc, #24]	; (b58f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b58da:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b58dc:	b510      	push	{r4, lr}
   b58de:	f100 040c 	add.w	r4, r0, #12
	    ||
   b58e2:	d005      	beq.n	b58f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b58e4:	4608      	mov	r0, r1
   b58e6:	f001 feb5 	bl	b7654 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b58ea:	2800      	cmp	r0, #0
   b58ec:	bf08      	it	eq
   b58ee:	2400      	moveq	r4, #0
      }
   b58f0:	4620      	mov	r0, r4
   b58f2:	bd10      	pop	{r4, pc}
   b58f4:	000b93f0 	.word	0x000b93f0

000b58f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b58f8:	b510      	push	{r4, lr}
   b58fa:	2168      	movs	r1, #104	; 0x68
   b58fc:	4604      	mov	r4, r0
   b58fe:	f7ff f8e4 	bl	b4aca <_ZdlPvj>
   b5902:	4620      	mov	r0, r4
   b5904:	bd10      	pop	{r4, pc}

000b5906 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5906:	b510      	push	{r4, lr}
   b5908:	2128      	movs	r1, #40	; 0x28
   b590a:	4604      	mov	r4, r0
   b590c:	f7ff f8dd 	bl	b4aca <_ZdlPvj>
   b5910:	4620      	mov	r0, r4
   b5912:	bd10      	pop	{r4, pc}

000b5914 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5914:	b510      	push	{r4, lr}
   b5916:	2130      	movs	r1, #48	; 0x30
   b5918:	4604      	mov	r4, r0
   b591a:	f7ff f8d6 	bl	b4aca <_ZdlPvj>
   b591e:	4620      	mov	r0, r4
   b5920:	bd10      	pop	{r4, pc}

000b5922 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5922:	2168      	movs	r1, #104	; 0x68
   b5924:	f7ff b8d1 	b.w	b4aca <_ZdlPvj>

000b5928 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5928:	2128      	movs	r1, #40	; 0x28
   b592a:	f7ff b8ce 	b.w	b4aca <_ZdlPvj>

000b592e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b592e:	2130      	movs	r1, #48	; 0x30
   b5930:	f7ff b8cb 	b.w	b4aca <_ZdlPvj>

000b5934 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b5934:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5936:	2500      	movs	r5, #0
   b5938:	1cec      	adds	r4, r5, #3
   b593a:	428c      	cmp	r4, r1
   b593c:	d80d      	bhi.n	b595a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b593e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5940:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5942:	5d87      	ldrb	r7, [r0, r6]
   b5944:	4297      	cmp	r7, r2
   b5946:	d105      	bne.n	b5954 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5948:	4426      	add	r6, r4
   b594a:	42b1      	cmp	r1, r6
   b594c:	d305      	bcc.n	b595a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b594e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5950:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5952:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5954:	3401      	adds	r4, #1
   b5956:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5958:	e7ee      	b.n	b5938 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b595a:	2000      	movs	r0, #0
   b595c:	e7f9      	b.n	b5952 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b5960 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b5960:	4a02      	ldr	r2, [pc, #8]	; (b596c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b5962:	4903      	ldr	r1, [pc, #12]	; (b5970 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b5964:	200a      	movs	r0, #10
   b5966:	f7ff bdeb 	b.w	b5540 <panic_>
   b596a:	bf00      	nop
   b596c:	000b525d 	.word	0x000b525d
   b5970:	000b9274 	.word	0x000b9274

000b5974 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5974:	b430      	push	{r4, r5}
   b5976:	460d      	mov	r5, r1
   b5978:	4611      	mov	r1, r2
   b597a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b597c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b597e:	6809      	ldr	r1, [r1, #0]
   b5980:	6828      	ldr	r0, [r5, #0]
   b5982:	e9d3 4300 	ldrd	r4, r3, [r3]
   b5986:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b5988:	bc30      	pop	{r4, r5}
   b598a:	4760      	bx	ip

000b598c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b598c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b598e:	b538      	push	{r3, r4, r5, lr}
   b5990:	4604      	mov	r4, r0
	switch (__op)
   b5992:	d102      	bne.n	b599a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5994:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5996:	6023      	str	r3, [r4, #0]
	}
   b5998:	e003      	b.n	b59a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b599a:	2a02      	cmp	r2, #2
   b599c:	d003      	beq.n	b59a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b599e:	2a03      	cmp	r2, #3
   b59a0:	d00d      	beq.n	b59be <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b59a2:	2000      	movs	r0, #0
   b59a4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b59a6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b59a8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b59aa:	f7ff f88a 	bl	b4ac2 <_Znwj>
   b59ae:	4603      	mov	r3, r0
   b59b0:	2800      	cmp	r0, #0
   b59b2:	d0f0      	beq.n	b5996 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b59b4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b59b8:	e883 0003 	stmia.w	r3, {r0, r1}
   b59bc:	e7eb      	b.n	b5996 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b59be:	6800      	ldr	r0, [r0, #0]
   b59c0:	2800      	cmp	r0, #0
   b59c2:	d0ee      	beq.n	b59a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b59c4:	2108      	movs	r1, #8
   b59c6:	f7ff f880 	bl	b4aca <_ZdlPvj>
   b59ca:	e7ea      	b.n	b59a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b59cc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b59cc:	b510      	push	{r4, lr}
      if (_M_manager)
   b59ce:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b59d0:	4604      	mov	r4, r0
      if (_M_manager)
   b59d2:	b113      	cbz	r3, b59da <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b59d4:	2203      	movs	r2, #3
   b59d6:	4601      	mov	r1, r0
   b59d8:	4798      	blx	r3
    }
   b59da:	4620      	mov	r0, r4
   b59dc:	bd10      	pop	{r4, pc}

000b59de <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b59de:	b510      	push	{r4, lr}
   b59e0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b59e2:	3058      	adds	r0, #88	; 0x58
   b59e4:	f7ff fff2 	bl	b59cc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b59e8:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b59ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b59f0:	f7ff bedc 	b.w	b57ac <_ZN6StringD1Ev>

000b59f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b59f4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b59f6:	6843      	ldr	r3, [r0, #4]
   b59f8:	3b01      	subs	r3, #1
    {
   b59fa:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b59fc:	6043      	str	r3, [r0, #4]
   b59fe:	b963      	cbnz	r3, b5a1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5a00:	6803      	ldr	r3, [r0, #0]
   b5a02:	689b      	ldr	r3, [r3, #8]
   b5a04:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5a06:	68a3      	ldr	r3, [r4, #8]
   b5a08:	3b01      	subs	r3, #1
   b5a0a:	60a3      	str	r3, [r4, #8]
   b5a0c:	b92b      	cbnz	r3, b5a1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5a0e:	6823      	ldr	r3, [r4, #0]
   b5a10:	4620      	mov	r0, r4
   b5a12:	68db      	ldr	r3, [r3, #12]
    }
   b5a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5a18:	4718      	bx	r3
    }
   b5a1a:	bd10      	pop	{r4, pc}

000b5a1c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b5a1c:	b510      	push	{r4, lr}
            locked_(false) {
   b5a1e:	2300      	movs	r3, #0
   b5a20:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5a22:	4b04      	ldr	r3, [pc, #16]	; (b5a34 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5a24:	4604      	mov	r4, r0
   b5a26:	6818      	ldr	r0, [r3, #0]
   b5a28:	f7ff fcb2 	bl	b5390 <os_mutex_recursive_lock>
        locked_ = true;
   b5a2c:	2301      	movs	r3, #1
   b5a2e:	7023      	strb	r3, [r4, #0]
    }
   b5a30:	4620      	mov	r0, r4
   b5a32:	bd10      	pop	{r4, pc}
   b5a34:	2003e6cc 	.word	0x2003e6cc

000b5a38 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5a38:	b510      	push	{r4, lr}
        if (locked_) {
   b5a3a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b5a3c:	4604      	mov	r4, r0
        if (locked_) {
   b5a3e:	b11b      	cbz	r3, b5a48 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5a40:	4b02      	ldr	r3, [pc, #8]	; (b5a4c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b5a42:	6818      	ldr	r0, [r3, #0]
   b5a44:	f7ff fcac 	bl	b53a0 <os_mutex_recursive_unlock>
    }
   b5a48:	4620      	mov	r0, r4
   b5a4a:	bd10      	pop	{r4, pc}
   b5a4c:	2003e6cc 	.word	0x2003e6cc

000b5a50 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5a50:	b082      	sub	sp, #8
   b5a52:	4603      	mov	r3, r0
    address_ = addr;
   b5a54:	6808      	ldr	r0, [r1, #0]
   b5a56:	6849      	ldr	r1, [r1, #4]
   b5a58:	466a      	mov	r2, sp
   b5a5a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5a5c:	466a      	mov	r2, sp
   b5a5e:	ca03      	ldmia	r2!, {r0, r1}
   b5a60:	6018      	str	r0, [r3, #0]
}
   b5a62:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5a64:	6059      	str	r1, [r3, #4]
}
   b5a66:	b002      	add	sp, #8
   b5a68:	4770      	bx	lr

000b5a6a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b5a6a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5a6c:	7982      	ldrb	r2, [r0, #6]
   b5a6e:	798b      	ldrb	r3, [r1, #6]
   b5a70:	429a      	cmp	r2, r3
   b5a72:	d106      	bne.n	b5a82 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5a74:	2206      	movs	r2, #6
   b5a76:	f003 facb 	bl	b9010 <memcmp>
   b5a7a:	fab0 f080 	clz	r0, r0
   b5a7e:	0940      	lsrs	r0, r0, #5
}
   b5a80:	bd08      	pop	{r3, pc}
    return false;
   b5a82:	2000      	movs	r0, #0
   b5a84:	e7fc      	b.n	b5a80 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b5a86 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b5a86:	f04f 33ff 	mov.w	r3, #4294967295
   b5a8a:	6003      	str	r3, [r0, #0]
   b5a8c:	8083      	strh	r3, [r0, #4]
}
   b5a8e:	2000      	movs	r0, #0
   b5a90:	4770      	bx	lr

000b5a92 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b5a92:	b508      	push	{r3, lr}
   b5a94:	4602      	mov	r2, r0
        : address_{} {
   b5a96:	2100      	movs	r1, #0
   b5a98:	6001      	str	r1, [r0, #0]
   b5a9a:	6041      	str	r1, [r0, #4]
    clear();
   b5a9c:	f7ff fff3 	bl	b5a86 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b5aa0:	7191      	strb	r1, [r2, #6]
}
   b5aa2:	4610      	mov	r0, r2
   b5aa4:	bd08      	pop	{r3, pc}
	...

000b5aa8 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5aa8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5aaa:	2301      	movs	r3, #1
   b5aac:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5aae:	4b05      	ldr	r3, [pc, #20]	; (b5ac4 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b5ab0:	4602      	mov	r2, r0
   b5ab2:	f103 0110 	add.w	r1, r3, #16
   b5ab6:	f853 4b04 	ldr.w	r4, [r3], #4
   b5aba:	f842 4b04 	str.w	r4, [r2], #4
   b5abe:	428b      	cmp	r3, r1
   b5ac0:	d1f9      	bne.n	b5ab6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b5ac2:	bd10      	pop	{r4, pc}
   b5ac4:	000b91d6 	.word	0x000b91d6

000b5ac8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5ac8:	b510      	push	{r4, lr}
    if (uuid128) {
   b5aca:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5acc:	4604      	mov	r4, r0
    if (uuid128) {
   b5ace:	b1b1      	cbz	r1, b5afe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b5ad0:	2a01      	cmp	r2, #1
   b5ad2:	f101 0210 	add.w	r2, r1, #16
   b5ad6:	d10a      	bne.n	b5aee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b5ad8:	4601      	mov	r1, r0
   b5ada:	f853 0b04 	ldr.w	r0, [r3], #4
   b5ade:	f841 0b04 	str.w	r0, [r1], #4
   b5ae2:	4293      	cmp	r3, r2
   b5ae4:	d1f9      	bne.n	b5ada <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b5ae6:	2301      	movs	r3, #1
   b5ae8:	6123      	str	r3, [r4, #16]
}
   b5aea:	4620      	mov	r0, r4
   b5aec:	bd10      	pop	{r4, pc}
   b5aee:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b5af0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b5af4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b5af8:	429a      	cmp	r2, r3
   b5afa:	d1f9      	bne.n	b5af0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b5afc:	e7f3      	b.n	b5ae6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b5afe:	2210      	movs	r2, #16
   b5b00:	f003 fabe 	bl	b9080 <memset>
   b5b04:	e7f1      	b.n	b5aea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b5b06 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b5b06:	b538      	push	{r3, r4, r5, lr}
   b5b08:	4604      	mov	r4, r0
   b5b0a:	460d      	mov	r5, r1
        : BleUuid() {
   b5b0c:	f7ff ffcc 	bl	b5aa8 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b5b10:	2300      	movs	r3, #0
   b5b12:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5b14:	81a5      	strh	r5, [r4, #12]
}
   b5b16:	4620      	mov	r0, r4
   b5b18:	bd38      	pop	{r3, r4, r5, pc}

000b5b1a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b5b1a:	b538      	push	{r3, r4, r5, lr}
   b5b1c:	4604      	mov	r4, r0
   b5b1e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b5b20:	461a      	mov	r2, r3
   b5b22:	f7ff ffd1 	bl	b5ac8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5b26:	81a5      	strh	r5, [r4, #12]
}
   b5b28:	4620      	mov	r0, r4
   b5b2a:	bd38      	pop	{r3, r4, r5, pc}

000b5b2c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b5b2c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b5b2e:	6902      	ldr	r2, [r0, #16]
   b5b30:	b922      	cbnz	r2, b5b3c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b5b32:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5b34:	3800      	subs	r0, #0
   b5b36:	bf18      	it	ne
   b5b38:	2001      	movne	r0, #1
}
   b5b3a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5b3c:	4902      	ldr	r1, [pc, #8]	; (b5b48 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b5b3e:	2210      	movs	r2, #16
   b5b40:	f003 fa66 	bl	b9010 <memcmp>
   b5b44:	e7f6      	b.n	b5b34 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b5b46:	bf00      	nop
   b5b48:	000b9408 	.word	0x000b9408

000b5b4c <_ZNK8particle7BleUuid4typeEv>:
}
   b5b4c:	6900      	ldr	r0, [r0, #16]
   b5b4e:	4770      	bx	lr

000b5b50 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b5b50:	b538      	push	{r3, r4, r5, lr}
   b5b52:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b5b54:	2214      	movs	r2, #20
   b5b56:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b5b58:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b5b5a:	f003 fa91 	bl	b9080 <memset>
    if (type_ == BleUuidType::SHORT) {
   b5b5e:	6923      	ldr	r3, [r4, #16]
   b5b60:	b91b      	cbnz	r3, b5b6a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b5b62:	89a3      	ldrh	r3, [r4, #12]
   b5b64:	802b      	strh	r3, [r5, #0]
}
   b5b66:	4628      	mov	r0, r5
   b5b68:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b5b6a:	2301      	movs	r3, #1
   b5b6c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b5b6e:	4621      	mov	r1, r4
   b5b70:	462b      	mov	r3, r5
   b5b72:	f104 0210 	add.w	r2, r4, #16
   b5b76:	f851 0b04 	ldr.w	r0, [r1], #4
   b5b7a:	f843 0b04 	str.w	r0, [r3], #4
   b5b7e:	4291      	cmp	r1, r2
   b5b80:	d1f9      	bne.n	b5b76 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b5b82:	e7f0      	b.n	b5b66 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b5b84 <_ZNK8particle7BleUuid7shortedEv>:
}
   b5b84:	8980      	ldrh	r0, [r0, #12]
   b5b86:	4770      	bx	lr

000b5b88 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b5b88:	4770      	bx	lr

000b5b8a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b5b8a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5b8c:	6902      	ldr	r2, [r0, #16]
   b5b8e:	690b      	ldr	r3, [r1, #16]
   b5b90:	429a      	cmp	r2, r3
   b5b92:	d106      	bne.n	b5ba2 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5b94:	2210      	movs	r2, #16
   b5b96:	f003 fa3b 	bl	b9010 <memcmp>
   b5b9a:	fab0 f080 	clz	r0, r0
   b5b9e:	0940      	lsrs	r0, r0, #5
}
   b5ba0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5ba2:	2000      	movs	r0, #0
   b5ba4:	e7fc      	b.n	b5ba0 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b5ba8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b5ba8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b5baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5bae:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b5bb0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b5bb2:	8043      	strh	r3, [r0, #2]
   b5bb4:	220e      	movs	r2, #14
   b5bb6:	4629      	mov	r1, r5
   b5bb8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5bba:	7105      	strb	r5, [r0, #4]
   b5bbc:	3006      	adds	r0, #6
   b5bbe:	f003 fa5f 	bl	b9080 <memset>
   b5bc2:	f104 0014 	add.w	r0, r4, #20
   b5bc6:	f7ff ff6f 	bl	b5aa8 <_ZN8particle7BleUuidC1Ev>
   b5bca:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b5bce:	f7ff ff6b 	bl	b5aa8 <_ZN8particle7BleUuidC1Ev>
   b5bd2:	4904      	ldr	r1, [pc, #16]	; (b5be4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b5bd4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5bd8:	f7ff fe33 	bl	b5842 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b5bdc:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b5bde:	4620      	mov	r0, r4
   b5be0:	bd38      	pop	{r3, r4, r5, pc}
   b5be2:	bf00      	nop
   b5be4:	000b921d 	.word	0x000b921d

000b5be8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b5be8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b5bea:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b5bee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b5bf2:	4293      	cmp	r3, r2
   b5bf4:	4618      	mov	r0, r3
   b5bf6:	d006      	beq.n	b5c06 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b5bf8:	6804      	ldr	r4, [r0, #0]
   b5bfa:	8824      	ldrh	r4, [r4, #0]
   b5bfc:	428c      	cmp	r4, r1
   b5bfe:	f103 0308 	add.w	r3, r3, #8
   b5c02:	d1f6      	bne.n	b5bf2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b5c04:	bd10      	pop	{r4, pc}
        return nullptr;
   b5c06:	2000      	movs	r0, #0
   b5c08:	e7fc      	b.n	b5c04 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b5c0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b5c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c0e:	4606      	mov	r6, r0
   b5c10:	b085      	sub	sp, #20
   b5c12:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b5c14:	460d      	mov	r5, r1
   b5c16:	2900      	cmp	r1, #0
   b5c18:	d050      	beq.n	b5cbc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b5c1a:	2a00      	cmp	r2, #0
   b5c1c:	d04e      	beq.n	b5cbc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5c1e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b5c20:	7823      	ldrb	r3, [r4, #0]
   b5c22:	2af4      	cmp	r2, #244	; 0xf4
   b5c24:	bf28      	it	cs
   b5c26:	22f4      	movcs	r2, #244	; 0xf4
   b5c28:	b343      	cbz	r3, b5c7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b5c2a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b5c2c:	0798      	lsls	r0, r3, #30
   b5c2e:	d509      	bpl.n	b5c44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b5c30:	89a0      	ldrh	r0, [r4, #12]
   b5c32:	9203      	str	r2, [sp, #12]
   b5c34:	2300      	movs	r3, #0
   b5c36:	f7ff fb5d 	bl	b52f4 <hal_ble_gatt_server_set_characteristic_value>
   b5c3a:	2800      	cmp	r0, #0
   b5c3c:	9a03      	ldr	r2, [sp, #12]
   b5c3e:	da03      	bge.n	b5c48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b5c40:	b005      	add	sp, #20
   b5c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b5c44:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b5c48:	6834      	ldr	r4, [r6, #0]
   b5c4a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b5c4c:	06d9      	lsls	r1, r3, #27
   b5c4e:	d509      	bpl.n	b5c64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b5c50:	2f01      	cmp	r7, #1
   b5c52:	d007      	beq.n	b5c64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5c54:	89a0      	ldrh	r0, [r4, #12]
   b5c56:	2300      	movs	r3, #0
   b5c58:	4629      	mov	r1, r5
}
   b5c5a:	b005      	add	sp, #20
   b5c5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5c60:	f7ff bb7a 	b.w	b5358 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b5c64:	069b      	lsls	r3, r3, #26
   b5c66:	d5eb      	bpl.n	b5c40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b5c68:	2f02      	cmp	r7, #2
   b5c6a:	d0e9      	beq.n	b5c40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5c6c:	89a0      	ldrh	r0, [r4, #12]
   b5c6e:	2300      	movs	r3, #0
   b5c70:	4629      	mov	r1, r5
}
   b5c72:	b005      	add	sp, #20
   b5c74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5c78:	f7ff bb78 	b.w	b536c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b5c7c:	8860      	ldrh	r0, [r4, #2]
   b5c7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5c82:	4288      	cmp	r0, r1
   b5c84:	d01c      	beq.n	b5cc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b5c86:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b5c88:	074e      	lsls	r6, r1, #29
   b5c8a:	d501      	bpl.n	b5c90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b5c8c:	2f01      	cmp	r7, #1
   b5c8e:	d104      	bne.n	b5c9a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b5c90:	070b      	lsls	r3, r1, #28
   b5c92:	d409      	bmi.n	b5ca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b5c94:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b5c98:	e7d2      	b.n	b5c40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b5c9a:	89a1      	ldrh	r1, [r4, #12]
   b5c9c:	9300      	str	r3, [sp, #0]
   b5c9e:	4613      	mov	r3, r2
   b5ca0:	462a      	mov	r2, r5
   b5ca2:	f7ff fb3b 	bl	b531c <hal_ble_gatt_client_write_without_response>
   b5ca6:	e7cb      	b.n	b5c40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b5ca8:	2f02      	cmp	r7, #2
   b5caa:	d0f3      	beq.n	b5c94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b5cac:	2300      	movs	r3, #0
   b5cae:	89a1      	ldrh	r1, [r4, #12]
   b5cb0:	9300      	str	r3, [sp, #0]
   b5cb2:	4613      	mov	r3, r2
   b5cb4:	462a      	mov	r2, r5
   b5cb6:	f7ff fb27 	bl	b5308 <hal_ble_gatt_client_write_with_response>
   b5cba:	e7c1      	b.n	b5c40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b5cbc:	4802      	ldr	r0, [pc, #8]	; (b5cc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b5cbe:	e7bf      	b.n	b5c40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b5cc0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b5cc4:	e7bc      	b.n	b5c40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b5cc6:	bf00      	nop
   b5cc8:	fffffef2 	.word	0xfffffef2

000b5ccc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b5ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5cd0:	2600      	movs	r6, #0
   b5cd2:	6006      	str	r6, [r0, #0]
   b5cd4:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5cd6:	2028      	movs	r0, #40	; 0x28
   b5cd8:	460c      	mov	r4, r1
   b5cda:	f7fe fef2 	bl	b4ac2 <_Znwj>
	  auto __pi = ::new (__mem)
   b5cde:	1e05      	subs	r5, r0, #0
   b5ce0:	f105 080c 	add.w	r8, r5, #12
   b5ce4:	d00f      	beq.n	b5d06 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b5ce6:	2301      	movs	r3, #1
   b5ce8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5cec:	4b08      	ldr	r3, [pc, #32]	; (b5d10 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b5cee:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b5cf0:	4640      	mov	r0, r8
   b5cf2:	f7ff fed9 	bl	b5aa8 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b5cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b5cf8:	622e      	str	r6, [r5, #32]
   b5cfa:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b5cfe:	4646      	mov	r6, r8
   b5d00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5d02:	6823      	ldr	r3, [r4, #0]
   b5d04:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b5d06:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5d0a:	4638      	mov	r0, r7
   b5d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5d10:	000b93c0 	.word	0x000b93c0

000b5d14 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5d14:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5d16:	2500      	movs	r5, #0
   b5d18:	6005      	str	r5, [r0, #0]
   b5d1a:	4606      	mov	r6, r0
   b5d1c:	2030      	movs	r0, #48	; 0x30
   b5d1e:	f7fe fed0 	bl	b4ac2 <_Znwj>
	  auto __pi = ::new (__mem)
   b5d22:	4604      	mov	r4, r0
   b5d24:	b188      	cbz	r0, b5d4a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b5d26:	2301      	movs	r3, #1
   b5d28:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5d2c:	4b09      	ldr	r3, [pc, #36]	; (b5d54 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b5d2e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b5d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5d34:	8183      	strh	r3, [r0, #12]
   b5d36:	300e      	adds	r0, #14
   b5d38:	f7ff feab 	bl	b5a92 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5d3c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b5d40:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5d44:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5d48:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5d4a:	6074      	str	r4, [r6, #4]
   b5d4c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b5d4e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5d50:	4630      	mov	r0, r6
   b5d52:	bd70      	pop	{r4, r5, r6, pc}
   b5d54:	000b93dc 	.word	0x000b93dc

000b5d58 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b5d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5d5a:	460d      	mov	r5, r1
   b5d5c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5d5e:	a801      	add	r0, sp, #4
   b5d60:	f7ff fe5c 	bl	b5a1c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5d64:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5d66:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b5d6a:	6023      	str	r3, [r4, #0]
   b5d6c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b5d70:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b5d72:	a801      	add	r0, sp, #4
   b5d74:	f7ff fe60 	bl	b5a38 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5d78:	4620      	mov	r0, r4
   b5d7a:	b003      	add	sp, #12
   b5d7c:	bd30      	pop	{r4, r5, pc}

000b5d7e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b5d7e:	b530      	push	{r4, r5, lr}
   b5d80:	4605      	mov	r5, r0
   b5d82:	b087      	sub	sp, #28
   b5d84:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5d86:	a801      	add	r0, sp, #4
   b5d88:	f7ff fe48 	bl	b5a1c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5d8c:	682a      	ldr	r2, [r5, #0]
   b5d8e:	6823      	ldr	r3, [r4, #0]
   b5d90:	8812      	ldrh	r2, [r2, #0]
   b5d92:	881b      	ldrh	r3, [r3, #0]
   b5d94:	429a      	cmp	r2, r3
   b5d96:	d10d      	bne.n	b5db4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b5d98:	4629      	mov	r1, r5
   b5d9a:	a802      	add	r0, sp, #8
   b5d9c:	f7ff ffdc 	bl	b5d58 <_ZNK8particle13BlePeerDevice7addressEv>
   b5da0:	4621      	mov	r1, r4
   b5da2:	a804      	add	r0, sp, #16
   b5da4:	f7ff ffd8 	bl	b5d58 <_ZNK8particle13BlePeerDevice7addressEv>
   b5da8:	a904      	add	r1, sp, #16
   b5daa:	a802      	add	r0, sp, #8
   b5dac:	f7ff fe5d 	bl	b5a6a <_ZNK8particle10BleAddresseqERKS0_>
   b5db0:	4604      	mov	r4, r0
   b5db2:	b900      	cbnz	r0, b5db6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b5db4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b5db6:	a801      	add	r0, sp, #4
   b5db8:	f7ff fe3e 	bl	b5a38 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5dbc:	4620      	mov	r0, r4
   b5dbe:	b007      	add	sp, #28
   b5dc0:	bd30      	pop	{r4, r5, pc}
	...

000b5dc4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b5dc4:	b510      	push	{r4, lr}
   b5dc6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b5dc8:	2064      	movs	r0, #100	; 0x64
   b5dca:	f7fe fe7a 	bl	b4ac2 <_Znwj>
   b5dce:	b168      	cbz	r0, b5dec <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b5dd0:	2300      	movs	r3, #0
   b5dd2:	e9c0 3300 	strd	r3, r3, [r0]
   b5dd6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5dde:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b5de2:	6203      	str	r3, [r0, #32]
   b5de4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b5de6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b5de8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b5dea:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5dec:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b5dee:	b920      	cbnz	r0, b5dfa <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b5df0:	4a0a      	ldr	r2, [pc, #40]	; (b5e1c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5df2:	490b      	ldr	r1, [pc, #44]	; (b5e20 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b5df4:	200a      	movs	r0, #10
   b5df6:	f7ff fba3 	bl	b5540 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b5dfa:	2000      	movs	r0, #0
   b5dfc:	f7ff fa3e 	bl	b527c <hal_ble_stack_init>
   b5e00:	b120      	cbz	r0, b5e0c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b5e02:	4a06      	ldr	r2, [pc, #24]	; (b5e1c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5e04:	4907      	ldr	r1, [pc, #28]	; (b5e24 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b5e06:	200a      	movs	r0, #10
   b5e08:	f7ff fb9a 	bl	b5540 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5e0c:	6821      	ldr	r1, [r4, #0]
   b5e0e:	4806      	ldr	r0, [pc, #24]	; (b5e28 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b5e10:	2200      	movs	r2, #0
   b5e12:	f7ff fa97 	bl	b5344 <hal_ble_set_callback_on_periph_link_events>
}
   b5e16:	4620      	mov	r0, r4
   b5e18:	bd10      	pop	{r4, pc}
   b5e1a:	bf00      	nop
   b5e1c:	000b525d 	.word	0x000b525d
   b5e20:	000b9274 	.word	0x000b9274
   b5e24:	000b92b2 	.word	0x000b92b2
   b5e28:	000b63f9 	.word	0x000b63f9

000b5e2c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5e2c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b5e2e:	4c0a      	ldr	r4, [pc, #40]	; (b5e58 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5e30:	7823      	ldrb	r3, [r4, #0]
   b5e32:	f3bf 8f5b 	dmb	ish
   b5e36:	07db      	lsls	r3, r3, #31
   b5e38:	d40c      	bmi.n	b5e54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5e3a:	4620      	mov	r0, r4
   b5e3c:	f7fe fe47 	bl	b4ace <__cxa_guard_acquire>
   b5e40:	b140      	cbz	r0, b5e54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5e42:	4806      	ldr	r0, [pc, #24]	; (b5e5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5e44:	f7ff ffbe 	bl	b5dc4 <_ZN8particle14BleLocalDeviceC1Ev>
   b5e48:	4620      	mov	r0, r4
   b5e4a:	f7fe fe45 	bl	b4ad8 <__cxa_guard_release>
   b5e4e:	4804      	ldr	r0, [pc, #16]	; (b5e60 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5e50:	f003 f8d8 	bl	b9004 <atexit>
    return instance;
}
   b5e54:	4801      	ldr	r0, [pc, #4]	; (b5e5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5e56:	bd10      	pop	{r4, pc}
   b5e58:	2003e6c4 	.word	0x2003e6c4
   b5e5c:	2003e6d0 	.word	0x2003e6d0
   b5e60:	000b60a1 	.word	0x000b60a1

000b5e64 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5e64:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b5e66:	6803      	ldr	r3, [r0, #0]
   b5e68:	3b09      	subs	r3, #9
   b5e6a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5e6c:	b08d      	sub	sp, #52	; 0x34
   b5e6e:	4604      	mov	r4, r0
   b5e70:	460d      	mov	r5, r1
    switch (event->type) {
   b5e72:	d811      	bhi.n	b5e98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b5e74:	f7ff ffda 	bl	b5e2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e78:	88a1      	ldrh	r1, [r4, #4]
   b5e7a:	6800      	ldr	r0, [r0, #0]
   b5e7c:	f7ff feb4 	bl	b5be8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b5e80:	4603      	mov	r3, r0
   b5e82:	b958      	cbnz	r0, b5e9c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b5e84:	2220      	movs	r2, #32
   b5e86:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b5e8a:	4a0b      	ldr	r2, [pc, #44]	; (b5eb8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b5e8c:	9200      	str	r2, [sp, #0]
   b5e8e:	490b      	ldr	r1, [pc, #44]	; (b5ebc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b5e90:	aa04      	add	r2, sp, #16
   b5e92:	2032      	movs	r0, #50	; 0x32
   b5e94:	f7ff fb5c 	bl	b5550 <log_message>
}
   b5e98:	b00d      	add	sp, #52	; 0x34
   b5e9a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b5e9c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b5e9e:	2a00      	cmp	r2, #0
   b5ea0:	d0fa      	beq.n	b5e98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b5ea2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5ea6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b5eaa:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b5eae:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b5eb0:	aa04      	add	r2, sp, #16
   b5eb2:	a903      	add	r1, sp, #12
   b5eb4:	47a0      	blx	r4
}
   b5eb6:	e7ef      	b.n	b5e98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b5eb8:	000b92f4 	.word	0x000b92f4
   b5ebc:	000b928b 	.word	0x000b928b

000b5ec0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b5ec0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b5ec2:	2000      	movs	r0, #0
   b5ec4:	f7ff f9da 	bl	b527c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b5ec8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b5ecc:	bd08      	pop	{r3, pc}

000b5ece <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>:

int BleLocalDevice::setDeviceName(const char* name, size_t len) const {
    return hal_ble_gap_set_device_name(name, len, nullptr);
}

int BleLocalDevice::setDeviceName(const char* name) const {
   b5ece:	b510      	push	{r4, lr}
    return setDeviceName(name, name ? strnlen(name, BLE_MAX_DEV_NAME_LEN) : 0);
   b5ed0:	460c      	mov	r4, r1
   b5ed2:	b121      	cbz	r1, b5ede <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc+0x10>
   b5ed4:	2114      	movs	r1, #20
   b5ed6:	4620      	mov	r0, r4
   b5ed8:	f003 f908 	bl	b90ec <strnlen>
   b5edc:	4601      	mov	r1, r0
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b5ede:	4620      	mov	r0, r4
   b5ee0:	2200      	movs	r2, #0
}
   b5ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b5ee6:	f7ff b9d1 	b.w	b528c <hal_ble_gap_set_device_name>

000b5eea <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b5eea:	b919      	cbnz	r1, b5ef4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b5eec:	460a      	mov	r2, r1
   b5eee:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b5ef0:	f7ff b9d4 	b.w	b529c <hal_ble_gap_set_advertising_data>
   b5ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5ef8:	2200      	movs	r2, #0
   b5efa:	e7f9      	b.n	b5ef0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b5efc <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b5efc:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b5efe:	69d8      	ldr	r0, [r3, #28]
}
   b5f00:	2800      	cmp	r0, #0
   b5f02:	bfd4      	ite	le
   b5f04:	2000      	movle	r0, #0
   b5f06:	2001      	movgt	r0, #1
   b5f08:	4770      	bx	lr

000b5f0a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5f0a:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b5f0c:	1e14      	subs	r4, r2, #0
   b5f0e:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5f10:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5f12:	db02      	blt.n	b5f1a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5f14:	1862      	adds	r2, r4, r1
   b5f16:	429a      	cmp	r2, r3
   b5f18:	dd00      	ble.n	b5f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b5f1a:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b5f1c:	682a      	ldr	r2, [r5, #0]
   b5f1e:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5f20:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5f22:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5f24:	1a52      	subs	r2, r2, r1
   b5f26:	f003 f891 	bl	b904c <memmove>
    size_ -= n;
   b5f2a:	686a      	ldr	r2, [r5, #4]
   b5f2c:	1b12      	subs	r2, r2, r4
   b5f2e:	606a      	str	r2, [r5, #4]
}
   b5f30:	bd38      	pop	{r3, r4, r5, pc}

000b5f32 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5f32:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b5f34:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5f36:	4604      	mov	r4, r0
   b5f38:	460d      	mov	r5, r1
   b5f3a:	ab01      	add	r3, sp, #4
   b5f3c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5f40:	f7ff fcf8 	bl	b5934 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b5f44:	4602      	mov	r2, r0
   b5f46:	b138      	cbz	r0, b5f58 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b5f48:	9901      	ldr	r1, [sp, #4]
   b5f4a:	4620      	mov	r0, r4
   b5f4c:	f7ff ffdd 	bl	b5f0a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b5f50:	4629      	mov	r1, r5
   b5f52:	4620      	mov	r0, r4
   b5f54:	f7ff ffed 	bl	b5f32 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b5f58:	b003      	add	sp, #12
   b5f5a:	bd30      	pop	{r4, r5, pc}

000b5f5c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b5f5c:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b5f5e:	460c      	mov	r4, r1
   b5f60:	b929      	cbnz	r1, b5f6e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b5f62:	460a      	mov	r2, r1
   b5f64:	4608      	mov	r0, r1
}
   b5f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5f6a:	f7ff b99f 	b.w	b52ac <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b5f6e:	2101      	movs	r1, #1
   b5f70:	4620      	mov	r0, r4
   b5f72:	f7ff ffde 	bl	b5f32 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5f76:	e9d4 0100 	ldrd	r0, r1, [r4]
   b5f7a:	2200      	movs	r2, #0
   b5f7c:	e7f3      	b.n	b5f66 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b5f7e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b5f7e:	b538      	push	{r3, r4, r5, lr}
   b5f80:	4604      	mov	r4, r0
   b5f82:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b5f84:	f7ff ffb1 	bl	b5eea <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b5f88:	2800      	cmp	r0, #0
   b5f8a:	db0a      	blt.n	b5fa2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b5f8c:	4629      	mov	r1, r5
   b5f8e:	4620      	mov	r0, r4
   b5f90:	f7ff ffe4 	bl	b5f5c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b5f94:	2800      	cmp	r0, #0
   b5f96:	db04      	blt.n	b5fa2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b5f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b5f9c:	2000      	movs	r0, #0
   b5f9e:	f7ff b98d 	b.w	b52bc <hal_ble_gap_start_advertising>
}
   b5fa2:	bd38      	pop	{r3, r4, r5, pc}

000b5fa4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5fa4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5fa6:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5fa8:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b5faa:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5fac:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b5fae:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5fb0:	f7fe fd87 	bl	b4ac2 <_Znwj>
   b5fb4:	b118      	cbz	r0, b5fbe <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5fb6:	682b      	ldr	r3, [r5, #0]
   b5fb8:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5fba:	686b      	ldr	r3, [r5, #4]
   b5fbc:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b5fbe:	4b03      	ldr	r3, [pc, #12]	; (b5fcc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5fc0:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5fc2:	4b03      	ldr	r3, [pc, #12]	; (b5fd0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5fc4:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5fc6:	60a3      	str	r3, [r4, #8]
      }
   b5fc8:	4620      	mov	r0, r4
   b5fca:	bd38      	pop	{r3, r4, r5, pc}
   b5fcc:	000b5975 	.word	0x000b5975
   b5fd0:	000b598d 	.word	0x000b598d

000b5fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5fd4:	680b      	ldr	r3, [r1, #0]
   b5fd6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5fd8:	b113      	cbz	r3, b5fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b5fda:	685a      	ldr	r2, [r3, #4]
   b5fdc:	3201      	adds	r2, #1
   b5fde:	605a      	str	r2, [r3, #4]
      }
   b5fe0:	4770      	bx	lr

000b5fe2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b5fe2:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5fe4:	f851 3b04 	ldr.w	r3, [r1], #4
   b5fe8:	4604      	mov	r4, r0
   b5fea:	f840 3b04 	str.w	r3, [r0], #4
   b5fee:	f7ff fff1 	bl	b5fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b5ff2:	6823      	ldr	r3, [r4, #0]
   b5ff4:	b90b      	cbnz	r3, b5ffa <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b5ff6:	f7ff fcb3 	bl	b5960 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b5ffa:	4620      	mov	r0, r4
   b5ffc:	bd10      	pop	{r4, pc}

000b5ffe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5ffe:	b510      	push	{r4, lr}
   b6000:	f851 3b04 	ldr.w	r3, [r1], #4
   b6004:	4604      	mov	r4, r0
   b6006:	f840 3b04 	str.w	r3, [r0], #4
   b600a:	f7ff ffe3 	bl	b5fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b600e:	4620      	mov	r0, r4
   b6010:	bd10      	pop	{r4, pc}

000b6012 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6012:	b510      	push	{r4, lr}
   b6014:	f851 3b04 	ldr.w	r3, [r1], #4
   b6018:	4604      	mov	r4, r0
   b601a:	f840 3b04 	str.w	r3, [r0], #4
   b601e:	f7ff ffd9 	bl	b5fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6022:	4620      	mov	r0, r4
   b6024:	bd10      	pop	{r4, pc}

000b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6026:	b510      	push	{r4, lr}
   b6028:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b602a:	6800      	ldr	r0, [r0, #0]
   b602c:	b108      	cbz	r0, b6032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b602e:	f7ff fce1 	bl	b59f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6032:	4620      	mov	r0, r4
   b6034:	bd10      	pop	{r4, pc}

000b6036 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6036:	b510      	push	{r4, lr}
   b6038:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b603a:	3004      	adds	r0, #4
   b603c:	f7ff fff3 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6040:	4620      	mov	r0, r4
   b6042:	bd10      	pop	{r4, pc}

000b6044 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6044:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6046:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b604a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b604c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6050:	42ae      	cmp	r6, r5
   b6052:	d004      	beq.n	b605e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6054:	1d28      	adds	r0, r5, #4
   b6056:	f7ff ffe6 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b605a:	3508      	adds	r5, #8
   b605c:	e7f8      	b.n	b6050 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b605e:	6820      	ldr	r0, [r4, #0]
   b6060:	f7ff fb1a 	bl	b5698 <free>
}
   b6064:	4620      	mov	r0, r4
   b6066:	bd70      	pop	{r4, r5, r6, pc}

000b6068 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6068:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b606a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b606e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6070:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6074:	42ae      	cmp	r6, r5
   b6076:	d004      	beq.n	b6082 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6078:	1d28      	adds	r0, r5, #4
   b607a:	f7ff ffd4 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b607e:	3508      	adds	r5, #8
   b6080:	e7f8      	b.n	b6074 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6082:	6820      	ldr	r0, [r4, #0]
   b6084:	f7ff fb08 	bl	b5698 <free>
}
   b6088:	4620      	mov	r0, r4
   b608a:	bd70      	pop	{r4, r5, r6, pc}

000b608c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b608c:	b510      	push	{r4, lr}
   b608e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6090:	3024      	adds	r0, #36	; 0x24
   b6092:	f7ff ffe9 	bl	b6068 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6096:	f104 0018 	add.w	r0, r4, #24
   b609a:	f7ff ffd3 	bl	b6044 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b609e:	bd10      	pop	{r4, pc}

000b60a0 <__tcf_0>:
    static BleLocalDevice instance;
   b60a0:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b60a2:	4b17      	ldr	r3, [pc, #92]	; (b6100 <__tcf_0+0x60>)
   b60a4:	681c      	ldr	r4, [r3, #0]
   b60a6:	b354      	cbz	r4, b60fe <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b60a8:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b60ac:	f7ff fc8e 	bl	b59cc <_ZNSt14_Function_baseD1Ev>
   b60b0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b60b4:	f7ff fc8a 	bl	b59cc <_ZNSt14_Function_baseD1Ev>
   b60b8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b60bc:	f7ff fc86 	bl	b59cc <_ZNSt14_Function_baseD1Ev>
   b60c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b60c4:	f7ff fc82 	bl	b59cc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b60c8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b60cc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b60d0:	42ae      	cmp	r6, r5
   b60d2:	d004      	beq.n	b60de <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b60d4:	1d28      	adds	r0, r5, #4
   b60d6:	f7ff ffa6 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b60da:	3508      	adds	r5, #8
   b60dc:	e7f8      	b.n	b60d0 <__tcf_0+0x30>
    ::free(ptr);
   b60de:	69a0      	ldr	r0, [r4, #24]
   b60e0:	f7ff fada 	bl	b5698 <free>
    ~BleLocalDeviceImpl() = default;
   b60e4:	f104 000c 	add.w	r0, r4, #12
   b60e8:	f7ff ffbe 	bl	b6068 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b60ec:	4620      	mov	r0, r4
   b60ee:	f7ff ffa9 	bl	b6044 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b60f2:	4620      	mov	r0, r4
   b60f4:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b60f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b60fa:	f7fe bce6 	b.w	b4aca <_ZdlPvj>
   b60fe:	bd70      	pop	{r4, r5, r6, pc}
   b6100:	2003e6d0 	.word	0x2003e6d0

000b6104 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6104:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6106:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6108:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b610c:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b6110:	6803      	ldr	r3, [r0, #0]
   b6112:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6114:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6116:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6118:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b611a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b611c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b611e:	f7ff ff82 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6122:	b002      	add	sp, #8
   b6124:	bd10      	pop	{r4, pc}

000b6126 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6126:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6128:	b510      	push	{r4, lr}
      if (_M_empty())
   b612a:	b90a      	cbnz	r2, b6130 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b612c:	f001 fa8e 	bl	b764c <_ZSt25__throw_bad_function_callv>
    }
   b6130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6134:	68c3      	ldr	r3, [r0, #12]
   b6136:	4718      	bx	r3

000b6138 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b6138:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b613a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b613c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b613e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6140:	dd03      	ble.n	b614a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b6142:	f7ff fab1 	bl	b56a8 <realloc>
            if (!d) {
   b6146:	b918      	cbnz	r0, b6150 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6148:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b614a:	f7ff faa5 	bl	b5698 <free>
        T* d = nullptr;
   b614e:	2000      	movs	r0, #0
        data_ = d;
   b6150:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6152:	60a5      	str	r5, [r4, #8]
        return true;
   b6154:	2001      	movs	r0, #1
   b6156:	e7f7      	b.n	b6148 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6158 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6158:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b615a:	6883      	ldr	r3, [r0, #8]
   b615c:	428b      	cmp	r3, r1
   b615e:	da02      	bge.n	b6166 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6160:	f7ff ffea 	bl	b6138 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6164:	bd08      	pop	{r3, pc}
    return true;
   b6166:	2001      	movs	r0, #1
   b6168:	e7fc      	b.n	b6164 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b616a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b616a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b616e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6170:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6172:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6174:	4419      	add	r1, r3
   b6176:	6883      	ldr	r3, [r0, #8]
   b6178:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b617a:	4604      	mov	r4, r0
   b617c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b617e:	dc12      	bgt.n	b61a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6180:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6182:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6184:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6186:	1bd2      	subs	r2, r2, r7
   b6188:	4631      	mov	r1, r6
   b618a:	1970      	adds	r0, r6, r5
   b618c:	f002 ff5e 	bl	b904c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6190:	462a      	mov	r2, r5
   b6192:	4641      	mov	r1, r8
   b6194:	4630      	mov	r0, r6
   b6196:	f002 ff4b 	bl	b9030 <memcpy>
    size_ += n;
   b619a:	6863      	ldr	r3, [r4, #4]
   b619c:	442b      	add	r3, r5
   b619e:	6063      	str	r3, [r4, #4]
    return true;
   b61a0:	2001      	movs	r0, #1
}
   b61a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b61a6:	f7ff ffc7 	bl	b6138 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b61aa:	2800      	cmp	r0, #0
   b61ac:	d1e8      	bne.n	b6180 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b61ae:	e7f8      	b.n	b61a2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b61b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b61b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61b2:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b61b4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b61b8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b61ba:	4604      	mov	r4, r0
   b61bc:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b61be:	da0b      	bge.n	b61d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b61c0:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b61c2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b61c4:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b61c6:	1b52      	subs	r2, r2, r5
   b61c8:	1c48      	adds	r0, r1, #1
   b61ca:	f002 ff3f 	bl	b904c <memmove>
    new(p) T(std::move(value));
   b61ce:	557e      	strb	r6, [r7, r5]
    ++size_;
   b61d0:	6863      	ldr	r3, [r4, #4]
   b61d2:	3301      	adds	r3, #1
   b61d4:	6063      	str	r3, [r4, #4]
}
   b61d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b61d8:	3101      	adds	r1, #1
   b61da:	f7ff ffad 	bl	b6138 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b61de:	2800      	cmp	r0, #0
   b61e0:	d1ee      	bne.n	b61c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b61e2:	e7f8      	b.n	b61d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b61e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b61e4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b61e6:	6841      	ldr	r1, [r0, #4]
   b61e8:	f7ff bfe2 	b.w	b61b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b61ec <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b61ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b61f0:	4604      	mov	r4, r0
   b61f2:	461d      	mov	r5, r3
   b61f4:	460f      	mov	r7, r1
   b61f6:	ab01      	add	r3, sp, #4
   b61f8:	4690      	mov	r8, r2
   b61fa:	460a      	mov	r2, r1
   b61fc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6200:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6204:	f7ff fb96 	bl	b5934 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6208:	1cae      	adds	r6, r5, #2
   b620a:	6863      	ldr	r3, [r4, #4]
   b620c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b620e:	f1b9 0f00 	cmp.w	r9, #0
   b6212:	d126      	bne.n	b6262 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b6214:	b328      	cbz	r0, b6262 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6216:	4433      	add	r3, r6
   b6218:	1a1b      	subs	r3, r3, r0
   b621a:	2bff      	cmp	r3, #255	; 0xff
   b621c:	d809      	bhi.n	b6232 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b621e:	9901      	ldr	r1, [sp, #4]
   b6220:	4620      	mov	r0, r4
   b6222:	f7ff fe72 	bl	b5f0a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6226:	6861      	ldr	r1, [r4, #4]
   b6228:	4620      	mov	r0, r4
   b622a:	4431      	add	r1, r6
   b622c:	f7ff ff94 	bl	b6158 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6230:	b918      	cbnz	r0, b623a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b6232:	6860      	ldr	r0, [r4, #4]
}
   b6234:	b003      	add	sp, #12
   b6236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b623a:	1c6a      	adds	r2, r5, #1
   b623c:	9901      	ldr	r1, [sp, #4]
   b623e:	b2d2      	uxtb	r2, r2
   b6240:	4620      	mov	r0, r4
   b6242:	f7ff ffb5 	bl	b61b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b6246:	9901      	ldr	r1, [sp, #4]
   b6248:	463a      	mov	r2, r7
   b624a:	3101      	adds	r1, #1
   b624c:	4620      	mov	r0, r4
   b624e:	f7ff ffaf 	bl	b61b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b6252:	9901      	ldr	r1, [sp, #4]
   b6254:	462b      	mov	r3, r5
   b6256:	4642      	mov	r2, r8
   b6258:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b625a:	4620      	mov	r0, r4
   b625c:	f7ff ff85 	bl	b616a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b6260:	e7e7      	b.n	b6232 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6262:	18f1      	adds	r1, r6, r3
   b6264:	29ff      	cmp	r1, #255	; 0xff
   b6266:	d8e4      	bhi.n	b6232 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6268:	4620      	mov	r0, r4
   b626a:	f7ff ff75 	bl	b6158 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b626e:	2800      	cmp	r0, #0
   b6270:	d0df      	beq.n	b6232 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b6272:	1c69      	adds	r1, r5, #1
   b6274:	b2c9      	uxtb	r1, r1
   b6276:	4620      	mov	r0, r4
   b6278:	f7ff ffb4 	bl	b61e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b627c:	4639      	mov	r1, r7
   b627e:	4620      	mov	r0, r4
   b6280:	f7ff ffb0 	bl	b61e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b6284:	6861      	ldr	r1, [r4, #4]
   b6286:	462b      	mov	r3, r5
   b6288:	4642      	mov	r2, r8
   b628a:	e7e6      	b.n	b625a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b628c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b628c:	b430      	push	{r4, r5}
   b628e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6292:	b11a      	cbz	r2, b629c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6294:	9502      	str	r5, [sp, #8]
}
   b6296:	bc30      	pop	{r4, r5}
   b6298:	f7ff bfa8 	b.w	b61ec <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b629c:	6840      	ldr	r0, [r0, #4]
}
   b629e:	bc30      	pop	{r4, r5}
   b62a0:	4770      	bx	lr

000b62a2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b62a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b62a4:	2300      	movs	r3, #0
   b62a6:	e9c0 3300 	strd	r3, r3, [r0]
   b62aa:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b62ac:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b62ae:	9300      	str	r3, [sp, #0]
   b62b0:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b62b2:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b62b6:	4619      	mov	r1, r3
   b62b8:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b62bc:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b62be:	f7ff ffe5 	bl	b628c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b62c2:	4620      	mov	r0, r4
   b62c4:	b004      	add	sp, #16
   b62c6:	bd10      	pop	{r4, pc}

000b62c8 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b62c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b62ca:	460a      	mov	r2, r1
   b62cc:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b62ce:	2114      	movs	r1, #20
   b62d0:	4610      	mov	r0, r2
   b62d2:	9203      	str	r2, [sp, #12]
   b62d4:	f002 ff0a 	bl	b90ec <strnlen>
   b62d8:	2100      	movs	r1, #0
   b62da:	4603      	mov	r3, r0
   b62dc:	9100      	str	r1, [sp, #0]
   b62de:	9a03      	ldr	r2, [sp, #12]
   b62e0:	2109      	movs	r1, #9
   b62e2:	4620      	mov	r0, r4
   b62e4:	f7ff ffd2 	bl	b628c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b62e8:	b004      	add	sp, #16
   b62ea:	bd10      	pop	{r4, pc}

000b62ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b62ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b62ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62f0:	4604      	mov	r4, r0
   b62f2:	460d      	mov	r5, r1
   b62f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b62f6:	d914      	bls.n	b6322 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b62f8:	4290      	cmp	r0, r2
   b62fa:	d213      	bcs.n	b6324 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b62fc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6300:	1a75      	subs	r5, r6, r1
   b6302:	f1a1 0708 	sub.w	r7, r1, #8
   b6306:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6308:	42b7      	cmp	r7, r6
   b630a:	d018      	beq.n	b633e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b630c:	b11c      	cbz	r4, b6316 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b630e:	4631      	mov	r1, r6
   b6310:	4620      	mov	r0, r4
   b6312:	f7ff fe7e 	bl	b6012 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b6316:	1d30      	adds	r0, r6, #4
   b6318:	f7ff fe85 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b631c:	3e08      	subs	r6, #8
   b631e:	3c08      	subs	r4, #8
   b6320:	e7f2      	b.n	b6308 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6322:	d00c      	beq.n	b633e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6324:	42b5      	cmp	r5, r6
   b6326:	d00a      	beq.n	b633e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6328:	b11c      	cbz	r4, b6332 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b632a:	4629      	mov	r1, r5
   b632c:	4620      	mov	r0, r4
   b632e:	f7ff fe70 	bl	b6012 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6332:	1d28      	adds	r0, r5, #4
   b6334:	f7ff fe77 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6338:	3508      	adds	r5, #8
   b633a:	3408      	adds	r4, #8
   b633c:	e7f2      	b.n	b6324 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6340 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6342:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6344:	6846      	ldr	r6, [r0, #4]
   b6346:	4668      	mov	r0, sp
   b6348:	f7ff fe63 	bl	b6012 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b634c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b6350:	429f      	cmp	r7, r3
   b6352:	db12      	blt.n	b637a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6354:	3701      	adds	r7, #1
        if (n > 0) {
   b6356:	2f00      	cmp	r7, #0
   b6358:	dd29      	ble.n	b63ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b635a:	00f8      	lsls	r0, r7, #3
   b635c:	f7ff f994 	bl	b5688 <malloc>
            if (!d) {
   b6360:	4605      	mov	r5, r0
   b6362:	b1f0      	cbz	r0, b63a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6364:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6368:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b636c:	f7ff ffbe 	bl	b62ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6370:	6820      	ldr	r0, [r4, #0]
   b6372:	f7ff f991 	bl	b5698 <free>
        data_ = d;
   b6376:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6378:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b637a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b637c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b637e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b6382:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6386:	4631      	mov	r1, r6
   b6388:	f106 0008 	add.w	r0, r6, #8
   b638c:	f7ff ffae 	bl	b62ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6390:	b11e      	cbz	r6, b639a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b6392:	4669      	mov	r1, sp
   b6394:	4630      	mov	r0, r6
   b6396:	f7ff fe3c 	bl	b6012 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b639a:	6863      	ldr	r3, [r4, #4]
   b639c:	3301      	adds	r3, #1
   b639e:	6063      	str	r3, [r4, #4]
    return true;
   b63a0:	2501      	movs	r5, #1
   b63a2:	a801      	add	r0, sp, #4
   b63a4:	f7ff fe3f 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b63a8:	4628      	mov	r0, r5
   b63aa:	b003      	add	sp, #12
   b63ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b63ae:	2500      	movs	r5, #0
   b63b0:	e7de      	b.n	b6370 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b63b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b63b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b63b4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b63b8:	4605      	mov	r5, r0
   b63ba:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b63bc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b63c0:	42a6      	cmp	r6, r4
   b63c2:	d005      	beq.n	b63d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b63c4:	4639      	mov	r1, r7
   b63c6:	4620      	mov	r0, r4
   b63c8:	f7ff fcd9 	bl	b5d7e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b63cc:	b108      	cbz	r0, b63d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b63ce:	b914      	cbnz	r4, b63d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b63d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b63d2:	3408      	adds	r4, #8
   b63d4:	e7f4      	b.n	b63c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b63d6:	1d20      	adds	r0, r4, #4
   b63d8:	f7ff fe25 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b63dc:	e9d5 3200 	ldrd	r3, r2, [r5]
   b63e0:	f104 0108 	add.w	r1, r4, #8
   b63e4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b63e8:	4620      	mov	r0, r4
   b63ea:	f7ff ff7f 	bl	b62ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b63ee:	686b      	ldr	r3, [r5, #4]
   b63f0:	3b01      	subs	r3, #1
   b63f2:	606b      	str	r3, [r5, #4]
    return true;
   b63f4:	e7ec      	b.n	b63d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b63f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b63f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63fc:	4605      	mov	r5, r0
   b63fe:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6400:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6402:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6404:	f7ff fb0a 	bl	b5a1c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6408:	682e      	ldr	r6, [r5, #0]
   b640a:	1ef3      	subs	r3, r6, #3
   b640c:	2b0d      	cmp	r3, #13
   b640e:	d83c      	bhi.n	b648a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6410:	e8df f013 	tbh	[pc, r3, lsl #1]
   b6414:	0057000e 	.word	0x0057000e
   b6418:	00d3003b 	.word	0x00d3003b
   b641c:	003b003b 	.word	0x003b003b
   b6420:	003b003b 	.word	0x003b003b
   b6424:	009d003b 	.word	0x009d003b
   b6428:	009d009d 	.word	0x009d009d
   b642c:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b6430:	a804      	add	r0, sp, #16
   b6432:	f7ff fc6f 	bl	b5d14 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b6436:	9b04      	ldr	r3, [sp, #16]
   b6438:	89aa      	ldrh	r2, [r5, #12]
   b643a:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b643c:	6869      	ldr	r1, [r5, #4]
   b643e:	9804      	ldr	r0, [sp, #16]
   b6440:	3108      	adds	r1, #8
   b6442:	3002      	adds	r0, #2
   b6444:	f7ff fb04 	bl	b5a50 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b6448:	a904      	add	r1, sp, #16
   b644a:	a806      	add	r0, sp, #24
   b644c:	f7ff fde1 	bl	b6012 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b6450:	a906      	add	r1, sp, #24
   b6452:	f104 0018 	add.w	r0, r4, #24
   b6456:	f7ff ff73 	bl	b6340 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b645a:	4605      	mov	r5, r0
   b645c:	a807      	add	r0, sp, #28
   b645e:	f7ff fde2 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6462:	b9c5      	cbnz	r5, b6496 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b6464:	2320      	movs	r3, #32
   b6466:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b646a:	4b5e      	ldr	r3, [pc, #376]	; (b65e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b646c:	495e      	ldr	r1, [pc, #376]	; (b65e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b646e:	9300      	str	r3, [sp, #0]
   b6470:	aa06      	add	r2, sp, #24
   b6472:	462b      	mov	r3, r5
   b6474:	2001      	movs	r0, #1
   b6476:	f7ff f86b 	bl	b5550 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b647a:	9b04      	ldr	r3, [sp, #16]
   b647c:	4629      	mov	r1, r5
   b647e:	8818      	ldrh	r0, [r3, #0]
   b6480:	f7fe ff24 	bl	b52cc <hal_ble_gap_disconnect>
   b6484:	a805      	add	r0, sp, #20
   b6486:	f7ff fdce 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b648a:	a803      	add	r0, sp, #12
   b648c:	f7ff fad4 	bl	b5a38 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b6490:	b00e      	add	sp, #56	; 0x38
   b6492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b6496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6498:	b123      	cbz	r3, b64a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b649a:	a904      	add	r1, sp, #16
   b649c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b64a0:	f7ff fe41 	bl	b6126 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b64a4:	a805      	add	r0, sp, #20
   b64a6:	f7ff fdbe 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b64aa:	2120      	movs	r1, #32
   b64ac:	2300      	movs	r3, #0
   b64ae:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b64b2:	4a4e      	ldr	r2, [pc, #312]	; (b65ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b64b4:	9200      	str	r2, [sp, #0]
   b64b6:	494c      	ldr	r1, [pc, #304]	; (b65e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b64b8:	aa06      	add	r2, sp, #24
   b64ba:	2001      	movs	r0, #1
   b64bc:	f7ff f848 	bl	b5550 <log_message>
   b64c0:	e7e3      	b.n	b648a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b64c2:	89a9      	ldrh	r1, [r5, #12]
   b64c4:	4620      	mov	r0, r4
   b64c6:	f7ff fb8f 	bl	b5be8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b64ca:	4606      	mov	r6, r0
   b64cc:	2800      	cmp	r0, #0
   b64ce:	d0dc      	beq.n	b648a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b64d0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b64d2:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b64d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b64da:	8029      	strh	r1, [r5, #0]
   b64dc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b64e0:	429a      	cmp	r2, r3
   b64e2:	d003      	beq.n	b64ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b64e4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b64e8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b64ea:	e7f9      	b.n	b64e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b64ec:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b64f0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b64f4:	45b8      	cmp	r8, r7
   b64f6:	d004      	beq.n	b6502 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b64f8:	1d38      	adds	r0, r7, #4
   b64fa:	f7ff fd94 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b64fe:	3708      	adds	r7, #8
   b6500:	e7f8      	b.n	b64f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b6502:	2300      	movs	r3, #0
   b6504:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b6506:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b650a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b650e:	45b8      	cmp	r8, r7
   b6510:	d004      	beq.n	b651c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b6512:	1d38      	adds	r0, r7, #4
   b6514:	f7ff fd87 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6518:	3708      	adds	r7, #8
   b651a:	e7f8      	b.n	b650e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b651c:	2300      	movs	r3, #0
   b651e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6520:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b6522:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6524:	b123      	cbz	r3, b6530 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b6526:	4631      	mov	r1, r6
   b6528:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b652c:	f7ff fdfb 	bl	b6126 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b6530:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6532:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6536:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b6538:	4631      	mov	r1, r6
   b653a:	f104 0018 	add.w	r0, r4, #24
   b653e:	f7ff ff38 	bl	b63b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b6542:	2220      	movs	r2, #32
   b6544:	2300      	movs	r3, #0
   b6546:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b654a:	4a29      	ldr	r2, [pc, #164]	; (b65f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b654c:	e7b2      	b.n	b64b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b654e:	89a9      	ldrh	r1, [r5, #12]
   b6550:	4620      	mov	r0, r4
   b6552:	f7ff fb49 	bl	b5be8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6556:	2800      	cmp	r0, #0
   b6558:	d097      	beq.n	b648a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b655a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b655c:	2b00      	cmp	r3, #0
   b655e:	d094      	beq.n	b648a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b6560:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6562:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b6564:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6568:	d001      	beq.n	b656e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b656a:	2e10      	cmp	r6, #16
   b656c:	d117      	bne.n	b659e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b656e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b6570:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b6572:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b6574:	2506      	movs	r5, #6
                        };
   b6576:	f88d 3015 	strb.w	r3, [sp, #21]
   b657a:	9104      	str	r1, [sp, #16]
   b657c:	f88d 2014 	strb.w	r2, [sp, #20]
   b6580:	9006      	str	r0, [sp, #24]
   b6582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b6586:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b6588:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b658c:	9508      	str	r5, [sp, #32]
   b658e:	e883 0003 	stmia.w	r3, {r0, r1}
   b6592:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6594:	a906      	add	r1, sp, #24
   b6596:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b659a:	4798      	blx	r3
   b659c:	e775      	b.n	b648a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b659e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b65a0:	bf01      	itttt	eq
   b65a2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b65a4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b65a6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b65aa:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b65ac:	bf0f      	iteee	eq
   b65ae:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b65b2:	461a      	movne	r2, r3
   b65b4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b65b6:	461d      	movne	r5, r3
   b65b8:	e7dd      	b.n	b6576 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b65ba:	89a9      	ldrh	r1, [r5, #12]
   b65bc:	4620      	mov	r0, r4
   b65be:	f7ff fb13 	bl	b5be8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b65c2:	4601      	mov	r1, r0
   b65c4:	2800      	cmp	r0, #0
   b65c6:	f43f af60 	beq.w	b648a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b65ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b65cc:	2b00      	cmp	r3, #0
   b65ce:	f43f af5c 	beq.w	b648a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b65d2:	686b      	ldr	r3, [r5, #4]
   b65d4:	9306      	str	r3, [sp, #24]
   b65d6:	aa06      	add	r2, sp, #24
   b65d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b65da:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b65de:	4798      	blx	r3
   b65e0:	e753      	b.n	b648a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b65e2:	bf00      	nop
   b65e4:	000b930c 	.word	0x000b930c
   b65e8:	000b928b 	.word	0x000b928b
   b65ec:	000b9332 	.word	0x000b9332
   b65f0:	000b933c 	.word	0x000b933c

000b65f4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b65f4:	b513      	push	{r0, r1, r4, lr}
   b65f6:	460b      	mov	r3, r1
   b65f8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b65fa:	e9d0 0100 	ldrd	r0, r1, [r0]
   b65fe:	466c      	mov	r4, sp
   b6600:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6604:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6608:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b660c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6610:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6614:	b002      	add	sp, #8
   b6616:	bd10      	pop	{r4, pc}

000b6618 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b6618:	b538      	push	{r3, r4, r5, lr}
   b661a:	4605      	mov	r5, r0
   b661c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b661e:	f7ff ffe9 	bl	b65f4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6622:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6624:	68a2      	ldr	r2, [r4, #8]
   b6626:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6628:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b662a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b662c:	68e2      	ldr	r2, [r4, #12]
   b662e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6630:	60e3      	str	r3, [r4, #12]
      }
   b6632:	bd38      	pop	{r3, r4, r5, pc}

000b6634 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b6634:	b570      	push	{r4, r5, r6, lr}
   b6636:	4604      	mov	r4, r0
   b6638:	b08c      	sub	sp, #48	; 0x30
   b663a:	460e      	mov	r6, r1
   b663c:	9201      	str	r2, [sp, #4]
   b663e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b6640:	f7ff fab2 	bl	b5ba8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b6644:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b6646:	9901      	ldr	r1, [sp, #4]
   b6648:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b664c:	f7ff f90d 	bl	b586a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6650:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b6654:	b1cd      	cbz	r5, b668a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b6656:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6658:	9502      	str	r5, [sp, #8]
   b665a:	a902      	add	r1, sp, #8
   b665c:	a804      	add	r0, sp, #16
   b665e:	9303      	str	r3, [sp, #12]
   b6660:	f7ff fca0 	bl	b5fa4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b6664:	2300      	movs	r3, #0
	__x.swap(*this);
   b6666:	a908      	add	r1, sp, #32
   b6668:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b666a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b666c:	f7ff ffd4 	bl	b6618 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b6670:	4631      	mov	r1, r6
   b6672:	a808      	add	r0, sp, #32
   b6674:	f7ff ffd0 	bl	b6618 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6678:	a808      	add	r0, sp, #32
   b667a:	f7ff f9a7 	bl	b59cc <_ZNSt14_Function_baseD1Ev>
   b667e:	a804      	add	r0, sp, #16
   b6680:	f7ff f9a4 	bl	b59cc <_ZNSt14_Function_baseD1Ev>
    }
   b6684:	4620      	mov	r0, r4
   b6686:	b00c      	add	sp, #48	; 0x30
   b6688:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b668a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b668c:	e7ea      	b.n	b6664 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b6690 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b6690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6694:	b087      	sub	sp, #28
   b6696:	461d      	mov	r5, r3
   b6698:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b669c:	4680      	mov	r8, r0
   b669e:	468b      	mov	fp, r1
   b66a0:	4692      	mov	sl, r2
   b66a2:	9912      	ldr	r1, [sp, #72]	; 0x48
   b66a4:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b66a6:	2200      	movs	r2, #0
   b66a8:	2068      	movs	r0, #104	; 0x68
   b66aa:	9102      	str	r1, [sp, #8]
   b66ac:	9204      	str	r2, [sp, #16]
   b66ae:	f7fe fa08 	bl	b4ac2 <_Znwj>
	  auto __pi = ::new (__mem)
   b66b2:	1e06      	subs	r6, r0, #0
   b66b4:	f106 090c 	add.w	r9, r6, #12
   b66b8:	d018      	beq.n	b66ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b66ba:	2201      	movs	r2, #1
	: _M_impl(__a)
   b66bc:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b66be:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b66c2:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b66c4:	4a15      	ldr	r2, [pc, #84]	; (b671c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b66c6:	f847 2b20 	str.w	r2, [r7], #32
   b66ca:	9b03      	ldr	r3, [sp, #12]
   b66cc:	9100      	str	r1, [sp, #0]
   b66ce:	465a      	mov	r2, fp
   b66d0:	4651      	mov	r1, sl
   b66d2:	4648      	mov	r0, r9
   b66d4:	f7ff ffae 	bl	b6634 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b66d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b66dc:	682b      	ldr	r3, [r5, #0]
   b66de:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b66e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b66e2:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b66e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b66e8:	6823      	ldr	r3, [r4, #0]
   b66ea:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b66ec:	a904      	add	r1, sp, #16
   b66ee:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b66f0:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b66f4:	f7ff fd06 	bl	b6104 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b66f8:	a805      	add	r0, sp, #20
   b66fa:	f7ff fc94 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b66fe:	f8d8 3000 	ldr.w	r3, [r8]
   b6702:	b93b      	cbnz	r3, b6714 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b6704:	4a06      	ldr	r2, [pc, #24]	; (b6720 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b6706:	4907      	ldr	r1, [pc, #28]	; (b6724 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b6708:	200a      	movs	r0, #10
}
   b670a:	b007      	add	sp, #28
   b670c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b6710:	f7fe bf16 	b.w	b5540 <panic_>
}
   b6714:	b007      	add	sp, #28
   b6716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b671a:	bf00      	nop
   b671c:	000b93a4 	.word	0x000b93a4
   b6720:	000b525d 	.word	0x000b525d
   b6724:	000b9274 	.word	0x000b9274

000b6728 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6728:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b672a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b672c:	4604      	mov	r4, r0
   b672e:	460d      	mov	r5, r1
   b6730:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6732:	d914      	bls.n	b675e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6734:	4290      	cmp	r0, r2
   b6736:	d213      	bcs.n	b6760 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6738:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b673c:	1a75      	subs	r5, r6, r1
   b673e:	f1a1 0708 	sub.w	r7, r1, #8
   b6742:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6744:	42b7      	cmp	r7, r6
   b6746:	d018      	beq.n	b677a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6748:	b11c      	cbz	r4, b6752 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b674a:	4631      	mov	r1, r6
   b674c:	4620      	mov	r0, r4
   b674e:	f7ff fc56 	bl	b5ffe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6752:	1d30      	adds	r0, r6, #4
   b6754:	f7ff fc67 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6758:	3e08      	subs	r6, #8
   b675a:	3c08      	subs	r4, #8
   b675c:	e7f2      	b.n	b6744 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b675e:	d00c      	beq.n	b677a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6760:	42b5      	cmp	r5, r6
   b6762:	d00a      	beq.n	b677a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6764:	b11c      	cbz	r4, b676e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6766:	4629      	mov	r1, r5
   b6768:	4620      	mov	r0, r4
   b676a:	f7ff fc48 	bl	b5ffe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b676e:	1d28      	adds	r0, r5, #4
   b6770:	f7ff fc59 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6774:	3508      	adds	r5, #8
   b6776:	3408      	adds	r4, #8
   b6778:	e7f2      	b.n	b6760 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b677c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b677c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b677e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6780:	4605      	mov	r5, r0
        if (n > 0) {
   b6782:	dd11      	ble.n	b67a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6784:	00f0      	lsls	r0, r6, #3
   b6786:	f7fe ff7f 	bl	b5688 <malloc>
            if (!d) {
   b678a:	4604      	mov	r4, r0
   b678c:	b158      	cbz	r0, b67a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b678e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6792:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6796:	f7ff ffc7 	bl	b6728 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b679a:	6828      	ldr	r0, [r5, #0]
   b679c:	f7fe ff7c 	bl	b5698 <free>
        data_ = d;
   b67a0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b67a2:	60ae      	str	r6, [r5, #8]
        return true;
   b67a4:	2001      	movs	r0, #1
    }
   b67a6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b67a8:	2400      	movs	r4, #0
   b67aa:	e7f6      	b.n	b679a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b67ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b67ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b67ae:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b67b0:	6845      	ldr	r5, [r0, #4]
   b67b2:	4668      	mov	r0, sp
   b67b4:	f7ff fc23 	bl	b5ffe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b67b8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b67bc:	4299      	cmp	r1, r3
   b67be:	da10      	bge.n	b67e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b67c0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b67c2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b67c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b67c8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b67cc:	4629      	mov	r1, r5
   b67ce:	f105 0008 	add.w	r0, r5, #8
   b67d2:	f7ff ffa9 	bl	b6728 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b67d6:	b98d      	cbnz	r5, b67fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b67d8:	6863      	ldr	r3, [r4, #4]
   b67da:	3301      	adds	r3, #1
   b67dc:	6063      	str	r3, [r4, #4]
    return true;
   b67de:	2601      	movs	r6, #1
   b67e0:	e006      	b.n	b67f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b67e2:	3101      	adds	r1, #1
   b67e4:	4620      	mov	r0, r4
   b67e6:	f7ff ffc9 	bl	b677c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b67ea:	4606      	mov	r6, r0
   b67ec:	2800      	cmp	r0, #0
   b67ee:	d1e7      	bne.n	b67c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b67f0:	a801      	add	r0, sp, #4
   b67f2:	f7ff fc18 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b67f6:	4630      	mov	r0, r6
   b67f8:	b002      	add	sp, #8
   b67fa:	bd70      	pop	{r4, r5, r6, pc}
   b67fc:	4669      	mov	r1, sp
   b67fe:	4628      	mov	r0, r5
   b6800:	f7ff fbfd 	bl	b5ffe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6804:	e7e8      	b.n	b67d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6806 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6806:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b680a:	4604      	mov	r4, r0
   b680c:	460d      	mov	r5, r1
   b680e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6810:	d914      	bls.n	b683c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6812:	4290      	cmp	r0, r2
   b6814:	d213      	bcs.n	b683e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6816:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b681a:	1a75      	subs	r5, r6, r1
   b681c:	f1a1 0708 	sub.w	r7, r1, #8
   b6820:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6822:	42b7      	cmp	r7, r6
   b6824:	d018      	beq.n	b6858 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6826:	b11c      	cbz	r4, b6830 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6828:	4631      	mov	r1, r6
   b682a:	4620      	mov	r0, r4
   b682c:	f7ff fbd9 	bl	b5fe2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6830:	1d30      	adds	r0, r6, #4
   b6832:	f7ff fbf8 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6836:	3e08      	subs	r6, #8
   b6838:	3c08      	subs	r4, #8
   b683a:	e7f2      	b.n	b6822 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b683c:	d00c      	beq.n	b6858 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b683e:	42b5      	cmp	r5, r6
   b6840:	d00a      	beq.n	b6858 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6842:	b11c      	cbz	r4, b684c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6844:	4629      	mov	r1, r5
   b6846:	4620      	mov	r0, r4
   b6848:	f7ff fbcb 	bl	b5fe2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b684c:	1d28      	adds	r0, r5, #4
   b684e:	f7ff fbea 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6852:	3508      	adds	r5, #8
   b6854:	3408      	adds	r4, #8
   b6856:	e7f2      	b.n	b683e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b685a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b685a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b685c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b685e:	4605      	mov	r5, r0
        if (n > 0) {
   b6860:	dd11      	ble.n	b6886 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6862:	00f0      	lsls	r0, r6, #3
   b6864:	f7fe ff10 	bl	b5688 <malloc>
            if (!d) {
   b6868:	4604      	mov	r4, r0
   b686a:	b158      	cbz	r0, b6884 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b686c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6870:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6874:	f7ff ffc7 	bl	b6806 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6878:	6828      	ldr	r0, [r5, #0]
   b687a:	f7fe ff0d 	bl	b5698 <free>
        data_ = d;
   b687e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6880:	60ae      	str	r6, [r5, #8]
        return true;
   b6882:	2001      	movs	r0, #1
    }
   b6884:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6886:	2400      	movs	r4, #0
   b6888:	e7f6      	b.n	b6878 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b688a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b688a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b688c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b688e:	6845      	ldr	r5, [r0, #4]
   b6890:	4668      	mov	r0, sp
   b6892:	f7ff fba6 	bl	b5fe2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6896:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b689a:	4299      	cmp	r1, r3
   b689c:	da10      	bge.n	b68c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b689e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b68a0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b68a2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b68a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b68aa:	4629      	mov	r1, r5
   b68ac:	f105 0008 	add.w	r0, r5, #8
   b68b0:	f7ff ffa9 	bl	b6806 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b68b4:	b98d      	cbnz	r5, b68da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b68b6:	6863      	ldr	r3, [r4, #4]
   b68b8:	3301      	adds	r3, #1
   b68ba:	6063      	str	r3, [r4, #4]
    return true;
   b68bc:	2601      	movs	r6, #1
   b68be:	e006      	b.n	b68ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b68c0:	3101      	adds	r1, #1
   b68c2:	4620      	mov	r0, r4
   b68c4:	f7ff ffc9 	bl	b685a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b68c8:	4606      	mov	r6, r0
   b68ca:	2800      	cmp	r0, #0
   b68cc:	d1e7      	bne.n	b689e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b68ce:	a801      	add	r0, sp, #4
   b68d0:	f7ff fba9 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b68d4:	4630      	mov	r0, r6
   b68d6:	b002      	add	sp, #8
   b68d8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b68da:	4669      	mov	r1, sp
   b68dc:	4628      	mov	r0, r5
   b68de:	f7ff fb80 	bl	b5fe2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b68e2:	e7e8      	b.n	b68b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b68e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b68e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68e8:	4617      	mov	r7, r2
   b68ea:	b0a1      	sub	sp, #132	; 0x84
   b68ec:	4680      	mov	r8, r0
    WiringBleLock lk;
   b68ee:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b68f0:	460e      	mov	r6, r1
    WiringBleLock lk;
   b68f2:	f7ff f893 	bl	b5a1c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b68f6:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b68f8:	7923      	ldrb	r3, [r4, #4]
   b68fa:	b953      	cbnz	r3, b6912 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b68fc:	4639      	mov	r1, r7
   b68fe:	4640      	mov	r0, r8
   b6900:	f7ff fb6f 	bl	b5fe2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b6904:	a80a      	add	r0, sp, #40	; 0x28
   b6906:	f7ff f897 	bl	b5a38 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b690a:	4640      	mov	r0, r8
   b690c:	b021      	add	sp, #132	; 0x84
   b690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6912:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b6914:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b6918:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b691c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b691e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b6922:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b6926:	9b03      	ldr	r3, [sp, #12]
   b6928:	429d      	cmp	r5, r3
   b692a:	d021      	beq.n	b6970 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b692c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b6930:	4658      	mov	r0, fp
   b6932:	f109 0114 	add.w	r1, r9, #20
   b6936:	f7ff f928 	bl	b5b8a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b693a:	b1b8      	cbz	r0, b696c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b693c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b6940:	4650      	mov	r0, sl
   b6942:	f7ff f922 	bl	b5b8a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b6946:	b188      	cbz	r0, b696c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b6948:	6823      	ldr	r3, [r4, #0]
   b694a:	f8d9 2000 	ldr.w	r2, [r9]
   b694e:	4053      	eors	r3, r2
   b6950:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b6954:	d10a      	bne.n	b696c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b6956:	2220      	movs	r2, #32
   b6958:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b695c:	4a5e      	ldr	r2, [pc, #376]	; (b6ad8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b695e:	9200      	str	r2, [sp, #0]
   b6960:	aa15      	add	r2, sp, #84	; 0x54
   b6962:	495e      	ldr	r1, [pc, #376]	; (b6adc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b6964:	2032      	movs	r0, #50	; 0x32
   b6966:	f7fe fdf3 	bl	b5550 <log_message>
   b696a:	e7c7      	b.n	b68fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b696c:	3508      	adds	r5, #8
   b696e:	e7da      	b.n	b6926 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b6970:	4650      	mov	r0, sl
   b6972:	f7ff f8db 	bl	b5b2c <_ZNK8particle7BleUuid7isValidEv>
   b6976:	b960      	cbnz	r0, b6992 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b6978:	4959      	ldr	r1, [pc, #356]	; (b6ae0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b697a:	2201      	movs	r2, #1
   b697c:	a815      	add	r0, sp, #84	; 0x54
   b697e:	ad15      	add	r5, sp, #84	; 0x54
   b6980:	f7ff f8a2 	bl	b5ac8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b6984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6986:	46d4      	mov	ip, sl
   b6988:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b698c:	682b      	ldr	r3, [r5, #0]
   b698e:	f8cc 3000 	str.w	r3, [ip]
   b6992:	6833      	ldr	r3, [r6, #0]
   b6994:	e9d3 5300 	ldrd	r5, r3, [r3]
   b6998:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b699c:	455d      	cmp	r5, fp
   b699e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b69a0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b69a2:	d06e      	beq.n	b6a82 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b69a4:	f855 0b08 	ldr.w	r0, [r5], #8
   b69a8:	f7ff f8ef 	bl	b5b8a <_ZNK8particle7BleUuideqERKS0_>
   b69ac:	2800      	cmp	r0, #0
   b69ae:	d0f5      	beq.n	b699c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b69b0:	f104 0a14 	add.w	sl, r4, #20
   b69b4:	4650      	mov	r0, sl
   b69b6:	f7ff f8b9 	bl	b5b2c <_ZNK8particle7BleUuid7isValidEv>
   b69ba:	b988      	cbnz	r0, b69e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b69bc:	4b49      	ldr	r3, [pc, #292]	; (b6ae4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b69be:	4948      	ldr	r1, [pc, #288]	; (b6ae0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b69c0:	881a      	ldrh	r2, [r3, #0]
   b69c2:	3201      	adds	r2, #1
   b69c4:	b292      	uxth	r2, r2
   b69c6:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b69c8:	a815      	add	r0, sp, #84	; 0x54
   b69ca:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b69cc:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b69ce:	f7ff f8a4 	bl	b5b1a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b69d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69d4:	46d4      	mov	ip, sl
   b69d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b69da:	682b      	ldr	r3, [r5, #0]
   b69dc:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b69e0:	4b41      	ldr	r3, [pc, #260]	; (b6ae8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b69e2:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b69e4:	2228      	movs	r2, #40	; 0x28
   b69e6:	2100      	movs	r1, #0
   b69e8:	a816      	add	r0, sp, #88	; 0x58
   b69ea:	f002 fb49 	bl	b9080 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b69ee:	4651      	mov	r1, sl
   b69f0:	a804      	add	r0, sp, #16
   b69f2:	f7ff f8ad 	bl	b5b50 <_ZN8particle7BleUuid7halUUIDEv>
   b69f6:	ab04      	add	r3, sp, #16
   b69f8:	aa18      	add	r2, sp, #96	; 0x60
   b69fa:	f10d 0c20 	add.w	ip, sp, #32
   b69fe:	6818      	ldr	r0, [r3, #0]
   b6a00:	6859      	ldr	r1, [r3, #4]
   b6a02:	4615      	mov	r5, r2
   b6a04:	c503      	stmia	r5!, {r0, r1}
   b6a06:	3308      	adds	r3, #8
   b6a08:	4563      	cmp	r3, ip
   b6a0a:	462a      	mov	r2, r5
   b6a0c:	d1f7      	bne.n	b69fe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b6a0e:	6818      	ldr	r0, [r3, #0]
   b6a10:	6028      	str	r0, [r5, #0]
    return value_;
   b6a12:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b6a14:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b6a18:	f8d9 3000 	ldr.w	r3, [r9]
   b6a1c:	8a9b      	ldrh	r3, [r3, #20]
   b6a1e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b6a22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6a24:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b6a26:	4b31      	ldr	r3, [pc, #196]	; (b6aec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6a28:	2200      	movs	r2, #0
   b6a2a:	1da1      	adds	r1, r4, #6
   b6a2c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b6a2e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6a32:	f7fe fc7d 	bl	b5330 <hal_ble_gatt_server_add_characteristic>
   b6a36:	2800      	cmp	r0, #0
   b6a38:	f47f af60 	bne.w	b68fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b6a3c:	2301      	movs	r3, #1
   b6a3e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b6a40:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b6a42:	4639      	mov	r1, r7
        return characteristics_;
   b6a44:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b6a46:	a80d      	add	r0, sp, #52	; 0x34
   b6a48:	f7ff facb 	bl	b5fe2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6a4c:	4620      	mov	r0, r4
   b6a4e:	a90d      	add	r1, sp, #52	; 0x34
   b6a50:	f7ff ff1b 	bl	b688a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b6a54:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6a56:	a80e      	add	r0, sp, #56	; 0x38
   b6a58:	f7ff fae5 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a5c:	2c00      	cmp	r4, #0
   b6a5e:	f47f af4d 	bne.w	b68fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b6a62:	2320      	movs	r3, #32
   b6a64:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b6a68:	4b21      	ldr	r3, [pc, #132]	; (b6af0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b6a6a:	9300      	str	r3, [sp, #0]
   b6a6c:	aa0d      	add	r2, sp, #52	; 0x34
   b6a6e:	4623      	mov	r3, r4
   b6a70:	e777      	b.n	b6962 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b6a72:	4639      	mov	r1, r7
   b6a74:	4640      	mov	r0, r8
   b6a76:	f7ff fab4 	bl	b5fe2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6a7a:	a80c      	add	r0, sp, #48	; 0x30
   b6a7c:	f7ff fad3 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a80:	e740      	b.n	b6904 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b6a82:	a80b      	add	r0, sp, #44	; 0x2c
   b6a84:	f7ff f922 	bl	b5ccc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b6a88:	4651      	mov	r1, sl
   b6a8a:	a815      	add	r0, sp, #84	; 0x54
   b6a8c:	f7ff f860 	bl	b5b50 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b6a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6a92:	2300      	movs	r3, #0
   b6a94:	3214      	adds	r2, #20
   b6a96:	a915      	add	r1, sp, #84	; 0x54
   b6a98:	2001      	movs	r0, #1
   b6a9a:	f7fe fc21 	bl	b52e0 <hal_ble_gatt_server_add_service>
   b6a9e:	2800      	cmp	r0, #0
   b6aa0:	d1e7      	bne.n	b6a72 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b6aa2:	6835      	ldr	r5, [r6, #0]
   b6aa4:	a90b      	add	r1, sp, #44	; 0x2c
   b6aa6:	a80d      	add	r0, sp, #52	; 0x34
   b6aa8:	f7ff faa9 	bl	b5ffe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b6aac:	4628      	mov	r0, r5
   b6aae:	a90d      	add	r1, sp, #52	; 0x34
   b6ab0:	f7ff fe7c 	bl	b67ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b6ab4:	4605      	mov	r5, r0
   b6ab6:	a80e      	add	r0, sp, #56	; 0x38
   b6ab8:	f7ff fab5 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6abc:	2d00      	cmp	r5, #0
   b6abe:	d0d8      	beq.n	b6a72 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b6ac0:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b6ac2:	6853      	ldr	r3, [r2, #4]
   b6ac4:	6812      	ldr	r2, [r2, #0]
   b6ac6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b6aca:	3b01      	subs	r3, #1
   b6acc:	a80c      	add	r0, sp, #48	; 0x30
   b6ace:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b6ad2:	f7ff faa8 	bl	b6026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6ad6:	e76b      	b.n	b69b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b6ad8:	000b9349 	.word	0x000b9349
   b6adc:	000b928b 	.word	0x000b928b
   b6ae0:	000b93f8 	.word	0x000b93f8
   b6ae4:	2003e6c8 	.word	0x2003e6c8
   b6ae8:	002c0003 	.word	0x002c0003
   b6aec:	000b5e65 	.word	0x000b5e65
   b6af0:	000b9374 	.word	0x000b9374

000b6af4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b6af4:	4802      	ldr	r0, [pc, #8]	; (b6b00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6af6:	2300      	movs	r3, #0
   b6af8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b6afa:	f7fe bc41 	b.w	b5380 <os_mutex_recursive_create>
   b6afe:	bf00      	nop
   b6b00:	2003e6cc 	.word	0x2003e6cc

000b6b04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b06:	4606      	mov	r6, r0
   b6b08:	460d      	mov	r5, r1
  size_t n = 0;
   b6b0a:	188f      	adds	r7, r1, r2
   b6b0c:	2400      	movs	r4, #0
  while (size--) {
   b6b0e:	42bd      	cmp	r5, r7
   b6b10:	d00c      	beq.n	b6b2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6b12:	6833      	ldr	r3, [r6, #0]
   b6b14:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6b18:	689b      	ldr	r3, [r3, #8]
   b6b1a:	4630      	mov	r0, r6
   b6b1c:	4798      	blx	r3
     if (chunk>=0)
   b6b1e:	1e03      	subs	r3, r0, #0
   b6b20:	db01      	blt.n	b6b26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6b22:	441c      	add	r4, r3
  while (size--) {
   b6b24:	e7f3      	b.n	b6b0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6b26:	2c00      	cmp	r4, #0
   b6b28:	bf08      	it	eq
   b6b2a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6b30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6b30:	b513      	push	{r0, r1, r4, lr}
   b6b32:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6b34:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6b36:	b159      	cbz	r1, b6b50 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6b38:	9101      	str	r1, [sp, #4]
   b6b3a:	f7fd ff7f 	bl	b4a3c <strlen>
   b6b3e:	6823      	ldr	r3, [r4, #0]
   b6b40:	9901      	ldr	r1, [sp, #4]
   b6b42:	68db      	ldr	r3, [r3, #12]
   b6b44:	4602      	mov	r2, r0
   b6b46:	4620      	mov	r0, r4
    }
   b6b48:	b002      	add	sp, #8
   b6b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6b4e:	4718      	bx	r3
    }
   b6b50:	b002      	add	sp, #8
   b6b52:	bd10      	pop	{r4, pc}

000b6b54 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6b54:	b508      	push	{r3, lr}
  return write(str);
   b6b56:	f7ff ffeb 	bl	b6b30 <_ZN5Print5writeEPKc>
}
   b6b5a:	bd08      	pop	{r3, pc}

000b6b5c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6b5c:	6803      	ldr	r3, [r0, #0]
   b6b5e:	689b      	ldr	r3, [r3, #8]
   b6b60:	4718      	bx	r3

000b6b62 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6b62:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6b64:	210d      	movs	r1, #13
{
   b6b66:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6b68:	f7ff fff8 	bl	b6b5c <_ZN5Print5printEc>
  n += print('\n');
   b6b6c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6b6e:	4604      	mov	r4, r0
  n += print('\n');
   b6b70:	4628      	mov	r0, r5
   b6b72:	f7ff fff3 	bl	b6b5c <_ZN5Print5printEc>
  return n;
}
   b6b76:	4420      	add	r0, r4
   b6b78:	bd38      	pop	{r3, r4, r5, pc}

000b6b7a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6b7a:	b538      	push	{r3, r4, r5, lr}
   b6b7c:	4605      	mov	r5, r0
  return write(str);
   b6b7e:	f7ff ffd7 	bl	b6b30 <_ZN5Print5writeEPKc>
   b6b82:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6b84:	4628      	mov	r0, r5
   b6b86:	f7ff ffec 	bl	b6b62 <_ZN5Print7printlnEv>
  return n;
}
   b6b8a:	4420      	add	r0, r4
   b6b8c:	bd38      	pop	{r3, r4, r5, pc}

000b6b8e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6b8e:	b530      	push	{r4, r5, lr}
   b6b90:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6b92:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6b94:	2a01      	cmp	r2, #1
  *str = '\0';
   b6b96:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6b9a:	bf98      	it	ls
   b6b9c:	220a      	movls	r2, #10
   b6b9e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6ba0:	460d      	mov	r5, r1
   b6ba2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6ba6:	fb01 5312 	mls	r3, r1, r2, r5
   b6baa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6bae:	2b09      	cmp	r3, #9
   b6bb0:	bf94      	ite	ls
   b6bb2:	3330      	addls	r3, #48	; 0x30
   b6bb4:	3337      	addhi	r3, #55	; 0x37
   b6bb6:	b2db      	uxtb	r3, r3
  } while(n);
   b6bb8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6bba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6bbe:	d9ef      	bls.n	b6ba0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6bc0:	4621      	mov	r1, r4
   b6bc2:	f7ff ffb5 	bl	b6b30 <_ZN5Print5writeEPKc>
}
   b6bc6:	b00b      	add	sp, #44	; 0x2c
   b6bc8:	bd30      	pop	{r4, r5, pc}
	...

000b6bcc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b6bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6bd0:	ec55 4b10 	vmov	r4, r5, d0
   b6bd4:	4606      	mov	r6, r0
   b6bd6:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b6bd8:	ee10 2a10 	vmov	r2, s0
   b6bdc:	ee10 0a10 	vmov	r0, s0
   b6be0:	462b      	mov	r3, r5
   b6be2:	4629      	mov	r1, r5
   b6be4:	f7fd fe72 	bl	b48cc <__aeabi_dcmpun>
   b6be8:	b140      	cbz	r0, b6bfc <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b6bea:	4953      	ldr	r1, [pc, #332]	; (b6d38 <_ZN5Print10printFloatEdh+0x16c>)
   b6bec:	4630      	mov	r0, r6
   b6bee:	f7ff ff9f 	bl	b6b30 <_ZN5Print5writeEPKc>
   b6bf2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b6bf4:	4650      	mov	r0, sl
   b6bf6:	b003      	add	sp, #12
   b6bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6bfc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b6c00:	4b4e      	ldr	r3, [pc, #312]	; (b6d3c <_ZN5Print10printFloatEdh+0x170>)
   b6c02:	f04f 32ff 	mov.w	r2, #4294967295
   b6c06:	4620      	mov	r0, r4
   b6c08:	4649      	mov	r1, r9
   b6c0a:	f7fd fe5f 	bl	b48cc <__aeabi_dcmpun>
   b6c0e:	b948      	cbnz	r0, b6c24 <_ZN5Print10printFloatEdh+0x58>
   b6c10:	4b4a      	ldr	r3, [pc, #296]	; (b6d3c <_ZN5Print10printFloatEdh+0x170>)
   b6c12:	f04f 32ff 	mov.w	r2, #4294967295
   b6c16:	4620      	mov	r0, r4
   b6c18:	4649      	mov	r1, r9
   b6c1a:	f7fd fe39 	bl	b4890 <__aeabi_dcmple>
   b6c1e:	b908      	cbnz	r0, b6c24 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b6c20:	4947      	ldr	r1, [pc, #284]	; (b6d40 <_ZN5Print10printFloatEdh+0x174>)
   b6c22:	e7e3      	b.n	b6bec <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b6c24:	4b47      	ldr	r3, [pc, #284]	; (b6d44 <_ZN5Print10printFloatEdh+0x178>)
   b6c26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6c2a:	4620      	mov	r0, r4
   b6c2c:	4629      	mov	r1, r5
   b6c2e:	f7fd fe43 	bl	b48b8 <__aeabi_dcmpgt>
   b6c32:	b108      	cbz	r0, b6c38 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b6c34:	4944      	ldr	r1, [pc, #272]	; (b6d48 <_ZN5Print10printFloatEdh+0x17c>)
   b6c36:	e7d9      	b.n	b6bec <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b6c38:	4b44      	ldr	r3, [pc, #272]	; (b6d4c <_ZN5Print10printFloatEdh+0x180>)
   b6c3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6c3e:	4620      	mov	r0, r4
   b6c40:	4629      	mov	r1, r5
   b6c42:	f7fd fe1b 	bl	b487c <__aeabi_dcmplt>
   b6c46:	2800      	cmp	r0, #0
   b6c48:	d1f4      	bne.n	b6c34 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b6c4a:	2200      	movs	r2, #0
   b6c4c:	2300      	movs	r3, #0
   b6c4e:	4620      	mov	r0, r4
   b6c50:	4629      	mov	r1, r5
   b6c52:	f7fd fe13 	bl	b487c <__aeabi_dcmplt>
   b6c56:	b1d0      	cbz	r0, b6c8e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b6c58:	212d      	movs	r1, #45	; 0x2d
   b6c5a:	4630      	mov	r0, r6
   b6c5c:	f7ff ff7e 	bl	b6b5c <_ZN5Print5printEc>
     number = -number;
   b6c60:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b6c64:	4682      	mov	sl, r0
     number = -number;
   b6c66:	461d      	mov	r5, r3
  double rounding = 0.5;
   b6c68:	4939      	ldr	r1, [pc, #228]	; (b6d50 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b6c6a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b6d58 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b6c6e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b6c72:	2000      	movs	r0, #0
    rounding /= 10.0;
   b6c74:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b6c78:	fa5f f38b 	uxtb.w	r3, fp
   b6c7c:	429f      	cmp	r7, r3
   b6c7e:	d908      	bls.n	b6c92 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b6c80:	4642      	mov	r2, r8
   b6c82:	464b      	mov	r3, r9
   b6c84:	f7fd fcb2 	bl	b45ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b6c88:	f10b 0b01 	add.w	fp, fp, #1
   b6c8c:	e7f4      	b.n	b6c78 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b6c8e:	4682      	mov	sl, r0
   b6c90:	e7ea      	b.n	b6c68 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b6c92:	4622      	mov	r2, r4
   b6c94:	462b      	mov	r3, r5
   b6c96:	f7fd f9c9 	bl	b402c <__adddf3>
   b6c9a:	460d      	mov	r5, r1
   b6c9c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b6c9e:	f7fd fe53 	bl	b4948 <__aeabi_d2uiz>
   b6ca2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b6ca4:	f7fd fafe 	bl	b42a4 <__aeabi_ui2d>
   b6ca8:	4602      	mov	r2, r0
   b6caa:	460b      	mov	r3, r1
   b6cac:	4620      	mov	r0, r4
   b6cae:	4629      	mov	r1, r5
   b6cb0:	f7fd f9ba 	bl	b4028 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6cb4:	220a      	movs	r2, #10
   b6cb6:	4604      	mov	r4, r0
   b6cb8:	460d      	mov	r5, r1
   b6cba:	4630      	mov	r0, r6
   b6cbc:	4641      	mov	r1, r8
   b6cbe:	f7ff ff66 	bl	b6b8e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b6cc2:	4482      	add	sl, r0
  if (digits > 0) {
   b6cc4:	2f00      	cmp	r7, #0
   b6cc6:	d095      	beq.n	b6bf4 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b6cc8:	4922      	ldr	r1, [pc, #136]	; (b6d54 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b6cca:	f8df 908c 	ldr.w	r9, [pc, #140]	; b6d58 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b6cce:	4630      	mov	r0, r6
   b6cd0:	f7ff ff2e 	bl	b6b30 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b6cd4:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b6cd8:	4482      	add	sl, r0
  while (digits-- > 0)
   b6cda:	2f00      	cmp	r7, #0
   b6cdc:	d08a      	beq.n	b6bf4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b6cde:	4642      	mov	r2, r8
   b6ce0:	464b      	mov	r3, r9
   b6ce2:	4620      	mov	r0, r4
   b6ce4:	4629      	mov	r1, r5
   b6ce6:	f7fd fb57 	bl	b4398 <__aeabi_dmul>
   b6cea:	4604      	mov	r4, r0
   b6cec:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b6cee:	f7fd fe03 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b6cf2:	f1b0 0b00 	subs.w	fp, r0, #0
   b6cf6:	da1c      	bge.n	b6d32 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b6cf8:	212d      	movs	r1, #45	; 0x2d
   b6cfa:	4630      	mov	r0, r6
   b6cfc:	f7ff ff2e 	bl	b6b5c <_ZN5Print5printEc>
            val = -n;
   b6d00:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b6d04:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b6d06:	220a      	movs	r2, #10
   b6d08:	4630      	mov	r0, r6
   b6d0a:	9301      	str	r3, [sp, #4]
   b6d0c:	f7ff ff3f 	bl	b6b8e <_ZN5Print11printNumberEmh>
   b6d10:	9b01      	ldr	r3, [sp, #4]
   b6d12:	4418      	add	r0, r3
    n += print(toPrint);
   b6d14:	4482      	add	sl, r0
    remainder -= toPrint;
   b6d16:	4658      	mov	r0, fp
   b6d18:	f7fd fad4 	bl	b42c4 <__aeabi_i2d>
   b6d1c:	4602      	mov	r2, r0
   b6d1e:	460b      	mov	r3, r1
   b6d20:	4620      	mov	r0, r4
   b6d22:	4629      	mov	r1, r5
   b6d24:	f7fd f980 	bl	b4028 <__aeabi_dsub>
   b6d28:	3f01      	subs	r7, #1
   b6d2a:	4604      	mov	r4, r0
   b6d2c:	460d      	mov	r5, r1
   b6d2e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b6d30:	e7d3      	b.n	b6cda <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b6d32:	4659      	mov	r1, fp
        size_t t = 0;
   b6d34:	2300      	movs	r3, #0
   b6d36:	e7e6      	b.n	b6d06 <_ZN5Print10printFloatEdh+0x13a>
   b6d38:	000b9418 	.word	0x000b9418
   b6d3c:	7fefffff 	.word	0x7fefffff
   b6d40:	000b941c 	.word	0x000b941c
   b6d44:	41efffff 	.word	0x41efffff
   b6d48:	000b9420 	.word	0x000b9420
   b6d4c:	c1efffff 	.word	0xc1efffff
   b6d50:	3fe00000 	.word	0x3fe00000
   b6d54:	000b9399 	.word	0x000b9399
   b6d58:	40240000 	.word	0x40240000

000b6d5c <_ZN5Print5printEfi>:
{
   b6d5c:	b538      	push	{r3, r4, r5, lr}
   b6d5e:	4604      	mov	r4, r0
   b6d60:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b6d64:	b2cd      	uxtb	r5, r1
   b6d66:	f7fd fabf 	bl	b42e8 <__aeabi_f2d>
   b6d6a:	ec41 0b10 	vmov	d0, r0, r1
   b6d6e:	4629      	mov	r1, r5
   b6d70:	4620      	mov	r0, r4
}
   b6d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b6d76:	f7ff bf29 	b.w	b6bcc <_ZN5Print10printFloatEdh>
	...

000b6d7c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6d7c:	4b01      	ldr	r3, [pc, #4]	; (b6d84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6d7e:	4a02      	ldr	r2, [pc, #8]	; (b6d88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6d80:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6d82:	4770      	bx	lr
   b6d84:	2003e6d4 	.word	0x2003e6d4
   b6d88:	000b9424 	.word	0x000b9424

000b6d8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6d8c:	4b02      	ldr	r3, [pc, #8]	; (b6d98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6d8e:	681a      	ldr	r2, [r3, #0]
   b6d90:	4b02      	ldr	r3, [pc, #8]	; (b6d9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6d92:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6d94:	4770      	bx	lr
   b6d96:	bf00      	nop
   b6d98:	2003e5dc 	.word	0x2003e5dc
   b6d9c:	2003e6d8 	.word	0x2003e6d8

000b6da0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6da0:	2100      	movs	r1, #0
   b6da2:	f7fe bbe5 	b.w	b5570 <system_delay_ms>
	...

000b6da8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6da8:	4b01      	ldr	r3, [pc, #4]	; (b6db0 <_GLOBAL__sub_I_RGB+0x8>)
   b6daa:	2200      	movs	r2, #0
   b6dac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6dae:	4770      	bx	lr
   b6db0:	2003e6dc 	.word	0x2003e6dc

000b6db4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6db4:	4b01      	ldr	r3, [pc, #4]	; (b6dbc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6db6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6db8:	4770      	bx	lr
   b6dba:	bf00      	nop
   b6dbc:	2003e5e4 	.word	0x2003e5e4

000b6dc0 <serialEventRun>:
{
   b6dc0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6dc2:	4b0b      	ldr	r3, [pc, #44]	; (b6df0 <serialEventRun+0x30>)
   b6dc4:	b143      	cbz	r3, b6dd8 <serialEventRun+0x18>
   b6dc6:	f000 f967 	bl	b7098 <_Z16_fetch_usbserialv>
   b6dca:	6803      	ldr	r3, [r0, #0]
   b6dcc:	691b      	ldr	r3, [r3, #16]
   b6dce:	4798      	blx	r3
   b6dd0:	2800      	cmp	r0, #0
   b6dd2:	dd01      	ble.n	b6dd8 <serialEventRun+0x18>
        serialEvent();
   b6dd4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6dd8:	4b06      	ldr	r3, [pc, #24]	; (b6df4 <serialEventRun+0x34>)
   b6dda:	b143      	cbz	r3, b6dee <serialEventRun+0x2e>
   b6ddc:	f000 fbd0 	bl	b7580 <_Z22__fetch_global_Serial1v>
   b6de0:	6803      	ldr	r3, [r0, #0]
   b6de2:	691b      	ldr	r3, [r3, #16]
   b6de4:	4798      	blx	r3
   b6de6:	2800      	cmp	r0, #0
   b6de8:	dd01      	ble.n	b6dee <serialEventRun+0x2e>
        serialEvent1();
   b6dea:	f3af 8000 	nop.w
}
   b6dee:	bd08      	pop	{r3, pc}
	...

000b6df8 <_post_loop>:
{
   b6df8:	b508      	push	{r3, lr}
	serialEventRun();
   b6dfa:	f7ff ffe1 	bl	b6dc0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6dfe:	f7fe fa35 	bl	b526c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6e02:	4b01      	ldr	r3, [pc, #4]	; (b6e08 <_post_loop+0x10>)
   b6e04:	6018      	str	r0, [r3, #0]
}
   b6e06:	bd08      	pop	{r3, pc}
   b6e08:	2003e740 	.word	0x2003e740

000b6e0c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6e0c:	4805      	ldr	r0, [pc, #20]	; (b6e24 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6e0e:	4a06      	ldr	r2, [pc, #24]	; (b6e28 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6e10:	4906      	ldr	r1, [pc, #24]	; (b6e2c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6e12:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6e14:	1a12      	subs	r2, r2, r0
   b6e16:	f002 f90b 	bl	b9030 <memcpy>
    __backup_sram_signature = signature;
   b6e1a:	4b05      	ldr	r3, [pc, #20]	; (b6e30 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6e1c:	4a05      	ldr	r2, [pc, #20]	; (b6e34 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6e1e:	601a      	str	r2, [r3, #0]
}
   b6e20:	bd08      	pop	{r3, pc}
   b6e22:	bf00      	nop
   b6e24:	2003f400 	.word	0x2003f400
   b6e28:	2003f404 	.word	0x2003f404
   b6e2c:	000b97cc 	.word	0x000b97cc
   b6e30:	2003f400 	.word	0x2003f400
   b6e34:	9a271c1e 	.word	0x9a271c1e

000b6e38 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6e38:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6e3a:	2300      	movs	r3, #0
   b6e3c:	9300      	str	r3, [sp, #0]
   b6e3e:	461a      	mov	r2, r3
   b6e40:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6e44:	f7fe fbae 	bl	b55a4 <system_ctrl_set_result>
}
   b6e48:	b003      	add	sp, #12
   b6e4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6e50 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6e50:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6e52:	8843      	ldrh	r3, [r0, #2]
   b6e54:	2b0a      	cmp	r3, #10
   b6e56:	d008      	beq.n	b6e6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6e58:	2b50      	cmp	r3, #80	; 0x50
   b6e5a:	d10b      	bne.n	b6e74 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6e5c:	4b09      	ldr	r3, [pc, #36]	; (b6e84 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6e5e:	681b      	ldr	r3, [r3, #0]
   b6e60:	b14b      	cbz	r3, b6e76 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6e62:	b003      	add	sp, #12
   b6e64:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6e68:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6e6a:	f7ff ffe5 	bl	b6e38 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6e6e:	b003      	add	sp, #12
   b6e70:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6e74:	2300      	movs	r3, #0
   b6e76:	9300      	str	r3, [sp, #0]
   b6e78:	461a      	mov	r2, r3
   b6e7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6e7e:	f7fe fb91 	bl	b55a4 <system_ctrl_set_result>
}
   b6e82:	e7f4      	b.n	b6e6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6e84:	2003e6f0 	.word	0x2003e6f0

000b6e88 <module_user_init_hook>:
{
   b6e88:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6e8a:	4812      	ldr	r0, [pc, #72]	; (b6ed4 <module_user_init_hook+0x4c>)
   b6e8c:	2100      	movs	r1, #0
   b6e8e:	f7fe fc2b 	bl	b56e8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6e92:	4b11      	ldr	r3, [pc, #68]	; (b6ed8 <module_user_init_hook+0x50>)
   b6e94:	681a      	ldr	r2, [r3, #0]
   b6e96:	4b11      	ldr	r3, [pc, #68]	; (b6edc <module_user_init_hook+0x54>)
   b6e98:	429a      	cmp	r2, r3
   b6e9a:	4b11      	ldr	r3, [pc, #68]	; (b6ee0 <module_user_init_hook+0x58>)
   b6e9c:	bf0c      	ite	eq
   b6e9e:	2201      	moveq	r2, #1
   b6ea0:	2200      	movne	r2, #0
   b6ea2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6ea4:	d001      	beq.n	b6eaa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6ea6:	f7ff ffb1 	bl	b6e0c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6eaa:	f7fe f9cf 	bl	b524c <HAL_RNG_GetRandomNumber>
   b6eae:	4604      	mov	r4, r0
    srand(seed);
   b6eb0:	f002 f8ee 	bl	b9090 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6eb4:	4b0b      	ldr	r3, [pc, #44]	; (b6ee4 <module_user_init_hook+0x5c>)
   b6eb6:	b113      	cbz	r3, b6ebe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6eb8:	4620      	mov	r0, r4
   b6eba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6ebe:	2100      	movs	r1, #0
   b6ec0:	4808      	ldr	r0, [pc, #32]	; (b6ee4 <module_user_init_hook+0x5c>)
   b6ec2:	f7fe fbd9 	bl	b5678 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6eca:	4807      	ldr	r0, [pc, #28]	; (b6ee8 <module_user_init_hook+0x60>)
   b6ecc:	2100      	movs	r1, #0
   b6ece:	f7fe bb5f 	b.w	b5590 <system_ctrl_set_app_request_handler>
   b6ed2:	bf00      	nop
   b6ed4:	000b6db5 	.word	0x000b6db5
   b6ed8:	2003f400 	.word	0x2003f400
   b6edc:	9a271c1e 	.word	0x9a271c1e
   b6ee0:	2003e6ec 	.word	0x2003e6ec
   b6ee4:	00000000 	.word	0x00000000
   b6ee8:	000b6e51 	.word	0x000b6e51

000b6eec <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6eec:	4770      	bx	lr

000b6eee <_ZN9IPAddressD0Ev>:
   b6eee:	b510      	push	{r4, lr}
   b6ef0:	2118      	movs	r1, #24
   b6ef2:	4604      	mov	r4, r0
   b6ef4:	f7fd fde9 	bl	b4aca <_ZdlPvj>
   b6ef8:	4620      	mov	r0, r4
   b6efa:	bd10      	pop	{r4, pc}

000b6efc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6efc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6efe:	7d03      	ldrb	r3, [r0, #20]
   b6f00:	2b06      	cmp	r3, #6
{
   b6f02:	b08d      	sub	sp, #52	; 0x34
   b6f04:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6f06:	f100 0704 	add.w	r7, r0, #4
   b6f0a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6f0e:	d012      	beq.n	b6f36 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6f10:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b6f14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6f18:	220a      	movs	r2, #10
   b6f1a:	4630      	mov	r0, r6
   b6f1c:	f7ff fe37 	bl	b6b8e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6f20:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6f22:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6f24:	d019      	beq.n	b6f5a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6f26:	2c00      	cmp	r4, #0
   b6f28:	d0f4      	beq.n	b6f14 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6f2a:	212e      	movs	r1, #46	; 0x2e
   b6f2c:	4630      	mov	r0, r6
   b6f2e:	f7ff fe15 	bl	b6b5c <_ZN5Print5printEc>
   b6f32:	4404      	add	r4, r0
   b6f34:	e7ee      	b.n	b6f14 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6f36:	232f      	movs	r3, #47	; 0x2f
   b6f38:	466a      	mov	r2, sp
   b6f3a:	4639      	mov	r1, r7
   b6f3c:	200a      	movs	r0, #10
		buf[0] = 0;
   b6f3e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6f42:	f7fe fa35 	bl	b53b0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6f46:	4668      	mov	r0, sp
   b6f48:	f7fd fd78 	bl	b4a3c <strlen>
   b6f4c:	6833      	ldr	r3, [r6, #0]
   b6f4e:	4602      	mov	r2, r0
   b6f50:	68db      	ldr	r3, [r3, #12]
   b6f52:	4669      	mov	r1, sp
   b6f54:	4630      	mov	r0, r6
   b6f56:	4798      	blx	r3
   b6f58:	4604      	mov	r4, r0
    }
    return n;
}
   b6f5a:	4620      	mov	r0, r4
   b6f5c:	b00d      	add	sp, #52	; 0x34
   b6f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6f60 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6f60:	b510      	push	{r4, lr}
   b6f62:	4b05      	ldr	r3, [pc, #20]	; (b6f78 <_ZN9IPAddressC1Ev+0x18>)
   b6f64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6f66:	2211      	movs	r2, #17
   b6f68:	f840 3b04 	str.w	r3, [r0], #4
   b6f6c:	2100      	movs	r1, #0
   b6f6e:	f002 f887 	bl	b9080 <memset>
}
   b6f72:	4620      	mov	r0, r4
   b6f74:	bd10      	pop	{r4, pc}
   b6f76:	bf00      	nop
   b6f78:	000b944c 	.word	0x000b944c

000b6f7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6f7c:	4603      	mov	r3, r0
   b6f7e:	4a07      	ldr	r2, [pc, #28]	; (b6f9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6f80:	b510      	push	{r4, lr}
   b6f82:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6f86:	f101 0210 	add.w	r2, r1, #16
   b6f8a:	f851 4b04 	ldr.w	r4, [r1], #4
   b6f8e:	f843 4b04 	str.w	r4, [r3], #4
   b6f92:	4291      	cmp	r1, r2
   b6f94:	d1f9      	bne.n	b6f8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6f96:	780a      	ldrb	r2, [r1, #0]
   b6f98:	701a      	strb	r2, [r3, #0]
}
   b6f9a:	bd10      	pop	{r4, pc}
   b6f9c:	000b944c 	.word	0x000b944c

000b6fa0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6fa0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6fa2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6fa6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6faa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6fae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6fb2:	2304      	movs	r3, #4
   b6fb4:	6041      	str	r1, [r0, #4]
   b6fb6:	7503      	strb	r3, [r0, #20]
}
   b6fb8:	bd10      	pop	{r4, pc}
	...

000b6fbc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6fbc:	b507      	push	{r0, r1, r2, lr}
   b6fbe:	4b06      	ldr	r3, [pc, #24]	; (b6fd8 <_ZN9IPAddressC1EPKh+0x1c>)
   b6fc0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6fc2:	78cb      	ldrb	r3, [r1, #3]
   b6fc4:	9300      	str	r3, [sp, #0]
   b6fc6:	788b      	ldrb	r3, [r1, #2]
   b6fc8:	784a      	ldrb	r2, [r1, #1]
   b6fca:	7809      	ldrb	r1, [r1, #0]
   b6fcc:	f7ff ffe8 	bl	b6fa0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6fd0:	b003      	add	sp, #12
   b6fd2:	f85d fb04 	ldr.w	pc, [sp], #4
   b6fd6:	bf00      	nop
   b6fd8:	000b944c 	.word	0x000b944c

000b6fdc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6fdc:	7441      	strb	r1, [r0, #17]
}
   b6fde:	4770      	bx	lr

000b6fe0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6fe0:	4770      	bx	lr

000b6fe2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6fe2:	4770      	bx	lr

000b6fe4 <_ZN9USBSerial4readEv>:
{
   b6fe4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6fe6:	2100      	movs	r1, #0
   b6fe8:	7c00      	ldrb	r0, [r0, #16]
   b6fea:	f7fe fa91 	bl	b5510 <HAL_USB_USART_Receive_Data>
}
   b6fee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6ff2:	bd08      	pop	{r3, pc}

000b6ff4 <_ZN9USBSerial4peekEv>:
{
   b6ff4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6ff6:	2101      	movs	r1, #1
   b6ff8:	7c00      	ldrb	r0, [r0, #16]
   b6ffa:	f7fe fa89 	bl	b5510 <HAL_USB_USART_Receive_Data>
}
   b6ffe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7002:	bd08      	pop	{r3, pc}

000b7004 <_ZN9USBSerial17availableForWriteEv>:
{
   b7004:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7006:	7c00      	ldrb	r0, [r0, #16]
   b7008:	f7fe fa7a 	bl	b5500 <HAL_USB_USART_Available_Data_For_Write>
}
   b700c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7010:	bd08      	pop	{r3, pc}

000b7012 <_ZN9USBSerial9availableEv>:
{
   b7012:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7014:	7c00      	ldrb	r0, [r0, #16]
   b7016:	f7fe fa6b 	bl	b54f0 <HAL_USB_USART_Available_Data>
}
   b701a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b701e:	bd08      	pop	{r3, pc}

000b7020 <_ZN9USBSerial5writeEh>:
{
   b7020:	b513      	push	{r0, r1, r4, lr}
   b7022:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7024:	7c00      	ldrb	r0, [r0, #16]
{
   b7026:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7028:	f7fe fa6a 	bl	b5500 <HAL_USB_USART_Available_Data_For_Write>
   b702c:	2800      	cmp	r0, #0
   b702e:	9901      	ldr	r1, [sp, #4]
   b7030:	dc01      	bgt.n	b7036 <_ZN9USBSerial5writeEh+0x16>
   b7032:	7c60      	ldrb	r0, [r4, #17]
   b7034:	b120      	cbz	r0, b7040 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7036:	7c20      	ldrb	r0, [r4, #16]
   b7038:	f7fe fa72 	bl	b5520 <HAL_USB_USART_Send_Data>
   b703c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7040:	b002      	add	sp, #8
   b7042:	bd10      	pop	{r4, pc}

000b7044 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7044:	7c00      	ldrb	r0, [r0, #16]
   b7046:	f7fe ba73 	b.w	b5530 <HAL_USB_USART_Flush_Data>

000b704a <_ZN9USBSerialD0Ev>:
   b704a:	b510      	push	{r4, lr}
   b704c:	2114      	movs	r1, #20
   b704e:	4604      	mov	r4, r0
   b7050:	f7fd fd3b 	bl	b4aca <_ZdlPvj>
   b7054:	4620      	mov	r0, r4
   b7056:	bd10      	pop	{r4, pc}

000b7058 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7058:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b705a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b705e:	4604      	mov	r4, r0
   b7060:	4608      	mov	r0, r1
   b7062:	2100      	movs	r1, #0
   b7064:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7068:	4b04      	ldr	r3, [pc, #16]	; (b707c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b706a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b706c:	2301      	movs	r3, #1
  _serial = serial;
   b706e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7070:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7072:	4611      	mov	r1, r2
   b7074:	f7fe fa2c 	bl	b54d0 <HAL_USB_USART_Init>
}
   b7078:	4620      	mov	r0, r4
   b707a:	bd10      	pop	{r4, pc}
   b707c:	000b9460 	.word	0x000b9460

000b7080 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7080:	7c00      	ldrb	r0, [r0, #16]
   b7082:	2200      	movs	r2, #0
   b7084:	f7fe ba2c 	b.w	b54e0 <HAL_USB_USART_Begin>

000b7088 <_Z19acquireSerialBufferv>:
{
   b7088:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b708a:	2214      	movs	r2, #20
{
   b708c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b708e:	2100      	movs	r1, #0
   b7090:	f001 fff6 	bl	b9080 <memset>
}
   b7094:	4620      	mov	r0, r4
   b7096:	bd10      	pop	{r4, pc}

000b7098 <_Z16_fetch_usbserialv>:
{
   b7098:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b709a:	4c0f      	ldr	r4, [pc, #60]	; (b70d8 <_Z16_fetch_usbserialv+0x40>)
{
   b709c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b709e:	a803      	add	r0, sp, #12
   b70a0:	f7ff fff2 	bl	b7088 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b70a4:	7821      	ldrb	r1, [r4, #0]
   b70a6:	f3bf 8f5b 	dmb	ish
   b70aa:	f011 0101 	ands.w	r1, r1, #1
   b70ae:	d10f      	bne.n	b70d0 <_Z16_fetch_usbserialv+0x38>
   b70b0:	4620      	mov	r0, r4
   b70b2:	9101      	str	r1, [sp, #4]
   b70b4:	f7fd fd0b 	bl	b4ace <__cxa_guard_acquire>
   b70b8:	9901      	ldr	r1, [sp, #4]
   b70ba:	b148      	cbz	r0, b70d0 <_Z16_fetch_usbserialv+0x38>
   b70bc:	aa03      	add	r2, sp, #12
   b70be:	4807      	ldr	r0, [pc, #28]	; (b70dc <_Z16_fetch_usbserialv+0x44>)
   b70c0:	f7ff ffca 	bl	b7058 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b70c4:	4620      	mov	r0, r4
   b70c6:	f7fd fd07 	bl	b4ad8 <__cxa_guard_release>
   b70ca:	4805      	ldr	r0, [pc, #20]	; (b70e0 <_Z16_fetch_usbserialv+0x48>)
   b70cc:	f001 ff9a 	bl	b9004 <atexit>
	return _usbserial;
}
   b70d0:	4802      	ldr	r0, [pc, #8]	; (b70dc <_Z16_fetch_usbserialv+0x44>)
   b70d2:	b008      	add	sp, #32
   b70d4:	bd10      	pop	{r4, pc}
   b70d6:	bf00      	nop
   b70d8:	2003e6f4 	.word	0x2003e6f4
   b70dc:	2003e6f8 	.word	0x2003e6f8
   b70e0:	000b6fe1 	.word	0x000b6fe1

000b70e4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b70e4:	4770      	bx	lr

000b70e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b70e6:	7441      	strb	r1, [r0, #17]
}
   b70e8:	4770      	bx	lr

000b70ea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b70ea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b70ec:	7c00      	ldrb	r0, [r0, #16]
   b70ee:	f7fe f997 	bl	b5420 <hal_usart_available_data_for_write>
}
   b70f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b70f6:	bd08      	pop	{r3, pc}

000b70f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b70f8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b70fa:	7c00      	ldrb	r0, [r0, #16]
   b70fc:	f7fe f968 	bl	b53d0 <hal_usart_available>
}
   b7100:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7104:	bd08      	pop	{r3, pc}

000b7106 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7106:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7108:	7c00      	ldrb	r0, [r0, #16]
   b710a:	f7fe f971 	bl	b53f0 <hal_usart_peek>
}
   b710e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7112:	bd08      	pop	{r3, pc}

000b7114 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7114:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7116:	7c00      	ldrb	r0, [r0, #16]
   b7118:	f7fe f962 	bl	b53e0 <hal_usart_read>
}
   b711c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7120:	bd08      	pop	{r3, pc}

000b7122 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7122:	7c00      	ldrb	r0, [r0, #16]
   b7124:	f7fe b96c 	b.w	b5400 <hal_usart_flush>

000b7128 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7128:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b712a:	7c45      	ldrb	r5, [r0, #17]
{
   b712c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b712e:	b12d      	cbz	r5, b713c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7130:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7132:	b003      	add	sp, #12
   b7134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7138:	f7fe b942 	b.w	b53c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b713c:	7c00      	ldrb	r0, [r0, #16]
   b713e:	9101      	str	r1, [sp, #4]
   b7140:	f7fe f96e 	bl	b5420 <hal_usart_available_data_for_write>
   b7144:	2800      	cmp	r0, #0
   b7146:	9901      	ldr	r1, [sp, #4]
   b7148:	dcf2      	bgt.n	b7130 <_ZN11USARTSerial5writeEh+0x8>
}
   b714a:	4628      	mov	r0, r5
   b714c:	b003      	add	sp, #12
   b714e:	bd30      	pop	{r4, r5, pc}

000b7150 <_ZN11USARTSerialD0Ev>:
   b7150:	b510      	push	{r4, lr}
   b7152:	2114      	movs	r1, #20
   b7154:	4604      	mov	r4, r0
   b7156:	f7fd fcb8 	bl	b4aca <_ZdlPvj>
   b715a:	4620      	mov	r0, r4
   b715c:	bd10      	pop	{r4, pc}
	...

000b7160 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7160:	b510      	push	{r4, lr}
   b7162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7166:	4604      	mov	r4, r0
   b7168:	4608      	mov	r0, r1
   b716a:	4611      	mov	r1, r2
   b716c:	2200      	movs	r2, #0
   b716e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7172:	4b04      	ldr	r3, [pc, #16]	; (b7184 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7174:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7176:	2301      	movs	r3, #1
  _serial = serial;
   b7178:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b717a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b717c:	f7fe f958 	bl	b5430 <hal_usart_init_ex>
}
   b7180:	4620      	mov	r0, r4
   b7182:	bd10      	pop	{r4, pc}
   b7184:	000b9490 	.word	0x000b9490

000b7188 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7188:	4770      	bx	lr

000b718a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b718a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b718c:	4606      	mov	r6, r0
   b718e:	4615      	mov	r5, r2
   b7190:	460c      	mov	r4, r1
   b7192:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7194:	42bc      	cmp	r4, r7
   b7196:	d006      	beq.n	b71a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7198:	6833      	ldr	r3, [r6, #0]
   b719a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b719e:	689b      	ldr	r3, [r3, #8]
   b71a0:	4630      	mov	r0, r6
   b71a2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b71a4:	e7f6      	b.n	b7194 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b71a6:	4628      	mov	r0, r5
   b71a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71aa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b71aa:	7c00      	ldrb	r0, [r0, #16]
   b71ac:	2200      	movs	r2, #0
   b71ae:	f7fe b947 	b.w	b5440 <hal_i2c_write>

000b71b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b71b2:	7c00      	ldrb	r0, [r0, #16]
   b71b4:	2100      	movs	r1, #0
   b71b6:	f7fe b94b 	b.w	b5450 <hal_i2c_available>

000b71ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b71ba:	7c00      	ldrb	r0, [r0, #16]
   b71bc:	2100      	movs	r1, #0
   b71be:	f7fe b94f 	b.w	b5460 <hal_i2c_read>

000b71c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b71c2:	7c00      	ldrb	r0, [r0, #16]
   b71c4:	2100      	movs	r1, #0
   b71c6:	f7fe b953 	b.w	b5470 <hal_i2c_peek>

000b71ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b71ca:	7c00      	ldrb	r0, [r0, #16]
   b71cc:	2100      	movs	r1, #0
   b71ce:	f7fe b957 	b.w	b5480 <hal_i2c_flush>

000b71d2 <_ZN7TwoWireD0Ev>:
   b71d2:	b510      	push	{r4, lr}
   b71d4:	2114      	movs	r1, #20
   b71d6:	4604      	mov	r4, r0
   b71d8:	f7fd fc77 	bl	b4aca <_ZdlPvj>
   b71dc:	4620      	mov	r0, r4
   b71de:	bd10      	pop	{r4, pc}

000b71e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b71e0:	b538      	push	{r3, r4, r5, lr}
   b71e2:	4604      	mov	r4, r0
   b71e4:	4615      	mov	r5, r2
   b71e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b71ea:	2200      	movs	r2, #0
   b71ec:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b71f0:	4b09      	ldr	r3, [pc, #36]	; (b7218 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b71f2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b71f4:	4608      	mov	r0, r1
   b71f6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b71f8:	4629      	mov	r1, r5
   b71fa:	f7fe f951 	bl	b54a0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b71fe:	30bf      	adds	r0, #191	; 0xbf
   b7200:	d108      	bne.n	b7214 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7202:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7204:	07db      	lsls	r3, r3, #31
   b7206:	d505      	bpl.n	b7214 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7208:	6868      	ldr	r0, [r5, #4]
   b720a:	f7fe fa45 	bl	b5698 <free>
    free(conf.tx_buffer);
   b720e:	68e8      	ldr	r0, [r5, #12]
   b7210:	f7fe fa42 	bl	b5698 <free>
}
   b7214:	4620      	mov	r0, r4
   b7216:	bd38      	pop	{r3, r4, r5, pc}
   b7218:	000b94c0 	.word	0x000b94c0

000b721c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b721c:	2200      	movs	r2, #0
   b721e:	6840      	ldr	r0, [r0, #4]
   b7220:	4611      	mov	r1, r2
   b7222:	f7fe b9e1 	b.w	b55e8 <network_ready>

000b7226 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7226:	2200      	movs	r2, #0
   b7228:	6840      	ldr	r0, [r0, #4]
   b722a:	4611      	mov	r1, r2
   b722c:	f7fe b9fc 	b.w	b5628 <network_listening>

000b7230 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7230:	2200      	movs	r2, #0
   b7232:	6840      	ldr	r0, [r0, #4]
   b7234:	4611      	mov	r1, r2
   b7236:	f7fe ba07 	b.w	b5648 <network_get_listen_timeout>

000b723a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b723a:	6840      	ldr	r0, [r0, #4]
   b723c:	2200      	movs	r2, #0
   b723e:	f7fe b9fb 	b.w	b5638 <network_set_listen_timeout>

000b7242 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7242:	6840      	ldr	r0, [r0, #4]
   b7244:	2200      	movs	r2, #0
   b7246:	f081 0101 	eor.w	r1, r1, #1
   b724a:	f7fe b9e5 	b.w	b5618 <network_listen>

000b724e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b724e:	2300      	movs	r3, #0
   b7250:	6840      	ldr	r0, [r0, #4]
   b7252:	461a      	mov	r2, r3
   b7254:	4619      	mov	r1, r3
   b7256:	f7fe b9d7 	b.w	b5608 <network_off>

000b725a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b725a:	2300      	movs	r3, #0
   b725c:	6840      	ldr	r0, [r0, #4]
   b725e:	461a      	mov	r2, r3
   b7260:	4619      	mov	r1, r3
   b7262:	f7fe b9c9 	b.w	b55f8 <network_on>

000b7266 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7266:	2200      	movs	r2, #0
   b7268:	6840      	ldr	r0, [r0, #4]
   b726a:	4611      	mov	r1, r2
   b726c:	f7fe b9ac 	b.w	b55c8 <network_connecting>

000b7270 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7270:	6840      	ldr	r0, [r0, #4]
   b7272:	2200      	movs	r2, #0
   b7274:	2102      	movs	r1, #2
   b7276:	f7fe b9af 	b.w	b55d8 <network_disconnect>

000b727a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b727a:	2300      	movs	r3, #0
   b727c:	6840      	ldr	r0, [r0, #4]
   b727e:	461a      	mov	r2, r3
   b7280:	f7fe b99a 	b.w	b55b8 <network_connect>

000b7284 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7284:	4b02      	ldr	r3, [pc, #8]	; (b7290 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7286:	2204      	movs	r2, #4
   b7288:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b728a:	4a02      	ldr	r2, [pc, #8]	; (b7294 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b728c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b728e:	4770      	bx	lr
   b7290:	2003e70c 	.word	0x2003e70c
   b7294:	000b94e8 	.word	0x000b94e8

000b7298 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7298:	2300      	movs	r3, #0
   b729a:	6840      	ldr	r0, [r0, #4]
   b729c:	461a      	mov	r2, r3
   b729e:	f7fe b98b 	b.w	b55b8 <network_connect>

000b72a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b72a2:	6840      	ldr	r0, [r0, #4]
   b72a4:	2200      	movs	r2, #0
   b72a6:	2102      	movs	r1, #2
   b72a8:	f7fe b996 	b.w	b55d8 <network_disconnect>

000b72ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b72ac:	2200      	movs	r2, #0
   b72ae:	6840      	ldr	r0, [r0, #4]
   b72b0:	4611      	mov	r1, r2
   b72b2:	f7fe b989 	b.w	b55c8 <network_connecting>

000b72b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b72b6:	2200      	movs	r2, #0
   b72b8:	6840      	ldr	r0, [r0, #4]
   b72ba:	4611      	mov	r1, r2
   b72bc:	f7fe b994 	b.w	b55e8 <network_ready>

000b72c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b72c0:	2300      	movs	r3, #0
   b72c2:	6840      	ldr	r0, [r0, #4]
   b72c4:	461a      	mov	r2, r3
   b72c6:	4619      	mov	r1, r3
   b72c8:	f7fe b996 	b.w	b55f8 <network_on>

000b72cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b72cc:	2300      	movs	r3, #0
   b72ce:	6840      	ldr	r0, [r0, #4]
   b72d0:	461a      	mov	r2, r3
   b72d2:	4619      	mov	r1, r3
   b72d4:	f7fe b998 	b.w	b5608 <network_off>

000b72d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b72d8:	6840      	ldr	r0, [r0, #4]
   b72da:	2100      	movs	r1, #0
   b72dc:	f7fe b9bc 	b.w	b5658 <network_is_on>

000b72e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b72e0:	6840      	ldr	r0, [r0, #4]
   b72e2:	2100      	movs	r1, #0
   b72e4:	f7fe b9c0 	b.w	b5668 <network_is_off>

000b72e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b72e8:	6840      	ldr	r0, [r0, #4]
   b72ea:	2200      	movs	r2, #0
   b72ec:	f081 0101 	eor.w	r1, r1, #1
   b72f0:	f7fe b992 	b.w	b5618 <network_listen>

000b72f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b72f4:	6840      	ldr	r0, [r0, #4]
   b72f6:	2200      	movs	r2, #0
   b72f8:	f7fe b99e 	b.w	b5638 <network_set_listen_timeout>

000b72fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b72fc:	2200      	movs	r2, #0
   b72fe:	6840      	ldr	r0, [r0, #4]
   b7300:	4611      	mov	r1, r2
   b7302:	f7fe b9a1 	b.w	b5648 <network_get_listen_timeout>

000b7306 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7306:	2200      	movs	r2, #0
   b7308:	6840      	ldr	r0, [r0, #4]
   b730a:	4611      	mov	r1, r2
   b730c:	f7fe b98c 	b.w	b5628 <network_listening>

000b7310 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7314:	b095      	sub	sp, #84	; 0x54
   b7316:	4614      	mov	r4, r2
   b7318:	460d      	mov	r5, r1
   b731a:	4607      	mov	r7, r0
    IPAddress addr;
   b731c:	f7ff fe20 	bl	b6f60 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7320:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7322:	221c      	movs	r2, #28
   b7324:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7326:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7328:	f001 feaa 	bl	b9080 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b732c:	2340      	movs	r3, #64	; 0x40
   b732e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7330:	4620      	mov	r0, r4
   b7332:	466b      	mov	r3, sp
   b7334:	aa0c      	add	r2, sp, #48	; 0x30
   b7336:	2100      	movs	r1, #0
   b7338:	f7fd ff40 	bl	b51bc <netdb_getaddrinfo>
    if (!r) {
   b733c:	4604      	mov	r4, r0
   b733e:	2800      	cmp	r0, #0
   b7340:	d14b      	bne.n	b73da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7342:	4602      	mov	r2, r0
   b7344:	2101      	movs	r1, #1
   b7346:	6868      	ldr	r0, [r5, #4]
   b7348:	f7fe f94e 	bl	b55e8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b734c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b734e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7350:	4622      	mov	r2, r4
   b7352:	6868      	ldr	r0, [r5, #4]
   b7354:	f7fe f948 	bl	b55e8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7358:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b735a:	4681      	mov	r9, r0
        bool ok = false;
   b735c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b735e:	2e00      	cmp	r6, #0
   b7360:	d03b      	beq.n	b73da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7362:	2900      	cmp	r1, #0
   b7364:	d139      	bne.n	b73da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7366:	6873      	ldr	r3, [r6, #4]
   b7368:	2b02      	cmp	r3, #2
   b736a:	d003      	beq.n	b7374 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b736c:	2b0a      	cmp	r3, #10
   b736e:	d011      	beq.n	b7394 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7370:	69f6      	ldr	r6, [r6, #28]
   b7372:	e7f4      	b.n	b735e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7374:	f1b8 0f00 	cmp.w	r8, #0
   b7378:	d0fa      	beq.n	b7370 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b737a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b737c:	a806      	add	r0, sp, #24
   b737e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7380:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7382:	f7ff fe1b 	bl	b6fbc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7388:	1d3c      	adds	r4, r7, #4
   b738a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b738c:	682b      	ldr	r3, [r5, #0]
   b738e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7390:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7392:	e7ed      	b.n	b7370 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7394:	f1b9 0f00 	cmp.w	r9, #0
   b7398:	d0ea      	beq.n	b7370 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b739a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b739c:	2210      	movs	r2, #16
   b739e:	a801      	add	r0, sp, #4
   b73a0:	f001 fe6e 	bl	b9080 <memset>
                    a.v = 6;
   b73a4:	2306      	movs	r3, #6
   b73a6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b73aa:	ad01      	add	r5, sp, #4
   b73ac:	f104 0308 	add.w	r3, r4, #8
   b73b0:	3418      	adds	r4, #24
   b73b2:	6818      	ldr	r0, [r3, #0]
   b73b4:	6859      	ldr	r1, [r3, #4]
   b73b6:	462a      	mov	r2, r5
   b73b8:	c203      	stmia	r2!, {r0, r1}
   b73ba:	3308      	adds	r3, #8
   b73bc:	42a3      	cmp	r3, r4
   b73be:	4615      	mov	r5, r2
   b73c0:	d1f7      	bne.n	b73b2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b73c2:	a901      	add	r1, sp, #4
   b73c4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b73c6:	ad07      	add	r5, sp, #28
   b73c8:	f7ff fdd8 	bl	b6f7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b73cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b73ce:	1d3c      	adds	r4, r7, #4
   b73d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b73d2:	682b      	ldr	r3, [r5, #0]
   b73d4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b73d6:	4649      	mov	r1, r9
   b73d8:	e7ca      	b.n	b7370 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b73da:	9800      	ldr	r0, [sp, #0]
   b73dc:	f7fd fee6 	bl	b51ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b73e0:	4638      	mov	r0, r7
   b73e2:	b015      	add	sp, #84	; 0x54
   b73e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b73e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b73e8:	4b02      	ldr	r3, [pc, #8]	; (b73f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b73ea:	4a03      	ldr	r2, [pc, #12]	; (b73f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b73ec:	601a      	str	r2, [r3, #0]
   b73ee:	2200      	movs	r2, #0
   b73f0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b73f2:	4770      	bx	lr
   b73f4:	2003e714 	.word	0x2003e714
   b73f8:	000b9524 	.word	0x000b9524

000b73fc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b73fc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b73fe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7400:	d902      	bls.n	b7408 <pinAvailable+0xc>
    return false;
   b7402:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7404:	b002      	add	sp, #8
   b7406:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7408:	f1a0 030b 	sub.w	r3, r0, #11
   b740c:	2b02      	cmp	r3, #2
   b740e:	d81a      	bhi.n	b7446 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7410:	4c17      	ldr	r4, [pc, #92]	; (b7470 <pinAvailable+0x74>)
   b7412:	7821      	ldrb	r1, [r4, #0]
   b7414:	f3bf 8f5b 	dmb	ish
   b7418:	f011 0101 	ands.w	r1, r1, #1
   b741c:	d10b      	bne.n	b7436 <pinAvailable+0x3a>
   b741e:	4620      	mov	r0, r4
   b7420:	9101      	str	r1, [sp, #4]
   b7422:	f7fd fb54 	bl	b4ace <__cxa_guard_acquire>
   b7426:	9901      	ldr	r1, [sp, #4]
   b7428:	b128      	cbz	r0, b7436 <pinAvailable+0x3a>
   b742a:	4812      	ldr	r0, [pc, #72]	; (b7474 <pinAvailable+0x78>)
   b742c:	f7fe f9a2 	bl	b5774 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7430:	4620      	mov	r0, r4
   b7432:	f7fd fb51 	bl	b4ad8 <__cxa_guard_release>
   b7436:	4b0f      	ldr	r3, [pc, #60]	; (b7474 <pinAvailable+0x78>)
   b7438:	7818      	ldrb	r0, [r3, #0]
   b743a:	f7fe f841 	bl	b54c0 <hal_spi_is_enabled>
   b743e:	2800      	cmp	r0, #0
   b7440:	d1df      	bne.n	b7402 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7442:	2001      	movs	r0, #1
   b7444:	e7de      	b.n	b7404 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7446:	2801      	cmp	r0, #1
   b7448:	d809      	bhi.n	b745e <pinAvailable+0x62>
   b744a:	f000 f8d9 	bl	b7600 <_Z19__fetch_global_Wirev>
   b744e:	2100      	movs	r1, #0
   b7450:	7c00      	ldrb	r0, [r0, #16]
   b7452:	f7fe f81d 	bl	b5490 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7456:	f080 0001 	eor.w	r0, r0, #1
   b745a:	b2c0      	uxtb	r0, r0
   b745c:	e7d2      	b.n	b7404 <pinAvailable+0x8>
   b745e:	3809      	subs	r0, #9
   b7460:	2801      	cmp	r0, #1
   b7462:	d8ee      	bhi.n	b7442 <pinAvailable+0x46>
   b7464:	f000 f88c 	bl	b7580 <_Z22__fetch_global_Serial1v>
   b7468:	7c00      	ldrb	r0, [r0, #16]
   b746a:	f7fd ffd1 	bl	b5410 <hal_usart_is_enabled>
   b746e:	e7f2      	b.n	b7456 <pinAvailable+0x5a>
   b7470:	2003e71c 	.word	0x2003e71c
   b7474:	2003e720 	.word	0x2003e720

000b7478 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7478:	2823      	cmp	r0, #35	; 0x23
{
   b747a:	b538      	push	{r3, r4, r5, lr}
   b747c:	4604      	mov	r4, r0
   b747e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7480:	d80a      	bhi.n	b7498 <pinMode+0x20>
   b7482:	29ff      	cmp	r1, #255	; 0xff
   b7484:	d008      	beq.n	b7498 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7486:	f7ff ffb9 	bl	b73fc <pinAvailable>
   b748a:	b128      	cbz	r0, b7498 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b748c:	4629      	mov	r1, r5
   b748e:	4620      	mov	r0, r4
}
   b7490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7494:	f7fd bea2 	b.w	b51dc <hal_gpio_mode>
}
   b7498:	bd38      	pop	{r3, r4, r5, pc}

000b749a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b749a:	b538      	push	{r3, r4, r5, lr}
   b749c:	4604      	mov	r4, r0
   b749e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b74a0:	f7fd fea4 	bl	b51ec <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b74a4:	28ff      	cmp	r0, #255	; 0xff
   b74a6:	d010      	beq.n	b74ca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b74a8:	2806      	cmp	r0, #6
   b74aa:	d804      	bhi.n	b74b6 <digitalWrite+0x1c>
   b74ac:	234d      	movs	r3, #77	; 0x4d
   b74ae:	fa23 f000 	lsr.w	r0, r3, r0
   b74b2:	07c3      	lsls	r3, r0, #31
   b74b4:	d409      	bmi.n	b74ca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b74b6:	4620      	mov	r0, r4
   b74b8:	f7ff ffa0 	bl	b73fc <pinAvailable>
   b74bc:	b128      	cbz	r0, b74ca <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b74be:	4629      	mov	r1, r5
   b74c0:	4620      	mov	r0, r4
}
   b74c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b74c6:	f7fd be99 	b.w	b51fc <hal_gpio_write>
}
   b74ca:	bd38      	pop	{r3, r4, r5, pc}

000b74cc <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b74cc:	280d      	cmp	r0, #13
{
   b74ce:	b510      	push	{r4, lr}
   b74d0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b74d2:	bf9c      	itt	ls
   b74d4:	340e      	addls	r4, #14
   b74d6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b74d8:	4620      	mov	r0, r4
   b74da:	f7ff ff8f 	bl	b73fc <pinAvailable>
   b74de:	b150      	cbz	r0, b74f6 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b74e0:	2103      	movs	r1, #3
   b74e2:	4620      	mov	r0, r4
   b74e4:	f7fd fe72 	bl	b51cc <hal_pin_validate_function>
   b74e8:	2803      	cmp	r0, #3
   b74ea:	d104      	bne.n	b74f6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b74ec:	4620      	mov	r0, r4
}
   b74ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b74f2:	f7fd be93 	b.w	b521c <hal_adc_read>
}
   b74f6:	2000      	movs	r0, #0
   b74f8:	bd10      	pop	{r4, pc}

000b74fa <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b74fa:	b538      	push	{r3, r4, r5, lr}
   b74fc:	4604      	mov	r4, r0
   b74fe:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b7500:	f7ff ff7c 	bl	b73fc <pinAvailable>
   b7504:	b1f0      	cbz	r0, b7544 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b7506:	2104      	movs	r1, #4
   b7508:	4620      	mov	r0, r4
   b750a:	f7fd fe5f 	bl	b51cc <hal_pin_validate_function>
   b750e:	2804      	cmp	r0, #4
   b7510:	d105      	bne.n	b751e <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b7512:	b2a9      	uxth	r1, r5
   b7514:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b7516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b751a:	f7fd be77 	b.w	b520c <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b751e:	2102      	movs	r1, #2
   b7520:	4620      	mov	r0, r4
   b7522:	f7fd fe53 	bl	b51cc <hal_pin_validate_function>
   b7526:	2802      	cmp	r0, #2
   b7528:	d10c      	bne.n	b7544 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b752a:	4620      	mov	r0, r4
   b752c:	f7fd fe5e 	bl	b51ec <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b7530:	2801      	cmp	r0, #1
   b7532:	d001      	beq.n	b7538 <_Z11analogWritetm+0x3e>
   b7534:	2804      	cmp	r0, #4
   b7536:	d105      	bne.n	b7544 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b7538:	4629      	mov	r1, r5
   b753a:	4620      	mov	r0, r4
}
   b753c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b7540:	f7fd be7c 	b.w	b523c <hal_pwm_write_ext>
}
   b7544:	bd38      	pop	{r3, r4, r5, pc}

000b7546 <pulseIn>:
 */
uint32_t pulseIn(hal_pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return hal_gpio_pulse_in(pin, value);
   b7546:	f7fd be71 	b.w	b522c <hal_gpio_pulse_in>

000b754a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b754a:	4770      	bx	lr

000b754c <_Z20acquireSerial1Bufferv>:
{
   b754c:	b538      	push	{r3, r4, r5, lr}
   b754e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7550:	2514      	movs	r5, #20
   b7552:	462a      	mov	r2, r5
   b7554:	2100      	movs	r1, #0
   b7556:	f001 fd93 	bl	b9080 <memset>
   b755a:	8025      	strh	r5, [r4, #0]
   b755c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b755e:	4907      	ldr	r1, [pc, #28]	; (b757c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7560:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7562:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7564:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7566:	f000 f86f 	bl	b7648 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b756a:	4904      	ldr	r1, [pc, #16]	; (b757c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b756c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b756e:	4628      	mov	r0, r5
   b7570:	f000 f86a 	bl	b7648 <_ZnajRKSt9nothrow_t>
    };
   b7574:	60e0      	str	r0, [r4, #12]
}
   b7576:	4620      	mov	r0, r4
   b7578:	bd38      	pop	{r3, r4, r5, pc}
   b757a:	bf00      	nop
   b757c:	000b9558 	.word	0x000b9558

000b7580 <_Z22__fetch_global_Serial1v>:
{
   b7580:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7582:	4d0e      	ldr	r5, [pc, #56]	; (b75bc <_Z22__fetch_global_Serial1v+0x3c>)
   b7584:	7829      	ldrb	r1, [r5, #0]
   b7586:	f3bf 8f5b 	dmb	ish
   b758a:	f011 0401 	ands.w	r4, r1, #1
{
   b758e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7590:	d111      	bne.n	b75b6 <_Z22__fetch_global_Serial1v+0x36>
   b7592:	4628      	mov	r0, r5
   b7594:	f7fd fa9b 	bl	b4ace <__cxa_guard_acquire>
   b7598:	b168      	cbz	r0, b75b6 <_Z22__fetch_global_Serial1v+0x36>
   b759a:	a801      	add	r0, sp, #4
   b759c:	f7ff ffd6 	bl	b754c <_Z20acquireSerial1Bufferv>
   b75a0:	aa01      	add	r2, sp, #4
   b75a2:	4621      	mov	r1, r4
   b75a4:	4806      	ldr	r0, [pc, #24]	; (b75c0 <_Z22__fetch_global_Serial1v+0x40>)
   b75a6:	f7ff fddb 	bl	b7160 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b75aa:	4628      	mov	r0, r5
   b75ac:	f7fd fa94 	bl	b4ad8 <__cxa_guard_release>
   b75b0:	4804      	ldr	r0, [pc, #16]	; (b75c4 <_Z22__fetch_global_Serial1v+0x44>)
   b75b2:	f001 fd27 	bl	b9004 <atexit>
    return serial1;
}
   b75b6:	4802      	ldr	r0, [pc, #8]	; (b75c0 <_Z22__fetch_global_Serial1v+0x40>)
   b75b8:	b007      	add	sp, #28
   b75ba:	bd30      	pop	{r4, r5, pc}
   b75bc:	2003e728 	.word	0x2003e728
   b75c0:	2003e72c 	.word	0x2003e72c
   b75c4:	000b754b 	.word	0x000b754b

000b75c8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b75c8:	4770      	bx	lr
	...

000b75cc <_Z17acquireWireBufferv>:
{
   b75cc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b75ce:	4b0a      	ldr	r3, [pc, #40]	; (b75f8 <_Z17acquireWireBufferv+0x2c>)
   b75d0:	6003      	str	r3, [r0, #0]
   b75d2:	2301      	movs	r3, #1
{
   b75d4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b75d6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b75d8:	4908      	ldr	r1, [pc, #32]	; (b75fc <_Z17acquireWireBufferv+0x30>)
   b75da:	2020      	movs	r0, #32
   b75dc:	f000 f834 	bl	b7648 <_ZnajRKSt9nothrow_t>
	};
   b75e0:	2520      	movs	r5, #32
   b75e2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b75e4:	4905      	ldr	r1, [pc, #20]	; (b75fc <_Z17acquireWireBufferv+0x30>)
	};
   b75e6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b75e8:	4628      	mov	r0, r5
   b75ea:	f000 f82d 	bl	b7648 <_ZnajRKSt9nothrow_t>
	};
   b75ee:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b75f2:	4620      	mov	r0, r4
   b75f4:	bd38      	pop	{r3, r4, r5, pc}
   b75f6:	bf00      	nop
   b75f8:	00010018 	.word	0x00010018
   b75fc:	000b9558 	.word	0x000b9558

000b7600 <_Z19__fetch_global_Wirev>:
{
   b7600:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7602:	4d0e      	ldr	r5, [pc, #56]	; (b763c <_Z19__fetch_global_Wirev+0x3c>)
   b7604:	7829      	ldrb	r1, [r5, #0]
   b7606:	f3bf 8f5b 	dmb	ish
   b760a:	f011 0401 	ands.w	r4, r1, #1
{
   b760e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7610:	d111      	bne.n	b7636 <_Z19__fetch_global_Wirev+0x36>
   b7612:	4628      	mov	r0, r5
   b7614:	f7fd fa5b 	bl	b4ace <__cxa_guard_acquire>
   b7618:	b168      	cbz	r0, b7636 <_Z19__fetch_global_Wirev+0x36>
   b761a:	4668      	mov	r0, sp
   b761c:	f7ff ffd6 	bl	b75cc <_Z17acquireWireBufferv>
   b7620:	466a      	mov	r2, sp
   b7622:	4621      	mov	r1, r4
   b7624:	4806      	ldr	r0, [pc, #24]	; (b7640 <_Z19__fetch_global_Wirev+0x40>)
   b7626:	f7ff fddb 	bl	b71e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b762a:	4628      	mov	r0, r5
   b762c:	f7fd fa54 	bl	b4ad8 <__cxa_guard_release>
   b7630:	4804      	ldr	r0, [pc, #16]	; (b7644 <_Z19__fetch_global_Wirev+0x44>)
   b7632:	f001 fce7 	bl	b9004 <atexit>
	return wire;
}
   b7636:	4802      	ldr	r0, [pc, #8]	; (b7640 <_Z19__fetch_global_Wirev+0x40>)
   b7638:	b007      	add	sp, #28
   b763a:	bd30      	pop	{r4, r5, pc}
   b763c:	2003e744 	.word	0x2003e744
   b7640:	2003e748 	.word	0x2003e748
   b7644:	000b75c9 	.word	0x000b75c9

000b7648 <_ZnajRKSt9nothrow_t>:
   b7648:	f7fd ba3d 	b.w	b4ac6 <_Znaj>

000b764c <_ZSt25__throw_bad_function_callv>:
   b764c:	b508      	push	{r3, lr}
   b764e:	f7fe f833 	bl	b56b8 <abort>
	...

000b7654 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7654:	4901      	ldr	r1, [pc, #4]	; (b765c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7656:	f000 b8f9 	b.w	b784c <_ZNKSt9type_infoeqERKS_>
   b765a:	bf00      	nop
   b765c:	000b9574 	.word	0x000b9574

000b7660 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7660:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7662:	2400      	movs	r4, #0
   b7664:	2310      	movs	r3, #16
   b7666:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b766a:	6803      	ldr	r3, [r0, #0]
   b766c:	4615      	mov	r5, r2
   b766e:	699e      	ldr	r6, [r3, #24]
   b7670:	6812      	ldr	r2, [r2, #0]
   b7672:	466b      	mov	r3, sp
   b7674:	e9cd 4400 	strd	r4, r4, [sp]
   b7678:	47b0      	blx	r6
   b767a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b767e:	f003 0306 	and.w	r3, r3, #6
   b7682:	2b06      	cmp	r3, #6
   b7684:	bf03      	ittte	eq
   b7686:	9b00      	ldreq	r3, [sp, #0]
   b7688:	602b      	streq	r3, [r5, #0]
   b768a:	2001      	moveq	r0, #1
   b768c:	4620      	movne	r0, r4
   b768e:	b004      	add	sp, #16
   b7690:	bd70      	pop	{r4, r5, r6, pc}

000b7692 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7692:	9800      	ldr	r0, [sp, #0]
   b7694:	4290      	cmp	r0, r2
   b7696:	bf14      	ite	ne
   b7698:	2001      	movne	r0, #1
   b769a:	2006      	moveq	r0, #6
   b769c:	4770      	bx	lr
	...

000b76a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b76a0:	b510      	push	{r4, lr}
   b76a2:	4b03      	ldr	r3, [pc, #12]	; (b76b0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b76a4:	6003      	str	r3, [r0, #0]
   b76a6:	4604      	mov	r4, r0
   b76a8:	f000 f8cd 	bl	b7846 <_ZNSt9type_infoD1Ev>
   b76ac:	4620      	mov	r0, r4
   b76ae:	bd10      	pop	{r4, pc}
   b76b0:	000b95b4 	.word	0x000b95b4

000b76b4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b76b4:	b510      	push	{r4, lr}
   b76b6:	4604      	mov	r4, r0
   b76b8:	f7ff fff2 	bl	b76a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b76bc:	4620      	mov	r0, r4
   b76be:	2108      	movs	r1, #8
   b76c0:	f7fd fa03 	bl	b4aca <_ZdlPvj>
   b76c4:	4620      	mov	r0, r4
   b76c6:	bd10      	pop	{r4, pc}

000b76c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b76c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b76cc:	461f      	mov	r7, r3
   b76ce:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b76d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b76d6:	4598      	cmp	r8, r3
   b76d8:	4606      	mov	r6, r0
   b76da:	4615      	mov	r5, r2
   b76dc:	d107      	bne.n	b76ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b76de:	9907      	ldr	r1, [sp, #28]
   b76e0:	f000 f8b4 	bl	b784c <_ZNKSt9type_infoeqERKS_>
   b76e4:	b118      	cbz	r0, b76ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b76e6:	7165      	strb	r5, [r4, #5]
   b76e8:	2000      	movs	r0, #0
   b76ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b76ee:	4639      	mov	r1, r7
   b76f0:	4630      	mov	r0, r6
   b76f2:	f000 f8ab 	bl	b784c <_ZNKSt9type_infoeqERKS_>
   b76f6:	2800      	cmp	r0, #0
   b76f8:	d0f6      	beq.n	b76e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b76fa:	2301      	movs	r3, #1
   b76fc:	f8c4 8000 	str.w	r8, [r4]
   b7700:	7125      	strb	r5, [r4, #4]
   b7702:	71a3      	strb	r3, [r4, #6]
   b7704:	e7f0      	b.n	b76e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7706 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7706:	b538      	push	{r3, r4, r5, lr}
   b7708:	4615      	mov	r5, r2
   b770a:	461c      	mov	r4, r3
   b770c:	f000 f89e 	bl	b784c <_ZNKSt9type_infoeqERKS_>
   b7710:	b120      	cbz	r0, b771c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7712:	2308      	movs	r3, #8
   b7714:	60e3      	str	r3, [r4, #12]
   b7716:	2306      	movs	r3, #6
   b7718:	6025      	str	r5, [r4, #0]
   b771a:	7123      	strb	r3, [r4, #4]
   b771c:	bd38      	pop	{r3, r4, r5, pc}

000b771e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b771e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7720:	4605      	mov	r5, r0
   b7722:	460c      	mov	r4, r1
   b7724:	9201      	str	r2, [sp, #4]
   b7726:	461e      	mov	r6, r3
   b7728:	f000 f890 	bl	b784c <_ZNKSt9type_infoeqERKS_>
   b772c:	b950      	cbnz	r0, b7744 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b772e:	2e03      	cmp	r6, #3
   b7730:	d808      	bhi.n	b7744 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7732:	6823      	ldr	r3, [r4, #0]
   b7734:	9a01      	ldr	r2, [sp, #4]
   b7736:	695b      	ldr	r3, [r3, #20]
   b7738:	4629      	mov	r1, r5
   b773a:	4620      	mov	r0, r4
   b773c:	b002      	add	sp, #8
   b773e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7742:	4718      	bx	r3
   b7744:	b002      	add	sp, #8
   b7746:	bd70      	pop	{r4, r5, r6, pc}

000b7748 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7748:	b510      	push	{r4, lr}
   b774a:	4b03      	ldr	r3, [pc, #12]	; (b7758 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b774c:	6003      	str	r3, [r0, #0]
   b774e:	4604      	mov	r4, r0
   b7750:	f7ff ffa6 	bl	b76a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7754:	4620      	mov	r0, r4
   b7756:	bd10      	pop	{r4, pc}
   b7758:	000b9614 	.word	0x000b9614

000b775c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b775c:	b510      	push	{r4, lr}
   b775e:	4604      	mov	r4, r0
   b7760:	f7ff fff2 	bl	b7748 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7764:	4620      	mov	r0, r4
   b7766:	210c      	movs	r1, #12
   b7768:	f7fd f9af 	bl	b4aca <_ZdlPvj>
   b776c:	4620      	mov	r0, r4
   b776e:	bd10      	pop	{r4, pc}

000b7770 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7772:	9f08      	ldr	r7, [sp, #32]
   b7774:	4297      	cmp	r7, r2
   b7776:	4605      	mov	r5, r0
   b7778:	460e      	mov	r6, r1
   b777a:	4614      	mov	r4, r2
   b777c:	d00a      	beq.n	b7794 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b777e:	68a8      	ldr	r0, [r5, #8]
   b7780:	6802      	ldr	r2, [r0, #0]
   b7782:	9708      	str	r7, [sp, #32]
   b7784:	6a15      	ldr	r5, [r2, #32]
   b7786:	4631      	mov	r1, r6
   b7788:	4622      	mov	r2, r4
   b778a:	46ac      	mov	ip, r5
   b778c:	b003      	add	sp, #12
   b778e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7792:	4760      	bx	ip
   b7794:	4619      	mov	r1, r3
   b7796:	9301      	str	r3, [sp, #4]
   b7798:	f000 f858 	bl	b784c <_ZNKSt9type_infoeqERKS_>
   b779c:	9b01      	ldr	r3, [sp, #4]
   b779e:	2800      	cmp	r0, #0
   b77a0:	d0ed      	beq.n	b777e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b77a2:	2006      	movs	r0, #6
   b77a4:	b003      	add	sp, #12
   b77a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b77a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b77a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b77ac:	460d      	mov	r5, r1
   b77ae:	4619      	mov	r1, r3
   b77b0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b77b4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b77b8:	4681      	mov	r9, r0
   b77ba:	4617      	mov	r7, r2
   b77bc:	4698      	mov	r8, r3
   b77be:	f000 f845 	bl	b784c <_ZNKSt9type_infoeqERKS_>
   b77c2:	b190      	cbz	r0, b77ea <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b77c4:	2d00      	cmp	r5, #0
   b77c6:	6034      	str	r4, [r6, #0]
   b77c8:	7137      	strb	r7, [r6, #4]
   b77ca:	db09      	blt.n	b77e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b77cc:	1961      	adds	r1, r4, r5
   b77ce:	458a      	cmp	sl, r1
   b77d0:	bf0c      	ite	eq
   b77d2:	2106      	moveq	r1, #6
   b77d4:	2101      	movne	r1, #1
   b77d6:	71b1      	strb	r1, [r6, #6]
   b77d8:	2000      	movs	r0, #0
   b77da:	b001      	add	sp, #4
   b77dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b77e0:	3502      	adds	r5, #2
   b77e2:	d1f9      	bne.n	b77d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b77e4:	2301      	movs	r3, #1
   b77e6:	71b3      	strb	r3, [r6, #6]
   b77e8:	e7f6      	b.n	b77d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b77ea:	4554      	cmp	r4, sl
   b77ec:	d106      	bne.n	b77fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b77ee:	4659      	mov	r1, fp
   b77f0:	4648      	mov	r0, r9
   b77f2:	f000 f82b 	bl	b784c <_ZNKSt9type_infoeqERKS_>
   b77f6:	b108      	cbz	r0, b77fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b77f8:	7177      	strb	r7, [r6, #5]
   b77fa:	e7ed      	b.n	b77d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b77fc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7800:	6803      	ldr	r3, [r0, #0]
   b7802:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7806:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b780a:	69dc      	ldr	r4, [r3, #28]
   b780c:	463a      	mov	r2, r7
   b780e:	4643      	mov	r3, r8
   b7810:	4629      	mov	r1, r5
   b7812:	46a4      	mov	ip, r4
   b7814:	b001      	add	sp, #4
   b7816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b781a:	4760      	bx	ip

000b781c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7820:	4607      	mov	r7, r0
   b7822:	460c      	mov	r4, r1
   b7824:	4615      	mov	r5, r2
   b7826:	461e      	mov	r6, r3
   b7828:	f7ff ff6d 	bl	b7706 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b782c:	b948      	cbnz	r0, b7842 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b782e:	68b8      	ldr	r0, [r7, #8]
   b7830:	6803      	ldr	r3, [r0, #0]
   b7832:	699f      	ldr	r7, [r3, #24]
   b7834:	462a      	mov	r2, r5
   b7836:	4633      	mov	r3, r6
   b7838:	4621      	mov	r1, r4
   b783a:	46bc      	mov	ip, r7
   b783c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7840:	4760      	bx	ip
   b7842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7846 <_ZNSt9type_infoD1Ev>:
   b7846:	4770      	bx	lr

000b7848 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7848:	2000      	movs	r0, #0
   b784a:	4770      	bx	lr

000b784c <_ZNKSt9type_infoeqERKS_>:
   b784c:	4281      	cmp	r1, r0
   b784e:	b508      	push	{r3, lr}
   b7850:	d00e      	beq.n	b7870 <_ZNKSt9type_infoeqERKS_+0x24>
   b7852:	6840      	ldr	r0, [r0, #4]
   b7854:	7803      	ldrb	r3, [r0, #0]
   b7856:	2b2a      	cmp	r3, #42	; 0x2a
   b7858:	d00c      	beq.n	b7874 <_ZNKSt9type_infoeqERKS_+0x28>
   b785a:	6849      	ldr	r1, [r1, #4]
   b785c:	780b      	ldrb	r3, [r1, #0]
   b785e:	2b2a      	cmp	r3, #42	; 0x2a
   b7860:	bf08      	it	eq
   b7862:	3101      	addeq	r1, #1
   b7864:	f7fd f8e0 	bl	b4a28 <strcmp>
   b7868:	fab0 f080 	clz	r0, r0
   b786c:	0940      	lsrs	r0, r0, #5
   b786e:	bd08      	pop	{r3, pc}
   b7870:	2001      	movs	r0, #1
   b7872:	e7fc      	b.n	b786e <_ZNKSt9type_infoeqERKS_+0x22>
   b7874:	2000      	movs	r0, #0
   b7876:	e7fa      	b.n	b786e <_ZNKSt9type_infoeqERKS_+0x22>

000b7878 <pow>:
   b7878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b787a:	ed2d 8b02 	vpush	{d8}
   b787e:	ec57 6b10 	vmov	r6, r7, d0
   b7882:	ec55 4b11 	vmov	r4, r5, d1
   b7886:	f000 f99b 	bl	b7bc0 <__ieee754_pow>
   b788a:	4b63      	ldr	r3, [pc, #396]	; (b7a18 <pow+0x1a0>)
   b788c:	eeb0 8a40 	vmov.f32	s16, s0
   b7890:	eef0 8a60 	vmov.f32	s17, s1
   b7894:	f993 3000 	ldrsb.w	r3, [r3]
   b7898:	3301      	adds	r3, #1
   b789a:	d02a      	beq.n	b78f2 <pow+0x7a>
   b789c:	4622      	mov	r2, r4
   b789e:	462b      	mov	r3, r5
   b78a0:	4620      	mov	r0, r4
   b78a2:	4629      	mov	r1, r5
   b78a4:	f7fd f812 	bl	b48cc <__aeabi_dcmpun>
   b78a8:	bb18      	cbnz	r0, b78f2 <pow+0x7a>
   b78aa:	4632      	mov	r2, r6
   b78ac:	463b      	mov	r3, r7
   b78ae:	4630      	mov	r0, r6
   b78b0:	4639      	mov	r1, r7
   b78b2:	f7fd f80b 	bl	b48cc <__aeabi_dcmpun>
   b78b6:	2800      	cmp	r0, #0
   b78b8:	d144      	bne.n	b7944 <pow+0xcc>
   b78ba:	2200      	movs	r2, #0
   b78bc:	2300      	movs	r3, #0
   b78be:	4630      	mov	r0, r6
   b78c0:	4639      	mov	r1, r7
   b78c2:	f7fc ffd1 	bl	b4868 <__aeabi_dcmpeq>
   b78c6:	b1d8      	cbz	r0, b7900 <pow+0x88>
   b78c8:	2200      	movs	r2, #0
   b78ca:	2300      	movs	r3, #0
   b78cc:	4620      	mov	r0, r4
   b78ce:	4629      	mov	r1, r5
   b78d0:	f7fc ffca 	bl	b4868 <__aeabi_dcmpeq>
   b78d4:	2800      	cmp	r0, #0
   b78d6:	d13d      	bne.n	b7954 <pow+0xdc>
   b78d8:	ec45 4b10 	vmov	d0, r4, r5
   b78dc:	f001 fa3a 	bl	b8d54 <finite>
   b78e0:	b138      	cbz	r0, b78f2 <pow+0x7a>
   b78e2:	4620      	mov	r0, r4
   b78e4:	4629      	mov	r1, r5
   b78e6:	2200      	movs	r2, #0
   b78e8:	2300      	movs	r3, #0
   b78ea:	f7fc ffc7 	bl	b487c <__aeabi_dcmplt>
   b78ee:	2800      	cmp	r0, #0
   b78f0:	d15c      	bne.n	b79ac <pow+0x134>
   b78f2:	eeb0 0a48 	vmov.f32	s0, s16
   b78f6:	eef0 0a68 	vmov.f32	s1, s17
   b78fa:	ecbd 8b02 	vpop	{d8}
   b78fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7900:	eeb0 0a48 	vmov.f32	s0, s16
   b7904:	eef0 0a68 	vmov.f32	s1, s17
   b7908:	f001 fa24 	bl	b8d54 <finite>
   b790c:	b358      	cbz	r0, b7966 <pow+0xee>
   b790e:	ec51 0b18 	vmov	r0, r1, d8
   b7912:	2200      	movs	r2, #0
   b7914:	2300      	movs	r3, #0
   b7916:	f7fc ffa7 	bl	b4868 <__aeabi_dcmpeq>
   b791a:	2800      	cmp	r0, #0
   b791c:	d0e9      	beq.n	b78f2 <pow+0x7a>
   b791e:	ec47 6b10 	vmov	d0, r6, r7
   b7922:	f001 fa17 	bl	b8d54 <finite>
   b7926:	2800      	cmp	r0, #0
   b7928:	d0e3      	beq.n	b78f2 <pow+0x7a>
   b792a:	ec45 4b10 	vmov	d0, r4, r5
   b792e:	f001 fa11 	bl	b8d54 <finite>
   b7932:	2800      	cmp	r0, #0
   b7934:	d0dd      	beq.n	b78f2 <pow+0x7a>
   b7936:	f7fd fec7 	bl	b56c8 <__errno>
   b793a:	2322      	movs	r3, #34	; 0x22
   b793c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b79f8 <pow+0x180>
   b7940:	6003      	str	r3, [r0, #0]
   b7942:	e7d6      	b.n	b78f2 <pow+0x7a>
   b7944:	4620      	mov	r0, r4
   b7946:	4629      	mov	r1, r5
   b7948:	2200      	movs	r2, #0
   b794a:	2300      	movs	r3, #0
   b794c:	f7fc ff8c 	bl	b4868 <__aeabi_dcmpeq>
   b7950:	2800      	cmp	r0, #0
   b7952:	d0ce      	beq.n	b78f2 <pow+0x7a>
   b7954:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b7a00 <pow+0x188>
   b7958:	eeb0 0a48 	vmov.f32	s0, s16
   b795c:	eef0 0a68 	vmov.f32	s1, s17
   b7960:	ecbd 8b02 	vpop	{d8}
   b7964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7966:	ec47 6b10 	vmov	d0, r6, r7
   b796a:	f001 f9f3 	bl	b8d54 <finite>
   b796e:	2800      	cmp	r0, #0
   b7970:	d0cd      	beq.n	b790e <pow+0x96>
   b7972:	ec45 4b10 	vmov	d0, r4, r5
   b7976:	f001 f9ed 	bl	b8d54 <finite>
   b797a:	2800      	cmp	r0, #0
   b797c:	d0c7      	beq.n	b790e <pow+0x96>
   b797e:	ec53 2b18 	vmov	r2, r3, d8
   b7982:	ee18 0a10 	vmov	r0, s16
   b7986:	4619      	mov	r1, r3
   b7988:	f7fc ffa0 	bl	b48cc <__aeabi_dcmpun>
   b798c:	bb20      	cbnz	r0, b79d8 <pow+0x160>
   b798e:	f7fd fe9b 	bl	b56c8 <__errno>
   b7992:	4603      	mov	r3, r0
   b7994:	2222      	movs	r2, #34	; 0x22
   b7996:	601a      	str	r2, [r3, #0]
   b7998:	4630      	mov	r0, r6
   b799a:	4639      	mov	r1, r7
   b799c:	2200      	movs	r2, #0
   b799e:	2300      	movs	r3, #0
   b79a0:	f7fc ff6c 	bl	b487c <__aeabi_dcmplt>
   b79a4:	b948      	cbnz	r0, b79ba <pow+0x142>
   b79a6:	ed9f 8b18 	vldr	d8, [pc, #96]	; b7a08 <pow+0x190>
   b79aa:	e7a2      	b.n	b78f2 <pow+0x7a>
   b79ac:	f7fd fe8c 	bl	b56c8 <__errno>
   b79b0:	2321      	movs	r3, #33	; 0x21
   b79b2:	ed9f 8b17 	vldr	d8, [pc, #92]	; b7a10 <pow+0x198>
   b79b6:	6003      	str	r3, [r0, #0]
   b79b8:	e79b      	b.n	b78f2 <pow+0x7a>
   b79ba:	ec45 4b10 	vmov	d0, r4, r5
   b79be:	f001 f9df 	bl	b8d80 <rint>
   b79c2:	4622      	mov	r2, r4
   b79c4:	ec51 0b10 	vmov	r0, r1, d0
   b79c8:	462b      	mov	r3, r5
   b79ca:	f7fc ff4d 	bl	b4868 <__aeabi_dcmpeq>
   b79ce:	2800      	cmp	r0, #0
   b79d0:	d1e9      	bne.n	b79a6 <pow+0x12e>
   b79d2:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b7a10 <pow+0x198>
   b79d6:	e78c      	b.n	b78f2 <pow+0x7a>
   b79d8:	f7fd fe76 	bl	b56c8 <__errno>
   b79dc:	2200      	movs	r2, #0
   b79de:	2300      	movs	r3, #0
   b79e0:	2121      	movs	r1, #33	; 0x21
   b79e2:	6001      	str	r1, [r0, #0]
   b79e4:	4610      	mov	r0, r2
   b79e6:	4619      	mov	r1, r3
   b79e8:	f7fc fe00 	bl	b45ec <__aeabi_ddiv>
   b79ec:	ec41 0b18 	vmov	d8, r0, r1
   b79f0:	e77f      	b.n	b78f2 <pow+0x7a>
   b79f2:	bf00      	nop
   b79f4:	f3af 8000 	nop.w
	...
   b7a04:	3ff00000 	.word	0x3ff00000
   b7a08:	00000000 	.word	0x00000000
   b7a0c:	7ff00000 	.word	0x7ff00000
   b7a10:	00000000 	.word	0x00000000
   b7a14:	fff00000 	.word	0xfff00000
   b7a18:	2003e5e0 	.word	0x2003e5e0

000b7a1c <expf>:
   b7a1c:	b508      	push	{r3, lr}
   b7a1e:	ed2d 8b02 	vpush	{d8}
   b7a22:	eeb0 8a40 	vmov.f32	s16, s0
   b7a26:	f000 ff31 	bl	b888c <__ieee754_expf>
   b7a2a:	4b16      	ldr	r3, [pc, #88]	; (b7a84 <expf+0x68>)
   b7a2c:	f993 3000 	ldrsb.w	r3, [r3]
   b7a30:	3301      	adds	r3, #1
   b7a32:	eef0 8a40 	vmov.f32	s17, s0
   b7a36:	d012      	beq.n	b7a5e <expf+0x42>
   b7a38:	eeb0 0a48 	vmov.f32	s0, s16
   b7a3c:	f001 face 	bl	b8fdc <finitef>
   b7a40:	b168      	cbz	r0, b7a5e <expf+0x42>
   b7a42:	eddf 7a11 	vldr	s15, [pc, #68]	; b7a88 <expf+0x6c>
   b7a46:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b7a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7a4e:	dc12      	bgt.n	b7a76 <expf+0x5a>
   b7a50:	eddf 7a0e 	vldr	s15, [pc, #56]	; b7a8c <expf+0x70>
   b7a54:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b7a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7a5c:	d404      	bmi.n	b7a68 <expf+0x4c>
   b7a5e:	eeb0 0a68 	vmov.f32	s0, s17
   b7a62:	ecbd 8b02 	vpop	{d8}
   b7a66:	bd08      	pop	{r3, pc}
   b7a68:	f7fd fe2e 	bl	b56c8 <__errno>
   b7a6c:	2322      	movs	r3, #34	; 0x22
   b7a6e:	eddf 8a08 	vldr	s17, [pc, #32]	; b7a90 <expf+0x74>
   b7a72:	6003      	str	r3, [r0, #0]
   b7a74:	e7f3      	b.n	b7a5e <expf+0x42>
   b7a76:	f7fd fe27 	bl	b56c8 <__errno>
   b7a7a:	2322      	movs	r3, #34	; 0x22
   b7a7c:	eddf 8a05 	vldr	s17, [pc, #20]	; b7a94 <expf+0x78>
   b7a80:	6003      	str	r3, [r0, #0]
   b7a82:	e7ec      	b.n	b7a5e <expf+0x42>
   b7a84:	2003e5e0 	.word	0x2003e5e0
   b7a88:	42b17180 	.word	0x42b17180
   b7a8c:	c2cff1b5 	.word	0xc2cff1b5
   b7a90:	00000000 	.word	0x00000000
   b7a94:	7f800000 	.word	0x7f800000

000b7a98 <logf>:
   b7a98:	b508      	push	{r3, lr}
   b7a9a:	ed2d 8b02 	vpush	{d8}
   b7a9e:	eeb0 8a40 	vmov.f32	s16, s0
   b7aa2:	f000 ffe9 	bl	b8a78 <__ieee754_logf>
   b7aa6:	4b14      	ldr	r3, [pc, #80]	; (b7af8 <logf+0x60>)
   b7aa8:	f993 3000 	ldrsb.w	r3, [r3]
   b7aac:	3301      	adds	r3, #1
   b7aae:	d014      	beq.n	b7ada <logf+0x42>
   b7ab0:	eeb4 8a48 	vcmp.f32	s16, s16
   b7ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7ab8:	d60f      	bvs.n	b7ada <logf+0x42>
   b7aba:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b7abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7ac2:	dc0a      	bgt.n	b7ada <logf+0x42>
   b7ac4:	eeb5 8a40 	vcmp.f32	s16, #0.0
   b7ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7acc:	d108      	bne.n	b7ae0 <logf+0x48>
   b7ace:	f7fd fdfb 	bl	b56c8 <__errno>
   b7ad2:	2322      	movs	r3, #34	; 0x22
   b7ad4:	ed9f 0a09 	vldr	s0, [pc, #36]	; b7afc <logf+0x64>
   b7ad8:	6003      	str	r3, [r0, #0]
   b7ada:	ecbd 8b02 	vpop	{d8}
   b7ade:	bd08      	pop	{r3, pc}
   b7ae0:	f7fd fdf2 	bl	b56c8 <__errno>
   b7ae4:	ecbd 8b02 	vpop	{d8}
   b7ae8:	4603      	mov	r3, r0
   b7aea:	2221      	movs	r2, #33	; 0x21
   b7aec:	601a      	str	r2, [r3, #0]
   b7aee:	4804      	ldr	r0, [pc, #16]	; (b7b00 <logf+0x68>)
   b7af0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7af4:	f001 ba80 	b.w	b8ff8 <nanf>
   b7af8:	2003e5e0 	.word	0x2003e5e0
   b7afc:	ff800000 	.word	0xff800000
   b7b00:	000b9650 	.word	0x000b9650

000b7b04 <log10f>:
   b7b04:	b508      	push	{r3, lr}
   b7b06:	ed2d 8b02 	vpush	{d8}
   b7b0a:	eeb0 8a40 	vmov.f32	s16, s0
   b7b0e:	f001 f8b3 	bl	b8c78 <__ieee754_log10f>
   b7b12:	4b14      	ldr	r3, [pc, #80]	; (b7b64 <log10f+0x60>)
   b7b14:	f993 3000 	ldrsb.w	r3, [r3]
   b7b18:	3301      	adds	r3, #1
   b7b1a:	d014      	beq.n	b7b46 <log10f+0x42>
   b7b1c:	eeb4 8a48 	vcmp.f32	s16, s16
   b7b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7b24:	d60f      	bvs.n	b7b46 <log10f+0x42>
   b7b26:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b7b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7b2e:	d80a      	bhi.n	b7b46 <log10f+0x42>
   b7b30:	eeb5 8a40 	vcmp.f32	s16, #0.0
   b7b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7b38:	d108      	bne.n	b7b4c <log10f+0x48>
   b7b3a:	f7fd fdc5 	bl	b56c8 <__errno>
   b7b3e:	2322      	movs	r3, #34	; 0x22
   b7b40:	ed9f 0a09 	vldr	s0, [pc, #36]	; b7b68 <log10f+0x64>
   b7b44:	6003      	str	r3, [r0, #0]
   b7b46:	ecbd 8b02 	vpop	{d8}
   b7b4a:	bd08      	pop	{r3, pc}
   b7b4c:	f7fd fdbc 	bl	b56c8 <__errno>
   b7b50:	ecbd 8b02 	vpop	{d8}
   b7b54:	4603      	mov	r3, r0
   b7b56:	2221      	movs	r2, #33	; 0x21
   b7b58:	601a      	str	r2, [r3, #0]
   b7b5a:	4804      	ldr	r0, [pc, #16]	; (b7b6c <log10f+0x68>)
   b7b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7b60:	f001 ba4a 	b.w	b8ff8 <nanf>
   b7b64:	2003e5e0 	.word	0x2003e5e0
   b7b68:	ff800000 	.word	0xff800000
   b7b6c:	000b9650 	.word	0x000b9650

000b7b70 <sqrtf>:
   b7b70:	b508      	push	{r3, lr}
   b7b72:	ed2d 8b02 	vpush	{d8}
   b7b76:	eeb0 8a40 	vmov.f32	s16, s0
   b7b7a:	f001 f8dd 	bl	b8d38 <__ieee754_sqrtf>
   b7b7e:	4b0e      	ldr	r3, [pc, #56]	; (b7bb8 <sqrtf+0x48>)
   b7b80:	f993 3000 	ldrsb.w	r3, [r3]
   b7b84:	3301      	adds	r3, #1
   b7b86:	d00b      	beq.n	b7ba0 <sqrtf+0x30>
   b7b88:	eeb4 8a48 	vcmp.f32	s16, s16
   b7b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7b90:	d606      	bvs.n	b7ba0 <sqrtf+0x30>
   b7b92:	eddf 8a0a 	vldr	s17, [pc, #40]	; b7bbc <sqrtf+0x4c>
   b7b96:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b7b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7b9e:	d402      	bmi.n	b7ba6 <sqrtf+0x36>
   b7ba0:	ecbd 8b02 	vpop	{d8}
   b7ba4:	bd08      	pop	{r3, pc}
   b7ba6:	f7fd fd8f 	bl	b56c8 <__errno>
   b7baa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   b7bae:	ecbd 8b02 	vpop	{d8}
   b7bb2:	2321      	movs	r3, #33	; 0x21
   b7bb4:	6003      	str	r3, [r0, #0]
   b7bb6:	bd08      	pop	{r3, pc}
   b7bb8:	2003e5e0 	.word	0x2003e5e0
   b7bbc:	00000000 	.word	0x00000000

000b7bc0 <__ieee754_pow>:
   b7bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7bc4:	ec57 6b11 	vmov	r6, r7, d1
   b7bc8:	ed2d 8b0c 	vpush	{d8-d13}
   b7bcc:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b7bd0:	ea5a 0206 	orrs.w	r2, sl, r6
   b7bd4:	b087      	sub	sp, #28
   b7bd6:	d03d      	beq.n	b7c54 <__ieee754_pow+0x94>
   b7bd8:	ec55 4b10 	vmov	r4, r5, d0
   b7bdc:	4972      	ldr	r1, [pc, #456]	; (b7da8 <__ieee754_pow+0x1e8>)
   b7bde:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b7be2:	4588      	cmp	r8, r1
   b7be4:	ee10 2a10 	vmov	r2, s0
   b7be8:	46a9      	mov	r9, r5
   b7bea:	dc2c      	bgt.n	b7c46 <__ieee754_pow+0x86>
   b7bec:	ee11 3a10 	vmov	r3, s2
   b7bf0:	46bb      	mov	fp, r7
   b7bf2:	d036      	beq.n	b7c62 <__ieee754_pow+0xa2>
   b7bf4:	458a      	cmp	sl, r1
   b7bf6:	dc26      	bgt.n	b7c46 <__ieee754_pow+0x86>
   b7bf8:	496b      	ldr	r1, [pc, #428]	; (b7da8 <__ieee754_pow+0x1e8>)
   b7bfa:	458a      	cmp	sl, r1
   b7bfc:	d021      	beq.n	b7c42 <__ieee754_pow+0x82>
   b7bfe:	f1b9 0f00 	cmp.w	r9, #0
   b7c02:	db39      	blt.n	b7c78 <__ieee754_pow+0xb8>
   b7c04:	2100      	movs	r1, #0
   b7c06:	9100      	str	r1, [sp, #0]
   b7c08:	2b00      	cmp	r3, #0
   b7c0a:	d151      	bne.n	b7cb0 <__ieee754_pow+0xf0>
   b7c0c:	4b66      	ldr	r3, [pc, #408]	; (b7da8 <__ieee754_pow+0x1e8>)
   b7c0e:	459a      	cmp	sl, r3
   b7c10:	f000 80a2 	beq.w	b7d58 <__ieee754_pow+0x198>
   b7c14:	4b65      	ldr	r3, [pc, #404]	; (b7dac <__ieee754_pow+0x1ec>)
   b7c16:	459a      	cmp	sl, r3
   b7c18:	f000 80b0 	beq.w	b7d7c <__ieee754_pow+0x1bc>
   b7c1c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b7c20:	f000 84c0 	beq.w	b85a4 <__ieee754_pow+0x9e4>
   b7c24:	4b62      	ldr	r3, [pc, #392]	; (b7db0 <__ieee754_pow+0x1f0>)
   b7c26:	459b      	cmp	fp, r3
   b7c28:	d142      	bne.n	b7cb0 <__ieee754_pow+0xf0>
   b7c2a:	f1b9 0f00 	cmp.w	r9, #0
   b7c2e:	db3f      	blt.n	b7cb0 <__ieee754_pow+0xf0>
   b7c30:	ec45 4b10 	vmov	d0, r4, r5
   b7c34:	b007      	add	sp, #28
   b7c36:	ecbd 8b0c 	vpop	{d8-d13}
   b7c3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c3e:	f000 bd59 	b.w	b86f4 <__ieee754_sqrt>
   b7c42:	2b00      	cmp	r3, #0
   b7c44:	d0db      	beq.n	b7bfe <__ieee754_pow+0x3e>
   b7c46:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b7c4a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b7c4e:	ea58 0302 	orrs.w	r3, r8, r2
   b7c52:	d109      	bne.n	b7c68 <__ieee754_pow+0xa8>
   b7c54:	ed9f 0b50 	vldr	d0, [pc, #320]	; b7d98 <__ieee754_pow+0x1d8>
   b7c58:	b007      	add	sp, #28
   b7c5a:	ecbd 8b0c 	vpop	{d8-d13}
   b7c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7c62:	b90c      	cbnz	r4, b7c68 <__ieee754_pow+0xa8>
   b7c64:	45c2      	cmp	sl, r8
   b7c66:	ddc7      	ble.n	b7bf8 <__ieee754_pow+0x38>
   b7c68:	4852      	ldr	r0, [pc, #328]	; (b7db4 <__ieee754_pow+0x1f4>)
   b7c6a:	b007      	add	sp, #28
   b7c6c:	ecbd 8b0c 	vpop	{d8-d13}
   b7c70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c74:	f001 b87c 	b.w	b8d70 <nan>
   b7c78:	494f      	ldr	r1, [pc, #316]	; (b7db8 <__ieee754_pow+0x1f8>)
   b7c7a:	458a      	cmp	sl, r1
   b7c7c:	f300 8085 	bgt.w	b7d8a <__ieee754_pow+0x1ca>
   b7c80:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b7c84:	458a      	cmp	sl, r1
   b7c86:	dd0f      	ble.n	b7ca8 <__ieee754_pow+0xe8>
   b7c88:	ea4f 512a 	mov.w	r1, sl, asr #20
   b7c8c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b7c90:	2914      	cmp	r1, #20
   b7c92:	f340 849b 	ble.w	b85cc <__ieee754_pow+0xa0c>
   b7c96:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b7c9a:	fa23 f001 	lsr.w	r0, r3, r1
   b7c9e:	fa00 f101 	lsl.w	r1, r0, r1
   b7ca2:	4299      	cmp	r1, r3
   b7ca4:	f000 84ed 	beq.w	b8682 <__ieee754_pow+0xac2>
   b7ca8:	2100      	movs	r1, #0
   b7caa:	9100      	str	r1, [sp, #0]
   b7cac:	2b00      	cmp	r3, #0
   b7cae:	d0b1      	beq.n	b7c14 <__ieee754_pow+0x54>
   b7cb0:	ec45 4b10 	vmov	d0, r4, r5
   b7cb4:	9202      	str	r2, [sp, #8]
   b7cb6:	f001 f843 	bl	b8d40 <fabs>
   b7cba:	9a02      	ldr	r2, [sp, #8]
   b7cbc:	bb5a      	cbnz	r2, b7d16 <__ieee754_pow+0x156>
   b7cbe:	f1b8 0f00 	cmp.w	r8, #0
   b7cc2:	d004      	beq.n	b7cce <__ieee754_pow+0x10e>
   b7cc4:	4b39      	ldr	r3, [pc, #228]	; (b7dac <__ieee754_pow+0x1ec>)
   b7cc6:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b7cca:	429a      	cmp	r2, r3
   b7ccc:	d123      	bne.n	b7d16 <__ieee754_pow+0x156>
   b7cce:	f1bb 0f00 	cmp.w	fp, #0
   b7cd2:	da07      	bge.n	b7ce4 <__ieee754_pow+0x124>
   b7cd4:	ec53 2b10 	vmov	r2, r3, d0
   b7cd8:	4934      	ldr	r1, [pc, #208]	; (b7dac <__ieee754_pow+0x1ec>)
   b7cda:	2000      	movs	r0, #0
   b7cdc:	f7fc fc86 	bl	b45ec <__aeabi_ddiv>
   b7ce0:	ec41 0b10 	vmov	d0, r0, r1
   b7ce4:	f1b9 0f00 	cmp.w	r9, #0
   b7ce8:	dab6      	bge.n	b7c58 <__ieee754_pow+0x98>
   b7cea:	9b00      	ldr	r3, [sp, #0]
   b7cec:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b7cf0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b7cf4:	ea58 0303 	orrs.w	r3, r8, r3
   b7cf8:	f040 848d 	bne.w	b8616 <__ieee754_pow+0xa56>
   b7cfc:	ec53 2b10 	vmov	r2, r3, d0
   b7d00:	4610      	mov	r0, r2
   b7d02:	4619      	mov	r1, r3
   b7d04:	f7fc f990 	bl	b4028 <__aeabi_dsub>
   b7d08:	4602      	mov	r2, r0
   b7d0a:	460b      	mov	r3, r1
   b7d0c:	f7fc fc6e 	bl	b45ec <__aeabi_ddiv>
   b7d10:	ec41 0b10 	vmov	d0, r0, r1
   b7d14:	e7a0      	b.n	b7c58 <__ieee754_pow+0x98>
   b7d16:	9a00      	ldr	r2, [sp, #0]
   b7d18:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b7d1c:	3b01      	subs	r3, #1
   b7d1e:	9304      	str	r3, [sp, #16]
   b7d20:	4313      	orrs	r3, r2
   b7d22:	d035      	beq.n	b7d90 <__ieee754_pow+0x1d0>
   b7d24:	4b25      	ldr	r3, [pc, #148]	; (b7dbc <__ieee754_pow+0x1fc>)
   b7d26:	459a      	cmp	sl, r3
   b7d28:	dd4c      	ble.n	b7dc4 <__ieee754_pow+0x204>
   b7d2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b7d2e:	459a      	cmp	sl, r3
   b7d30:	4b23      	ldr	r3, [pc, #140]	; (b7dc0 <__ieee754_pow+0x200>)
   b7d32:	f340 83db 	ble.w	b84ec <__ieee754_pow+0x92c>
   b7d36:	4598      	cmp	r8, r3
   b7d38:	f340 8360 	ble.w	b83fc <__ieee754_pow+0x83c>
   b7d3c:	f1bb 0f00 	cmp.w	fp, #0
   b7d40:	f340 8360 	ble.w	b8404 <__ieee754_pow+0x844>
   b7d44:	a316      	add	r3, pc, #88	; (adr r3, b7da0 <__ieee754_pow+0x1e0>)
   b7d46:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7d4a:	4610      	mov	r0, r2
   b7d4c:	4619      	mov	r1, r3
   b7d4e:	f7fc fb23 	bl	b4398 <__aeabi_dmul>
   b7d52:	ec41 0b10 	vmov	d0, r0, r1
   b7d56:	e77f      	b.n	b7c58 <__ieee754_pow+0x98>
   b7d58:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b7d5c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b7d60:	4313      	orrs	r3, r2
   b7d62:	f43f af77 	beq.w	b7c54 <__ieee754_pow+0x94>
   b7d66:	4b16      	ldr	r3, [pc, #88]	; (b7dc0 <__ieee754_pow+0x200>)
   b7d68:	4598      	cmp	r8, r3
   b7d6a:	f340 837a 	ble.w	b8462 <__ieee754_pow+0x8a2>
   b7d6e:	f1bb 0f00 	cmp.w	fp, #0
   b7d72:	f2c0 8347 	blt.w	b8404 <__ieee754_pow+0x844>
   b7d76:	ec47 6b10 	vmov	d0, r6, r7
   b7d7a:	e76d      	b.n	b7c58 <__ieee754_pow+0x98>
   b7d7c:	f1bb 0f00 	cmp.w	fp, #0
   b7d80:	f2c0 841a 	blt.w	b85b8 <__ieee754_pow+0x9f8>
   b7d84:	ec45 4b10 	vmov	d0, r4, r5
   b7d88:	e766      	b.n	b7c58 <__ieee754_pow+0x98>
   b7d8a:	2102      	movs	r1, #2
   b7d8c:	9100      	str	r1, [sp, #0]
   b7d8e:	e73b      	b.n	b7c08 <__ieee754_pow+0x48>
   b7d90:	4622      	mov	r2, r4
   b7d92:	462b      	mov	r3, r5
   b7d94:	e7b4      	b.n	b7d00 <__ieee754_pow+0x140>
   b7d96:	bf00      	nop
   b7d98:	00000000 	.word	0x00000000
   b7d9c:	3ff00000 	.word	0x3ff00000
   b7da0:	8800759c 	.word	0x8800759c
   b7da4:	7e37e43c 	.word	0x7e37e43c
   b7da8:	7ff00000 	.word	0x7ff00000
   b7dac:	3ff00000 	.word	0x3ff00000
   b7db0:	3fe00000 	.word	0x3fe00000
   b7db4:	000b9650 	.word	0x000b9650
   b7db8:	433fffff 	.word	0x433fffff
   b7dbc:	41e00000 	.word	0x41e00000
   b7dc0:	3fefffff 	.word	0x3fefffff
   b7dc4:	4be4      	ldr	r3, [pc, #912]	; (b8158 <__ieee754_pow+0x598>)
   b7dc6:	ea09 0303 	and.w	r3, r9, r3
   b7dca:	2200      	movs	r2, #0
   b7dcc:	b953      	cbnz	r3, b7de4 <__ieee754_pow+0x224>
   b7dce:	ec51 0b10 	vmov	r0, r1, d0
   b7dd2:	4be2      	ldr	r3, [pc, #904]	; (b815c <__ieee754_pow+0x59c>)
   b7dd4:	f7fc fae0 	bl	b4398 <__aeabi_dmul>
   b7dd8:	ec41 0b10 	vmov	d0, r0, r1
   b7ddc:	ee10 8a90 	vmov	r8, s1
   b7de0:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b7de4:	ea4f 5328 	mov.w	r3, r8, asr #20
   b7de8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b7dec:	189a      	adds	r2, r3, r2
   b7dee:	4bdc      	ldr	r3, [pc, #880]	; (b8160 <__ieee754_pow+0x5a0>)
   b7df0:	9205      	str	r2, [sp, #20]
   b7df2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b7df6:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b7dfa:	4598      	cmp	r8, r3
   b7dfc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b7e00:	dd07      	ble.n	b7e12 <__ieee754_pow+0x252>
   b7e02:	4bd8      	ldr	r3, [pc, #864]	; (b8164 <__ieee754_pow+0x5a4>)
   b7e04:	4598      	cmp	r8, r3
   b7e06:	f340 8414 	ble.w	b8632 <__ieee754_pow+0xa72>
   b7e0a:	3201      	adds	r2, #1
   b7e0c:	9205      	str	r2, [sp, #20]
   b7e0e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b7e12:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b80f8 <__ieee754_pow+0x538>
   b7e16:	ed9f 7bba 	vldr	d7, [pc, #744]	; b8100 <__ieee754_pow+0x540>
   b7e1a:	ec53 2b16 	vmov	r2, r3, d6
   b7e1e:	eeb0 ca47 	vmov.f32	s24, s14
   b7e22:	eef0 ca67 	vmov.f32	s25, s15
   b7e26:	2500      	movs	r5, #0
   b7e28:	eeb0 da47 	vmov.f32	s26, s14
   b7e2c:	eef0 da67 	vmov.f32	s27, s15
   b7e30:	ec5b ab10 	vmov	sl, fp, d0
   b7e34:	46a3      	mov	fp, r4
   b7e36:	4650      	mov	r0, sl
   b7e38:	4659      	mov	r1, fp
   b7e3a:	ec43 2b1a 	vmov	d10, r2, r3
   b7e3e:	f7fc f8f3 	bl	b4028 <__aeabi_dsub>
   b7e42:	ec53 2b1a 	vmov	r2, r3, d10
   b7e46:	4680      	mov	r8, r0
   b7e48:	4689      	mov	r9, r1
   b7e4a:	4650      	mov	r0, sl
   b7e4c:	4659      	mov	r1, fp
   b7e4e:	f7fc f8ed 	bl	b402c <__adddf3>
   b7e52:	4602      	mov	r2, r0
   b7e54:	460b      	mov	r3, r1
   b7e56:	2000      	movs	r0, #0
   b7e58:	49c3      	ldr	r1, [pc, #780]	; (b8168 <__ieee754_pow+0x5a8>)
   b7e5a:	f7fc fbc7 	bl	b45ec <__aeabi_ddiv>
   b7e5e:	ec41 0b1b 	vmov	d11, r0, r1
   b7e62:	4640      	mov	r0, r8
   b7e64:	ec53 2b1b 	vmov	r2, r3, d11
   b7e68:	4649      	mov	r1, r9
   b7e6a:	f7fc fa95 	bl	b4398 <__aeabi_dmul>
   b7e6e:	ec41 0b18 	vmov	d8, r0, r1
   b7e72:	460a      	mov	r2, r1
   b7e74:	4601      	mov	r1, r0
   b7e76:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b7e7a:	2100      	movs	r1, #0
   b7e7c:	9102      	str	r1, [sp, #8]
   b7e7e:	1064      	asrs	r4, r4, #1
   b7e80:	ec4b ab19 	vmov	d9, sl, fp
   b7e84:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b7e88:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b7e8c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b7e90:	2000      	movs	r0, #0
   b7e92:	1959      	adds	r1, r3, r5
   b7e94:	4604      	mov	r4, r0
   b7e96:	460d      	mov	r5, r1
   b7e98:	4602      	mov	r2, r0
   b7e9a:	460b      	mov	r3, r1
   b7e9c:	4650      	mov	r0, sl
   b7e9e:	4659      	mov	r1, fp
   b7ea0:	f7fc fa7a 	bl	b4398 <__aeabi_dmul>
   b7ea4:	4602      	mov	r2, r0
   b7ea6:	460b      	mov	r3, r1
   b7ea8:	4640      	mov	r0, r8
   b7eaa:	4649      	mov	r1, r9
   b7eac:	f7fc f8bc 	bl	b4028 <__aeabi_dsub>
   b7eb0:	ec53 2b1a 	vmov	r2, r3, d10
   b7eb4:	4680      	mov	r8, r0
   b7eb6:	4689      	mov	r9, r1
   b7eb8:	4620      	mov	r0, r4
   b7eba:	4629      	mov	r1, r5
   b7ebc:	f7fc f8b4 	bl	b4028 <__aeabi_dsub>
   b7ec0:	4602      	mov	r2, r0
   b7ec2:	460b      	mov	r3, r1
   b7ec4:	ec51 0b19 	vmov	r0, r1, d9
   b7ec8:	f7fc f8ae 	bl	b4028 <__aeabi_dsub>
   b7ecc:	4652      	mov	r2, sl
   b7ece:	465b      	mov	r3, fp
   b7ed0:	f7fc fa62 	bl	b4398 <__aeabi_dmul>
   b7ed4:	4602      	mov	r2, r0
   b7ed6:	460b      	mov	r3, r1
   b7ed8:	4640      	mov	r0, r8
   b7eda:	4649      	mov	r1, r9
   b7edc:	f7fc f8a4 	bl	b4028 <__aeabi_dsub>
   b7ee0:	ec53 2b1b 	vmov	r2, r3, d11
   b7ee4:	f7fc fa58 	bl	b4398 <__aeabi_dmul>
   b7ee8:	ec53 2b18 	vmov	r2, r3, d8
   b7eec:	ec41 0b19 	vmov	d9, r0, r1
   b7ef0:	ec51 0b18 	vmov	r0, r1, d8
   b7ef4:	f7fc fa50 	bl	b4398 <__aeabi_dmul>
   b7ef8:	a383      	add	r3, pc, #524	; (adr r3, b8108 <__ieee754_pow+0x548>)
   b7efa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7efe:	4604      	mov	r4, r0
   b7f00:	460d      	mov	r5, r1
   b7f02:	f7fc fa49 	bl	b4398 <__aeabi_dmul>
   b7f06:	a382      	add	r3, pc, #520	; (adr r3, b8110 <__ieee754_pow+0x550>)
   b7f08:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f0c:	f7fc f88e 	bl	b402c <__adddf3>
   b7f10:	4622      	mov	r2, r4
   b7f12:	462b      	mov	r3, r5
   b7f14:	f7fc fa40 	bl	b4398 <__aeabi_dmul>
   b7f18:	a37f      	add	r3, pc, #508	; (adr r3, b8118 <__ieee754_pow+0x558>)
   b7f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f1e:	f7fc f885 	bl	b402c <__adddf3>
   b7f22:	4622      	mov	r2, r4
   b7f24:	462b      	mov	r3, r5
   b7f26:	f7fc fa37 	bl	b4398 <__aeabi_dmul>
   b7f2a:	a37d      	add	r3, pc, #500	; (adr r3, b8120 <__ieee754_pow+0x560>)
   b7f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f30:	f7fc f87c 	bl	b402c <__adddf3>
   b7f34:	4622      	mov	r2, r4
   b7f36:	462b      	mov	r3, r5
   b7f38:	f7fc fa2e 	bl	b4398 <__aeabi_dmul>
   b7f3c:	a37a      	add	r3, pc, #488	; (adr r3, b8128 <__ieee754_pow+0x568>)
   b7f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f42:	f7fc f873 	bl	b402c <__adddf3>
   b7f46:	4622      	mov	r2, r4
   b7f48:	462b      	mov	r3, r5
   b7f4a:	f7fc fa25 	bl	b4398 <__aeabi_dmul>
   b7f4e:	a378      	add	r3, pc, #480	; (adr r3, b8130 <__ieee754_pow+0x570>)
   b7f50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f54:	f7fc f86a 	bl	b402c <__adddf3>
   b7f58:	4622      	mov	r2, r4
   b7f5a:	4680      	mov	r8, r0
   b7f5c:	4689      	mov	r9, r1
   b7f5e:	462b      	mov	r3, r5
   b7f60:	4620      	mov	r0, r4
   b7f62:	4629      	mov	r1, r5
   b7f64:	f7fc fa18 	bl	b4398 <__aeabi_dmul>
   b7f68:	4602      	mov	r2, r0
   b7f6a:	460b      	mov	r3, r1
   b7f6c:	4640      	mov	r0, r8
   b7f6e:	4649      	mov	r1, r9
   b7f70:	f7fc fa12 	bl	b4398 <__aeabi_dmul>
   b7f74:	4652      	mov	r2, sl
   b7f76:	4604      	mov	r4, r0
   b7f78:	460d      	mov	r5, r1
   b7f7a:	465b      	mov	r3, fp
   b7f7c:	ec51 0b18 	vmov	r0, r1, d8
   b7f80:	f7fc f854 	bl	b402c <__adddf3>
   b7f84:	ec53 2b19 	vmov	r2, r3, d9
   b7f88:	f7fc fa06 	bl	b4398 <__aeabi_dmul>
   b7f8c:	4622      	mov	r2, r4
   b7f8e:	462b      	mov	r3, r5
   b7f90:	f7fc f84c 	bl	b402c <__adddf3>
   b7f94:	4652      	mov	r2, sl
   b7f96:	4680      	mov	r8, r0
   b7f98:	4689      	mov	r9, r1
   b7f9a:	465b      	mov	r3, fp
   b7f9c:	4650      	mov	r0, sl
   b7f9e:	4659      	mov	r1, fp
   b7fa0:	f7fc f9fa 	bl	b4398 <__aeabi_dmul>
   b7fa4:	4602      	mov	r2, r0
   b7fa6:	460b      	mov	r3, r1
   b7fa8:	ec43 2b1a 	vmov	d10, r2, r3
   b7fac:	4b6f      	ldr	r3, [pc, #444]	; (b816c <__ieee754_pow+0x5ac>)
   b7fae:	2200      	movs	r2, #0
   b7fb0:	f7fc f83c 	bl	b402c <__adddf3>
   b7fb4:	4642      	mov	r2, r8
   b7fb6:	464b      	mov	r3, r9
   b7fb8:	f7fc f838 	bl	b402c <__adddf3>
   b7fbc:	2400      	movs	r4, #0
   b7fbe:	460d      	mov	r5, r1
   b7fc0:	4622      	mov	r2, r4
   b7fc2:	462b      	mov	r3, r5
   b7fc4:	4650      	mov	r0, sl
   b7fc6:	4659      	mov	r1, fp
   b7fc8:	f7fc f9e6 	bl	b4398 <__aeabi_dmul>
   b7fcc:	4b67      	ldr	r3, [pc, #412]	; (b816c <__ieee754_pow+0x5ac>)
   b7fce:	4682      	mov	sl, r0
   b7fd0:	468b      	mov	fp, r1
   b7fd2:	2200      	movs	r2, #0
   b7fd4:	4620      	mov	r0, r4
   b7fd6:	4629      	mov	r1, r5
   b7fd8:	f7fc f826 	bl	b4028 <__aeabi_dsub>
   b7fdc:	ec53 2b1a 	vmov	r2, r3, d10
   b7fe0:	f7fc f822 	bl	b4028 <__aeabi_dsub>
   b7fe4:	4602      	mov	r2, r0
   b7fe6:	460b      	mov	r3, r1
   b7fe8:	4640      	mov	r0, r8
   b7fea:	4649      	mov	r1, r9
   b7fec:	f7fc f81c 	bl	b4028 <__aeabi_dsub>
   b7ff0:	ec53 2b18 	vmov	r2, r3, d8
   b7ff4:	f7fc f9d0 	bl	b4398 <__aeabi_dmul>
   b7ff8:	4622      	mov	r2, r4
   b7ffa:	462b      	mov	r3, r5
   b7ffc:	4604      	mov	r4, r0
   b7ffe:	460d      	mov	r5, r1
   b8000:	ec51 0b19 	vmov	r0, r1, d9
   b8004:	f7fc f9c8 	bl	b4398 <__aeabi_dmul>
   b8008:	4602      	mov	r2, r0
   b800a:	460b      	mov	r3, r1
   b800c:	4620      	mov	r0, r4
   b800e:	4629      	mov	r1, r5
   b8010:	f7fc f80c 	bl	b402c <__adddf3>
   b8014:	4680      	mov	r8, r0
   b8016:	4689      	mov	r9, r1
   b8018:	4642      	mov	r2, r8
   b801a:	464b      	mov	r3, r9
   b801c:	4650      	mov	r0, sl
   b801e:	4659      	mov	r1, fp
   b8020:	f7fc f804 	bl	b402c <__adddf3>
   b8024:	a344      	add	r3, pc, #272	; (adr r3, b8138 <__ieee754_pow+0x578>)
   b8026:	e9d3 2300 	ldrd	r2, r3, [r3]
   b802a:	2000      	movs	r0, #0
   b802c:	4604      	mov	r4, r0
   b802e:	460d      	mov	r5, r1
   b8030:	f7fc f9b2 	bl	b4398 <__aeabi_dmul>
   b8034:	4652      	mov	r2, sl
   b8036:	ec41 0b19 	vmov	d9, r0, r1
   b803a:	465b      	mov	r3, fp
   b803c:	4620      	mov	r0, r4
   b803e:	4629      	mov	r1, r5
   b8040:	f7fb fff2 	bl	b4028 <__aeabi_dsub>
   b8044:	4602      	mov	r2, r0
   b8046:	460b      	mov	r3, r1
   b8048:	4640      	mov	r0, r8
   b804a:	4649      	mov	r1, r9
   b804c:	f7fb ffec 	bl	b4028 <__aeabi_dsub>
   b8050:	a33b      	add	r3, pc, #236	; (adr r3, b8140 <__ieee754_pow+0x580>)
   b8052:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8056:	f7fc f99f 	bl	b4398 <__aeabi_dmul>
   b805a:	4602      	mov	r2, r0
   b805c:	460b      	mov	r3, r1
   b805e:	4620      	mov	r0, r4
   b8060:	4629      	mov	r1, r5
   b8062:	4614      	mov	r4, r2
   b8064:	461d      	mov	r5, r3
   b8066:	a338      	add	r3, pc, #224	; (adr r3, b8148 <__ieee754_pow+0x588>)
   b8068:	e9d3 2300 	ldrd	r2, r3, [r3]
   b806c:	f7fc f994 	bl	b4398 <__aeabi_dmul>
   b8070:	4602      	mov	r2, r0
   b8072:	460b      	mov	r3, r1
   b8074:	4620      	mov	r0, r4
   b8076:	4629      	mov	r1, r5
   b8078:	f7fb ffd8 	bl	b402c <__adddf3>
   b807c:	ec53 2b1d 	vmov	r2, r3, d13
   b8080:	f7fb ffd4 	bl	b402c <__adddf3>
   b8084:	4680      	mov	r8, r0
   b8086:	9805      	ldr	r0, [sp, #20]
   b8088:	4689      	mov	r9, r1
   b808a:	f7fc f91b 	bl	b42c4 <__aeabi_i2d>
   b808e:	4642      	mov	r2, r8
   b8090:	4682      	mov	sl, r0
   b8092:	468b      	mov	fp, r1
   b8094:	464b      	mov	r3, r9
   b8096:	ec51 0b19 	vmov	r0, r1, d9
   b809a:	f7fb ffc7 	bl	b402c <__adddf3>
   b809e:	ec53 2b1c 	vmov	r2, r3, d12
   b80a2:	f7fb ffc3 	bl	b402c <__adddf3>
   b80a6:	4652      	mov	r2, sl
   b80a8:	465b      	mov	r3, fp
   b80aa:	f7fb ffbf 	bl	b402c <__adddf3>
   b80ae:	4652      	mov	r2, sl
   b80b0:	465b      	mov	r3, fp
   b80b2:	2000      	movs	r0, #0
   b80b4:	4604      	mov	r4, r0
   b80b6:	460d      	mov	r5, r1
   b80b8:	f7fb ffb6 	bl	b4028 <__aeabi_dsub>
   b80bc:	ec53 2b1c 	vmov	r2, r3, d12
   b80c0:	f7fb ffb2 	bl	b4028 <__aeabi_dsub>
   b80c4:	ec53 2b19 	vmov	r2, r3, d9
   b80c8:	f7fb ffae 	bl	b4028 <__aeabi_dsub>
   b80cc:	4602      	mov	r2, r0
   b80ce:	460b      	mov	r3, r1
   b80d0:	4640      	mov	r0, r8
   b80d2:	4649      	mov	r1, r9
   b80d4:	f7fb ffa8 	bl	b4028 <__aeabi_dsub>
   b80d8:	9b00      	ldr	r3, [sp, #0]
   b80da:	9a04      	ldr	r2, [sp, #16]
   b80dc:	3b01      	subs	r3, #1
   b80de:	4313      	orrs	r3, r2
   b80e0:	4682      	mov	sl, r0
   b80e2:	468b      	mov	fp, r1
   b80e4:	f040 81b6 	bne.w	b8454 <__ieee754_pow+0x894>
   b80e8:	ed9f 7b19 	vldr	d7, [pc, #100]	; b8150 <__ieee754_pow+0x590>
   b80ec:	eeb0 8a47 	vmov.f32	s16, s14
   b80f0:	eef0 8a67 	vmov.f32	s17, s15
   b80f4:	e03c      	b.n	b8170 <__ieee754_pow+0x5b0>
   b80f6:	bf00      	nop
   b80f8:	00000000 	.word	0x00000000
   b80fc:	3ff00000 	.word	0x3ff00000
	...
   b8108:	4a454eef 	.word	0x4a454eef
   b810c:	3fca7e28 	.word	0x3fca7e28
   b8110:	93c9db65 	.word	0x93c9db65
   b8114:	3fcd864a 	.word	0x3fcd864a
   b8118:	a91d4101 	.word	0xa91d4101
   b811c:	3fd17460 	.word	0x3fd17460
   b8120:	518f264d 	.word	0x518f264d
   b8124:	3fd55555 	.word	0x3fd55555
   b8128:	db6fabff 	.word	0xdb6fabff
   b812c:	3fdb6db6 	.word	0x3fdb6db6
   b8130:	33333303 	.word	0x33333303
   b8134:	3fe33333 	.word	0x3fe33333
   b8138:	e0000000 	.word	0xe0000000
   b813c:	3feec709 	.word	0x3feec709
   b8140:	dc3a03fd 	.word	0xdc3a03fd
   b8144:	3feec709 	.word	0x3feec709
   b8148:	145b01f5 	.word	0x145b01f5
   b814c:	be3e2fe0 	.word	0xbe3e2fe0
   b8150:	00000000 	.word	0x00000000
   b8154:	bff00000 	.word	0xbff00000
   b8158:	7ff00000 	.word	0x7ff00000
   b815c:	43400000 	.word	0x43400000
   b8160:	0003988e 	.word	0x0003988e
   b8164:	000bb679 	.word	0x000bb679
   b8168:	3ff00000 	.word	0x3ff00000
   b816c:	40080000 	.word	0x40080000
   b8170:	2300      	movs	r3, #0
   b8172:	e9cd 6700 	strd	r6, r7, [sp]
   b8176:	9300      	str	r3, [sp, #0]
   b8178:	e9dd 8900 	ldrd	r8, r9, [sp]
   b817c:	4630      	mov	r0, r6
   b817e:	4642      	mov	r2, r8
   b8180:	464b      	mov	r3, r9
   b8182:	4639      	mov	r1, r7
   b8184:	f7fb ff50 	bl	b4028 <__aeabi_dsub>
   b8188:	4622      	mov	r2, r4
   b818a:	462b      	mov	r3, r5
   b818c:	f7fc f904 	bl	b4398 <__aeabi_dmul>
   b8190:	4632      	mov	r2, r6
   b8192:	463b      	mov	r3, r7
   b8194:	4606      	mov	r6, r0
   b8196:	460f      	mov	r7, r1
   b8198:	4650      	mov	r0, sl
   b819a:	4659      	mov	r1, fp
   b819c:	f7fc f8fc 	bl	b4398 <__aeabi_dmul>
   b81a0:	4602      	mov	r2, r0
   b81a2:	460b      	mov	r3, r1
   b81a4:	4630      	mov	r0, r6
   b81a6:	4639      	mov	r1, r7
   b81a8:	f7fb ff40 	bl	b402c <__adddf3>
   b81ac:	4642      	mov	r2, r8
   b81ae:	464b      	mov	r3, r9
   b81b0:	4606      	mov	r6, r0
   b81b2:	460f      	mov	r7, r1
   b81b4:	4620      	mov	r0, r4
   b81b6:	4629      	mov	r1, r5
   b81b8:	f7fc f8ee 	bl	b4398 <__aeabi_dmul>
   b81bc:	4604      	mov	r4, r0
   b81be:	460d      	mov	r5, r1
   b81c0:	462b      	mov	r3, r5
   b81c2:	4630      	mov	r0, r6
   b81c4:	4639      	mov	r1, r7
   b81c6:	4622      	mov	r2, r4
   b81c8:	f7fb ff30 	bl	b402c <__adddf3>
   b81cc:	4bc2      	ldr	r3, [pc, #776]	; (b84d8 <__ieee754_pow+0x918>)
   b81ce:	4299      	cmp	r1, r3
   b81d0:	4680      	mov	r8, r0
   b81d2:	4689      	mov	r9, r1
   b81d4:	468a      	mov	sl, r1
   b81d6:	f340 8118 	ble.w	b840a <__ieee754_pow+0x84a>
   b81da:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b81de:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b81e2:	4303      	orrs	r3, r0
   b81e4:	f040 8207 	bne.w	b85f6 <__ieee754_pow+0xa36>
   b81e8:	a3a3      	add	r3, pc, #652	; (adr r3, b8478 <__ieee754_pow+0x8b8>)
   b81ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b81ee:	4630      	mov	r0, r6
   b81f0:	4639      	mov	r1, r7
   b81f2:	f7fb ff1b 	bl	b402c <__adddf3>
   b81f6:	4602      	mov	r2, r0
   b81f8:	460b      	mov	r3, r1
   b81fa:	4640      	mov	r0, r8
   b81fc:	4649      	mov	r1, r9
   b81fe:	4690      	mov	r8, r2
   b8200:	4699      	mov	r9, r3
   b8202:	4622      	mov	r2, r4
   b8204:	462b      	mov	r3, r5
   b8206:	f7fb ff0f 	bl	b4028 <__aeabi_dsub>
   b820a:	4602      	mov	r2, r0
   b820c:	460b      	mov	r3, r1
   b820e:	4640      	mov	r0, r8
   b8210:	4649      	mov	r1, r9
   b8212:	f7fc fb51 	bl	b48b8 <__aeabi_dcmpgt>
   b8216:	2800      	cmp	r0, #0
   b8218:	f040 81ed 	bne.w	b85f6 <__ieee754_pow+0xa36>
   b821c:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b8220:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b8224:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b8228:	fa42 f303 	asr.w	r3, r2, r3
   b822c:	4453      	add	r3, sl
   b822e:	49ab      	ldr	r1, [pc, #684]	; (b84dc <__ieee754_pow+0x91c>)
   b8230:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b8234:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b8238:	fa41 fc02 	asr.w	ip, r1, r2
   b823c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b8240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8244:	f1c2 0214 	rsb	r2, r2, #20
   b8248:	fa41 f202 	asr.w	r2, r1, r2
   b824c:	2000      	movs	r0, #0
   b824e:	ea23 010c 	bic.w	r1, r3, ip
   b8252:	f1ba 0f00 	cmp.w	sl, #0
   b8256:	9200      	str	r2, [sp, #0]
   b8258:	460b      	mov	r3, r1
   b825a:	4602      	mov	r2, r0
   b825c:	da02      	bge.n	b8264 <__ieee754_pow+0x6a4>
   b825e:	9900      	ldr	r1, [sp, #0]
   b8260:	4249      	negs	r1, r1
   b8262:	9100      	str	r1, [sp, #0]
   b8264:	4620      	mov	r0, r4
   b8266:	4629      	mov	r1, r5
   b8268:	f7fb fede 	bl	b4028 <__aeabi_dsub>
   b826c:	9b00      	ldr	r3, [sp, #0]
   b826e:	051b      	lsls	r3, r3, #20
   b8270:	9302      	str	r3, [sp, #8]
   b8272:	4602      	mov	r2, r0
   b8274:	460b      	mov	r3, r1
   b8276:	4604      	mov	r4, r0
   b8278:	460d      	mov	r5, r1
   b827a:	4630      	mov	r0, r6
   b827c:	4639      	mov	r1, r7
   b827e:	f7fb fed5 	bl	b402c <__adddf3>
   b8282:	4689      	mov	r9, r1
   b8284:	f04f 0800 	mov.w	r8, #0
   b8288:	a37d      	add	r3, pc, #500	; (adr r3, b8480 <__ieee754_pow+0x8c0>)
   b828a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b828e:	4640      	mov	r0, r8
   b8290:	4649      	mov	r1, r9
   b8292:	f7fc f881 	bl	b4398 <__aeabi_dmul>
   b8296:	4622      	mov	r2, r4
   b8298:	462b      	mov	r3, r5
   b829a:	4682      	mov	sl, r0
   b829c:	468b      	mov	fp, r1
   b829e:	4640      	mov	r0, r8
   b82a0:	4649      	mov	r1, r9
   b82a2:	f7fb fec1 	bl	b4028 <__aeabi_dsub>
   b82a6:	4602      	mov	r2, r0
   b82a8:	460b      	mov	r3, r1
   b82aa:	4630      	mov	r0, r6
   b82ac:	4639      	mov	r1, r7
   b82ae:	f7fb febb 	bl	b4028 <__aeabi_dsub>
   b82b2:	a375      	add	r3, pc, #468	; (adr r3, b8488 <__ieee754_pow+0x8c8>)
   b82b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b82b8:	f7fc f86e 	bl	b4398 <__aeabi_dmul>
   b82bc:	a374      	add	r3, pc, #464	; (adr r3, b8490 <__ieee754_pow+0x8d0>)
   b82be:	e9d3 2300 	ldrd	r2, r3, [r3]
   b82c2:	4604      	mov	r4, r0
   b82c4:	460d      	mov	r5, r1
   b82c6:	4640      	mov	r0, r8
   b82c8:	4649      	mov	r1, r9
   b82ca:	f7fc f865 	bl	b4398 <__aeabi_dmul>
   b82ce:	4602      	mov	r2, r0
   b82d0:	460b      	mov	r3, r1
   b82d2:	4620      	mov	r0, r4
   b82d4:	4629      	mov	r1, r5
   b82d6:	f7fb fea9 	bl	b402c <__adddf3>
   b82da:	4606      	mov	r6, r0
   b82dc:	460f      	mov	r7, r1
   b82de:	4632      	mov	r2, r6
   b82e0:	463b      	mov	r3, r7
   b82e2:	4650      	mov	r0, sl
   b82e4:	4659      	mov	r1, fp
   b82e6:	f7fb fea1 	bl	b402c <__adddf3>
   b82ea:	4652      	mov	r2, sl
   b82ec:	465b      	mov	r3, fp
   b82ee:	4604      	mov	r4, r0
   b82f0:	460d      	mov	r5, r1
   b82f2:	f7fb fe99 	bl	b4028 <__aeabi_dsub>
   b82f6:	4602      	mov	r2, r0
   b82f8:	460b      	mov	r3, r1
   b82fa:	4630      	mov	r0, r6
   b82fc:	4639      	mov	r1, r7
   b82fe:	f7fb fe93 	bl	b4028 <__aeabi_dsub>
   b8302:	4622      	mov	r2, r4
   b8304:	4680      	mov	r8, r0
   b8306:	4689      	mov	r9, r1
   b8308:	462b      	mov	r3, r5
   b830a:	4620      	mov	r0, r4
   b830c:	4629      	mov	r1, r5
   b830e:	f7fc f843 	bl	b4398 <__aeabi_dmul>
   b8312:	a361      	add	r3, pc, #388	; (adr r3, b8498 <__ieee754_pow+0x8d8>)
   b8314:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8318:	4606      	mov	r6, r0
   b831a:	460f      	mov	r7, r1
   b831c:	f7fc f83c 	bl	b4398 <__aeabi_dmul>
   b8320:	a35f      	add	r3, pc, #380	; (adr r3, b84a0 <__ieee754_pow+0x8e0>)
   b8322:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8326:	f7fb fe7f 	bl	b4028 <__aeabi_dsub>
   b832a:	4632      	mov	r2, r6
   b832c:	463b      	mov	r3, r7
   b832e:	f7fc f833 	bl	b4398 <__aeabi_dmul>
   b8332:	a35d      	add	r3, pc, #372	; (adr r3, b84a8 <__ieee754_pow+0x8e8>)
   b8334:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8338:	f7fb fe78 	bl	b402c <__adddf3>
   b833c:	4632      	mov	r2, r6
   b833e:	463b      	mov	r3, r7
   b8340:	f7fc f82a 	bl	b4398 <__aeabi_dmul>
   b8344:	a35a      	add	r3, pc, #360	; (adr r3, b84b0 <__ieee754_pow+0x8f0>)
   b8346:	e9d3 2300 	ldrd	r2, r3, [r3]
   b834a:	f7fb fe6d 	bl	b4028 <__aeabi_dsub>
   b834e:	4632      	mov	r2, r6
   b8350:	463b      	mov	r3, r7
   b8352:	f7fc f821 	bl	b4398 <__aeabi_dmul>
   b8356:	a358      	add	r3, pc, #352	; (adr r3, b84b8 <__ieee754_pow+0x8f8>)
   b8358:	e9d3 2300 	ldrd	r2, r3, [r3]
   b835c:	f7fb fe66 	bl	b402c <__adddf3>
   b8360:	4632      	mov	r2, r6
   b8362:	463b      	mov	r3, r7
   b8364:	f7fc f818 	bl	b4398 <__aeabi_dmul>
   b8368:	4602      	mov	r2, r0
   b836a:	460b      	mov	r3, r1
   b836c:	4620      	mov	r0, r4
   b836e:	4629      	mov	r1, r5
   b8370:	f7fb fe5a 	bl	b4028 <__aeabi_dsub>
   b8374:	4606      	mov	r6, r0
   b8376:	460f      	mov	r7, r1
   b8378:	4632      	mov	r2, r6
   b837a:	463b      	mov	r3, r7
   b837c:	4620      	mov	r0, r4
   b837e:	4629      	mov	r1, r5
   b8380:	f7fc f80a 	bl	b4398 <__aeabi_dmul>
   b8384:	4602      	mov	r2, r0
   b8386:	460b      	mov	r3, r1
   b8388:	4630      	mov	r0, r6
   b838a:	4639      	mov	r1, r7
   b838c:	4616      	mov	r6, r2
   b838e:	461f      	mov	r7, r3
   b8390:	2200      	movs	r2, #0
   b8392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8396:	f7fb fe47 	bl	b4028 <__aeabi_dsub>
   b839a:	4602      	mov	r2, r0
   b839c:	460b      	mov	r3, r1
   b839e:	4630      	mov	r0, r6
   b83a0:	4639      	mov	r1, r7
   b83a2:	f7fc f923 	bl	b45ec <__aeabi_ddiv>
   b83a6:	4642      	mov	r2, r8
   b83a8:	4606      	mov	r6, r0
   b83aa:	460f      	mov	r7, r1
   b83ac:	464b      	mov	r3, r9
   b83ae:	4620      	mov	r0, r4
   b83b0:	4629      	mov	r1, r5
   b83b2:	f7fb fff1 	bl	b4398 <__aeabi_dmul>
   b83b6:	4642      	mov	r2, r8
   b83b8:	464b      	mov	r3, r9
   b83ba:	f7fb fe37 	bl	b402c <__adddf3>
   b83be:	4602      	mov	r2, r0
   b83c0:	460b      	mov	r3, r1
   b83c2:	4630      	mov	r0, r6
   b83c4:	4639      	mov	r1, r7
   b83c6:	f7fb fe2f 	bl	b4028 <__aeabi_dsub>
   b83ca:	4622      	mov	r2, r4
   b83cc:	462b      	mov	r3, r5
   b83ce:	f7fb fe2b 	bl	b4028 <__aeabi_dsub>
   b83d2:	4602      	mov	r2, r0
   b83d4:	460b      	mov	r3, r1
   b83d6:	2000      	movs	r0, #0
   b83d8:	4941      	ldr	r1, [pc, #260]	; (b84e0 <__ieee754_pow+0x920>)
   b83da:	f7fb fe25 	bl	b4028 <__aeabi_dsub>
   b83de:	9a02      	ldr	r2, [sp, #8]
   b83e0:	460b      	mov	r3, r1
   b83e2:	4413      	add	r3, r2
   b83e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b83e8:	f2c0 8143 	blt.w	b8672 <__ieee754_pow+0xab2>
   b83ec:	4619      	mov	r1, r3
   b83ee:	ec53 2b18 	vmov	r2, r3, d8
   b83f2:	f7fb ffd1 	bl	b4398 <__aeabi_dmul>
   b83f6:	ec41 0b10 	vmov	d0, r0, r1
   b83fa:	e42d      	b.n	b7c58 <__ieee754_pow+0x98>
   b83fc:	f1bb 0f00 	cmp.w	fp, #0
   b8400:	f6ff aca0 	blt.w	b7d44 <__ieee754_pow+0x184>
   b8404:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b84c0 <__ieee754_pow+0x900>
   b8408:	e426      	b.n	b7c58 <__ieee754_pow+0x98>
   b840a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b84e8 <__ieee754_pow+0x928>
   b840e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8412:	4563      	cmp	r3, ip
   b8414:	f340 80e7 	ble.w	b85e6 <__ieee754_pow+0xa26>
   b8418:	4b32      	ldr	r3, [pc, #200]	; (b84e4 <__ieee754_pow+0x924>)
   b841a:	440b      	add	r3, r1
   b841c:	4303      	orrs	r3, r0
   b841e:	d10a      	bne.n	b8436 <__ieee754_pow+0x876>
   b8420:	4622      	mov	r2, r4
   b8422:	462b      	mov	r3, r5
   b8424:	f7fb fe00 	bl	b4028 <__aeabi_dsub>
   b8428:	4632      	mov	r2, r6
   b842a:	463b      	mov	r3, r7
   b842c:	f7fc fa3a 	bl	b48a4 <__aeabi_dcmpge>
   b8430:	2800      	cmp	r0, #0
   b8432:	f43f aef3 	beq.w	b821c <__ieee754_pow+0x65c>
   b8436:	a324      	add	r3, pc, #144	; (adr r3, b84c8 <__ieee754_pow+0x908>)
   b8438:	e9d3 2300 	ldrd	r2, r3, [r3]
   b843c:	ec51 0b18 	vmov	r0, r1, d8
   b8440:	f7fb ffaa 	bl	b4398 <__aeabi_dmul>
   b8444:	a320      	add	r3, pc, #128	; (adr r3, b84c8 <__ieee754_pow+0x908>)
   b8446:	e9d3 2300 	ldrd	r2, r3, [r3]
   b844a:	f7fb ffa5 	bl	b4398 <__aeabi_dmul>
   b844e:	ec41 0b10 	vmov	d0, r0, r1
   b8452:	e401      	b.n	b7c58 <__ieee754_pow+0x98>
   b8454:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b84d0 <__ieee754_pow+0x910>
   b8458:	eeb0 8a47 	vmov.f32	s16, s14
   b845c:	eef0 8a67 	vmov.f32	s17, s15
   b8460:	e686      	b.n	b8170 <__ieee754_pow+0x5b0>
   b8462:	f1bb 0f00 	cmp.w	fp, #0
   b8466:	dacd      	bge.n	b8404 <__ieee754_pow+0x844>
   b8468:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b846c:	ee00 6a10 	vmov	s0, r6
   b8470:	ee00 3a90 	vmov	s1, r3
   b8474:	f7ff bbf0 	b.w	b7c58 <__ieee754_pow+0x98>
   b8478:	652b82fe 	.word	0x652b82fe
   b847c:	3c971547 	.word	0x3c971547
   b8480:	00000000 	.word	0x00000000
   b8484:	3fe62e43 	.word	0x3fe62e43
   b8488:	fefa39ef 	.word	0xfefa39ef
   b848c:	3fe62e42 	.word	0x3fe62e42
   b8490:	0ca86c39 	.word	0x0ca86c39
   b8494:	be205c61 	.word	0xbe205c61
   b8498:	72bea4d0 	.word	0x72bea4d0
   b849c:	3e663769 	.word	0x3e663769
   b84a0:	c5d26bf1 	.word	0xc5d26bf1
   b84a4:	3ebbbd41 	.word	0x3ebbbd41
   b84a8:	af25de2c 	.word	0xaf25de2c
   b84ac:	3f11566a 	.word	0x3f11566a
   b84b0:	16bebd93 	.word	0x16bebd93
   b84b4:	3f66c16c 	.word	0x3f66c16c
   b84b8:	5555553e 	.word	0x5555553e
   b84bc:	3fc55555 	.word	0x3fc55555
	...
   b84c8:	c2f8f359 	.word	0xc2f8f359
   b84cc:	01a56e1f 	.word	0x01a56e1f
   b84d0:	00000000 	.word	0x00000000
   b84d4:	3ff00000 	.word	0x3ff00000
   b84d8:	408fffff 	.word	0x408fffff
   b84dc:	000fffff 	.word	0x000fffff
   b84e0:	3ff00000 	.word	0x3ff00000
   b84e4:	3f6f3400 	.word	0x3f6f3400
   b84e8:	4090cbff 	.word	0x4090cbff
   b84ec:	4598      	cmp	r8, r3
   b84ee:	db85      	blt.n	b83fc <__ieee754_pow+0x83c>
   b84f0:	4b7d      	ldr	r3, [pc, #500]	; (b86e8 <__ieee754_pow+0xb28>)
   b84f2:	4598      	cmp	r8, r3
   b84f4:	f73f ac22 	bgt.w	b7d3c <__ieee754_pow+0x17c>
   b84f8:	ec51 0b10 	vmov	r0, r1, d0
   b84fc:	4b7a      	ldr	r3, [pc, #488]	; (b86e8 <__ieee754_pow+0xb28>)
   b84fe:	2200      	movs	r2, #0
   b8500:	f7fb fd92 	bl	b4028 <__aeabi_dsub>
   b8504:	a368      	add	r3, pc, #416	; (adr r3, b86a8 <__ieee754_pow+0xae8>)
   b8506:	e9d3 2300 	ldrd	r2, r3, [r3]
   b850a:	4604      	mov	r4, r0
   b850c:	460d      	mov	r5, r1
   b850e:	f7fb ff43 	bl	b4398 <__aeabi_dmul>
   b8512:	a367      	add	r3, pc, #412	; (adr r3, b86b0 <__ieee754_pow+0xaf0>)
   b8514:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8518:	4682      	mov	sl, r0
   b851a:	468b      	mov	fp, r1
   b851c:	4620      	mov	r0, r4
   b851e:	4629      	mov	r1, r5
   b8520:	f7fb ff3a 	bl	b4398 <__aeabi_dmul>
   b8524:	4b71      	ldr	r3, [pc, #452]	; (b86ec <__ieee754_pow+0xb2c>)
   b8526:	ec41 0b18 	vmov	d8, r0, r1
   b852a:	2200      	movs	r2, #0
   b852c:	4620      	mov	r0, r4
   b852e:	4629      	mov	r1, r5
   b8530:	f7fb ff32 	bl	b4398 <__aeabi_dmul>
   b8534:	4602      	mov	r2, r0
   b8536:	460b      	mov	r3, r1
   b8538:	a15f      	add	r1, pc, #380	; (adr r1, b86b8 <__ieee754_pow+0xaf8>)
   b853a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b853e:	f7fb fd73 	bl	b4028 <__aeabi_dsub>
   b8542:	4622      	mov	r2, r4
   b8544:	462b      	mov	r3, r5
   b8546:	f7fb ff27 	bl	b4398 <__aeabi_dmul>
   b854a:	4602      	mov	r2, r0
   b854c:	460b      	mov	r3, r1
   b854e:	2000      	movs	r0, #0
   b8550:	4967      	ldr	r1, [pc, #412]	; (b86f0 <__ieee754_pow+0xb30>)
   b8552:	f7fb fd69 	bl	b4028 <__aeabi_dsub>
   b8556:	4622      	mov	r2, r4
   b8558:	4680      	mov	r8, r0
   b855a:	4689      	mov	r9, r1
   b855c:	462b      	mov	r3, r5
   b855e:	4620      	mov	r0, r4
   b8560:	4629      	mov	r1, r5
   b8562:	f7fb ff19 	bl	b4398 <__aeabi_dmul>
   b8566:	4602      	mov	r2, r0
   b8568:	460b      	mov	r3, r1
   b856a:	4640      	mov	r0, r8
   b856c:	4649      	mov	r1, r9
   b856e:	f7fb ff13 	bl	b4398 <__aeabi_dmul>
   b8572:	a353      	add	r3, pc, #332	; (adr r3, b86c0 <__ieee754_pow+0xb00>)
   b8574:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8578:	f7fb ff0e 	bl	b4398 <__aeabi_dmul>
   b857c:	4602      	mov	r2, r0
   b857e:	460b      	mov	r3, r1
   b8580:	ec51 0b18 	vmov	r0, r1, d8
   b8584:	f7fb fd50 	bl	b4028 <__aeabi_dsub>
   b8588:	4680      	mov	r8, r0
   b858a:	4689      	mov	r9, r1
   b858c:	4642      	mov	r2, r8
   b858e:	464b      	mov	r3, r9
   b8590:	4650      	mov	r0, sl
   b8592:	4659      	mov	r1, fp
   b8594:	f7fb fd4a 	bl	b402c <__adddf3>
   b8598:	2000      	movs	r0, #0
   b859a:	4652      	mov	r2, sl
   b859c:	465b      	mov	r3, fp
   b859e:	4604      	mov	r4, r0
   b85a0:	460d      	mov	r5, r1
   b85a2:	e591      	b.n	b80c8 <__ieee754_pow+0x508>
   b85a4:	4622      	mov	r2, r4
   b85a6:	462b      	mov	r3, r5
   b85a8:	4620      	mov	r0, r4
   b85aa:	4629      	mov	r1, r5
   b85ac:	f7fb fef4 	bl	b4398 <__aeabi_dmul>
   b85b0:	ec41 0b10 	vmov	d0, r0, r1
   b85b4:	f7ff bb50 	b.w	b7c58 <__ieee754_pow+0x98>
   b85b8:	494b      	ldr	r1, [pc, #300]	; (b86e8 <__ieee754_pow+0xb28>)
   b85ba:	2000      	movs	r0, #0
   b85bc:	4622      	mov	r2, r4
   b85be:	462b      	mov	r3, r5
   b85c0:	f7fc f814 	bl	b45ec <__aeabi_ddiv>
   b85c4:	ec41 0b10 	vmov	d0, r0, r1
   b85c8:	f7ff bb46 	b.w	b7c58 <__ieee754_pow+0x98>
   b85cc:	2b00      	cmp	r3, #0
   b85ce:	d144      	bne.n	b865a <__ieee754_pow+0xa9a>
   b85d0:	f1c1 0114 	rsb	r1, r1, #20
   b85d4:	fa4a f001 	asr.w	r0, sl, r1
   b85d8:	fa00 f101 	lsl.w	r1, r0, r1
   b85dc:	4551      	cmp	r1, sl
   b85de:	d05a      	beq.n	b8696 <__ieee754_pow+0xad6>
   b85e0:	9300      	str	r3, [sp, #0]
   b85e2:	f7ff bb17 	b.w	b7c14 <__ieee754_pow+0x54>
   b85e6:	4a42      	ldr	r2, [pc, #264]	; (b86f0 <__ieee754_pow+0xb30>)
   b85e8:	4293      	cmp	r3, r2
   b85ea:	dc5b      	bgt.n	b86a4 <__ieee754_pow+0xae4>
   b85ec:	e9dd 1200 	ldrd	r1, r2, [sp]
   b85f0:	9102      	str	r1, [sp, #8]
   b85f2:	9100      	str	r1, [sp, #0]
   b85f4:	e646      	b.n	b8284 <__ieee754_pow+0x6c4>
   b85f6:	a334      	add	r3, pc, #208	; (adr r3, b86c8 <__ieee754_pow+0xb08>)
   b85f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b85fc:	ec51 0b18 	vmov	r0, r1, d8
   b8600:	f7fb feca 	bl	b4398 <__aeabi_dmul>
   b8604:	a330      	add	r3, pc, #192	; (adr r3, b86c8 <__ieee754_pow+0xb08>)
   b8606:	e9d3 2300 	ldrd	r2, r3, [r3]
   b860a:	f7fb fec5 	bl	b4398 <__aeabi_dmul>
   b860e:	ec41 0b10 	vmov	d0, r0, r1
   b8612:	f7ff bb21 	b.w	b7c58 <__ieee754_pow+0x98>
   b8616:	9b00      	ldr	r3, [sp, #0]
   b8618:	2b01      	cmp	r3, #1
   b861a:	f47f ab1d 	bne.w	b7c58 <__ieee754_pow+0x98>
   b861e:	ee10 1a90 	vmov	r1, s1
   b8622:	ee10 2a10 	vmov	r2, s0
   b8626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b862a:	ec43 2b10 	vmov	d0, r2, r3
   b862e:	f7ff bb13 	b.w	b7c58 <__ieee754_pow+0x98>
   b8632:	ed9f 7b27 	vldr	d7, [pc, #156]	; b86d0 <__ieee754_pow+0xb10>
   b8636:	eeb0 ca47 	vmov.f32	s24, s14
   b863a:	eef0 ca67 	vmov.f32	s25, s15
   b863e:	ed9f 7b26 	vldr	d7, [pc, #152]	; b86d8 <__ieee754_pow+0xb18>
   b8642:	eeb0 da47 	vmov.f32	s26, s14
   b8646:	eef0 da67 	vmov.f32	s27, s15
   b864a:	ed9f 7b25 	vldr	d7, [pc, #148]	; b86e0 <__ieee754_pow+0xb20>
   b864e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b8652:	ec53 2b17 	vmov	r2, r3, d7
   b8656:	f7ff bbeb 	b.w	b7e30 <__ieee754_pow+0x270>
   b865a:	ec45 4b10 	vmov	d0, r4, r5
   b865e:	9200      	str	r2, [sp, #0]
   b8660:	f000 fb6e 	bl	b8d40 <fabs>
   b8664:	9a00      	ldr	r2, [sp, #0]
   b8666:	2a00      	cmp	r2, #0
   b8668:	f47f ab92 	bne.w	b7d90 <__ieee754_pow+0x1d0>
   b866c:	9200      	str	r2, [sp, #0]
   b866e:	f7ff bb26 	b.w	b7cbe <__ieee754_pow+0xfe>
   b8672:	ec41 0b10 	vmov	d0, r0, r1
   b8676:	9800      	ldr	r0, [sp, #0]
   b8678:	f000 fc1e 	bl	b8eb8 <scalbn>
   b867c:	ec51 0b10 	vmov	r0, r1, d0
   b8680:	e6b5      	b.n	b83ee <__ieee754_pow+0x82e>
   b8682:	f000 0001 	and.w	r0, r0, #1
   b8686:	f1c0 0102 	rsb	r1, r0, #2
   b868a:	9100      	str	r1, [sp, #0]
   b868c:	2b00      	cmp	r3, #0
   b868e:	f43f aac1 	beq.w	b7c14 <__ieee754_pow+0x54>
   b8692:	f7ff bb0d 	b.w	b7cb0 <__ieee754_pow+0xf0>
   b8696:	f000 0001 	and.w	r0, r0, #1
   b869a:	f1c0 0302 	rsb	r3, r0, #2
   b869e:	9300      	str	r3, [sp, #0]
   b86a0:	f7ff bab8 	b.w	b7c14 <__ieee754_pow+0x54>
   b86a4:	151b      	asrs	r3, r3, #20
   b86a6:	e5bb      	b.n	b8220 <__ieee754_pow+0x660>
   b86a8:	60000000 	.word	0x60000000
   b86ac:	3ff71547 	.word	0x3ff71547
   b86b0:	f85ddf44 	.word	0xf85ddf44
   b86b4:	3e54ae0b 	.word	0x3e54ae0b
   b86b8:	55555555 	.word	0x55555555
   b86bc:	3fd55555 	.word	0x3fd55555
   b86c0:	652b82fe 	.word	0x652b82fe
   b86c4:	3ff71547 	.word	0x3ff71547
   b86c8:	8800759c 	.word	0x8800759c
   b86cc:	7e37e43c 	.word	0x7e37e43c
   b86d0:	40000000 	.word	0x40000000
   b86d4:	3fe2b803 	.word	0x3fe2b803
   b86d8:	43cfd006 	.word	0x43cfd006
   b86dc:	3e4cfdeb 	.word	0x3e4cfdeb
   b86e0:	00000000 	.word	0x00000000
   b86e4:	3ff80000 	.word	0x3ff80000
   b86e8:	3ff00000 	.word	0x3ff00000
   b86ec:	3fd00000 	.word	0x3fd00000
   b86f0:	3fe00000 	.word	0x3fe00000

000b86f4 <__ieee754_sqrt>:
   b86f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b86f8:	4a63      	ldr	r2, [pc, #396]	; (b8888 <__ieee754_sqrt+0x194>)
   b86fa:	ec55 4b10 	vmov	r4, r5, d0
   b86fe:	43aa      	bics	r2, r5
   b8700:	f000 809f 	beq.w	b8842 <__ieee754_sqrt+0x14e>
   b8704:	2d00      	cmp	r5, #0
   b8706:	ee10 ca10 	vmov	ip, s0
   b870a:	462b      	mov	r3, r5
   b870c:	dd54      	ble.n	b87b8 <__ieee754_sqrt+0xc4>
   b870e:	1529      	asrs	r1, r5, #20
   b8710:	d063      	beq.n	b87da <__ieee754_sqrt+0xe6>
   b8712:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8716:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b871a:	07c9      	lsls	r1, r1, #31
   b871c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8720:	d404      	bmi.n	b872c <__ieee754_sqrt+0x38>
   b8722:	005b      	lsls	r3, r3, #1
   b8724:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8728:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b872c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b8730:	2600      	movs	r6, #0
   b8732:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b8736:	107f      	asrs	r7, r7, #1
   b8738:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b873c:	f04f 0e16 	mov.w	lr, #22
   b8740:	4634      	mov	r4, r6
   b8742:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b8746:	18a1      	adds	r1, r4, r2
   b8748:	4299      	cmp	r1, r3
   b874a:	dc02      	bgt.n	b8752 <__ieee754_sqrt+0x5e>
   b874c:	1a5b      	subs	r3, r3, r1
   b874e:	188c      	adds	r4, r1, r2
   b8750:	4416      	add	r6, r2
   b8752:	005b      	lsls	r3, r3, #1
   b8754:	f1be 0e01 	subs.w	lr, lr, #1
   b8758:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b875c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8760:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8764:	d1ef      	bne.n	b8746 <__ieee754_sqrt+0x52>
   b8766:	4675      	mov	r5, lr
   b8768:	2020      	movs	r0, #32
   b876a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b876e:	e00a      	b.n	b8786 <__ieee754_sqrt+0x92>
   b8770:	d044      	beq.n	b87fc <__ieee754_sqrt+0x108>
   b8772:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b8776:	3801      	subs	r0, #1
   b8778:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b877c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8780:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8784:	d043      	beq.n	b880e <__ieee754_sqrt+0x11a>
   b8786:	42a3      	cmp	r3, r4
   b8788:	eb02 010e 	add.w	r1, r2, lr
   b878c:	ddf0      	ble.n	b8770 <__ieee754_sqrt+0x7c>
   b878e:	2900      	cmp	r1, #0
   b8790:	eb01 0e02 	add.w	lr, r1, r2
   b8794:	db0a      	blt.n	b87ac <__ieee754_sqrt+0xb8>
   b8796:	46a0      	mov	r8, r4
   b8798:	1b1b      	subs	r3, r3, r4
   b879a:	4561      	cmp	r1, ip
   b879c:	bf88      	it	hi
   b879e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   b87a2:	ebac 0c01 	sub.w	ip, ip, r1
   b87a6:	4415      	add	r5, r2
   b87a8:	4644      	mov	r4, r8
   b87aa:	e7e2      	b.n	b8772 <__ieee754_sqrt+0x7e>
   b87ac:	f1be 0f00 	cmp.w	lr, #0
   b87b0:	dbf1      	blt.n	b8796 <__ieee754_sqrt+0xa2>
   b87b2:	f104 0801 	add.w	r8, r4, #1
   b87b6:	e7ef      	b.n	b8798 <__ieee754_sqrt+0xa4>
   b87b8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b87bc:	4322      	orrs	r2, r4
   b87be:	d038      	beq.n	b8832 <__ieee754_sqrt+0x13e>
   b87c0:	2d00      	cmp	r5, #0
   b87c2:	d14e      	bne.n	b8862 <__ieee754_sqrt+0x16e>
   b87c4:	4629      	mov	r1, r5
   b87c6:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b87ca:	3915      	subs	r1, #21
   b87cc:	4613      	mov	r3, r2
   b87ce:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b87d2:	2a00      	cmp	r2, #0
   b87d4:	d0f7      	beq.n	b87c6 <__ieee754_sqrt+0xd2>
   b87d6:	02d6      	lsls	r6, r2, #11
   b87d8:	d450      	bmi.n	b887c <__ieee754_sqrt+0x188>
   b87da:	2000      	movs	r0, #0
   b87dc:	005b      	lsls	r3, r3, #1
   b87de:	02dd      	lsls	r5, r3, #11
   b87e0:	4604      	mov	r4, r0
   b87e2:	f100 0001 	add.w	r0, r0, #1
   b87e6:	d5f9      	bpl.n	b87dc <__ieee754_sqrt+0xe8>
   b87e8:	461a      	mov	r2, r3
   b87ea:	4663      	mov	r3, ip
   b87ec:	fa0c fc00 	lsl.w	ip, ip, r0
   b87f0:	f1c0 0020 	rsb	r0, r0, #32
   b87f4:	40c3      	lsrs	r3, r0
   b87f6:	1b09      	subs	r1, r1, r4
   b87f8:	4313      	orrs	r3, r2
   b87fa:	e78a      	b.n	b8712 <__ieee754_sqrt+0x1e>
   b87fc:	4561      	cmp	r1, ip
   b87fe:	d8b8      	bhi.n	b8772 <__ieee754_sqrt+0x7e>
   b8800:	2900      	cmp	r1, #0
   b8802:	eb01 0e02 	add.w	lr, r1, r2
   b8806:	dbd1      	blt.n	b87ac <__ieee754_sqrt+0xb8>
   b8808:	4698      	mov	r8, r3
   b880a:	2300      	movs	r3, #0
   b880c:	e7c9      	b.n	b87a2 <__ieee754_sqrt+0xae>
   b880e:	ea53 030c 	orrs.w	r3, r3, ip
   b8812:	d110      	bne.n	b8836 <__ieee754_sqrt+0x142>
   b8814:	0868      	lsrs	r0, r5, #1
   b8816:	1071      	asrs	r1, r6, #1
   b8818:	07f3      	lsls	r3, r6, #31
   b881a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b881e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b8822:	bf48      	it	mi
   b8824:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b8828:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b882c:	4602      	mov	r2, r0
   b882e:	ec43 2b10 	vmov	d0, r2, r3
   b8832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8836:	1c6a      	adds	r2, r5, #1
   b8838:	bf16      	itet	ne
   b883a:	1c68      	addne	r0, r5, #1
   b883c:	3601      	addeq	r6, #1
   b883e:	0840      	lsrne	r0, r0, #1
   b8840:	e7e9      	b.n	b8816 <__ieee754_sqrt+0x122>
   b8842:	ee10 2a10 	vmov	r2, s0
   b8846:	ee10 0a10 	vmov	r0, s0
   b884a:	462b      	mov	r3, r5
   b884c:	4629      	mov	r1, r5
   b884e:	f7fb fda3 	bl	b4398 <__aeabi_dmul>
   b8852:	4622      	mov	r2, r4
   b8854:	462b      	mov	r3, r5
   b8856:	f7fb fbe9 	bl	b402c <__adddf3>
   b885a:	ec41 0b10 	vmov	d0, r0, r1
   b885e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8862:	ee10 2a10 	vmov	r2, s0
   b8866:	4620      	mov	r0, r4
   b8868:	4629      	mov	r1, r5
   b886a:	f7fb fbdd 	bl	b4028 <__aeabi_dsub>
   b886e:	4602      	mov	r2, r0
   b8870:	460b      	mov	r3, r1
   b8872:	f7fb febb 	bl	b45ec <__aeabi_ddiv>
   b8876:	ec41 0b10 	vmov	d0, r0, r1
   b887a:	e7da      	b.n	b8832 <__ieee754_sqrt+0x13e>
   b887c:	4663      	mov	r3, ip
   b887e:	2020      	movs	r0, #32
   b8880:	f04f 34ff 	mov.w	r4, #4294967295
   b8884:	e7b6      	b.n	b87f4 <__ieee754_sqrt+0x100>
   b8886:	bf00      	nop
   b8888:	7ff00000 	.word	0x7ff00000

000b888c <__ieee754_expf>:
   b888c:	ee10 3a10 	vmov	r3, s0
   b8890:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   b8894:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   b8898:	d855      	bhi.n	b8946 <__ieee754_expf+0xba>
   b889a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
   b889e:	f000 8096 	beq.w	b89ce <__ieee754_expf+0x142>
   b88a2:	4863      	ldr	r0, [pc, #396]	; (b8a30 <__ieee754_expf+0x1a4>)
   b88a4:	4283      	cmp	r3, r0
   b88a6:	dc51      	bgt.n	b894c <__ieee754_expf+0xc0>
   b88a8:	2b00      	cmp	r3, #0
   b88aa:	f2c0 8089 	blt.w	b89c0 <__ieee754_expf+0x134>
   b88ae:	4b61      	ldr	r3, [pc, #388]	; (b8a34 <__ieee754_expf+0x1a8>)
   b88b0:	429a      	cmp	r2, r3
   b88b2:	d950      	bls.n	b8956 <__ieee754_expf+0xca>
   b88b4:	4b60      	ldr	r3, [pc, #384]	; (b8a38 <__ieee754_expf+0x1ac>)
   b88b6:	429a      	cmp	r2, r3
   b88b8:	f200 809c 	bhi.w	b89f4 <__ieee754_expf+0x168>
   b88bc:	4b5f      	ldr	r3, [pc, #380]	; (b8a3c <__ieee754_expf+0x1b0>)
   b88be:	4a60      	ldr	r2, [pc, #384]	; (b8a40 <__ieee754_expf+0x1b4>)
   b88c0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   b88c4:	ed93 4a00 	vldr	s8, [r3]
   b88c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   b88cc:	f1c1 0301 	rsb	r3, r1, #1
   b88d0:	ee30 4a44 	vsub.f32	s8, s0, s8
   b88d4:	ed92 7a00 	vldr	s14, [r2]
   b88d8:	1a5b      	subs	r3, r3, r1
   b88da:	ee34 0a47 	vsub.f32	s0, s8, s14
   b88de:	eddf 7a59 	vldr	s15, [pc, #356]	; b8a44 <__ieee754_expf+0x1b8>
   b88e2:	eddf 4a59 	vldr	s9, [pc, #356]	; b8a48 <__ieee754_expf+0x1bc>
   b88e6:	ed9f 5a59 	vldr	s10, [pc, #356]	; b8a4c <__ieee754_expf+0x1c0>
   b88ea:	ed9f 6a59 	vldr	s12, [pc, #356]	; b8a50 <__ieee754_expf+0x1c4>
   b88ee:	eddf 5a59 	vldr	s11, [pc, #356]	; b8a54 <__ieee754_expf+0x1c8>
   b88f2:	ee60 6a00 	vmul.f32	s13, s0, s0
   b88f6:	eee6 4aa7 	vfma.f32	s9, s13, s15
   b88fa:	eea4 5aa6 	vfma.f32	s10, s9, s13
   b88fe:	eea5 6a26 	vfma.f32	s12, s10, s13
   b8902:	eee6 5a26 	vfma.f32	s11, s12, s13
   b8906:	eeb0 6a40 	vmov.f32	s12, s0
   b890a:	eea5 6ae6 	vfms.f32	s12, s11, s13
   b890e:	2b00      	cmp	r3, #0
   b8910:	d047      	beq.n	b89a2 <__ieee754_expf+0x116>
   b8912:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   b8916:	ee60 5a06 	vmul.f32	s11, s0, s12
   b891a:	ee36 6ac6 	vsub.f32	s12, s13, s12
   b891e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b8922:	ee85 0a86 	vdiv.f32	s0, s11, s12
   b8926:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
   b892a:	ee37 0a40 	vsub.f32	s0, s14, s0
   b892e:	ee30 0a44 	vsub.f32	s0, s0, s8
   b8932:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b8936:	db51      	blt.n	b89dc <__ieee754_expf+0x150>
   b8938:	ee10 2a10 	vmov	r2, s0
   b893c:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   b8940:	ee00 3a10 	vmov	s0, r3
   b8944:	4770      	bx	lr
   b8946:	ee30 0a00 	vadd.f32	s0, s0, s0
   b894a:	4770      	bx	lr
   b894c:	ed9f 0a42 	vldr	s0, [pc, #264]	; b8a58 <__ieee754_expf+0x1cc>
   b8950:	ee20 0a00 	vmul.f32	s0, s0, s0
   b8954:	4770      	bx	lr
   b8956:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   b895a:	d20a      	bcs.n	b8972 <__ieee754_expf+0xe6>
   b895c:	eddf 7a3e 	vldr	s15, [pc, #248]	; b8a58 <__ieee754_expf+0x1cc>
   b8960:	ee70 7a27 	vadd.f32	s15, s0, s15
   b8964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   b8968:	eef4 7ac7 	vcmpe.f32	s15, s14
   b896c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8970:	dc5a      	bgt.n	b8a28 <__ieee754_expf+0x19c>
   b8972:	ee60 7a00 	vmul.f32	s15, s0, s0
   b8976:	ed9f 7a33 	vldr	s14, [pc, #204]	; b8a44 <__ieee754_expf+0x1b8>
   b897a:	eddf 5a33 	vldr	s11, [pc, #204]	; b8a48 <__ieee754_expf+0x1bc>
   b897e:	ed9f 6a33 	vldr	s12, [pc, #204]	; b8a4c <__ieee754_expf+0x1c0>
   b8982:	eddf 6a33 	vldr	s13, [pc, #204]	; b8a50 <__ieee754_expf+0x1c4>
   b8986:	eee7 5a87 	vfma.f32	s11, s15, s14
   b898a:	ed9f 7a32 	vldr	s14, [pc, #200]	; b8a54 <__ieee754_expf+0x1c8>
   b898e:	eea7 6aa5 	vfma.f32	s12, s15, s11
   b8992:	eee7 6a86 	vfma.f32	s13, s15, s12
   b8996:	eeb0 6a40 	vmov.f32	s12, s0
   b899a:	eea7 7aa6 	vfma.f32	s14, s15, s13
   b899e:	eea7 6ac7 	vfms.f32	s12, s15, s14
   b89a2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b89a6:	ee60 6a06 	vmul.f32	s13, s0, s12
   b89aa:	ee36 6a67 	vsub.f32	s12, s12, s15
   b89ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   b89b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
   b89b6:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b89ba:	ee37 0a40 	vsub.f32	s0, s14, s0
   b89be:	4770      	bx	lr
   b89c0:	4b26      	ldr	r3, [pc, #152]	; (b8a5c <__ieee754_expf+0x1d0>)
   b89c2:	429a      	cmp	r2, r3
   b89c4:	f67f af73 	bls.w	b88ae <__ieee754_expf+0x22>
   b89c8:	ed9f 0a25 	vldr	s0, [pc, #148]	; b8a60 <__ieee754_expf+0x1d4>
   b89cc:	4770      	bx	lr
   b89ce:	eddf 7a24 	vldr	s15, [pc, #144]	; b8a60 <__ieee754_expf+0x1d4>
   b89d2:	2900      	cmp	r1, #0
   b89d4:	bf18      	it	ne
   b89d6:	eeb0 0a67 	vmovne.f32	s0, s15
   b89da:	4770      	bx	lr
   b89dc:	ee10 2a10 	vmov	r2, s0
   b89e0:	3364      	adds	r3, #100	; 0x64
   b89e2:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   b89e6:	eddf 7a1f 	vldr	s15, [pc, #124]	; b8a64 <__ieee754_expf+0x1d8>
   b89ea:	ee00 3a10 	vmov	s0, r3
   b89ee:	ee20 0a27 	vmul.f32	s0, s0, s15
   b89f2:	4770      	bx	lr
   b89f4:	4b1c      	ldr	r3, [pc, #112]	; (b8a68 <__ieee754_expf+0x1dc>)
   b89f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; b8a6c <__ieee754_expf+0x1e0>
   b89fa:	ed9f 6a1d 	vldr	s12, [pc, #116]	; b8a70 <__ieee754_expf+0x1e4>
   b89fe:	eddf 6a1d 	vldr	s13, [pc, #116]	; b8a74 <__ieee754_expf+0x1e8>
   b8a02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   b8a06:	edd3 7a00 	vldr	s15, [r3]
   b8a0a:	eee0 7a07 	vfma.f32	s15, s0, s14
   b8a0e:	eeb0 4a40 	vmov.f32	s8, s0
   b8a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b8a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   b8a1a:	ee17 3a90 	vmov	r3, s15
   b8a1e:	eea7 4a46 	vfms.f32	s8, s14, s12
   b8a22:	ee27 7a26 	vmul.f32	s14, s14, s13
   b8a26:	e758      	b.n	b88da <__ieee754_expf+0x4e>
   b8a28:	ee30 0a07 	vadd.f32	s0, s0, s14
   b8a2c:	4770      	bx	lr
   b8a2e:	bf00      	nop
   b8a30:	42b17217 	.word	0x42b17217
   b8a34:	3eb17218 	.word	0x3eb17218
   b8a38:	3f851591 	.word	0x3f851591
   b8a3c:	000b965c 	.word	0x000b965c
   b8a40:	000b9664 	.word	0x000b9664
   b8a44:	3331bb4c 	.word	0x3331bb4c
   b8a48:	b5ddea0e 	.word	0xb5ddea0e
   b8a4c:	388ab355 	.word	0x388ab355
   b8a50:	bb360b61 	.word	0xbb360b61
   b8a54:	3e2aaaab 	.word	0x3e2aaaab
   b8a58:	7149f2ca 	.word	0x7149f2ca
   b8a5c:	42cff1b5 	.word	0x42cff1b5
   b8a60:	00000000 	.word	0x00000000
   b8a64:	0d800000 	.word	0x0d800000
   b8a68:	000b9654 	.word	0x000b9654
   b8a6c:	3fb8aa3b 	.word	0x3fb8aa3b
   b8a70:	3f317180 	.word	0x3f317180
   b8a74:	3717f7d1 	.word	0x3717f7d1

000b8a78 <__ieee754_logf>:
   b8a78:	ee10 3a10 	vmov	r3, s0
   b8a7c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   b8a80:	d02e      	beq.n	b8ae0 <__ieee754_logf+0x68>
   b8a82:	2b00      	cmp	r3, #0
   b8a84:	db33      	blt.n	b8aee <__ieee754_logf+0x76>
   b8a86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   b8a8a:	da40      	bge.n	b8b0e <__ieee754_logf+0x96>
   b8a8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   b8a90:	db34      	blt.n	b8afc <__ieee754_logf+0x84>
   b8a92:	f04f 0c00 	mov.w	ip, #0
   b8a96:	4868      	ldr	r0, [pc, #416]	; (b8c38 <__ieee754_logf+0x1c0>)
   b8a98:	f3c3 0116 	ubfx	r1, r3, #0, #23
   b8a9c:	4408      	add	r0, r1
   b8a9e:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   b8aa2:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   b8aa6:	430a      	orrs	r2, r1
   b8aa8:	15db      	asrs	r3, r3, #23
   b8aaa:	ee00 2a10 	vmov	s0, r2
   b8aae:	3b7f      	subs	r3, #127	; 0x7f
   b8ab0:	4a62      	ldr	r2, [pc, #392]	; (b8c3c <__ieee754_logf+0x1c4>)
   b8ab2:	4463      	add	r3, ip
   b8ab4:	f101 0c0f 	add.w	ip, r1, #15
   b8ab8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b8abc:	ea0c 0202 	and.w	r2, ip, r2
   b8ac0:	ee30 0a67 	vsub.f32	s0, s0, s15
   b8ac4:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   b8ac8:	bb22      	cbnz	r2, b8b14 <__ieee754_logf+0x9c>
   b8aca:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b8ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8ad2:	d160      	bne.n	b8b96 <__ieee754_logf+0x11e>
   b8ad4:	2b00      	cmp	r3, #0
   b8ad6:	f040 8092 	bne.w	b8bfe <__ieee754_logf+0x186>
   b8ada:	ed9f 0a59 	vldr	s0, [pc, #356]	; b8c40 <__ieee754_logf+0x1c8>
   b8ade:	4770      	bx	lr
   b8ae0:	ed9f 7a58 	vldr	s14, [pc, #352]	; b8c44 <__ieee754_logf+0x1cc>
   b8ae4:	eddf 7a56 	vldr	s15, [pc, #344]	; b8c40 <__ieee754_logf+0x1c8>
   b8ae8:	ee87 0a27 	vdiv.f32	s0, s14, s15
   b8aec:	4770      	bx	lr
   b8aee:	ee70 7a40 	vsub.f32	s15, s0, s0
   b8af2:	ed9f 7a53 	vldr	s14, [pc, #332]	; b8c40 <__ieee754_logf+0x1c8>
   b8af6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8afa:	4770      	bx	lr
   b8afc:	eddf 7a52 	vldr	s15, [pc, #328]	; b8c48 <__ieee754_logf+0x1d0>
   b8b00:	ee60 7a27 	vmul.f32	s15, s0, s15
   b8b04:	f06f 0c18 	mvn.w	ip, #24
   b8b08:	ee17 3a90 	vmov	r3, s15
   b8b0c:	e7c3      	b.n	b8a96 <__ieee754_logf+0x1e>
   b8b0e:	ee30 0a00 	vadd.f32	s0, s0, s0
   b8b12:	4770      	bx	lr
   b8b14:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b8b18:	ee70 7a27 	vadd.f32	s15, s0, s15
   b8b1c:	ee07 3a10 	vmov	s14, r3
   b8b20:	ee80 4a27 	vdiv.f32	s8, s0, s15
   b8b24:	4849      	ldr	r0, [pc, #292]	; (b8c4c <__ieee754_logf+0x1d4>)
   b8b26:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   b8b2a:	4408      	add	r0, r1
   b8b2c:	f502 7222 	add.w	r2, r2, #648	; 0x288
   b8b30:	4302      	orrs	r2, r0
   b8b32:	2a00      	cmp	r2, #0
   b8b34:	ed9f 3a46 	vldr	s6, [pc, #280]	; b8c50 <__ieee754_logf+0x1d8>
   b8b38:	eddf 4a46 	vldr	s9, [pc, #280]	; b8c54 <__ieee754_logf+0x1dc>
   b8b3c:	eddf 5a46 	vldr	s11, [pc, #280]	; b8c58 <__ieee754_logf+0x1e0>
   b8b40:	eddf 3a46 	vldr	s7, [pc, #280]	; b8c5c <__ieee754_logf+0x1e4>
   b8b44:	ed9f 5a46 	vldr	s10, [pc, #280]	; b8c60 <__ieee754_logf+0x1e8>
   b8b48:	eddf 7a46 	vldr	s15, [pc, #280]	; b8c64 <__ieee754_logf+0x1ec>
   b8b4c:	eddf 6a46 	vldr	s13, [pc, #280]	; b8c68 <__ieee754_logf+0x1f0>
   b8b50:	ee24 6a04 	vmul.f32	s12, s8, s8
   b8b54:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   b8b58:	ee26 7a06 	vmul.f32	s14, s12, s12
   b8b5c:	eee7 4a03 	vfma.f32	s9, s14, s6
   b8b60:	eea7 5a23 	vfma.f32	s10, s14, s7
   b8b64:	eee4 5a87 	vfma.f32	s11, s9, s14
   b8b68:	eee5 6a07 	vfma.f32	s13, s10, s14
   b8b6c:	eee5 7a87 	vfma.f32	s15, s11, s14
   b8b70:	ee67 7a86 	vmul.f32	s15, s15, s12
   b8b74:	eee6 7a87 	vfma.f32	s15, s13, s14
   b8b78:	dd2a      	ble.n	b8bd0 <__ieee754_logf+0x158>
   b8b7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b8b7e:	ee20 7a07 	vmul.f32	s14, s0, s14
   b8b82:	ee27 7a00 	vmul.f32	s14, s14, s0
   b8b86:	bb4b      	cbnz	r3, b8bdc <__ieee754_logf+0x164>
   b8b88:	ee77 7a87 	vadd.f32	s15, s15, s14
   b8b8c:	eea7 7ac4 	vfms.f32	s14, s15, s8
   b8b90:	ee30 0a47 	vsub.f32	s0, s0, s14
   b8b94:	4770      	bx	lr
   b8b96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b8b9a:	eddf 6a34 	vldr	s13, [pc, #208]	; b8c6c <__ieee754_logf+0x1f4>
   b8b9e:	eef0 7a47 	vmov.f32	s15, s14
   b8ba2:	eee0 7a66 	vfms.f32	s15, s0, s13
   b8ba6:	ee20 7a00 	vmul.f32	s14, s0, s0
   b8baa:	ee27 7a27 	vmul.f32	s14, s14, s15
   b8bae:	2b00      	cmp	r3, #0
   b8bb0:	d0ee      	beq.n	b8b90 <__ieee754_logf+0x118>
   b8bb2:	ee07 3a90 	vmov	s15, r3
   b8bb6:	ed9f 6a2e 	vldr	s12, [pc, #184]	; b8c70 <__ieee754_logf+0x1f8>
   b8bba:	eddf 6a2e 	vldr	s13, [pc, #184]	; b8c74 <__ieee754_logf+0x1fc>
   b8bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8bc2:	eea7 7ac6 	vfms.f32	s14, s15, s12
   b8bc6:	ee37 0a40 	vsub.f32	s0, s14, s0
   b8bca:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   b8bce:	4770      	bx	lr
   b8bd0:	bb13      	cbnz	r3, b8c18 <__ieee754_logf+0x1a0>
   b8bd2:	ee70 7a67 	vsub.f32	s15, s0, s15
   b8bd6:	eea7 0ac4 	vfms.f32	s0, s15, s8
   b8bda:	4770      	bx	lr
   b8bdc:	eddf 6a24 	vldr	s13, [pc, #144]	; b8c70 <__ieee754_logf+0x1f8>
   b8be0:	ed9f 6a24 	vldr	s12, [pc, #144]	; b8c74 <__ieee754_logf+0x1fc>
   b8be4:	ee77 7a87 	vadd.f32	s15, s15, s14
   b8be8:	ee62 6aa6 	vmul.f32	s13, s5, s13
   b8bec:	eee7 6a84 	vfma.f32	s13, s15, s8
   b8bf0:	ee37 7a66 	vsub.f32	s14, s14, s13
   b8bf4:	ee37 0a40 	vsub.f32	s0, s14, s0
   b8bf8:	ee92 0a86 	vfnms.f32	s0, s5, s12
   b8bfc:	4770      	bx	lr
   b8bfe:	ee07 3a90 	vmov	s15, r3
   b8c02:	ed9f 0a1b 	vldr	s0, [pc, #108]	; b8c70 <__ieee754_logf+0x1f8>
   b8c06:	ed9f 7a1b 	vldr	s14, [pc, #108]	; b8c74 <__ieee754_logf+0x1fc>
   b8c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8c0e:	ee27 0a80 	vmul.f32	s0, s15, s0
   b8c12:	eea7 0a87 	vfma.f32	s0, s15, s14
   b8c16:	4770      	bx	lr
   b8c18:	ed9f 7a15 	vldr	s14, [pc, #84]	; b8c70 <__ieee754_logf+0x1f8>
   b8c1c:	eddf 6a15 	vldr	s13, [pc, #84]	; b8c74 <__ieee754_logf+0x1fc>
   b8c20:	ee70 7a67 	vsub.f32	s15, s0, s15
   b8c24:	ee27 7a62 	vnmul.f32	s14, s14, s5
   b8c28:	eea7 7a84 	vfma.f32	s14, s15, s8
   b8c2c:	ee37 0a40 	vsub.f32	s0, s14, s0
   b8c30:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   b8c34:	4770      	bx	lr
   b8c36:	bf00      	nop
   b8c38:	004afb20 	.word	0x004afb20
   b8c3c:	007ffff0 	.word	0x007ffff0
   b8c40:	00000000 	.word	0x00000000
   b8c44:	cc000000 	.word	0xcc000000
   b8c48:	4c000000 	.word	0x4c000000
   b8c4c:	ffcf5c30 	.word	0xffcf5c30
   b8c50:	3e178897 	.word	0x3e178897
   b8c54:	3e3a3325 	.word	0x3e3a3325
   b8c58:	3e924925 	.word	0x3e924925
   b8c5c:	3e1cd04f 	.word	0x3e1cd04f
   b8c60:	3e638e29 	.word	0x3e638e29
   b8c64:	3f2aaaab 	.word	0x3f2aaaab
   b8c68:	3ecccccd 	.word	0x3ecccccd
   b8c6c:	3eaaaaab 	.word	0x3eaaaaab
   b8c70:	3717f7d1 	.word	0x3717f7d1
   b8c74:	3f317180 	.word	0x3f317180

000b8c78 <__ieee754_log10f>:
   b8c78:	b508      	push	{r3, lr}
   b8c7a:	ee10 3a10 	vmov	r3, s0
   b8c7e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   b8c82:	ed2d 8b02 	vpush	{d8}
   b8c86:	d02b      	beq.n	b8ce0 <__ieee754_log10f+0x68>
   b8c88:	2b00      	cmp	r3, #0
   b8c8a:	db32      	blt.n	b8cf2 <__ieee754_log10f+0x7a>
   b8c8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   b8c90:	da41      	bge.n	b8d16 <__ieee754_log10f+0x9e>
   b8c92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   b8c96:	db35      	blt.n	b8d04 <__ieee754_log10f+0x8c>
   b8c98:	2100      	movs	r1, #0
   b8c9a:	15da      	asrs	r2, r3, #23
   b8c9c:	3a7f      	subs	r2, #127	; 0x7f
   b8c9e:	440a      	add	r2, r1
   b8ca0:	0fd1      	lsrs	r1, r2, #31
   b8ca2:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   b8ca6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b8caa:	f3c3 0316 	ubfx	r3, r3, #0, #23
   b8cae:	ee07 2a90 	vmov	s15, r2
   b8cb2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   b8cb6:	ee00 3a10 	vmov	s0, r3
   b8cba:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   b8cbe:	f7ff fedb 	bl	b8a78 <__ieee754_logf>
   b8cc2:	eddf 7a17 	vldr	s15, [pc, #92]	; b8d20 <__ieee754_log10f+0xa8>
   b8cc6:	ed9f 7a17 	vldr	s14, [pc, #92]	; b8d24 <__ieee754_log10f+0xac>
   b8cca:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8cce:	eddf 7a16 	vldr	s15, [pc, #88]	; b8d28 <__ieee754_log10f+0xb0>
   b8cd2:	eea8 0a07 	vfma.f32	s0, s16, s14
   b8cd6:	eea8 0a27 	vfma.f32	s0, s16, s15
   b8cda:	ecbd 8b02 	vpop	{d8}
   b8cde:	bd08      	pop	{r3, pc}
   b8ce0:	ecbd 8b02 	vpop	{d8}
   b8ce4:	ed9f 7a11 	vldr	s14, [pc, #68]	; b8d2c <__ieee754_log10f+0xb4>
   b8ce8:	eddf 7a11 	vldr	s15, [pc, #68]	; b8d30 <__ieee754_log10f+0xb8>
   b8cec:	ee87 0a27 	vdiv.f32	s0, s14, s15
   b8cf0:	bd08      	pop	{r3, pc}
   b8cf2:	ecbd 8b02 	vpop	{d8}
   b8cf6:	ee70 7a40 	vsub.f32	s15, s0, s0
   b8cfa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; b8d30 <__ieee754_log10f+0xb8>
   b8cfe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8d02:	bd08      	pop	{r3, pc}
   b8d04:	eddf 7a0b 	vldr	s15, [pc, #44]	; b8d34 <__ieee754_log10f+0xbc>
   b8d08:	ee60 7a27 	vmul.f32	s15, s0, s15
   b8d0c:	f06f 0118 	mvn.w	r1, #24
   b8d10:	ee17 3a90 	vmov	r3, s15
   b8d14:	e7c1      	b.n	b8c9a <__ieee754_log10f+0x22>
   b8d16:	ecbd 8b02 	vpop	{d8}
   b8d1a:	ee30 0a00 	vadd.f32	s0, s0, s0
   b8d1e:	bd08      	pop	{r3, pc}
   b8d20:	3ede5bd9 	.word	0x3ede5bd9
   b8d24:	355427db 	.word	0x355427db
   b8d28:	3e9a2080 	.word	0x3e9a2080
   b8d2c:	cc000000 	.word	0xcc000000
   b8d30:	00000000 	.word	0x00000000
   b8d34:	4c000000 	.word	0x4c000000

000b8d38 <__ieee754_sqrtf>:
   b8d38:	eeb1 0ac0 	vsqrt.f32	s0, s0
   b8d3c:	4770      	bx	lr
   b8d3e:	bf00      	nop

000b8d40 <fabs>:
   b8d40:	ec51 0b10 	vmov	r0, r1, d0
   b8d44:	ee10 2a10 	vmov	r2, s0
   b8d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8d4c:	ec43 2b10 	vmov	d0, r2, r3
   b8d50:	4770      	bx	lr
   b8d52:	bf00      	nop

000b8d54 <finite>:
   b8d54:	b082      	sub	sp, #8
   b8d56:	ed8d 0b00 	vstr	d0, [sp]
   b8d5a:	9801      	ldr	r0, [sp, #4]
   b8d5c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b8d60:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b8d64:	0fc0      	lsrs	r0, r0, #31
   b8d66:	b002      	add	sp, #8
   b8d68:	4770      	bx	lr
   b8d6a:	bf00      	nop
   b8d6c:	0000      	movs	r0, r0
	...

000b8d70 <nan>:
   b8d70:	ed9f 0b01 	vldr	d0, [pc, #4]	; b8d78 <nan+0x8>
   b8d74:	4770      	bx	lr
   b8d76:	bf00      	nop
   b8d78:	00000000 	.word	0x00000000
   b8d7c:	7ff80000 	.word	0x7ff80000

000b8d80 <rint>:
   b8d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8d82:	ec53 2b10 	vmov	r2, r3, d0
   b8d86:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b8d8a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b8d8e:	2913      	cmp	r1, #19
   b8d90:	ee10 0a10 	vmov	r0, s0
   b8d94:	b083      	sub	sp, #12
   b8d96:	461c      	mov	r4, r3
   b8d98:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b8d9c:	dc3a      	bgt.n	b8e14 <rint+0x94>
   b8d9e:	2900      	cmp	r1, #0
   b8da0:	db30      	blt.n	b8e04 <rint+0x84>
   b8da2:	4d42      	ldr	r5, [pc, #264]	; (b8eac <rint+0x12c>)
   b8da4:	fa45 fc01 	asr.w	ip, r5, r1
   b8da8:	ea03 050c 	and.w	r5, r3, ip
   b8dac:	4315      	orrs	r5, r2
   b8dae:	d02d      	beq.n	b8e0c <rint+0x8c>
   b8db0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b8db4:	4318      	orrs	r0, r3
   b8db6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b8dba:	d00c      	beq.n	b8dd6 <rint+0x56>
   b8dbc:	ea24 0c0c 	bic.w	ip, r4, ip
   b8dc0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b8dc4:	2913      	cmp	r1, #19
   b8dc6:	fa44 f101 	asr.w	r1, r4, r1
   b8dca:	bf0c      	ite	eq
   b8dcc:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b8dd0:	2000      	movne	r0, #0
   b8dd2:	ea4c 0401 	orr.w	r4, ip, r1
   b8dd6:	4936      	ldr	r1, [pc, #216]	; (b8eb0 <rint+0x130>)
   b8dd8:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b8ddc:	4623      	mov	r3, r4
   b8dde:	e9de 4500 	ldrd	r4, r5, [lr]
   b8de2:	4602      	mov	r2, r0
   b8de4:	4629      	mov	r1, r5
   b8de6:	4620      	mov	r0, r4
   b8de8:	f7fb f920 	bl	b402c <__adddf3>
   b8dec:	e9cd 0100 	strd	r0, r1, [sp]
   b8df0:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8df4:	4622      	mov	r2, r4
   b8df6:	462b      	mov	r3, r5
   b8df8:	f7fb f916 	bl	b4028 <__aeabi_dsub>
   b8dfc:	ec41 0b10 	vmov	d0, r0, r1
   b8e00:	b003      	add	sp, #12
   b8e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8e04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b8e08:	4311      	orrs	r1, r2
   b8e0a:	d124      	bne.n	b8e56 <rint+0xd6>
   b8e0c:	ec43 2b10 	vmov	d0, r2, r3
   b8e10:	b003      	add	sp, #12
   b8e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8e14:	2933      	cmp	r1, #51	; 0x33
   b8e16:	dd08      	ble.n	b8e2a <rint+0xaa>
   b8e18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b8e1c:	d1f6      	bne.n	b8e0c <rint+0x8c>
   b8e1e:	4619      	mov	r1, r3
   b8e20:	f7fb f904 	bl	b402c <__adddf3>
   b8e24:	ec41 0b10 	vmov	d0, r0, r1
   b8e28:	e7f2      	b.n	b8e10 <rint+0x90>
   b8e2a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b8e2e:	f04f 31ff 	mov.w	r1, #4294967295
   b8e32:	fa21 f10c 	lsr.w	r1, r1, ip
   b8e36:	420a      	tst	r2, r1
   b8e38:	d0e8      	beq.n	b8e0c <rint+0x8c>
   b8e3a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b8e3e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b8e42:	d0c8      	beq.n	b8dd6 <rint+0x56>
   b8e44:	ea20 0303 	bic.w	r3, r0, r3
   b8e48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b8e4c:	fa40 fc0c 	asr.w	ip, r0, ip
   b8e50:	ea43 000c 	orr.w	r0, r3, ip
   b8e54:	e7bf      	b.n	b8dd6 <rint+0x56>
   b8e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8e5a:	4318      	orrs	r0, r3
   b8e5c:	4a14      	ldr	r2, [pc, #80]	; (b8eb0 <rint+0x130>)
   b8e5e:	4243      	negs	r3, r0
   b8e60:	4303      	orrs	r3, r0
   b8e62:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b8e66:	0b1b      	lsrs	r3, r3, #12
   b8e68:	0c62      	lsrs	r2, r4, #17
   b8e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b8e6e:	0452      	lsls	r2, r2, #17
   b8e70:	ea43 0702 	orr.w	r7, r3, r2
   b8e74:	463b      	mov	r3, r7
   b8e76:	e9de 6700 	ldrd	r6, r7, [lr]
   b8e7a:	ee10 2a10 	vmov	r2, s0
   b8e7e:	4630      	mov	r0, r6
   b8e80:	4639      	mov	r1, r7
   b8e82:	f7fb f8d3 	bl	b402c <__adddf3>
   b8e86:	e9cd 0100 	strd	r0, r1, [sp]
   b8e8a:	4632      	mov	r2, r6
   b8e8c:	463b      	mov	r3, r7
   b8e8e:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8e92:	f7fb f8c9 	bl	b4028 <__aeabi_dsub>
   b8e96:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b8e9a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8e9e:	4602      	mov	r2, r0
   b8ea0:	ea41 0304 	orr.w	r3, r1, r4
   b8ea4:	ec43 2b10 	vmov	d0, r2, r3
   b8ea8:	b003      	add	sp, #12
   b8eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8eac:	000fffff 	.word	0x000fffff
   b8eb0:	000b9670 	.word	0x000b9670
   b8eb4:	00000000 	.word	0x00000000

000b8eb8 <scalbn>:
   b8eb8:	b538      	push	{r3, r4, r5, lr}
   b8eba:	ec53 2b10 	vmov	r2, r3, d0
   b8ebe:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b8ec2:	4604      	mov	r4, r0
   b8ec4:	469c      	mov	ip, r3
   b8ec6:	bb89      	cbnz	r1, b8f2c <scalbn+0x74>
   b8ec8:	ee10 1a10 	vmov	r1, s0
   b8ecc:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b8ed0:	ea5c 0101 	orrs.w	r1, ip, r1
   b8ed4:	d029      	beq.n	b8f2a <scalbn+0x72>
   b8ed6:	4619      	mov	r1, r3
   b8ed8:	2200      	movs	r2, #0
   b8eda:	4b3d      	ldr	r3, [pc, #244]	; (b8fd0 <scalbn+0x118>)
   b8edc:	4d3d      	ldr	r5, [pc, #244]	; (b8fd4 <scalbn+0x11c>)
   b8ede:	ee10 0a10 	vmov	r0, s0
   b8ee2:	f7fb fa59 	bl	b4398 <__aeabi_dmul>
   b8ee6:	42ac      	cmp	r4, r5
   b8ee8:	4602      	mov	r2, r0
   b8eea:	460b      	mov	r3, r1
   b8eec:	db16      	blt.n	b8f1c <scalbn+0x64>
   b8eee:	468c      	mov	ip, r1
   b8ef0:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b8ef4:	3936      	subs	r1, #54	; 0x36
   b8ef6:	4421      	add	r1, r4
   b8ef8:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b8efc:	4281      	cmp	r1, r0
   b8efe:	dc21      	bgt.n	b8f44 <scalbn+0x8c>
   b8f00:	2900      	cmp	r1, #0
   b8f02:	dc47      	bgt.n	b8f94 <scalbn+0xdc>
   b8f04:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b8f08:	da34      	bge.n	b8f74 <scalbn+0xbc>
   b8f0a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b8f0e:	428c      	cmp	r4, r1
   b8f10:	dc18      	bgt.n	b8f44 <scalbn+0x8c>
   b8f12:	2b00      	cmp	r3, #0
   b8f14:	a126      	add	r1, pc, #152	; (adr r1, b8fb0 <scalbn+0xf8>)
   b8f16:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8f1a:	db44      	blt.n	b8fa6 <scalbn+0xee>
   b8f1c:	a324      	add	r3, pc, #144	; (adr r3, b8fb0 <scalbn+0xf8>)
   b8f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8f22:	f7fb fa39 	bl	b4398 <__aeabi_dmul>
   b8f26:	ec41 0b10 	vmov	d0, r0, r1
   b8f2a:	bd38      	pop	{r3, r4, r5, pc}
   b8f2c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b8f30:	4281      	cmp	r1, r0
   b8f32:	d1e0      	bne.n	b8ef6 <scalbn+0x3e>
   b8f34:	ee10 0a10 	vmov	r0, s0
   b8f38:	4619      	mov	r1, r3
   b8f3a:	f7fb f877 	bl	b402c <__adddf3>
   b8f3e:	ec41 0b10 	vmov	d0, r0, r1
   b8f42:	bd38      	pop	{r3, r4, r5, pc}
   b8f44:	2b00      	cmp	r3, #0
   b8f46:	a11c      	add	r1, pc, #112	; (adr r1, b8fb8 <scalbn+0x100>)
   b8f48:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8f4c:	db07      	blt.n	b8f5e <scalbn+0xa6>
   b8f4e:	a31a      	add	r3, pc, #104	; (adr r3, b8fb8 <scalbn+0x100>)
   b8f50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8f54:	f7fb fa20 	bl	b4398 <__aeabi_dmul>
   b8f58:	ec41 0b10 	vmov	d0, r0, r1
   b8f5c:	bd38      	pop	{r3, r4, r5, pc}
   b8f5e:	a118      	add	r1, pc, #96	; (adr r1, b8fc0 <scalbn+0x108>)
   b8f60:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8f64:	a314      	add	r3, pc, #80	; (adr r3, b8fb8 <scalbn+0x100>)
   b8f66:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8f6a:	f7fb fa15 	bl	b4398 <__aeabi_dmul>
   b8f6e:	ec41 0b10 	vmov	d0, r0, r1
   b8f72:	e7f3      	b.n	b8f5c <scalbn+0xa4>
   b8f74:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8f78:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b8f7c:	3136      	adds	r1, #54	; 0x36
   b8f7e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8f82:	4610      	mov	r0, r2
   b8f84:	4619      	mov	r1, r3
   b8f86:	2200      	movs	r2, #0
   b8f88:	4b13      	ldr	r3, [pc, #76]	; (b8fd8 <scalbn+0x120>)
   b8f8a:	f7fb fa05 	bl	b4398 <__aeabi_dmul>
   b8f8e:	ec41 0b10 	vmov	d0, r0, r1
   b8f92:	bd38      	pop	{r3, r4, r5, pc}
   b8f94:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8f98:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b8f9c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8fa0:	ec43 2b10 	vmov	d0, r2, r3
   b8fa4:	bd38      	pop	{r3, r4, r5, pc}
   b8fa6:	a108      	add	r1, pc, #32	; (adr r1, b8fc8 <scalbn+0x110>)
   b8fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8fac:	e7b6      	b.n	b8f1c <scalbn+0x64>
   b8fae:	bf00      	nop
   b8fb0:	c2f8f359 	.word	0xc2f8f359
   b8fb4:	01a56e1f 	.word	0x01a56e1f
   b8fb8:	8800759c 	.word	0x8800759c
   b8fbc:	7e37e43c 	.word	0x7e37e43c
   b8fc0:	8800759c 	.word	0x8800759c
   b8fc4:	fe37e43c 	.word	0xfe37e43c
   b8fc8:	c2f8f359 	.word	0xc2f8f359
   b8fcc:	81a56e1f 	.word	0x81a56e1f
   b8fd0:	43500000 	.word	0x43500000
   b8fd4:	ffff3cb0 	.word	0xffff3cb0
   b8fd8:	3c900000 	.word	0x3c900000

000b8fdc <finitef>:
   b8fdc:	b082      	sub	sp, #8
   b8fde:	ed8d 0a01 	vstr	s0, [sp, #4]
   b8fe2:	9801      	ldr	r0, [sp, #4]
   b8fe4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   b8fe8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   b8fec:	bfac      	ite	ge
   b8fee:	2000      	movge	r0, #0
   b8ff0:	2001      	movlt	r0, #1
   b8ff2:	b002      	add	sp, #8
   b8ff4:	4770      	bx	lr
   b8ff6:	bf00      	nop

000b8ff8 <nanf>:
   b8ff8:	ed9f 0a01 	vldr	s0, [pc, #4]	; b9000 <nanf+0x8>
   b8ffc:	4770      	bx	lr
   b8ffe:	bf00      	nop
   b9000:	7fc00000 	.word	0x7fc00000

000b9004 <atexit>:
   b9004:	2300      	movs	r3, #0
   b9006:	4601      	mov	r1, r0
   b9008:	461a      	mov	r2, r3
   b900a:	4618      	mov	r0, r3
   b900c:	f000 b87a 	b.w	b9104 <__register_exitproc>

000b9010 <memcmp>:
   b9010:	b510      	push	{r4, lr}
   b9012:	3901      	subs	r1, #1
   b9014:	4402      	add	r2, r0
   b9016:	4290      	cmp	r0, r2
   b9018:	d101      	bne.n	b901e <memcmp+0xe>
   b901a:	2000      	movs	r0, #0
   b901c:	e005      	b.n	b902a <memcmp+0x1a>
   b901e:	7803      	ldrb	r3, [r0, #0]
   b9020:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9024:	42a3      	cmp	r3, r4
   b9026:	d001      	beq.n	b902c <memcmp+0x1c>
   b9028:	1b18      	subs	r0, r3, r4
   b902a:	bd10      	pop	{r4, pc}
   b902c:	3001      	adds	r0, #1
   b902e:	e7f2      	b.n	b9016 <memcmp+0x6>

000b9030 <memcpy>:
   b9030:	440a      	add	r2, r1
   b9032:	4291      	cmp	r1, r2
   b9034:	f100 33ff 	add.w	r3, r0, #4294967295
   b9038:	d100      	bne.n	b903c <memcpy+0xc>
   b903a:	4770      	bx	lr
   b903c:	b510      	push	{r4, lr}
   b903e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9042:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9046:	4291      	cmp	r1, r2
   b9048:	d1f9      	bne.n	b903e <memcpy+0xe>
   b904a:	bd10      	pop	{r4, pc}

000b904c <memmove>:
   b904c:	4288      	cmp	r0, r1
   b904e:	b510      	push	{r4, lr}
   b9050:	eb01 0402 	add.w	r4, r1, r2
   b9054:	d902      	bls.n	b905c <memmove+0x10>
   b9056:	4284      	cmp	r4, r0
   b9058:	4623      	mov	r3, r4
   b905a:	d807      	bhi.n	b906c <memmove+0x20>
   b905c:	1e43      	subs	r3, r0, #1
   b905e:	42a1      	cmp	r1, r4
   b9060:	d008      	beq.n	b9074 <memmove+0x28>
   b9062:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9066:	f803 2f01 	strb.w	r2, [r3, #1]!
   b906a:	e7f8      	b.n	b905e <memmove+0x12>
   b906c:	4402      	add	r2, r0
   b906e:	4601      	mov	r1, r0
   b9070:	428a      	cmp	r2, r1
   b9072:	d100      	bne.n	b9076 <memmove+0x2a>
   b9074:	bd10      	pop	{r4, pc}
   b9076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b907a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b907e:	e7f7      	b.n	b9070 <memmove+0x24>

000b9080 <memset>:
   b9080:	4402      	add	r2, r0
   b9082:	4603      	mov	r3, r0
   b9084:	4293      	cmp	r3, r2
   b9086:	d100      	bne.n	b908a <memset+0xa>
   b9088:	4770      	bx	lr
   b908a:	f803 1b01 	strb.w	r1, [r3], #1
   b908e:	e7f9      	b.n	b9084 <memset+0x4>

000b9090 <srand>:
   b9090:	b538      	push	{r3, r4, r5, lr}
   b9092:	4b10      	ldr	r3, [pc, #64]	; (b90d4 <srand+0x44>)
   b9094:	681d      	ldr	r5, [r3, #0]
   b9096:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9098:	4604      	mov	r4, r0
   b909a:	b9b3      	cbnz	r3, b90ca <srand+0x3a>
   b909c:	2018      	movs	r0, #24
   b909e:	f7fc faf3 	bl	b5688 <malloc>
   b90a2:	4602      	mov	r2, r0
   b90a4:	63a8      	str	r0, [r5, #56]	; 0x38
   b90a6:	b920      	cbnz	r0, b90b2 <srand+0x22>
   b90a8:	4b0b      	ldr	r3, [pc, #44]	; (b90d8 <srand+0x48>)
   b90aa:	480c      	ldr	r0, [pc, #48]	; (b90dc <srand+0x4c>)
   b90ac:	2142      	movs	r1, #66	; 0x42
   b90ae:	f7fc fb13 	bl	b56d8 <__assert_func>
   b90b2:	490b      	ldr	r1, [pc, #44]	; (b90e0 <srand+0x50>)
   b90b4:	4b0b      	ldr	r3, [pc, #44]	; (b90e4 <srand+0x54>)
   b90b6:	e9c0 1300 	strd	r1, r3, [r0]
   b90ba:	4b0b      	ldr	r3, [pc, #44]	; (b90e8 <srand+0x58>)
   b90bc:	6083      	str	r3, [r0, #8]
   b90be:	230b      	movs	r3, #11
   b90c0:	8183      	strh	r3, [r0, #12]
   b90c2:	2100      	movs	r1, #0
   b90c4:	2001      	movs	r0, #1
   b90c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b90ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b90cc:	2200      	movs	r2, #0
   b90ce:	611c      	str	r4, [r3, #16]
   b90d0:	615a      	str	r2, [r3, #20]
   b90d2:	bd38      	pop	{r3, r4, r5, pc}
   b90d4:	2003e5e4 	.word	0x2003e5e4
   b90d8:	000b9680 	.word	0x000b9680
   b90dc:	000b9697 	.word	0x000b9697
   b90e0:	abcd330e 	.word	0xabcd330e
   b90e4:	e66d1234 	.word	0xe66d1234
   b90e8:	0005deec 	.word	0x0005deec

000b90ec <strnlen>:
   b90ec:	b510      	push	{r4, lr}
   b90ee:	4602      	mov	r2, r0
   b90f0:	4401      	add	r1, r0
   b90f2:	428a      	cmp	r2, r1
   b90f4:	4613      	mov	r3, r2
   b90f6:	d003      	beq.n	b9100 <strnlen+0x14>
   b90f8:	781c      	ldrb	r4, [r3, #0]
   b90fa:	3201      	adds	r2, #1
   b90fc:	2c00      	cmp	r4, #0
   b90fe:	d1f8      	bne.n	b90f2 <strnlen+0x6>
   b9100:	1a18      	subs	r0, r3, r0
   b9102:	bd10      	pop	{r4, pc}

000b9104 <__register_exitproc>:
   b9104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9108:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b91c4 <__register_exitproc+0xc0>
   b910c:	4606      	mov	r6, r0
   b910e:	f8d8 0000 	ldr.w	r0, [r8]
   b9112:	461f      	mov	r7, r3
   b9114:	460d      	mov	r5, r1
   b9116:	4691      	mov	r9, r2
   b9118:	f000 f856 	bl	b91c8 <__retarget_lock_acquire_recursive>
   b911c:	4b25      	ldr	r3, [pc, #148]	; (b91b4 <__register_exitproc+0xb0>)
   b911e:	681c      	ldr	r4, [r3, #0]
   b9120:	b934      	cbnz	r4, b9130 <__register_exitproc+0x2c>
   b9122:	4c25      	ldr	r4, [pc, #148]	; (b91b8 <__register_exitproc+0xb4>)
   b9124:	601c      	str	r4, [r3, #0]
   b9126:	4b25      	ldr	r3, [pc, #148]	; (b91bc <__register_exitproc+0xb8>)
   b9128:	b113      	cbz	r3, b9130 <__register_exitproc+0x2c>
   b912a:	681b      	ldr	r3, [r3, #0]
   b912c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9130:	6863      	ldr	r3, [r4, #4]
   b9132:	2b1f      	cmp	r3, #31
   b9134:	dd07      	ble.n	b9146 <__register_exitproc+0x42>
   b9136:	f8d8 0000 	ldr.w	r0, [r8]
   b913a:	f000 f847 	bl	b91cc <__retarget_lock_release_recursive>
   b913e:	f04f 30ff 	mov.w	r0, #4294967295
   b9142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9146:	b34e      	cbz	r6, b919c <__register_exitproc+0x98>
   b9148:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b914c:	b988      	cbnz	r0, b9172 <__register_exitproc+0x6e>
   b914e:	4b1c      	ldr	r3, [pc, #112]	; (b91c0 <__register_exitproc+0xbc>)
   b9150:	b923      	cbnz	r3, b915c <__register_exitproc+0x58>
   b9152:	f8d8 0000 	ldr.w	r0, [r8]
   b9156:	f000 f838 	bl	b91ca <__retarget_lock_release>
   b915a:	e7f0      	b.n	b913e <__register_exitproc+0x3a>
   b915c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9160:	f7fc fa92 	bl	b5688 <malloc>
   b9164:	2800      	cmp	r0, #0
   b9166:	d0f4      	beq.n	b9152 <__register_exitproc+0x4e>
   b9168:	2300      	movs	r3, #0
   b916a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b916e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9172:	6863      	ldr	r3, [r4, #4]
   b9174:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9178:	2201      	movs	r2, #1
   b917a:	409a      	lsls	r2, r3
   b917c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9180:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9184:	4313      	orrs	r3, r2
   b9186:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b918a:	2e02      	cmp	r6, #2
   b918c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9190:	bf02      	ittt	eq
   b9192:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9196:	4313      	orreq	r3, r2
   b9198:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b919c:	6863      	ldr	r3, [r4, #4]
   b919e:	f8d8 0000 	ldr.w	r0, [r8]
   b91a2:	1c5a      	adds	r2, r3, #1
   b91a4:	3302      	adds	r3, #2
   b91a6:	6062      	str	r2, [r4, #4]
   b91a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b91ac:	f000 f80e 	bl	b91cc <__retarget_lock_release_recursive>
   b91b0:	2000      	movs	r0, #0
   b91b2:	e7c6      	b.n	b9142 <__register_exitproc+0x3e>
   b91b4:	2003e7e8 	.word	0x2003e7e8
   b91b8:	2003e75c 	.word	0x2003e75c
   b91bc:	00000000 	.word	0x00000000
   b91c0:	000b5689 	.word	0x000b5689
   b91c4:	2003e648 	.word	0x2003e648

000b91c8 <__retarget_lock_acquire_recursive>:
   b91c8:	4770      	bx	lr

000b91ca <__retarget_lock_release>:
   b91ca:	4770      	bx	lr

000b91cc <__retarget_lock_release_recursive>:
   b91cc:	4770      	bx	lr

000b91ce <link_code_end>:
	...

000b91d0 <link_const_data_start>:
   b91d0:	00000000 	.word	0x00000000
   b91d4:	34fb0000 	.word	0x34fb0000
   b91d8:	00805f9b 	.word	0x00805f9b
   b91dc:	10008000 	.word	0x10008000
	...

000b91e8 <dynalib_user>:
   b91e8:	000b4a4d 000b4a89 000b4ab1 000b4ab5     MJ...J...J...J..
   b91f8:	00000000 79616c43 5f6e6f74 65646f4e     ....Clayton_Node
   b9208:	6f77545f 6c654800 202c6f6c 6c726f57     _Two.Hello, Worl
   b9218:	2c002164 0a0d0009 67696c00 73007468     d!.,.....light.s
   b9228:	646e756f 73696400 636e6174 00000065     ound.distance...

000b9238 <_ZTVN5spark13EthernetClassE>:
	...
   b9240:	000b5757 000b574d 000b5743 000b5739     WW..MW..CW..9W..
   b9250:	000b572d 000b5721 000b72d9 000b72e1     -W..!W...r...r..
   b9260:	000b5715 000b570d 000b5703 000b56f9     .W...W...W...V..
   b9270:	000b7311 65737341 6f697472 6961466e     .s..AssertionFai
   b9280:	6572756c 6c616620 77006573 6e697269     lure false.wirin
   b9290:	6c622e67 74530065 20747261 63736964     g.ble.Start disc
   b92a0:	7265766f 20676e69 76726573 73656369     overing services
   b92b0:	7341002e 74726573 466e6f69 756c6961     ..AssertionFailu
   b92c0:	68206572 625f6c61 735f656c 6b636174     re hal_ble_stack
   b92d0:	696e695f 756e2874 74706c6c 3d202972     _init(nullptr) =
   b92e0:	5953203d 4d455453 5252455f 4e5f524f     = SYSTEM_ERROR_N
   b92f0:	00454e4f 72656550 76656420 20656369     ONE.Peer device 
   b9300:	6d207369 69737369 0021676e 6c696146     is missing!.Fail
   b9310:	74206465 7061206f 646e6570 65657020     ed to append pee
   b9320:	65432072 6172746e 6564206c 65636976     r Central device
   b9330:	6f43002e 63656e6e 00646574 63736944     ..Connected.Disc
   b9340:	656e6e6f 64657463 70754400 6163696c     onnected.Duplica
   b9350:	20646574 72616863 65746361 74736972     ted characterist
   b9360:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   b9370:	002e6465 6c696146 74206465 7061206f     ed..Failed to ap
   b9380:	646e6570 636f6c20 63206c61 61726168     pend local chara
   b9390:	72657463 69747369 00002e63              cteristic...

000b939c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b93a4:	000b5895 000b58f9 000b59df 000b5923     .X...X...Y..#Y..
   b93b4:	000b5899                                .X..

000b93b8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b93c0:	000b5891 000b5907 000b5893 000b5929     .X...Y...X..)Y..
   b93d0:	000b58b9                                .X..

000b93d4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b93dc:	000b588f 000b5915 000b608d 000b592f     .X...Y...`../Y..
   b93ec:	000b58d9                                .X..

000b93f0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b93f8 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b93f8:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000b9408 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b9408:	5f9b34fb 80000080 00001000 00000000     .4._............
   b9418:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   b9428:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   b9438:	007a2553 74637361 00656d69              S%z.asctime.

000b9444 <_ZTV9IPAddress>:
	...
   b944c:	000b6efd 000b6eed 000b6eef              .n...n...n..

000b9458 <_ZTV9USBSerial>:
	...
   b9460:	000b6fe3 000b704b 000b7021 000b6b05     .o..Kp..!p...k..
   b9470:	000b7013 000b6fe5 000b6ff5 000b7045     .p...o...o..Ep..
   b9480:	000b7005 000b6fdd                       .p...o..

000b9488 <_ZTV11USARTSerial>:
	...
   b9490:	000b70e5 000b7151 000b7129 000b6b05     .p..Qq..)q...k..
   b94a0:	000b70f9 000b7115 000b7107 000b7123     .p...q...q..#q..
   b94b0:	000b70e7 000b70eb                       .p...p..

000b94b8 <_ZTV7TwoWire>:
	...
   b94c0:	000b7189 000b71d3 000b71ab 000b718b     .q...q...q...q..
   b94d0:	000b71b3 000b71bb 000b71c3 000b71cb     .q...q...q...q..

000b94e0 <_ZTVN5spark9WiFiClassE>:
	...
   b94e8:	000b727b 000b7271 000b7267 000b721d     {r..qr..gr...r..
   b94f8:	000b725b 000b724f 000b72d9 000b72e1     [r..Or...r...r..
   b9508:	000b7243 000b723b 000b7231 000b7227     Cr..;r..1r..'r..
   b9518:	000b7311                                .s..

000b951c <_ZTVN5spark12NetworkClassE>:
	...
   b9524:	000b7299 000b72a3 000b72ad 000b72b7     .r...r...r...r..
   b9534:	000b72c1 000b72cd 000b72d9 000b72e1     .r...r...r...r..
   b9544:	000b72e9 000b72f5 000b72fd 000b7307     .r...r...r...s..
   b9554:	000b7311                                .s..

000b9558 <_ZSt7nothrow>:
	...

000b9559 <_ZTSSt19_Sp_make_shared_tag>:
   b9559:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b9569:	5f646572 00676174                        red_tag....

000b9574 <_ZTISt19_Sp_make_shared_tag>:
   b9574:	000b95b4 000b9559                       ....Y...

000b957c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b957c:	000b9614 000b9588 000b9638              ........8...

000b9588 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9588:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b9598:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b95a8:	00000045                                E...

000b95ac <_ZTVN10__cxxabiv117__class_type_infoE>:
   b95ac:	00000000 000b957c 000b76a1 000b76b5     ....|....v...v..
   b95bc:	000b7849 000b7849 000b771f 000b7661     Ix..Ix...w..av..
   b95cc:	000b7707 000b76c9 000b7693              .w...v...v..

000b95d8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b95d8:	000b9614 000b95e4 000b957c              ........|...

000b95e4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b95e4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b95f4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b9604:	456f666e 00000000                       nfoE....

000b960c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b960c:	00000000 000b95d8 000b7749 000b775d     ........Iw..]w..
   b961c:	000b7849 000b7849 000b771f 000b7661     Ix..Ix...w..av..
   b962c:	000b781d 000b77a9 000b7771              .x...w..qw..

000b9638 <_ZTISt9type_info>:
   b9638:	000b95b4 000b9640                       ....@...

000b9640 <_ZTSSt9type_info>:
   b9640:	74397453 5f657079 6f666e69 00000000     St9type_info....
   b9650:	00000000                                ....

000b9654 <halF>:
   b9654:	3f000000 bf000000                       ...?....

000b965c <ln2HI>:
   b965c:	3f317180 bf317180                       .q1?.q1.

000b9664 <ln2LO>:
   b9664:	3717f7d1 b717f7d1 00000000              ...7........

000b9670 <TWO52>:
   b9670:	00000000 43300000 00000000 c3300000     ......0C......0.
   b9680:	4e454552 616d2054 636f6c6c 63757320     REENT malloc suc
   b9690:	64656563 2f006465 2f746e6d 6b726f77     ceeded./mnt/work
   b96a0:	63617073 6f772f65 70736b72 2f656361     space/workspace/
   b96b0:	2d434347 702d3031 6c657069 2f656e69     GCC-10-pipeline/
   b96c0:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
   b96d0:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
   b96e0:	5f343231 36303631 36303831 732f3134     124_1606180641/s
   b96f0:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
   b9700:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
   b9710:	00632e64                                d.c.

000b9714 <link_const_data_end>:
   b9714:	000b50bd 	.word	0x000b50bd
   b9718:	000b5761 	.word	0x000b5761
   b971c:	000b5789 	.word	0x000b5789
   b9720:	000b6af5 	.word	0x000b6af5
   b9724:	000b6d7d 	.word	0x000b6d7d
   b9728:	000b6d8d 	.word	0x000b6d8d
   b972c:	000b6da9 	.word	0x000b6da9
   b9730:	000b7285 	.word	0x000b7285
   b9734:	000b73e9 	.word	0x000b73e9
