
g:/junk/ELEC4740SensorNodes/clusterhead/target/4.0.2/argon/clusterhead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006d04  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bad20  000bad20  0000ad20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bad44  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000494  2003dd24  000bad48  0001dd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000638  2003e1b8  2003e1b8  0002e1b8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bb1dc  000bb1dc  0002b1dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bb204  000bb204  0002b204  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00119ea5  00000000  00000000  0002b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012c27  00000000  00000000  001450ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00039ff8  00000000  00000000  00157cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002f48  00000000  00000000  00191ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a4c8  00000000  00000000  00194c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a2e3  00000000  00000000  0019f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00040d6b  00000000  00000000  001d93bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00130f06  00000000  00000000  0021a12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000087f8  00000000  00000000  0034b030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
   b4022:	b508      	push	{r3, lr}
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 ff0d 	bl	b9e4c <memcpy>
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 ff2f 	bl	b9e9c <memset>
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003dd24 	.word	0x2003dd24
   b4048:	000bad48 	.word	0x000bad48
   b404c:	2003e1b8 	.word	0x2003e1b8
   b4050:	2003e1b8 	.word	0x2003e1b8
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
   b4058:	b570      	push	{r4, r5, r6, lr}
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
   b405e:	f004 fd3f 	bl	b8ae0 <module_user_init_hook>
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
   b406c:	bd70      	pop	{r4, r5, r6, pc}
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bacf8 	.word	0x000bacf8
   b407c:	000bad20 	.word	0x000bad20

000b4080 <module_user_setup>:
   b4080:	f000 b834 	b.w	b40ec <setup>

000b4084 <module_user_loop>:
   b4084:	b508      	push	{r3, lr}
   b4086:	f000 f90d 	bl	b42a4 <loop>
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b408e:	f004 bcdf 	b.w	b8a50 <_post_loop>

000b4092 <_Znwj>:
   b4092:	f001 bafb 	b.w	b568c <malloc>

000b4096 <_Znaj>:
   b4096:	f001 baf9 	b.w	b568c <malloc>

000b409a <_ZdlPvj>:
   b409a:	f001 baff 	b.w	b569c <free>
	...

000b40a0 <__cxa_pure_virtual>:
   b40a0:	b508      	push	{r3, lr}
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 fa54 	bl	b5554 <panic_>
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5159 	.word	0x000b5159
   b40b4:	000ba034 	.word	0x000ba034

000b40b8 <__cxa_guard_acquire>:
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_Z14onTempReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
  //    ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑

}

void onTempReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
    memcpy(&flTemp, &data[0], sizeof(flTemp));
   b40c8:	4b01      	ldr	r3, [pc, #4]	; (b40d0 <_Z14onTempReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8>)
   b40ca:	6802      	ldr	r2, [r0, #0]
   b40cc:	601a      	str	r2, [r3, #0]
    // display.setCursor(0,50);
    // display.print("Raw Temp: ");
    // display.print(flTemp);
    // display.display();
    // tempSensorCharacteristic.getValue(&flTemp);
}
   b40ce:	4770      	bx	lr
   b40d0:	2003e250 	.word	0x2003e250

000b40d4 <_Z18onSoundOneReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

void onSoundOneReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
  memcpy(&flSound, &data[0], sizeof(flTemp));
   b40d4:	4b01      	ldr	r3, [pc, #4]	; (b40dc <_Z18onSoundOneReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8>)
   b40d6:	6802      	ldr	r2, [r0, #0]
   b40d8:	601a      	str	r2, [r3, #0]
}
   b40da:	4770      	bx	lr
   b40dc:	2003e24c 	.word	0x2003e24c

000b40e0 <_Z17onMotionRecieivedPKhjRKN8particle13BlePeerDeviceEPv>:

void onMotionRecieived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
  memcpy(&uinMotion, &data[0], sizeof(uinMotion));
   b40e0:	4b01      	ldr	r3, [pc, #4]	; (b40e8 <_Z17onMotionRecieivedPKhjRKN8particle13BlePeerDeviceEPv+0x8>)
   b40e2:	7802      	ldrb	r2, [r0, #0]
   b40e4:	701a      	strb	r2, [r3, #0]
}
   b40e6:	4770      	bx	lr
   b40e8:	2003e6a5 	.word	0x2003e6a5

000b40ec <setup>:
  flTemp = -1;
   b40ec:	4a5c      	ldr	r2, [pc, #368]	; (b4260 <setup+0x174>)
   b40ee:	4b5d      	ldr	r3, [pc, #372]	; (b4264 <setup+0x178>)
void setup() {
   b40f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  flTemp = -1;
   b40f2:	6013      	str	r3, [r2, #0]
  flSound = -1;
   b40f4:	4a5c      	ldr	r2, [pc, #368]	; (b4268 <setup+0x17c>)
   b40f6:	6013      	str	r3, [r2, #0]
  flMovement = -1;
   b40f8:	4a5c      	ldr	r2, [pc, #368]	; (b426c <setup+0x180>)
   b40fa:	6013      	str	r3, [r2, #0]
  uinFanState = 0;
   b40fc:	4b5c      	ldr	r3, [pc, #368]	; (b4270 <setup+0x184>)
void setup() {
   b40fe:	b093      	sub	sp, #76	; 0x4c
  uinFanState = 0;
   b4100:	2400      	movs	r4, #0
   b4102:	701c      	strb	r4, [r3, #0]
  Wire.begin();
   b4104:	f005 f89c 	bl	b9240 <_Z19__fetch_global_Wirev>
   b4108:	f004 feb0 	bl	b8e6c <_ZN7TwoWire5beginEv>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
   b410c:	223c      	movs	r2, #60	; 0x3c
   b410e:	2102      	movs	r1, #2
   b4110:	4858      	ldr	r0, [pc, #352]	; (b4274 <setup+0x188>)
   b4112:	f000 fd4f 	bl	b4bb4 <_ZN16Adafruit_SSD13065beginEhh>
  display.display(); // show splashscreen
   b4116:	4857      	ldr	r0, [pc, #348]	; (b4274 <setup+0x188>)
   b4118:	f000 fcdc 	bl	b4ad4 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
   b411c:	4855      	ldr	r0, [pc, #340]	; (b4274 <setup+0x188>)
   b411e:	f000 fc61 	bl	b49e4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4122:	4854      	ldr	r0, [pc, #336]	; (b4274 <setup+0x188>)
   b4124:	2101      	movs	r1, #1
   b4126:	f000 ffc6 	bl	b50b6 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   b412a:	4852      	ldr	r0, [pc, #328]	; (b4274 <setup+0x188>)
   b412c:	2101      	movs	r1, #1
   b412e:	f000 ffc7 	bl	b50c0 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0, 0);
   b4132:	4622      	mov	r2, r4
   b4134:	484f      	ldr	r0, [pc, #316]	; (b4274 <setup+0x188>)
   b4136:	4621      	mov	r1, r4
   b4138:	f000 ffba 	bl	b50b0 <_ZN12Adafruit_GFX9setCursorEss>
  display.println("Hello World");
   b413c:	494e      	ldr	r1, [pc, #312]	; (b4278 <setup+0x18c>)
   b413e:	484d      	ldr	r0, [pc, #308]	; (b4274 <setup+0x188>)
   b4140:	f004 fb3d 	bl	b87be <_ZN5Print7printlnEPKc>
  display.display();
   b4144:	484b      	ldr	r0, [pc, #300]	; (b4274 <setup+0x188>)
   b4146:	f000 fcc5 	bl	b4ad4 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();   // clears the screen and buffer
   b414a:	484a      	ldr	r0, [pc, #296]	; (b4274 <setup+0x188>)
   b414c:	f000 fc4a 	bl	b49e4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  BLE.on();
   b4150:	f002 fab6 	bl	b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4154:	f002 fafe 	bl	b6754 <_ZNK8particle14BleLocalDevice2onEv>
    }

    // Service UUID
    template<typename T>
    BleScanFilter& serviceUUID(T uuid) {
        serviceUuids_.append(BleUuid(uuid));
   b4158:	4b48      	ldr	r3, [pc, #288]	; (b427c <setup+0x190>)
   b415a:	a803      	add	r0, sp, #12
   b415c:	6819      	ldr	r1, [r3, #0]
   b415e:	ae03      	add	r6, sp, #12
   b4160:	f001 ffce 	bl	b6100 <_ZN8particle7BleUuidC1EPKc>
   b4164:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4166:	ad08      	add	r5, sp, #32
   b4168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b416a:	f8d6 e000 	ldr.w	lr, [r6]
   b416e:	f8c5 e000 	str.w	lr, [r5]
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b4172:	f10d 0c20 	add.w	ip, sp, #32
   b4176:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b417a:	ae0d      	add	r6, sp, #52	; 0x34
   b417c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    return insert(size_, std::move(value));
   b417e:	4d40      	ldr	r5, [pc, #256]	; (b4280 <setup+0x194>)
   b4180:	f8c6 e000 	str.w	lr, [r6]
   b4184:	692f      	ldr	r7, [r5, #16]
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4186:	696b      	ldr	r3, [r5, #20]
   b4188:	429f      	cmp	r7, r3
   b418a:	db4c      	blt.n	b4226 <setup+0x13a>
   b418c:	1c7e      	adds	r6, r7, #1
        if (n > 0) {
   b418e:	42a6      	cmp	r6, r4
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b4190:	68e8      	ldr	r0, [r5, #12]
        if (n > 0) {
   b4192:	dd43      	ble.n	b421c <setup+0x130>
    return ::realloc(ptr, size);
   b4194:	2114      	movs	r1, #20
   b4196:	4371      	muls	r1, r6
   b4198:	f001 fa88 	bl	b56ac <realloc>
            if (!d) {
   b419c:	2800      	cmp	r0, #0
   b419e:	d140      	bne.n	b4222 <setup+0x136>
  BLE.addCharacteristic(fanCharacteristic);
   b41a0:	f002 fa8e 	bl	b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41a4:	4a37      	ldr	r2, [pc, #220]	; (b4284 <setup+0x198>)
   b41a6:	4601      	mov	r1, r0
   b41a8:	a80d      	add	r0, sp, #52	; 0x34
   b41aa:	f004 f807 	bl	b81bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b41ae:	a80d      	add	r0, sp, #52	; 0x34
   b41b0:	f002 fbe7 	bl	b6982 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData advData;
   b41b4:	a808      	add	r0, sp, #32
   b41b6:	f002 ff18 	bl	b6fea <_ZN8particle18BleAdvertisingDataC1Ev>
  advData.appendServiceUUID(ClusterHeadServiceUUID);
   b41ba:	4b33      	ldr	r3, [pc, #204]	; (b4288 <setup+0x19c>)
        BleUuid tempUUID(uuid);
   b41bc:	a80d      	add	r0, sp, #52	; 0x34
   b41be:	6819      	ldr	r1, [r3, #0]
   b41c0:	f001 ff9e 	bl	b6100 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41c4:	a80d      	add	r0, sp, #52	; 0x34
   b41c6:	f001 fefd 	bl	b5fc4 <_ZNK8particle7BleUuid4typeEv>
   b41ca:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b41cc:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41ce:	2c00      	cmp	r4, #0
   b41d0:	d13d      	bne.n	b424e <setup+0x162>
            uint16_t uuid16 = tempUUID.shorted();
   b41d2:	f001 ff13 	bl	b5ffc <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41d6:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b41d8:	f8ad 000c 	strh.w	r0, [sp, #12]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41dc:	2302      	movs	r3, #2
   b41de:	aa03      	add	r2, sp, #12
   b41e0:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b41e2:	a808      	add	r0, sp, #32
   b41e4:	f002 fef6 	bl	b6fd4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&advData);
   b41e8:	f002 fa6a 	bl	b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41ec:	a908      	add	r1, sp, #32
   b41ee:	2200      	movs	r2, #0
   b41f0:	f002 fb6a 	bl	b68c8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  tempSensorCharacteristic.onDataReceived(onTempReceived, NULL);
   b41f4:	4925      	ldr	r1, [pc, #148]	; (b428c <setup+0x1a0>)
   b41f6:	4826      	ldr	r0, [pc, #152]	; (b4290 <setup+0x1a4>)
   b41f8:	2200      	movs	r2, #0
   b41fa:	f003 fb37 	bl	b786c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
  soundSensorCharacteristicOne.onDataReceived(onSoundOneReceived, NULL);
   b41fe:	4925      	ldr	r1, [pc, #148]	; (b4294 <setup+0x1a8>)
   b4200:	4825      	ldr	r0, [pc, #148]	; (b4298 <setup+0x1ac>)
   b4202:	2200      	movs	r2, #0
   b4204:	f003 fb32 	bl	b786c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
  motionSensorCharacteristic.onDataReceived(onMotionRecieived, NULL);
   b4208:	4924      	ldr	r1, [pc, #144]	; (b429c <setup+0x1b0>)
   b420a:	4825      	ldr	r0, [pc, #148]	; (b42a0 <setup+0x1b4>)
   b420c:	2200      	movs	r2, #0
   b420e:	f003 fb2d 	bl	b786c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    ::free(ptr);
   b4212:	9808      	ldr	r0, [sp, #32]
   b4214:	f001 fa42 	bl	b569c <free>
}
   b4218:	b013      	add	sp, #76	; 0x4c
   b421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b421c:	f001 fa3e 	bl	b569c <free>
        T* d = nullptr;
   b4220:	4620      	mov	r0, r4
        data_ = d;
   b4222:	60e8      	str	r0, [r5, #12]
        capacity_ = n;
   b4224:	616e      	str	r6, [r5, #20]
        return false;
    }
    T* const p = data_ + i;
   b4226:	2314      	movs	r3, #20
   b4228:	68ec      	ldr	r4, [r5, #12]
    move(p + 1, p, data_ + size_);
   b422a:	692a      	ldr	r2, [r5, #16]
    T* const p = data_ + i;
   b422c:	435f      	muls	r7, r3
   b422e:	443c      	add	r4, r7
    move(p + 1, p, data_ + size_);
   b4230:	435a      	muls	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4232:	4621      	mov	r1, r4
   b4234:	18e0      	adds	r0, r4, r3
   b4236:	1bd2      	subs	r2, r2, r7
    new(p) T(std::move(value));
   b4238:	ae0d      	add	r6, sp, #52	; 0x34
        ::memmove(dest, p, (end - p) * sizeof(T));
   b423a:	f005 fe15 	bl	b9e68 <memmove>
    new(p) T(std::move(value));
   b423e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4242:	6833      	ldr	r3, [r6, #0]
   b4244:	6023      	str	r3, [r4, #0]
    ++size_;
   b4246:	692b      	ldr	r3, [r5, #16]
   b4248:	3301      	adds	r3, #1
   b424a:	612b      	str	r3, [r5, #16]
    return true;
   b424c:	e7a8      	b.n	b41a0 <setup+0xb4>
   b424e:	f001 fed7 	bl	b6000 <_ZNK8particle7BleUuid8rawBytesEv>
   b4252:	2300      	movs	r3, #0
   b4254:	9300      	str	r3, [sp, #0]
   b4256:	4602      	mov	r2, r0
   b4258:	2310      	movs	r3, #16
   b425a:	2107      	movs	r1, #7
   b425c:	e7c1      	b.n	b41e2 <setup+0xf6>
   b425e:	bf00      	nop
   b4260:	2003e250 	.word	0x2003e250
   b4264:	bf800000 	.word	0xbf800000
   b4268:	2003e24c 	.word	0x2003e24c
   b426c:	2003e248 	.word	0x2003e248
   b4270:	2003e6a4 	.word	0x2003e6a4
   b4274:	2003e21c 	.word	0x2003e21c
   b4278:	000ba049 	.word	0x000ba049
   b427c:	2003dd30 	.word	0x2003dd30
   b4280:	2003e1c0 	.word	0x2003e1c0
   b4284:	2003e240 	.word	0x2003e240
   b4288:	2003dd24 	.word	0x2003dd24
   b428c:	000b40c9 	.word	0x000b40c9
   b4290:	2003e69c 	.word	0x2003e69c
   b4294:	000b40d5 	.word	0x000b40d5
   b4298:	2003e694 	.word	0x2003e694
   b429c:	000b40e1 	.word	0x000b40e1
   b42a0:	2003e254 	.word	0x2003e254

000b42a4 <loop>:
void loop() {
   b42a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b42a8:	b08e      	sub	sp, #56	; 0x38
  if(BLE.connected()){
   b42aa:	f002 fa09 	bl	b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42ae:	f002 fa87 	bl	b67c0 <_ZNK8particle14BleLocalDevice9connectedEv>
   b42b2:	b128      	cbz	r0, b42c0 <loop+0x1c>
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b42b4:	4988      	ldr	r1, [pc, #544]	; (b44d8 <loop+0x234>)
   b42b6:	4889      	ldr	r0, [pc, #548]	; (b44dc <loop+0x238>)
   b42b8:	2300      	movs	r3, #0
   b42ba:	2201      	movs	r2, #1
   b42bc:	f002 f876 	bl	b63ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
  if (!NodeOne.connected()) {
   b42c0:	4887      	ldr	r0, [pc, #540]	; (b44e0 <loop+0x23c>)
   b42c2:	4f87      	ldr	r7, [pc, #540]	; (b44e0 <loop+0x23c>)
   b42c4:	f002 f96e 	bl	b65a4 <_ZNK8particle13BlePeerDevice9connectedEv>
   b42c8:	4605      	mov	r5, r0
   b42ca:	2800      	cmp	r0, #0
   b42cc:	f040 80ac 	bne.w	b4428 <loop+0x184>
    Vector<BleScanResult> scanResults = BLE.scanWithFilter(NodeOneFilter);
   b42d0:	f002 f9f6 	bl	b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42d4:	4a83      	ldr	r2, [pc, #524]	; (b44e4 <loop+0x240>)
      if(len > 0 && foundService == NodeOneServiceUUID){
   b42d6:	f8df 8250 	ldr.w	r8, [pc, #592]	; b4528 <loop+0x284>
        display.clearDisplay();
   b42da:	4c83      	ldr	r4, [pc, #524]	; (b44e8 <loop+0x244>)
        display.println("Found a Device");
   b42dc:	f8df 924c 	ldr.w	r9, [pc, #588]	; b452c <loop+0x288>
    Vector<BleScanResult> scanResults = BLE.scanWithFilter(NodeOneFilter);
   b42e0:	4601      	mov	r1, r0
   b42e2:	a801      	add	r0, sp, #4
   b42e4:	f004 f906 	bl	b84f4 <_ZNK8particle14BleLocalDevice14scanWithFilterERKNS_13BleScanFilterE>
    return true;
}

template<typename T, typename AllocatorT>
inline int spark::Vector<T, AllocatorT>::size() const {
    return size_;
   b42e8:	9b02      	ldr	r3, [sp, #8]
    for(int i = 0; i< scanResults.size(); i++){
   b42ea:	429d      	cmp	r5, r3
   b42ec:	f04f 0624 	mov.w	r6, #36	; 0x24
   b42f0:	da7a      	bge.n	b43e8 <loop+0x144>
      BleUuid foundService;
   b42f2:	a804      	add	r0, sp, #16
   b42f4:	f001 fdf2 	bl	b5edc <_ZN8particle7BleUuidC1Ev>
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::operator[](int i) {
    return data_[i];
   b42f8:	9801      	ldr	r0, [sp, #4]
   b42fa:	436e      	muls	r6, r5
   b42fc:	4430      	add	r0, r6
      len = scanResults[i].advertisingData().serviceUUID(&foundService, 1);
   b42fe:	2201      	movs	r2, #1
   b4300:	a904      	add	r1, sp, #16
   b4302:	3008      	adds	r0, #8
   b4304:	f003 f9bc 	bl	b7680 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
      if(len > 0 && foundService == NodeOneServiceUUID){
   b4308:	2800      	cmp	r0, #0
   b430a:	d069      	beq.n	b43e0 <loop+0x13c>
        return *this == BleUuid(uuid);
   b430c:	f8d8 1000 	ldr.w	r1, [r8]
   b4310:	a809      	add	r0, sp, #36	; 0x24
   b4312:	f001 fef5 	bl	b6100 <_ZN8particle7BleUuidC1EPKc>
   b4316:	a909      	add	r1, sp, #36	; 0x24
   b4318:	a804      	add	r0, sp, #16
   b431a:	f001 fe72 	bl	b6002 <_ZNK8particle7BleUuideqERKS0_>
   b431e:	2800      	cmp	r0, #0
   b4320:	d05e      	beq.n	b43e0 <loop+0x13c>
        display.clearDisplay();
   b4322:	4620      	mov	r0, r4
   b4324:	f000 fb5e 	bl	b49e4 <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.setCursor(0, 0);
   b4328:	2200      	movs	r2, #0
   b432a:	4611      	mov	r1, r2
   b432c:	4620      	mov	r0, r4
   b432e:	f000 febf 	bl	b50b0 <_ZN12Adafruit_GFX9setCursorEss>
        display.println("Found a Device");
   b4332:	4649      	mov	r1, r9
   b4334:	4620      	mov	r0, r4
   b4336:	f004 fa42 	bl	b87be <_ZN5Print7printlnEPKc>
        display.print("Address: ");
   b433a:	496c      	ldr	r1, [pc, #432]	; (b44ec <loop+0x248>)
   b433c:	4620      	mov	r0, r4
   b433e:	f004 fa2b 	bl	b8798 <_ZN5Print5printEPKc>
        display.print(scanResults[i].address().toString());
   b4342:	9901      	ldr	r1, [sp, #4]
   b4344:	2200      	movs	r2, #0
   b4346:	4431      	add	r1, r6
   b4348:	a809      	add	r0, sp, #36	; 0x24
   b434a:	f001 fdb7 	bl	b5ebc <_ZNK8particle10BleAddress8toStringEb>
   b434e:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4350:	4620      	mov	r0, r4
   b4352:	f004 fa21 	bl	b8798 <_ZN5Print5printEPKc>
   b4356:	a809      	add	r0, sp, #36	; 0x24
   b4358:	f001 fad8 	bl	b590c <_ZN6StringD1Ev>
        display.display();
   b435c:	4620      	mov	r0, r4
   b435e:	f000 fbb9 	bl	b4ad4 <_ZN16Adafruit_SSD13067displayEv>
          NodeOne = BLE.connect(scanResults[i].address());
   b4362:	f002 f9ad 	bl	b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4366:	9a01      	ldr	r2, [sp, #4]
   b4368:	4601      	mov	r1, r0
   b436a:	2301      	movs	r3, #1
   b436c:	4432      	add	r2, r6
   b436e:	a809      	add	r0, sp, #36	; 0x24
   b4370:	f003 fe38 	bl	b7fe4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4374:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4376:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   b437a:	603b      	str	r3, [r7, #0]
	if (__tmp != _M_pi)
   b437c:	687b      	ldr	r3, [r7, #4]
   b437e:	459a      	cmp	sl, r3
   b4380:	d01b      	beq.n	b43ba <loop+0x116>
	    if (__tmp != 0)
   b4382:	f1ba 0f00 	cmp.w	sl, #0
   b4386:	d004      	beq.n	b4392 <loop+0xee>
    { ++_M_use_count; }
   b4388:	f8da 3004 	ldr.w	r3, [sl, #4]
   b438c:	3301      	adds	r3, #1
   b438e:	f8ca 3004 	str.w	r3, [sl, #4]
	    if (_M_pi != 0)
   b4392:	687e      	ldr	r6, [r7, #4]
   b4394:	b17e      	cbz	r6, b43b6 <loop+0x112>
      if (--_M_use_count == 0)
   b4396:	6873      	ldr	r3, [r6, #4]
   b4398:	3b01      	subs	r3, #1
   b439a:	6073      	str	r3, [r6, #4]
   b439c:	b95b      	cbnz	r3, b43b6 <loop+0x112>
          _M_dispose();
   b439e:	6833      	ldr	r3, [r6, #0]
   b43a0:	4630      	mov	r0, r6
   b43a2:	689b      	ldr	r3, [r3, #8]
   b43a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b43a6:	68b3      	ldr	r3, [r6, #8]
   b43a8:	3b01      	subs	r3, #1
   b43aa:	60b3      	str	r3, [r6, #8]
   b43ac:	b91b      	cbnz	r3, b43b6 <loop+0x112>
            _M_destroy();
   b43ae:	6833      	ldr	r3, [r6, #0]
   b43b0:	4630      	mov	r0, r6
   b43b2:	68db      	ldr	r3, [r3, #12]
   b43b4:	4798      	blx	r3
	    _M_pi = __tmp;
   b43b6:	f8c7 a004 	str.w	sl, [r7, #4]
   b43ba:	a809      	add	r0, sp, #36	; 0x24
   b43bc:	f002 fae8 	bl	b6990 <_ZN8particle13BlePeerDeviceD1Ev>
          display.setCursor(0, 30);
   b43c0:	4620      	mov	r0, r4
   b43c2:	221e      	movs	r2, #30
   b43c4:	2100      	movs	r1, #0
   b43c6:	f000 fe73 	bl	b50b0 <_ZN12Adafruit_GFX9setCursorEss>
          if(NodeOne.connected()){
   b43ca:	4845      	ldr	r0, [pc, #276]	; (b44e0 <loop+0x23c>)
   b43cc:	f002 f8ea 	bl	b65a4 <_ZNK8particle13BlePeerDevice9connectedEv>
   b43d0:	b140      	cbz	r0, b43e4 <loop+0x140>
            display.print("Node :)");
   b43d2:	4947      	ldr	r1, [pc, #284]	; (b44f0 <loop+0x24c>)
            display.print("Node :(");
   b43d4:	4620      	mov	r0, r4
   b43d6:	f004 f9df 	bl	b8798 <_ZN5Print5printEPKc>
        display.display();
   b43da:	4620      	mov	r0, r4
   b43dc:	f000 fb7a 	bl	b4ad4 <_ZN16Adafruit_SSD13067displayEv>
    for(int i = 0; i< scanResults.size(); i++){
   b43e0:	3501      	adds	r5, #1
   b43e2:	e781      	b.n	b42e8 <loop+0x44>
            display.print("Node :(");
   b43e4:	4943      	ldr	r1, [pc, #268]	; (b44f4 <loop+0x250>)
   b43e6:	e7f5      	b.n	b43d4 <loop+0x130>
    destruct(data_, data_ + size_);
   b43e8:	9c01      	ldr	r4, [sp, #4]
   b43ea:	fb06 4603 	mla	r6, r6, r3, r4
        for (; p != end; ++p) {
   b43ee:	42a6      	cmp	r6, r4
   b43f0:	d007      	beq.n	b4402 <loop+0x15e>
    ::free(ptr);
   b43f2:	6960      	ldr	r0, [r4, #20]
   b43f4:	f001 f952 	bl	b569c <free>
   b43f8:	68a0      	ldr	r0, [r4, #8]
   b43fa:	f001 f94f 	bl	b569c <free>
        for (; p != end; ++p) {
   b43fe:	3424      	adds	r4, #36	; 0x24
   b4400:	e7f5      	b.n	b43ee <loop+0x14a>
    ::free(ptr);
   b4402:	9801      	ldr	r0, [sp, #4]
   b4404:	f001 f94a 	bl	b569c <free>
  if(flTemp > 24){
   b4408:	4b3b      	ldr	r3, [pc, #236]	; (b44f8 <loop+0x254>)
   b440a:	edd3 7a00 	vldr	s15, [r3]
   b440e:	4b32      	ldr	r3, [pc, #200]	; (b44d8 <loop+0x234>)
   b4410:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
   b4414:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b441c:	dd51      	ble.n	b44c2 <loop+0x21e>
    uinFanState = 2;
   b441e:	2202      	movs	r2, #2
    uinFanState = 1;
   b4420:	701a      	strb	r2, [r3, #0]
}
   b4422:	b00e      	add	sp, #56	; 0x38
   b4424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NodeOne.getCharacteristicByUUID(tempSensorCharacteristic, NodeOneTempUUID);
   b4428:	4b34      	ldr	r3, [pc, #208]	; (b44fc <loop+0x258>)
   b442a:	a809      	add	r0, sp, #36	; 0x24
   b442c:	6819      	ldr	r1, [r3, #0]
   b442e:	f001 fe67 	bl	b6100 <_ZN8particle7BleUuidC1EPKc>
   b4432:	aa09      	add	r2, sp, #36	; 0x24
   b4434:	4932      	ldr	r1, [pc, #200]	; (b4500 <loop+0x25c>)
   b4436:	4638      	mov	r0, r7
   b4438:	f003 f9ee 	bl	b7818 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
    NodeOne.getCharacteristicByUUID(soundSensorCharacteristicOne, NodeOneSoundUUID);
   b443c:	4b31      	ldr	r3, [pc, #196]	; (b4504 <loop+0x260>)
   b443e:	a809      	add	r0, sp, #36	; 0x24
   b4440:	6819      	ldr	r1, [r3, #0]
   b4442:	f001 fe5d 	bl	b6100 <_ZN8particle7BleUuidC1EPKc>
   b4446:	aa09      	add	r2, sp, #36	; 0x24
   b4448:	492f      	ldr	r1, [pc, #188]	; (b4508 <loop+0x264>)
   b444a:	4638      	mov	r0, r7
   b444c:	f003 f9e4 	bl	b7818 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
    NodeOne.getCharacteristicByUUID(motionSensorCharacteristic, NodeOneMovementUUID);
   b4450:	4b2e      	ldr	r3, [pc, #184]	; (b450c <loop+0x268>)
   b4452:	a809      	add	r0, sp, #36	; 0x24
   b4454:	6819      	ldr	r1, [r3, #0]
   b4456:	f001 fe53 	bl	b6100 <_ZN8particle7BleUuidC1EPKc>
   b445a:	aa09      	add	r2, sp, #36	; 0x24
   b445c:	492c      	ldr	r1, [pc, #176]	; (b4510 <loop+0x26c>)
   b445e:	4638      	mov	r0, r7
   b4460:	f003 f9da 	bl	b7818 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
    display.clearDisplay();
   b4464:	4820      	ldr	r0, [pc, #128]	; (b44e8 <loop+0x244>)
   b4466:	f000 fabd 	bl	b49e4 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setCursor(0, 0);
   b446a:	2200      	movs	r2, #0
   b446c:	4611      	mov	r1, r2
   b446e:	481e      	ldr	r0, [pc, #120]	; (b44e8 <loop+0x244>)
   b4470:	f000 fe1e 	bl	b50b0 <_ZN12Adafruit_GFX9setCursorEss>
    display.print("Temp: ");
   b4474:	4927      	ldr	r1, [pc, #156]	; (b4514 <loop+0x270>)
   b4476:	481c      	ldr	r0, [pc, #112]	; (b44e8 <loop+0x244>)
   b4478:	f004 f98e 	bl	b8798 <_ZN5Print5printEPKc>
    display.println(flTemp);
   b447c:	4b1e      	ldr	r3, [pc, #120]	; (b44f8 <loop+0x254>)
   b447e:	481a      	ldr	r0, [pc, #104]	; (b44e8 <loop+0x244>)
   b4480:	ed93 0a00 	vldr	s0, [r3]
   b4484:	2102      	movs	r1, #2
   b4486:	f004 fa96 	bl	b89b6 <_ZN5Print7printlnEfi>
    display.print("Sound: ");
   b448a:	4923      	ldr	r1, [pc, #140]	; (b4518 <loop+0x274>)
   b448c:	4816      	ldr	r0, [pc, #88]	; (b44e8 <loop+0x244>)
   b448e:	f004 f983 	bl	b8798 <_ZN5Print5printEPKc>
    display.println(flSound);
   b4492:	4b22      	ldr	r3, [pc, #136]	; (b451c <loop+0x278>)
   b4494:	4814      	ldr	r0, [pc, #80]	; (b44e8 <loop+0x244>)
   b4496:	ed93 0a00 	vldr	s0, [r3]
   b449a:	2102      	movs	r1, #2
   b449c:	f004 fa8b 	bl	b89b6 <_ZN5Print7printlnEfi>
    display.print("Motion: ");
   b44a0:	491f      	ldr	r1, [pc, #124]	; (b4520 <loop+0x27c>)
   b44a2:	4811      	ldr	r0, [pc, #68]	; (b44e8 <loop+0x244>)
   b44a4:	f004 f978 	bl	b8798 <_ZN5Print5printEPKc>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b44a8:	4b1e      	ldr	r3, [pc, #120]	; (b4524 <loop+0x280>)
   b44aa:	480f      	ldr	r0, [pc, #60]	; (b44e8 <loop+0x244>)
   b44ac:	7819      	ldrb	r1, [r3, #0]
   b44ae:	220a      	movs	r2, #10
   b44b0:	f004 f98f 	bl	b87d2 <_ZN5Print11printNumberEmh>
        n += println();
   b44b4:	480c      	ldr	r0, [pc, #48]	; (b44e8 <loop+0x244>)
   b44b6:	f004 f976 	bl	b87a6 <_ZN5Print7printlnEv>
    display.display();
   b44ba:	480b      	ldr	r0, [pc, #44]	; (b44e8 <loop+0x244>)
   b44bc:	f000 fb0a 	bl	b4ad4 <_ZN16Adafruit_SSD13067displayEv>
   b44c0:	e7a2      	b.n	b4408 <loop+0x164>
  }else if(flTemp < 20){
   b44c2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
   b44c6:	eef4 7ac7 	vcmpe.f32	s15, s14
   b44ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    uinFanState = 0;
   b44ce:	bf4c      	ite	mi
   b44d0:	2200      	movmi	r2, #0
    uinFanState = 1;
   b44d2:	2201      	movpl	r2, #1
   b44d4:	e7a4      	b.n	b4420 <loop+0x17c>
   b44d6:	bf00      	nop
   b44d8:	2003e6a4 	.word	0x2003e6a4
   b44dc:	2003e240 	.word	0x2003e240
   b44e0:	2003e1b8 	.word	0x2003e1b8
   b44e4:	2003e1c0 	.word	0x2003e1c0
   b44e8:	2003e21c 	.word	0x2003e21c
   b44ec:	000ba064 	.word	0x000ba064
   b44f0:	000ba06e 	.word	0x000ba06e
   b44f4:	000ba076 	.word	0x000ba076
   b44f8:	2003e250 	.word	0x2003e250
   b44fc:	2003dd38 	.word	0x2003dd38
   b4500:	2003e69c 	.word	0x2003e69c
   b4504:	2003dd34 	.word	0x2003dd34
   b4508:	2003e694 	.word	0x2003e694
   b450c:	2003dd2c 	.word	0x2003dd2c
   b4510:	2003e254 	.word	0x2003e254
   b4514:	000ba07e 	.word	0x000ba07e
   b4518:	000ba085 	.word	0x000ba085
   b451c:	2003e24c 	.word	0x2003e24c
   b4520:	000ba08d 	.word	0x000ba08d
   b4524:	2003e6a5 	.word	0x2003e6a5
   b4528:	2003dd30 	.word	0x2003dd30
   b452c:	000ba055 	.word	0x000ba055

000b4530 <_GLOBAL__sub_I_SystemMode>:
}
   b4530:	b5f0      	push	{r4, r5, r6, r7, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4532:	4b31      	ldr	r3, [pc, #196]	; (b45f8 <_GLOBAL__sub_I_SystemMode+0xc8>)
    SleepResult() {}
   b4534:	4a31      	ldr	r2, [pc, #196]	; (b45fc <_GLOBAL__sub_I_SystemMode+0xcc>)
   b4536:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4538:	2400      	movs	r4, #0
   b453a:	b08f      	sub	sp, #60	; 0x3c
   b453c:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4540:	2003      	movs	r0, #3
   b4542:	f001 f817 	bl	b5574 <set_system_mode>
BlePeerDevice NodeOne; 
   b4546:	482e      	ldr	r0, [pc, #184]	; (b4600 <_GLOBAL__sub_I_SystemMode+0xd0>)
      : _M_ptr(0), _M_refcount()
   b4548:	4d2e      	ldr	r5, [pc, #184]	; (b4604 <_GLOBAL__sub_I_SystemMode+0xd4>)
   b454a:	f002 f809 	bl	b6560 <_ZN8particle13BlePeerDeviceC1Ev>
BleUuid NodeOneServiceUuid(NodeOneServiceUUID);
   b454e:	4b2e      	ldr	r3, [pc, #184]	; (b4608 <_GLOBAL__sub_I_SystemMode+0xd8>)
   b4550:	482e      	ldr	r0, [pc, #184]	; (b460c <_GLOBAL__sub_I_SystemMode+0xdc>)
   b4552:	6819      	ldr	r1, [r3, #0]
   b4554:	f001 fdd4 	bl	b6100 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic tempSensorCharacteristic;
   b4558:	482d      	ldr	r0, [pc, #180]	; (b4610 <_GLOBAL__sub_I_SystemMode+0xe0>)
   b455a:	f001 ff01 	bl	b6360 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic soundSensorCharacteristicOne;
   b455e:	482d      	ldr	r0, [pc, #180]	; (b4614 <_GLOBAL__sub_I_SystemMode+0xe4>)
   b4560:	f001 fefe 	bl	b6360 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic motionSensorCharacteristic;
   b4564:	482c      	ldr	r0, [pc, #176]	; (b4618 <_GLOBAL__sub_I_SystemMode+0xe8>)
   b4566:	f001 fefb 	bl	b6360 <_ZN8particle17BleCharacteristicC1Ev>
        capacity_(0) {
   b456a:	4b2c      	ldr	r3, [pc, #176]	; (b461c <_GLOBAL__sub_I_SystemMode+0xec>)
            : minRssi_(BLE_RSSI_INVALID),
   b456c:	f647 727f 	movw	r2, #32639	; 0x7f7f
   b4570:	e9c3 4400 	strd	r4, r4, [r3]
              customDataLen_(0) {
   b4574:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
   b4578:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b457c:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b4580:	e9c3 4406 	strd	r4, r4, [r3, #24]
   b4584:	e9c3 4408 	strd	r4, r4, [r3, #32]
   b4588:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
   b458c:	639c      	str	r4, [r3, #56]	; 0x38
BleCharacteristic fanCharacteristic("fan",BleCharacteristicProperty::NOTIFY, NodeOneFanUUID, ClusterHeadServiceUUID);
   b458e:	4b24      	ldr	r3, [pc, #144]	; (b4620 <_GLOBAL__sub_I_SystemMode+0xf0>)
   b4590:	681f      	ldr	r7, [r3, #0]
        BleUuid cUuid(charUuid);
   b4592:	4b24      	ldr	r3, [pc, #144]	; (b4624 <_GLOBAL__sub_I_SystemMode+0xf4>)
      constexpr __shared_count() noexcept : _M_pi(0)
   b4594:	e9c5 4400 	strd	r4, r4, [r5]
   b4598:	6819      	ldr	r1, [r3, #0]
        BleUuid sUuid(svcUuid);
   b459a:	ae09      	add	r6, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b459c:	a804      	add	r0, sp, #16
   b459e:	f001 fdaf 	bl	b6100 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b45a2:	4639      	mov	r1, r7
   b45a4:	4630      	mov	r0, r6
   b45a6:	f001 fdab 	bl	b6100 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b45aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b45ae:	9600      	str	r6, [sp, #0]
   b45b0:	4628      	mov	r0, r5
   b45b2:	491d      	ldr	r1, [pc, #116]	; (b4628 <_GLOBAL__sub_I_SystemMode+0xf8>)
   b45b4:	4c1d      	ldr	r4, [pc, #116]	; (b462c <_GLOBAL__sub_I_SystemMode+0xfc>)
   b45b6:	ab04      	add	r3, sp, #16
   b45b8:	f04f 0210 	mov.w	r2, #16
   b45bc:	f003 f9a2 	bl	b7904 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b45c0:	251e      	movs	r5, #30
            : rssi_(BLE_RSSI_INVALID) {
   b45c2:	267f      	movs	r6, #127	; 0x7f
   b45c4:	4620      	mov	r0, r4
   b45c6:	f001 fc12 	bl	b5dee <_ZN8particle10BleAddressC1Ev>
   b45ca:	f104 0008 	add.w	r0, r4, #8
   b45ce:	f002 fd0c 	bl	b6fea <_ZN8particle18BleAdvertisingDataC1Ev>
   b45d2:	f104 0014 	add.w	r0, r4, #20
   b45d6:	f002 fd08 	bl	b6fea <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_MAX];
   b45da:	3d01      	subs	r5, #1
   b45dc:	f884 6020 	strb.w	r6, [r4, #32]
   b45e0:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b45e4:	d1ee      	bne.n	b45c4 <_GLOBAL__sub_I_SystemMode+0x94>
Adafruit_SSD1306 display(-1);
   b45e6:	4812      	ldr	r0, [pc, #72]	; (b4630 <_GLOBAL__sub_I_SystemMode+0x100>)
   b45e8:	f04f 31ff 	mov.w	r1, #4294967295
}
   b45ec:	b00f      	add	sp, #60	; 0x3c
   b45ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
Adafruit_SSD1306 display(-1);
   b45f2:	f000 b9e1 	b.w	b49b8 <_ZN16Adafruit_SSD1306C1Ea>
   b45f6:	bf00      	nop
   b45f8:	2003e210 	.word	0x2003e210
   b45fc:	ffff0000 	.word	0xffff0000
   b4600:	2003e1b8 	.word	0x2003e1b8
   b4604:	2003e240 	.word	0x2003e240
   b4608:	2003dd30 	.word	0x2003dd30
   b460c:	2003e1fc 	.word	0x2003e1fc
   b4610:	2003e69c 	.word	0x2003e69c
   b4614:	2003e694 	.word	0x2003e694
   b4618:	2003e254 	.word	0x2003e254
   b461c:	2003e1c0 	.word	0x2003e1c0
   b4620:	2003dd24 	.word	0x2003dd24
   b4624:	2003dd28 	.word	0x2003dd28
   b4628:	000ba096 	.word	0x000ba096
   b462c:	2003e25c 	.word	0x2003e25c
   b4630:	2003e21c 	.word	0x2003e21c

000b4634 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4634:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4636:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4638:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b463c:	2d02      	cmp	r5, #2
   b463e:	d069      	beq.n	b4714 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4640:	2d03      	cmp	r5, #3
   b4642:	f000 8099 	beq.w	b4778 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4646:	2d01      	cmp	r5, #1
   b4648:	d16c      	bne.n	b4724 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b464a:	8905      	ldrh	r5, [r0, #8]
   b464c:	43d2      	mvns	r2, r2
   b464e:	442a      	add	r2, r5
   b4650:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4652:	2a00      	cmp	r2, #0
   b4654:	db5d      	blt.n	b4712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4656:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b465a:	4295      	cmp	r5, r2
   b465c:	dd59      	ble.n	b4712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b465e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4660:	bfbe      	ittt	lt
   b4662:	185b      	addlt	r3, r3, r1
   b4664:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4666:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4668:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b466c:	18cd      	adds	r5, r1, r3
   b466e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4670:	bfc4      	itt	gt
   b4672:	1a43      	subgt	r3, r0, r1
   b4674:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4676:	2b00      	cmp	r3, #0
   b4678:	dd4b      	ble.n	b4712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b467a:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b467e:	f8df c120 	ldr.w	ip, [pc, #288]	; b47a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4682:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4686:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b468a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b468c:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4690:	d01a      	beq.n	b46c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4692:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4696:	4e40      	ldr	r6, [pc, #256]	; (b4798 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4698:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b469a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b469c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b469e:	bf3f      	itttt	cc
   b46a0:	eba5 0e03 	subcc.w	lr, r5, r3
   b46a4:	26ff      	movcc	r6, #255	; 0xff
   b46a6:	fa46 f60e 	asrcc.w	r6, r6, lr
   b46aa:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b46ac:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b46b0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b46b2:	bf0c      	ite	eq
   b46b4:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b46b6:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b46b8:	42ab      	cmp	r3, r5
   b46ba:	f80c 6002 	strb.w	r6, [ip, r2]
   b46be:	d328      	bcc.n	b4712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b46c0:	3908      	subs	r1, #8
   b46c2:	440b      	add	r3, r1
   b46c4:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b46c6:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b46c8:	2b07      	cmp	r3, #7
   b46ca:	d919      	bls.n	b4700 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b46cc:	2c01      	cmp	r4, #1
   b46ce:	f04f 35ff 	mov.w	r5, #4294967295
   b46d2:	bf18      	it	ne
   b46d4:	2500      	movne	r5, #0
   b46d6:	b2ed      	uxtb	r5, r5
   b46d8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b46dc:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b46de:	3a08      	subs	r2, #8
   b46e0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b46e2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b46e4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b46e8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b46ec:	d8f7      	bhi.n	b46de <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b46ee:	f1a3 0208 	sub.w	r2, r3, #8
   b46f2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b46f6:	3201      	adds	r2, #1
   b46f8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b46fc:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4700:	b13b      	cbz	r3, b4712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4702:	4a26      	ldr	r2, [pc, #152]	; (b479c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4704:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4706:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4708:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b470a:	bf0c      	ite	eq
   b470c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b470e:	4393      	bicne	r3, r2
   b4710:	7003      	strb	r3, [r0, #0]
}
   b4712:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4714:	8945      	ldrh	r5, [r0, #10]
   b4716:	43d2      	mvns	r2, r2
   b4718:	442a      	add	r2, r5
      x -= (w-1);
   b471a:	18cd      	adds	r5, r1, r3
   b471c:	8901      	ldrh	r1, [r0, #8]
   b471e:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4720:	b212      	sxth	r2, r2
      x -= (w-1);
   b4722:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4724:	2a00      	cmp	r2, #0
   b4726:	dbf4      	blt.n	b4712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4728:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b472c:	4295      	cmp	r5, r2
   b472e:	ddf0      	ble.n	b4712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4730:	2900      	cmp	r1, #0
    w += x;
   b4732:	bfbe      	ittt	lt
   b4734:	185b      	addlt	r3, r3, r1
   b4736:	b21b      	sxthlt	r3, r3
    x = 0;
   b4738:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b473a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b473e:	18ce      	adds	r6, r1, r3
   b4740:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4742:	bfc4      	itt	gt
   b4744:	1a6b      	subgt	r3, r5, r1
   b4746:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4748:	2b00      	cmp	r3, #0
   b474a:	dde2      	ble.n	b4712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b474c:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b474e:	2580      	movs	r5, #128	; 0x80
   b4750:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4754:	4812      	ldr	r0, [pc, #72]	; (b47a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4756:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4758:	f002 0007 	and.w	r0, r2, #7
   b475c:	2201      	movs	r2, #1
   b475e:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4760:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4762:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4764:	440b      	add	r3, r1
   b4766:	d10c      	bne.n	b4782 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4768:	428b      	cmp	r3, r1
   b476a:	d0d2      	beq.n	b4712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b476c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4770:	4310      	orrs	r0, r2
   b4772:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4776:	e7f7      	b.n	b4768 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4778:	18cd      	adds	r5, r1, r3
   b477a:	8941      	ldrh	r1, [r0, #10]
   b477c:	1b49      	subs	r1, r1, r5
   b477e:	b209      	sxth	r1, r1
      break;
   b4780:	e767      	b.n	b4652 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4782:	43d2      	mvns	r2, r2
   b4784:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4786:	428b      	cmp	r3, r1
   b4788:	d0c3      	beq.n	b4712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b478a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b478e:	4010      	ands	r0, r2
   b4790:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4794:	e7f7      	b.n	b4786 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4796:	bf00      	nop
   b4798:	2003dd44 	.word	0x2003dd44
   b479c:	2003dd3c 	.word	0x2003dd3c
   b47a0:	2003dd4c 	.word	0x2003dd4c

000b47a4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b47a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b47a6:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b47a8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b47ac:	2d02      	cmp	r5, #2
   b47ae:	d034      	beq.n	b481a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b47b0:	2d03      	cmp	r5, #3
   b47b2:	f000 809b 	beq.w	b48ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b47b6:	2d01      	cmp	r5, #1
   b47b8:	d137      	bne.n	b482a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b47ba:	18d5      	adds	r5, r2, r3
   b47bc:	8902      	ldrh	r2, [r0, #8]
   b47be:	1b52      	subs	r2, r2, r5
   b47c0:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b47c2:	2900      	cmp	r1, #0
   b47c4:	f2c0 8091 	blt.w	b48ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b47c8:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b47cc:	428d      	cmp	r5, r1
   b47ce:	f340 808c 	ble.w	b48ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b47d2:	2a00      	cmp	r2, #0
    w += x;
   b47d4:	bfbe      	ittt	lt
   b47d6:	189b      	addlt	r3, r3, r2
   b47d8:	b21b      	sxthlt	r3, r3
    x = 0;
   b47da:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b47dc:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b47e0:	18d6      	adds	r6, r2, r3
   b47e2:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b47e4:	bfc4      	itt	gt
   b47e6:	1aab      	subgt	r3, r5, r2
   b47e8:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b47ea:	2b00      	cmp	r3, #0
   b47ec:	dd7d      	ble.n	b48ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b47ee:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b47f0:	2580      	movs	r5, #128	; 0x80
   b47f2:	fb10 2205 	smlabb	r2, r0, r5, r2
   b47f6:	4845      	ldr	r0, [pc, #276]	; (b490c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b47f8:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b47fa:	f001 0007 	and.w	r0, r1, #7
   b47fe:	2101      	movs	r1, #1
   b4800:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4802:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4804:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4806:	4413      	add	r3, r2
   b4808:	d175      	bne.n	b48f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b480a:	429a      	cmp	r2, r3
   b480c:	d06d      	beq.n	b48ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b480e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4812:	4308      	orrs	r0, r1
   b4814:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4818:	e7f7      	b.n	b480a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b481a:	8905      	ldrh	r5, [r0, #8]
   b481c:	43c9      	mvns	r1, r1
   b481e:	4429      	add	r1, r5
      y -= (h-1);
   b4820:	18d5      	adds	r5, r2, r3
   b4822:	8942      	ldrh	r2, [r0, #10]
   b4824:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4826:	b209      	sxth	r1, r1
      y -= (h-1);
   b4828:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b482a:	2900      	cmp	r1, #0
   b482c:	db5d      	blt.n	b48ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b482e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4832:	428d      	cmp	r5, r1
   b4834:	dd59      	ble.n	b48ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4836:	2a00      	cmp	r2, #0
    __h += __y;
   b4838:	bfbe      	ittt	lt
   b483a:	189b      	addlt	r3, r3, r2
   b483c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b483e:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4840:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4844:	18d5      	adds	r5, r2, r3
   b4846:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4848:	bfc4      	itt	gt
   b484a:	1a83      	subgt	r3, r0, r2
   b484c:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b484e:	2b00      	cmp	r3, #0
   b4850:	dd4b      	ble.n	b48ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4852:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4856:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b490c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b485a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b485e:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4862:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4864:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4868:	d01a      	beq.n	b48a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b486a:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b486e:	4e28      	ldr	r6, [pc, #160]	; (b4910 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4870:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4872:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4874:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4876:	bf3f      	itttt	cc
   b4878:	eba5 0e03 	subcc.w	lr, r5, r3
   b487c:	26ff      	movcc	r6, #255	; 0xff
   b487e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4882:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4884:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4888:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b488a:	bf0c      	ite	eq
   b488c:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b488e:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4890:	42ab      	cmp	r3, r5
   b4892:	f80c 6001 	strb.w	r6, [ip, r1]
   b4896:	d328      	bcc.n	b48ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4898:	3a08      	subs	r2, #8
   b489a:	4413      	add	r3, r2
   b489c:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b489e:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b48a0:	2b07      	cmp	r3, #7
   b48a2:	d919      	bls.n	b48d8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b48a4:	2c01      	cmp	r4, #1
   b48a6:	f04f 35ff 	mov.w	r5, #4294967295
   b48aa:	bf18      	it	ne
   b48ac:	2500      	movne	r5, #0
   b48ae:	b2ed      	uxtb	r5, r5
   b48b0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b48b4:	461a      	mov	r2, r3
      h -= 8;
   b48b6:	3a08      	subs	r2, #8
   b48b8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b48ba:	2a07      	cmp	r2, #7
      *pBuf = val;
   b48bc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b48c0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b48c4:	d8f7      	bhi.n	b48b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b48c6:	f1a3 0208 	sub.w	r2, r3, #8
   b48ca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b48ce:	3201      	adds	r2, #1
   b48d0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b48d4:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b48d8:	b13b      	cbz	r3, b48ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b48da:	4a0e      	ldr	r2, [pc, #56]	; (b4914 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b48dc:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b48de:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b48e0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b48e2:	bf0c      	ite	eq
   b48e4:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b48e6:	4393      	bicne	r3, r2
   b48e8:	7003      	strb	r3, [r0, #0]
}
   b48ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b48ec:	8945      	ldrh	r5, [r0, #10]
   b48ee:	43c9      	mvns	r1, r1
   b48f0:	4429      	add	r1, r5
   b48f2:	b209      	sxth	r1, r1
      break;
   b48f4:	e765      	b.n	b47c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b48f6:	43c9      	mvns	r1, r1
   b48f8:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b48fa:	429a      	cmp	r2, r3
   b48fc:	d0f5      	beq.n	b48ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b48fe:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4902:	4008      	ands	r0, r1
   b4904:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4908:	e7f7      	b.n	b48fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b490a:	bf00      	nop
   b490c:	2003dd4c 	.word	0x2003dd4c
   b4910:	2003dd44 	.word	0x2003dd44
   b4914:	2003dd3c 	.word	0x2003dd3c

000b4918 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4918:	4770      	bx	lr
	...

000b491c <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b491e:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4920:	4606      	mov	r6, r0
   b4922:	4614      	mov	r4, r2
   b4924:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4926:	db2d      	blt.n	b4984 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4928:	f000 fbcf 	bl	b50ca <_ZN12Adafruit_GFX5widthEv>
   b492c:	42a8      	cmp	r0, r5
   b492e:	dd29      	ble.n	b4984 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4930:	2c00      	cmp	r4, #0
   b4932:	db27      	blt.n	b4984 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4934:	4630      	mov	r0, r6
   b4936:	f000 fbcb 	bl	b50d0 <_ZN12Adafruit_GFX6heightEv>
   b493a:	42a0      	cmp	r0, r4
   b493c:	dd22      	ble.n	b4984 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b493e:	4630      	mov	r0, r6
   b4940:	f000 fbc1 	bl	b50c6 <_ZN12Adafruit_GFX11getRotationEv>
   b4944:	2802      	cmp	r0, #2
   b4946:	d01e      	beq.n	b4986 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4948:	2803      	cmp	r0, #3
   b494a:	d025      	beq.n	b4998 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b494c:	2801      	cmp	r0, #1
   b494e:	d104      	bne.n	b495a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4950:	8933      	ldrh	r3, [r6, #8]
   b4952:	43e2      	mvns	r2, r4
   b4954:	441a      	add	r2, r3
    break;
   b4956:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4958:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b495a:	2c00      	cmp	r4, #0
   b495c:	4622      	mov	r2, r4
   b495e:	bfb8      	it	lt
   b4960:	1de2      	addlt	r2, r4, #7
   b4962:	10d2      	asrs	r2, r2, #3
   b4964:	2180      	movs	r1, #128	; 0x80
   b4966:	fb12 5501 	smlabb	r5, r2, r1, r5
   b496a:	490e      	ldr	r1, [pc, #56]	; (b49a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b496c:	2201      	movs	r2, #1
   b496e:	f004 0407 	and.w	r4, r4, #7
   b4972:	574b      	ldrsb	r3, [r1, r5]
   b4974:	fa02 f404 	lsl.w	r4, r2, r4
   b4978:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b497a:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b497c:	bf0c      	ite	eq
   b497e:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4980:	43a3      	bicne	r3, r4
   b4982:	554b      	strb	r3, [r1, r5]
}
   b4984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b4986:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4988:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b498a:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b498c:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b498e:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4990:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b4992:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b4994:	b224      	sxth	r4, r4
    break;
   b4996:	e7e0      	b.n	b495a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4998:	8973      	ldrh	r3, [r6, #10]
   b499a:	3b01      	subs	r3, #1
   b499c:	1b5b      	subs	r3, r3, r5
    break;
   b499e:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b49a0:	b21c      	sxth	r4, r3
    break;
   b49a2:	e7da      	b.n	b495a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b49a4:	2003dd4c 	.word	0x2003dd4c

000b49a8 <_ZN16Adafruit_SSD1306D0Ev>:
   b49a8:	b510      	push	{r4, lr}
   b49aa:	2124      	movs	r1, #36	; 0x24
   b49ac:	4604      	mov	r4, r0
   b49ae:	f7ff fb74 	bl	b409a <_ZdlPvj>
   b49b2:	4620      	mov	r0, r4
   b49b4:	bd10      	pop	{r4, pc}
	...

000b49b8 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b49b8:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b49ba:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b49bc:	4604      	mov	r4, r0
   b49be:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b49c0:	2180      	movs	r1, #128	; 0x80
   b49c2:	f000 faa7 	bl	b4f14 <_ZN12Adafruit_GFXC1Ess>
   b49c6:	4b06      	ldr	r3, [pc, #24]	; (b49e0 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b49c8:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b49ca:	23ff      	movs	r3, #255	; 0xff
   b49cc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b49d0:	7763      	strb	r3, [r4, #29]
   b49d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b49d6:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b49d8:	f884 5020 	strb.w	r5, [r4, #32]
}
   b49dc:	4620      	mov	r0, r4
   b49de:	bd38      	pop	{r3, r4, r5, pc}
   b49e0:	000ba180 	.word	0x000ba180

000b49e4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b49e4:	4802      	ldr	r0, [pc, #8]	; (b49f0 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b49e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b49ea:	2100      	movs	r1, #0
   b49ec:	f005 ba56 	b.w	b9e9c <memset>
   b49f0:	2003dd4c 	.word	0x2003dd4c

000b49f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b49f4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b49f6:	4c0b      	ldr	r4, [pc, #44]	; (b4a24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b49f8:	7821      	ldrb	r1, [r4, #0]
   b49fa:	f3bf 8f5b 	dmb	ish
   b49fe:	f011 0101 	ands.w	r1, r1, #1
   b4a02:	d10b      	bne.n	b4a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4a04:	4620      	mov	r0, r4
   b4a06:	9101      	str	r1, [sp, #4]
   b4a08:	f7ff fb56 	bl	b40b8 <__cxa_guard_acquire>
   b4a0c:	9901      	ldr	r1, [sp, #4]
   b4a0e:	b128      	cbz	r0, b4a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4a10:	4805      	ldr	r0, [pc, #20]	; (b4a28 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4a12:	f000 feaf 	bl	b5774 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4a16:	4620      	mov	r0, r4
   b4a18:	f7ff fb53 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4a1c:	4802      	ldr	r0, [pc, #8]	; (b4a28 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4a1e:	b002      	add	sp, #8
   b4a20:	bd10      	pop	{r4, pc}
   b4a22:	bf00      	nop
   b4a24:	2003e6a8 	.word	0x2003e6a8
   b4a28:	2003e6ac 	.word	0x2003e6ac

000b4a2c <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4a2c:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b4a2e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4a32:	b143      	cbz	r3, b4a46 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4a34:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4a36:	f7ff ffdd 	bl	b49f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4a3a:	9901      	ldr	r1, [sp, #4]
}
   b4a3c:	b003      	add	sp, #12
   b4a3e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4a42:	f000 bf4b 	b.w	b58dc <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4a46:	460b      	mov	r3, r1
   b4a48:	7f81      	ldrb	r1, [r0, #30]
   b4a4a:	7f40      	ldrb	r0, [r0, #29]
   b4a4c:	2201      	movs	r2, #1
}
   b4a4e:	b003      	add	sp, #12
   b4a50:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4a54:	f004 bb76 	b.w	b9144 <shiftOut>

000b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4a58:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4a5a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4a5e:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4a60:	4604      	mov	r4, r0
   b4a62:	460d      	mov	r5, r1
  if (sid != -1)
   b4a64:	d01d      	beq.n	b4aa2 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4a66:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4a6a:	2101      	movs	r1, #1
   b4a6c:	b280      	uxth	r0, r0
   b4a6e:	f004 fb50 	bl	b9112 <digitalWrite>
    digitalWrite(dc, LOW);
   b4a72:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4a76:	2100      	movs	r1, #0
   b4a78:	b280      	uxth	r0, r0
   b4a7a:	f004 fb4a 	bl	b9112 <digitalWrite>
    digitalWrite(cs, LOW);
   b4a7e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4a82:	2100      	movs	r1, #0
   b4a84:	b280      	uxth	r0, r0
   b4a86:	f004 fb44 	bl	b9112 <digitalWrite>
    fastSPIwrite(c);
   b4a8a:	4629      	mov	r1, r5
   b4a8c:	4620      	mov	r0, r4
   b4a8e:	f7ff ffcd 	bl	b4a2c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b4a92:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4a96:	2101      	movs	r1, #1
}
   b4a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b4a9c:	b280      	uxth	r0, r0
   b4a9e:	f004 bb38 	b.w	b9112 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b4aa2:	f004 fbcd 	bl	b9240 <_Z19__fetch_global_Wirev>
   b4aa6:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4aaa:	f004 f9e9 	bl	b8e80 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b4aae:	f004 fbc7 	bl	b9240 <_Z19__fetch_global_Wirev>
   b4ab2:	6803      	ldr	r3, [r0, #0]
   b4ab4:	2100      	movs	r1, #0
   b4ab6:	689b      	ldr	r3, [r3, #8]
   b4ab8:	4798      	blx	r3
    Wire.write(c);
   b4aba:	f004 fbc1 	bl	b9240 <_Z19__fetch_global_Wirev>
   b4abe:	6803      	ldr	r3, [r0, #0]
   b4ac0:	4629      	mov	r1, r5
   b4ac2:	689b      	ldr	r3, [r3, #8]
   b4ac4:	4798      	blx	r3
    Wire.endTransmission();
   b4ac6:	f004 fbbb 	bl	b9240 <_Z19__fetch_global_Wirev>
}
   b4aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b4ace:	f004 b9de 	b.w	b8e8e <_ZN7TwoWire15endTransmissionEv>
	...

000b4ad4 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b4ad6:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b4ad8:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b4ada:	f7ff ffbd 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b4ade:	2100      	movs	r1, #0
   b4ae0:	4620      	mov	r0, r4
   b4ae2:	f7ff ffb9 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b4ae6:	217f      	movs	r1, #127	; 0x7f
   b4ae8:	4620      	mov	r0, r4
   b4aea:	f7ff ffb5 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b4aee:	2122      	movs	r1, #34	; 0x22
   b4af0:	4620      	mov	r0, r4
   b4af2:	f7ff ffb1 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b4af6:	2100      	movs	r1, #0
   b4af8:	4620      	mov	r0, r4
   b4afa:	f7ff ffad 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b4afe:	2107      	movs	r1, #7
   b4b00:	4620      	mov	r0, r4
   b4b02:	f7ff ffa9 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b4b06:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b4b0a:	4f29      	ldr	r7, [pc, #164]	; (b4bb0 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b4b0c:	3301      	adds	r3, #1
   b4b0e:	d02a      	beq.n	b4b66 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b4b10:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4b14:	2101      	movs	r1, #1
   b4b16:	b280      	uxth	r0, r0
   b4b18:	f004 fafb 	bl	b9112 <digitalWrite>
    digitalWrite(dc, HIGH);
   b4b1c:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4b20:	2101      	movs	r1, #1
   b4b22:	b280      	uxth	r0, r0
   b4b24:	f004 faf5 	bl	b9112 <digitalWrite>
    digitalWrite(cs, LOW);
   b4b28:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4b2c:	2100      	movs	r1, #0
   b4b2e:	b280      	uxth	r0, r0
   b4b30:	f004 faef 	bl	b9112 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4b34:	2001      	movs	r0, #1
   b4b36:	f000 fb0f 	bl	b5158 <HAL_Delay_Microseconds>
   b4b3a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b3e:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b4b40:	f817 1b01 	ldrb.w	r1, [r7], #1
   b4b44:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b46:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b4b48:	f7ff ff70 	bl	b4a2c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b4c:	2d00      	cmp	r5, #0
   b4b4e:	d1f6      	bne.n	b4b3e <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b4b50:	2001      	movs	r0, #1
   b4b52:	f000 fb01 	bl	b5158 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b4b56:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4b5a:	2101      	movs	r1, #1
}
   b4b5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b4b60:	b280      	uxth	r0, r0
   b4b62:	f004 bad6 	b.w	b9112 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b66:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b4b68:	f004 fb6a 	bl	b9240 <_Z19__fetch_global_Wirev>
   b4b6c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4b70:	f004 f986 	bl	b8e80 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b4b74:	f004 fb64 	bl	b9240 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4b78:	6803      	ldr	r3, [r0, #0]
   b4b7a:	2140      	movs	r1, #64	; 0x40
   b4b7c:	689b      	ldr	r3, [r3, #8]
   b4b7e:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b4b80:	f105 0610 	add.w	r6, r5, #16
   b4b84:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b4b86:	f004 fb5b 	bl	b9240 <_Z19__fetch_global_Wirev>
   b4b8a:	6803      	ldr	r3, [r0, #0]
   b4b8c:	5d79      	ldrb	r1, [r7, r5]
   b4b8e:	689b      	ldr	r3, [r3, #8]
   b4b90:	4798      	blx	r3
		i++;
   b4b92:	1c6b      	adds	r3, r5, #1
   b4b94:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b4b96:	42ae      	cmp	r6, r5
   b4b98:	d1f5      	bne.n	b4b86 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b4b9a:	f004 fb51 	bl	b9240 <_Z19__fetch_global_Wirev>
   b4b9e:	f004 f976 	bl	b8e8e <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4ba2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b4ba6:	d100      	bne.n	b4baa <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b4ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4baa:	4635      	mov	r5, r6
   b4bac:	e7dc      	b.n	b4b68 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b4bae:	bf00      	nop
   b4bb0:	2003dd4c 	.word	0x2003dd4c

000b4bb4 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4bb4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b4bb6:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b4bba:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b4bbc:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4bbe:	4604      	mov	r4, r0
   b4bc0:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b4bc2:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b4bc4:	f000 80c9 	beq.w	b4d5a <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b4bc8:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b4bcc:	2101      	movs	r1, #1
   b4bce:	b280      	uxth	r0, r0
   b4bd0:	f004 fa8e 	bl	b90f0 <pinMode>
    pinMode(cs, OUTPUT);
   b4bd4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4bd8:	2101      	movs	r1, #1
   b4bda:	b280      	uxth	r0, r0
   b4bdc:	f004 fa88 	bl	b90f0 <pinMode>
    if (!hwSPI){
   b4be0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4be4:	2b00      	cmp	r3, #0
   b4be6:	f000 80a6 	beq.w	b4d36 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b4bea:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4bee:	2101      	movs	r1, #1
   b4bf0:	b280      	uxth	r0, r0
   b4bf2:	f004 fa8e 	bl	b9112 <digitalWrite>
        instance().setBitOrder(order);
   b4bf6:	f7ff fefd 	bl	b49f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4bfa:	2101      	movs	r1, #1
   b4bfc:	f000 fdd8 	bl	b57b0 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b4c00:	f7ff fef8 	bl	b49f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4c04:	2110      	movs	r1, #16
   b4c06:	f000 fe43 	bl	b5890 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b4c0a:	f7ff fef3 	bl	b49f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4c0e:	2100      	movs	r1, #0
   b4c10:	f000 fde2 	bl	b57d8 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b4c14:	f7ff feee 	bl	b49f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4c18:	f000 fdb6 	bl	b5788 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b4c1c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4c20:	2101      	movs	r1, #1
   b4c22:	b280      	uxth	r0, r0
   b4c24:	f004 fa64 	bl	b90f0 <pinMode>
  digitalWrite(rst, HIGH);
   b4c28:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4c2c:	2101      	movs	r1, #1
   b4c2e:	b280      	uxth	r0, r0
   b4c30:	f004 fa6f 	bl	b9112 <digitalWrite>
  delay(1);
   b4c34:	2001      	movs	r0, #1
   b4c36:	f003 fedf 	bl	b89f8 <delay>
  digitalWrite(rst, LOW);
   b4c3a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4c3e:	2100      	movs	r1, #0
   b4c40:	b280      	uxth	r0, r0
   b4c42:	f004 fa66 	bl	b9112 <digitalWrite>
  delay(10);
   b4c46:	200a      	movs	r0, #10
   b4c48:	f003 fed6 	bl	b89f8 <delay>
  digitalWrite(rst, HIGH);
   b4c4c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4c50:	2101      	movs	r1, #1
   b4c52:	b280      	uxth	r0, r0
   b4c54:	f004 fa5d 	bl	b9112 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b4c58:	4620      	mov	r0, r4
   b4c5a:	21ae      	movs	r1, #174	; 0xae
   b4c5c:	f7ff fefc 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b4c60:	4620      	mov	r0, r4
   b4c62:	21d5      	movs	r1, #213	; 0xd5
   b4c64:	f7ff fef8 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b4c68:	4620      	mov	r0, r4
   b4c6a:	2180      	movs	r1, #128	; 0x80
   b4c6c:	f7ff fef4 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b4c70:	4620      	mov	r0, r4
   b4c72:	21a8      	movs	r1, #168	; 0xa8
   b4c74:	f7ff fef0 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b4c78:	4620      	mov	r0, r4
   b4c7a:	213f      	movs	r1, #63	; 0x3f
   b4c7c:	f7ff feec 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b4c80:	4620      	mov	r0, r4
   b4c82:	21d3      	movs	r1, #211	; 0xd3
   b4c84:	f7ff fee8 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b4c88:	4620      	mov	r0, r4
   b4c8a:	2100      	movs	r1, #0
   b4c8c:	f7ff fee4 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b4c90:	4620      	mov	r0, r4
   b4c92:	2140      	movs	r1, #64	; 0x40
   b4c94:	f7ff fee0 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b4c98:	218d      	movs	r1, #141	; 0x8d
   b4c9a:	4620      	mov	r0, r4
   b4c9c:	f7ff fedc 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4ca0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b4ca2:	bf0c      	ite	eq
   b4ca4:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b4ca6:	2114      	movne	r1, #20
   b4ca8:	4620      	mov	r0, r4
   b4caa:	f7ff fed5 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b4cae:	4620      	mov	r0, r4
   b4cb0:	2120      	movs	r1, #32
   b4cb2:	f7ff fed1 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b4cb6:	4620      	mov	r0, r4
   b4cb8:	2100      	movs	r1, #0
   b4cba:	f7ff fecd 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b4cbe:	4620      	mov	r0, r4
   b4cc0:	21a1      	movs	r1, #161	; 0xa1
   b4cc2:	f7ff fec9 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b4cc6:	4620      	mov	r0, r4
   b4cc8:	21c8      	movs	r1, #200	; 0xc8
   b4cca:	f7ff fec5 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b4cce:	4620      	mov	r0, r4
   b4cd0:	21da      	movs	r1, #218	; 0xda
   b4cd2:	f7ff fec1 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b4cd6:	4620      	mov	r0, r4
   b4cd8:	2112      	movs	r1, #18
   b4cda:	f7ff febd 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b4cde:	2181      	movs	r1, #129	; 0x81
   b4ce0:	4620      	mov	r0, r4
   b4ce2:	f7ff feb9 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4ce6:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b4ce8:	bf0c      	ite	eq
   b4cea:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b4cec:	21cf      	movne	r1, #207	; 0xcf
   b4cee:	4620      	mov	r0, r4
   b4cf0:	f7ff feb2 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b4cf4:	21d9      	movs	r1, #217	; 0xd9
   b4cf6:	4620      	mov	r0, r4
   b4cf8:	f7ff feae 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4cfc:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b4cfe:	bf0c      	ite	eq
   b4d00:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b4d02:	21f1      	movne	r1, #241	; 0xf1
   b4d04:	4620      	mov	r0, r4
   b4d06:	f7ff fea7 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b4d0a:	4620      	mov	r0, r4
   b4d0c:	21db      	movs	r1, #219	; 0xdb
   b4d0e:	f7ff fea3 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b4d12:	4620      	mov	r0, r4
   b4d14:	2140      	movs	r1, #64	; 0x40
   b4d16:	f7ff fe9f 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b4d1a:	4620      	mov	r0, r4
   b4d1c:	21a4      	movs	r1, #164	; 0xa4
   b4d1e:	f7ff fe9b 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b4d22:	4620      	mov	r0, r4
   b4d24:	21a6      	movs	r1, #166	; 0xa6
   b4d26:	f7ff fe97 	bl	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4d2a:	4620      	mov	r0, r4
   b4d2c:	21af      	movs	r1, #175	; 0xaf
}
   b4d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4d32:	f7ff be91 	b.w	b4a58 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b4d36:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b4d3a:	2101      	movs	r1, #1
   b4d3c:	b280      	uxth	r0, r0
   b4d3e:	f004 f9d7 	bl	b90f0 <pinMode>
    	pinMode(sclk, OUTPUT);
   b4d42:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b4d46:	2101      	movs	r1, #1
   b4d48:	b280      	uxth	r0, r0
   b4d4a:	f004 f9d1 	bl	b90f0 <pinMode>
    if (hwSPI){
   b4d4e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4d52:	2b00      	cmp	r3, #0
   b4d54:	f43f af62 	beq.w	b4c1c <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b4d58:	e747      	b.n	b4bea <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b4d5a:	f004 fa71 	bl	b9240 <_Z19__fetch_global_Wirev>
   b4d5e:	f004 f885 	bl	b8e6c <_ZN7TwoWire5beginEv>
   b4d62:	e75b      	b.n	b4c1c <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b4d64 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d68:	b085      	sub	sp, #20
   b4d6a:	461f      	mov	r7, r3
   b4d6c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4d70:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4d74:	eba8 0902 	sub.w	r9, r8, r2
   b4d78:	eba7 0a01 	sub.w	sl, r7, r1
   b4d7c:	f1b9 0f00 	cmp.w	r9, #0
   b4d80:	bfb8      	it	lt
   b4d82:	f1c9 0900 	rsblt	r9, r9, #0
   b4d86:	f1ba 0f00 	cmp.w	sl, #0
   b4d8a:	bfb8      	it	lt
   b4d8c:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4d90:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4d92:	4683      	mov	fp, r0
   b4d94:	460c      	mov	r4, r1
   b4d96:	4615      	mov	r5, r2
  if (steep) {
   b4d98:	dd04      	ble.n	b4da4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b4d9a:	463a      	mov	r2, r7
    swap(x0, y0);
   b4d9c:	462c      	mov	r4, r5
    swap(x1, y1);
   b4d9e:	4647      	mov	r7, r8
    swap(x0, y0);
   b4da0:	460d      	mov	r5, r1
    swap(x1, y1);
   b4da2:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4da4:	42bc      	cmp	r4, r7
   b4da6:	dd05      	ble.n	b4db4 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4da8:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b4daa:	4645      	mov	r5, r8
   b4dac:	4690      	mov	r8, r2
  if (x0 > x1) {
   b4dae:	4622      	mov	r2, r4
   b4db0:	463c      	mov	r4, r7
   b4db2:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4db4:	1b3e      	subs	r6, r7, r4
   b4db6:	b2b2      	uxth	r2, r6
   b4db8:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b4dba:	eba8 0205 	sub.w	r2, r8, r5
   b4dbe:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4dc2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b4dc6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4dca:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4dce:	4545      	cmp	r5, r8
   b4dd0:	bfb4      	ite	lt
   b4dd2:	2201      	movlt	r2, #1
   b4dd4:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b4dd8:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4dda:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4ddc:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4dde:	42bc      	cmp	r4, r7
   b4de0:	dc1c      	bgt.n	b4e1c <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4de2:	f8db 2000 	ldr.w	r2, [fp]
   b4de6:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4de8:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4dea:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4dee:	bfc7      	ittee	gt
   b4df0:	4629      	movgt	r1, r5
   b4df2:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4df4:	462a      	movle	r2, r5
   b4df6:	4621      	movle	r1, r4
   b4df8:	4658      	mov	r0, fp
   b4dfa:	47c0      	blx	r8
    }
    err -= dy;
   b4dfc:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4dfe:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4e00:	1ab6      	subs	r6, r6, r2
   b4e02:	b2b1      	uxth	r1, r6
   b4e04:	b236      	sxth	r6, r6
    if (err < 0) {
   b4e06:	2e00      	cmp	r6, #0
   b4e08:	da05      	bge.n	b4e16 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4e0a:	9a02      	ldr	r2, [sp, #8]
   b4e0c:	4415      	add	r5, r2
      err += dx;
   b4e0e:	9a00      	ldr	r2, [sp, #0]
   b4e10:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4e12:	b22d      	sxth	r5, r5
      err += dx;
   b4e14:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b4e16:	3401      	adds	r4, #1
   b4e18:	b224      	sxth	r4, r4
   b4e1a:	e7e0      	b.n	b4dde <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4e1c:	b005      	add	sp, #20
   b4e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4e22 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4e22:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4e26:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4e2a:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4e2c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4e30:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4e34:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4e36:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4e38:	4616      	mov	r6, r2
   b4e3a:	468a      	mov	sl, r1
   b4e3c:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4e3e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4e40:	6823      	ldr	r3, [r4, #0]
   b4e42:	f8cd 8000 	str.w	r8, [sp]
   b4e46:	f109 32ff 	add.w	r2, r9, #4294967295
   b4e4a:	4432      	add	r2, r6
   b4e4c:	69df      	ldr	r7, [r3, #28]
   b4e4e:	4651      	mov	r1, sl
   b4e50:	462b      	mov	r3, r5
   b4e52:	4620      	mov	r0, r4
   b4e54:	b212      	sxth	r2, r2
   b4e56:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4e58:	6823      	ldr	r3, [r4, #0]
   b4e5a:	f8cd 8000 	str.w	r8, [sp]
   b4e5e:	699f      	ldr	r7, [r3, #24]
   b4e60:	4632      	mov	r2, r6
   b4e62:	464b      	mov	r3, r9
   b4e64:	4651      	mov	r1, sl
   b4e66:	4620      	mov	r0, r4
   b4e68:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b4e6a:	1e6b      	subs	r3, r5, #1
   b4e6c:	eb03 010a 	add.w	r1, r3, sl
   b4e70:	6823      	ldr	r3, [r4, #0]
   b4e72:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4e76:	699d      	ldr	r5, [r3, #24]
   b4e78:	4632      	mov	r2, r6
   b4e7a:	464b      	mov	r3, r9
   b4e7c:	b209      	sxth	r1, r1
   b4e7e:	4620      	mov	r0, r4
   b4e80:	46ac      	mov	ip, r5
}
   b4e82:	b002      	add	sp, #8
   b4e84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4e88:	4760      	bx	ip

000b4e8a <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b4e8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4e8c:	3b01      	subs	r3, #1
   b4e8e:	4413      	add	r3, r2
   b4e90:	6804      	ldr	r4, [r0, #0]
   b4e92:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4e96:	9501      	str	r5, [sp, #4]
   b4e98:	b21b      	sxth	r3, r3
   b4e9a:	9300      	str	r3, [sp, #0]
   b4e9c:	6964      	ldr	r4, [r4, #20]
   b4e9e:	460b      	mov	r3, r1
   b4ea0:	47a0      	blx	r4
}
   b4ea2:	b003      	add	sp, #12
   b4ea4:	bd30      	pop	{r4, r5, pc}

000b4ea6 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4ea6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4ea8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4eac:	6804      	ldr	r4, [r0, #0]
   b4eae:	e9cd 2500 	strd	r2, r5, [sp]
   b4eb2:	3b01      	subs	r3, #1
   b4eb4:	440b      	add	r3, r1
   b4eb6:	6964      	ldr	r4, [r4, #20]
   b4eb8:	b21b      	sxth	r3, r3
   b4eba:	47a0      	blx	r4
}
   b4ebc:	b003      	add	sp, #12
   b4ebe:	bd30      	pop	{r4, r5, pc}

000b4ec0 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4ec0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4ec4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4ec8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4ecc:	4605      	mov	r5, r0
   b4ece:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4ed0:	460c      	mov	r4, r1
   b4ed2:	18ce      	adds	r6, r1, r3
   b4ed4:	42b4      	cmp	r4, r6
   b4ed6:	da0b      	bge.n	b4ef0 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b4ed8:	682b      	ldr	r3, [r5, #0]
   b4eda:	f8cd 8000 	str.w	r8, [sp]
   b4ede:	699f      	ldr	r7, [r3, #24]
   b4ee0:	4621      	mov	r1, r4
   b4ee2:	464b      	mov	r3, r9
   b4ee4:	4652      	mov	r2, sl
   b4ee6:	4628      	mov	r0, r5
   b4ee8:	3401      	adds	r4, #1
   b4eea:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4eec:	b224      	sxth	r4, r4
   b4eee:	e7f1      	b.n	b4ed4 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4ef0:	b002      	add	sp, #8
   b4ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4ef6 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b4ef6:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b4ef8:	6802      	ldr	r2, [r0, #0]
   b4efa:	9101      	str	r1, [sp, #4]
   b4efc:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4f00:	9100      	str	r1, [sp, #0]
   b4f02:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b4f04:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4f08:	2200      	movs	r2, #0
   b4f0a:	4611      	mov	r1, r2
   b4f0c:	47a0      	blx	r4
}
   b4f0e:	b002      	add	sp, #8
   b4f10:	bd10      	pop	{r4, pc}

000b4f12 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b4f12:	4770      	bx	lr

000b4f14 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4f14:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b4f16:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b4f18:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b4f1a:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b4f1e:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b4f20:	4d05      	ldr	r5, [pc, #20]	; (b4f38 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b4f22:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b4f24:	2201      	movs	r2, #1
   b4f26:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b4f28:	6005      	str	r5, [r0, #0]
   b4f2a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b4f2c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b4f2e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b4f30:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b4f32:	7682      	strb	r2, [r0, #26]
}
   b4f34:	bd30      	pop	{r4, r5, pc}
   b4f36:	bf00      	nop
   b4f38:	000ba6b4 	.word	0x000ba6b4

000b4f3c <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f40:	ed2d 8b02 	vpush	{d8}
   b4f44:	b08d      	sub	sp, #52	; 0x34
   b4f46:	4607      	mov	r7, r0
   b4f48:	9104      	str	r1, [sp, #16]
   b4f4a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b4f4e:	9105      	str	r1, [sp, #20]
   b4f50:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b4f54:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b4f56:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b4f5a:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4f5c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b4f60:	4281      	cmp	r1, r0
   b4f62:	dd52      	ble.n	b500a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b4f64:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b4f68:	4291      	cmp	r1, r2
   b4f6a:	dd4e      	ble.n	b500a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b4f6c:	2106      	movs	r1, #6
   b4f6e:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b4f72:	2c00      	cmp	r4, #0
   b4f74:	dd49      	ble.n	b500a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b4f76:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b4f7a:	2c00      	cmp	r4, #0
   b4f7c:	dd45      	ble.n	b500a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b4f7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4f82:	930b      	str	r3, [sp, #44]	; 0x2c
   b4f84:	b293      	uxth	r3, r2
   b4f86:	9307      	str	r3, [sp, #28]
   b4f88:	3308      	adds	r3, #8
   b4f8a:	b29b      	uxth	r3, r3
   b4f8c:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b4f8e:	2400      	movs	r4, #0
   b4f90:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b4f92:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b4f94:	bf1c      	itt	ne
   b4f96:	4b2c      	ldrne	r3, [pc, #176]	; (b5048 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b4f98:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b4f9a:	9e07      	ldr	r6, [sp, #28]
   b4f9c:	bf16      	itet	ne
   b4f9e:	191b      	addne	r3, r3, r4
      line = 0x0;
   b4fa0:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b4fa2:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b4fa4:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4fa6:	9a04      	ldr	r2, [sp, #16]
   b4fa8:	b2ab      	uxth	r3, r5
   b4faa:	930a      	str	r3, [sp, #40]	; 0x28
   b4fac:	fb04 f305 	mul.w	r3, r4, r5
   b4fb0:	fa13 f382 	uxtah	r3, r3, r2
   b4fb4:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b4fb6:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4fba:	ee08 3a10 	vmov	s16, r3
   b4fbe:	46b0      	mov	r8, r6
   b4fc0:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b4fc4:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b4fc8:	9b03      	ldr	r3, [sp, #12]
   b4fca:	07db      	lsls	r3, r3, #31
   b4fcc:	d52f      	bpl.n	b502e <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b4fce:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4fd0:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4fd2:	d11f      	bne.n	b5014 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b4fd4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4fd8:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b4fda:	b232      	sxth	r2, r6
   b4fdc:	4651      	mov	r1, sl
   b4fde:	4638      	mov	r0, r7
   b4fe0:	47d8      	blx	fp
      line >>= 1;
   b4fe2:	9b03      	ldr	r3, [sp, #12]
   b4fe4:	085b      	lsrs	r3, r3, #1
   b4fe6:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b4fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4fea:	3601      	adds	r6, #1
   b4fec:	4498      	add	r8, r3
   b4fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4ff0:	b2b6      	uxth	r6, r6
   b4ff2:	42b3      	cmp	r3, r6
   b4ff4:	fa1f f888 	uxth.w	r8, r8
   b4ff8:	d1e6      	bne.n	b4fc8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b4ffa:	9b08      	ldr	r3, [sp, #32]
   b4ffc:	3b01      	subs	r3, #1
   b4ffe:	3401      	adds	r4, #1
   b5000:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5004:	b264      	sxtb	r4, r4
   b5006:	9308      	str	r3, [sp, #32]
   b5008:	d1c3      	bne.n	b4f92 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b500a:	b00d      	add	sp, #52	; 0x34
   b500c:	ecbd 8b02 	vpop	{d8}
   b5010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5014:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5016:	e9cd 9200 	strd	r9, r2, [sp]
   b501a:	ee18 1a10 	vmov	r1, s16
   b501e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b5022:	fa0f f288 	sxth.w	r2, r8
   b5026:	464b      	mov	r3, r9
   b5028:	4638      	mov	r0, r7
   b502a:	47d8      	blx	fp
   b502c:	e7d9      	b.n	b4fe2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b502e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b5032:	4293      	cmp	r3, r2
   b5034:	d0d5      	beq.n	b4fe2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5036:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5038:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b503a:	d103      	bne.n	b5044 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b503c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5040:	9b06      	ldr	r3, [sp, #24]
   b5042:	e7ca      	b.n	b4fda <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5044:	9a06      	ldr	r2, [sp, #24]
   b5046:	e7e6      	b.n	b5016 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5048:	000ba1b0 	.word	0x000ba1b0

000b504c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b504c:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b504e:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5050:	b085      	sub	sp, #20
   b5052:	4604      	mov	r4, r0
  if (c == '\n') {
   b5054:	d107      	bne.n	b5066 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5056:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5058:	8a63      	ldrh	r3, [r4, #18]
   b505a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b505e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5060:	2300      	movs	r3, #0
   b5062:	8223      	strh	r3, [r4, #16]
   b5064:	e021      	b.n	b50aa <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b5066:	290d      	cmp	r1, #13
   b5068:	d01f      	beq.n	b50aa <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b506a:	7e03      	ldrb	r3, [r0, #24]
   b506c:	9302      	str	r3, [sp, #8]
   b506e:	8ac3      	ldrh	r3, [r0, #22]
   b5070:	9301      	str	r3, [sp, #4]
   b5072:	8a83      	ldrh	r3, [r0, #20]
   b5074:	9300      	str	r3, [sp, #0]
   b5076:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b507a:	460b      	mov	r3, r1
   b507c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5080:	f7ff ff5c 	bl	b4f3c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5084:	7e20      	ldrb	r0, [r4, #24]
   b5086:	8a23      	ldrh	r3, [r4, #16]
   b5088:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b508c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5090:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5092:	b21b      	sxth	r3, r3
   b5094:	4602      	mov	r2, r0
   b5096:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5098:	b139      	cbz	r1, b50aa <_ZN12Adafruit_GFX5writeEh+0x5e>
   b509a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b509e:	f06f 0505 	mvn.w	r5, #5
   b50a2:	fb05 1100 	mla	r1, r5, r0, r1
   b50a6:	428b      	cmp	r3, r1
   b50a8:	dcd6      	bgt.n	b5058 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b50aa:	2001      	movs	r0, #1
   b50ac:	b005      	add	sp, #20
   b50ae:	bd30      	pop	{r4, r5, pc}

000b50b0 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b50b0:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b50b2:	8242      	strh	r2, [r0, #18]
}
   b50b4:	4770      	bx	lr

000b50b6 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b50b6:	2901      	cmp	r1, #1
   b50b8:	bf38      	it	cc
   b50ba:	2101      	movcc	r1, #1
   b50bc:	7601      	strb	r1, [r0, #24]
}
   b50be:	4770      	bx	lr

000b50c0 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b50c0:	82c1      	strh	r1, [r0, #22]
   b50c2:	8281      	strh	r1, [r0, #20]
}
   b50c4:	4770      	bx	lr

000b50c6 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b50c6:	7e40      	ldrb	r0, [r0, #25]
   b50c8:	4770      	bx	lr

000b50ca <_ZN12Adafruit_GFX5widthEv>:
}
   b50ca:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b50ce:	4770      	bx	lr

000b50d0 <_ZN12Adafruit_GFX6heightEv>:
}
   b50d0:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b50d4:	4770      	bx	lr
	...

000b50d8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b50d8:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b50da:	f000 f815 	bl	b5108 <HAL_Pin_Map>
   b50de:	4b01      	ldr	r3, [pc, #4]	; (b50e4 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b50e0:	6018      	str	r0, [r3, #0]
}
   b50e2:	bd08      	pop	{r3, pc}
   b50e4:	2003e6b4 	.word	0x2003e6b4

000b50e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b50e8:	b508      	push	{r3, lr}
   b50ea:	4b02      	ldr	r3, [pc, #8]	; (b50f4 <netdb_freeaddrinfo+0xc>)
   b50ec:	681b      	ldr	r3, [r3, #0]
   b50ee:	689b      	ldr	r3, [r3, #8]
   b50f0:	9301      	str	r3, [sp, #4]
   b50f2:	bd08      	pop	{r3, pc}
   b50f4:	00030268 	.word	0x00030268

000b50f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b50f8:	b508      	push	{r3, lr}
   b50fa:	4b02      	ldr	r3, [pc, #8]	; (b5104 <netdb_getaddrinfo+0xc>)
   b50fc:	681b      	ldr	r3, [r3, #0]
   b50fe:	68db      	ldr	r3, [r3, #12]
   b5100:	9301      	str	r3, [sp, #4]
   b5102:	bd08      	pop	{r3, pc}
   b5104:	00030268 	.word	0x00030268

000b5108 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b5108:	b508      	push	{r3, lr}
   b510a:	4b02      	ldr	r3, [pc, #8]	; (b5114 <HAL_Pin_Map+0xc>)
   b510c:	681b      	ldr	r3, [r3, #0]
   b510e:	681b      	ldr	r3, [r3, #0]
   b5110:	9301      	str	r3, [sp, #4]
   b5112:	bd08      	pop	{r3, pc}
   b5114:	0003022c 	.word	0x0003022c

000b5118 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5118:	b508      	push	{r3, lr}
   b511a:	4b02      	ldr	r3, [pc, #8]	; (b5124 <HAL_Pin_Mode+0xc>)
   b511c:	681b      	ldr	r3, [r3, #0]
   b511e:	689b      	ldr	r3, [r3, #8]
   b5120:	9301      	str	r3, [sp, #4]
   b5122:	bd08      	pop	{r3, pc}
   b5124:	0003022c 	.word	0x0003022c

000b5128 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5128:	b508      	push	{r3, lr}
   b512a:	4b02      	ldr	r3, [pc, #8]	; (b5134 <HAL_Get_Pin_Mode+0xc>)
   b512c:	681b      	ldr	r3, [r3, #0]
   b512e:	68db      	ldr	r3, [r3, #12]
   b5130:	9301      	str	r3, [sp, #4]
   b5132:	bd08      	pop	{r3, pc}
   b5134:	0003022c 	.word	0x0003022c

000b5138 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5138:	b508      	push	{r3, lr}
   b513a:	4b02      	ldr	r3, [pc, #8]	; (b5144 <HAL_GPIO_Write+0xc>)
   b513c:	681b      	ldr	r3, [r3, #0]
   b513e:	691b      	ldr	r3, [r3, #16]
   b5140:	9301      	str	r3, [sp, #4]
   b5142:	bd08      	pop	{r3, pc}
   b5144:	0003022c 	.word	0x0003022c

000b5148 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5148:	b508      	push	{r3, lr}
   b514a:	4b02      	ldr	r3, [pc, #8]	; (b5154 <HAL_RNG_GetRandomNumber+0xc>)
   b514c:	681b      	ldr	r3, [r3, #0]
   b514e:	685b      	ldr	r3, [r3, #4]
   b5150:	9301      	str	r3, [sp, #4]
   b5152:	bd08      	pop	{r3, pc}
   b5154:	00030218 	.word	0x00030218

000b5158 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5158:	b508      	push	{r3, lr}
   b515a:	4b02      	ldr	r3, [pc, #8]	; (b5164 <HAL_Delay_Microseconds+0xc>)
   b515c:	681b      	ldr	r3, [r3, #0]
   b515e:	68db      	ldr	r3, [r3, #12]
   b5160:	9301      	str	r3, [sp, #4]
   b5162:	bd08      	pop	{r3, pc}
   b5164:	00030218 	.word	0x00030218

000b5168 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b02      	ldr	r3, [pc, #8]	; (b5174 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	695b      	ldr	r3, [r3, #20]
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	bd08      	pop	{r3, pc}
   b5174:	00030218 	.word	0x00030218

000b5178 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <hal_ble_stack_init+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	689b      	ldr	r3, [r3, #8]
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	00030278 	.word	0x00030278

000b5188 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <hal_ble_gap_set_advertising_data+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	00030278 	.word	0x00030278

000b5198 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <hal_ble_gap_set_scan_response_data+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	00030278 	.word	0x00030278

000b51a8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <hal_ble_gap_start_advertising+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	00030278 	.word	0x00030278

000b51b8 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <hal_ble_gap_start_scan+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	00030278 	.word	0x00030278

000b51c8 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b03      	ldr	r3, [pc, #12]	; (b51d8 <hal_ble_gap_stop_scan+0x10>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b51d2:	9301      	str	r3, [sp, #4]
   b51d4:	bd08      	pop	{r3, pc}
   b51d6:	0000      	.short	0x0000
   b51d8:	00030278 	.word	0x00030278

000b51dc <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b51dc:	b508      	push	{r3, lr}
   b51de:	4b03      	ldr	r3, [pc, #12]	; (b51ec <hal_ble_gap_disconnect+0x10>)
   b51e0:	681b      	ldr	r3, [r3, #0]
   b51e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b51e6:	9301      	str	r3, [sp, #4]
   b51e8:	bd08      	pop	{r3, pc}
   b51ea:	0000      	.short	0x0000
   b51ec:	00030278 	.word	0x00030278

000b51f0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b51f0:	b508      	push	{r3, lr}
   b51f2:	4b03      	ldr	r3, [pc, #12]	; (b5200 <hal_ble_gatt_server_add_service+0x10>)
   b51f4:	681b      	ldr	r3, [r3, #0]
   b51f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b51fa:	9301      	str	r3, [sp, #4]
   b51fc:	bd08      	pop	{r3, pc}
   b51fe:	0000      	.short	0x0000
   b5200:	00030278 	.word	0x00030278

000b5204 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5204:	b508      	push	{r3, lr}
   b5206:	4b03      	ldr	r3, [pc, #12]	; (b5214 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5208:	681b      	ldr	r3, [r3, #0]
   b520a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b520e:	9301      	str	r3, [sp, #4]
   b5210:	bd08      	pop	{r3, pc}
   b5212:	0000      	.short	0x0000
   b5214:	00030278 	.word	0x00030278

000b5218 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b03      	ldr	r3, [pc, #12]	; (b5228 <hal_ble_gatt_client_discover_all_services+0x10>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b5222:	9301      	str	r3, [sp, #4]
   b5224:	bd08      	pop	{r3, pc}
   b5226:	0000      	.short	0x0000
   b5228:	00030278 	.word	0x00030278

000b522c <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b522c:	b508      	push	{r3, lr}
   b522e:	4b03      	ldr	r3, [pc, #12]	; (b523c <hal_ble_gatt_client_discover_characteristics+0x10>)
   b5230:	681b      	ldr	r3, [r3, #0]
   b5232:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b5236:	9301      	str	r3, [sp, #4]
   b5238:	bd08      	pop	{r3, pc}
   b523a:	0000      	.short	0x0000
   b523c:	00030278 	.word	0x00030278

000b5240 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5240:	b508      	push	{r3, lr}
   b5242:	4b03      	ldr	r3, [pc, #12]	; (b5250 <hal_ble_gatt_client_write_with_response+0x10>)
   b5244:	681b      	ldr	r3, [r3, #0]
   b5246:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b524a:	9301      	str	r3, [sp, #4]
   b524c:	bd08      	pop	{r3, pc}
   b524e:	0000      	.short	0x0000
   b5250:	00030278 	.word	0x00030278

000b5254 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5254:	b508      	push	{r3, lr}
   b5256:	4b03      	ldr	r3, [pc, #12]	; (b5264 <hal_ble_gatt_client_write_without_response+0x10>)
   b5258:	681b      	ldr	r3, [r3, #0]
   b525a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b525e:	9301      	str	r3, [sp, #4]
   b5260:	bd08      	pop	{r3, pc}
   b5262:	0000      	.short	0x0000
   b5264:	00030278 	.word	0x00030278

000b5268 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b03      	ldr	r3, [pc, #12]	; (b5278 <hal_ble_gatt_client_read+0x10>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b5272:	9301      	str	r3, [sp, #4]
   b5274:	bd08      	pop	{r3, pc}
   b5276:	0000      	.short	0x0000
   b5278:	00030278 	.word	0x00030278

000b527c <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b527c:	b508      	push	{r3, lr}
   b527e:	4b03      	ldr	r3, [pc, #12]	; (b528c <hal_ble_gap_connect+0x10>)
   b5280:	681b      	ldr	r3, [r3, #0]
   b5282:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b5286:	9301      	str	r3, [sp, #4]
   b5288:	bd08      	pop	{r3, pc}
   b528a:	0000      	.short	0x0000
   b528c:	00030278 	.word	0x00030278

000b5290 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5290:	b508      	push	{r3, lr}
   b5292:	4b03      	ldr	r3, [pc, #12]	; (b52a0 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5294:	681b      	ldr	r3, [r3, #0]
   b5296:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b529a:	9301      	str	r3, [sp, #4]
   b529c:	bd08      	pop	{r3, pc}
   b529e:	0000      	.short	0x0000
   b52a0:	00030278 	.word	0x00030278

000b52a4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b52a4:	b508      	push	{r3, lr}
   b52a6:	4b03      	ldr	r3, [pc, #12]	; (b52b4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b52a8:	681b      	ldr	r3, [r3, #0]
   b52aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b52ae:	9301      	str	r3, [sp, #4]
   b52b0:	bd08      	pop	{r3, pc}
   b52b2:	0000      	.short	0x0000
   b52b4:	00030278 	.word	0x00030278

000b52b8 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b03      	ldr	r3, [pc, #12]	; (b52c8 <hal_ble_gatt_client_configure_cccd+0x10>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b52c2:	9301      	str	r3, [sp, #4]
   b52c4:	bd08      	pop	{r3, pc}
   b52c6:	0000      	.short	0x0000
   b52c8:	00030278 	.word	0x00030278

000b52cc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b52cc:	b508      	push	{r3, lr}
   b52ce:	4b03      	ldr	r3, [pc, #12]	; (b52dc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b52d0:	681b      	ldr	r3, [r3, #0]
   b52d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b52d6:	9301      	str	r3, [sp, #4]
   b52d8:	bd08      	pop	{r3, pc}
   b52da:	0000      	.short	0x0000
   b52dc:	00030278 	.word	0x00030278

000b52e0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b52e0:	b508      	push	{r3, lr}
   b52e2:	4b03      	ldr	r3, [pc, #12]	; (b52f0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b52e4:	681b      	ldr	r3, [r3, #0]
   b52e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b52ea:	9301      	str	r3, [sp, #4]
   b52ec:	bd08      	pop	{r3, pc}
   b52ee:	0000      	.short	0x0000
   b52f0:	00030278 	.word	0x00030278

000b52f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b52f4:	b508      	push	{r3, lr}
   b52f6:	4b02      	ldr	r3, [pc, #8]	; (b5300 <os_mutex_recursive_create+0xc>)
   b52f8:	681b      	ldr	r3, [r3, #0]
   b52fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52fc:	9301      	str	r3, [sp, #4]
   b52fe:	bd08      	pop	{r3, pc}
   b5300:	00030248 	.word	0x00030248

000b5304 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5304:	b508      	push	{r3, lr}
   b5306:	4b02      	ldr	r3, [pc, #8]	; (b5310 <os_mutex_recursive_lock+0xc>)
   b5308:	681b      	ldr	r3, [r3, #0]
   b530a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b530c:	9301      	str	r3, [sp, #4]
   b530e:	bd08      	pop	{r3, pc}
   b5310:	00030248 	.word	0x00030248

000b5314 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5314:	b508      	push	{r3, lr}
   b5316:	4b02      	ldr	r3, [pc, #8]	; (b5320 <os_mutex_recursive_unlock+0xc>)
   b5318:	681b      	ldr	r3, [r3, #0]
   b531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b531c:	9301      	str	r3, [sp, #4]
   b531e:	bd08      	pop	{r3, pc}
   b5320:	00030248 	.word	0x00030248

000b5324 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5324:	b508      	push	{r3, lr}
   b5326:	4b02      	ldr	r3, [pc, #8]	; (b5330 <inet_inet_ntop+0xc>)
   b5328:	681b      	ldr	r3, [r3, #0]
   b532a:	695b      	ldr	r3, [r3, #20]
   b532c:	9301      	str	r3, [sp, #4]
   b532e:	bd08      	pop	{r3, pc}
   b5330:	00030264 	.word	0x00030264

000b5334 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5334:	b508      	push	{r3, lr}
   b5336:	4b02      	ldr	r3, [pc, #8]	; (b5340 <hal_usart_write+0xc>)
   b5338:	681b      	ldr	r3, [r3, #0]
   b533a:	68db      	ldr	r3, [r3, #12]
   b533c:	9301      	str	r3, [sp, #4]
   b533e:	bd08      	pop	{r3, pc}
   b5340:	0003023c 	.word	0x0003023c

000b5344 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5344:	b508      	push	{r3, lr}
   b5346:	4b02      	ldr	r3, [pc, #8]	; (b5350 <hal_usart_available+0xc>)
   b5348:	681b      	ldr	r3, [r3, #0]
   b534a:	691b      	ldr	r3, [r3, #16]
   b534c:	9301      	str	r3, [sp, #4]
   b534e:	bd08      	pop	{r3, pc}
   b5350:	0003023c 	.word	0x0003023c

000b5354 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5354:	b508      	push	{r3, lr}
   b5356:	4b02      	ldr	r3, [pc, #8]	; (b5360 <hal_usart_read+0xc>)
   b5358:	681b      	ldr	r3, [r3, #0]
   b535a:	695b      	ldr	r3, [r3, #20]
   b535c:	9301      	str	r3, [sp, #4]
   b535e:	bd08      	pop	{r3, pc}
   b5360:	0003023c 	.word	0x0003023c

000b5364 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5364:	b508      	push	{r3, lr}
   b5366:	4b02      	ldr	r3, [pc, #8]	; (b5370 <hal_usart_peek+0xc>)
   b5368:	681b      	ldr	r3, [r3, #0]
   b536a:	699b      	ldr	r3, [r3, #24]
   b536c:	9301      	str	r3, [sp, #4]
   b536e:	bd08      	pop	{r3, pc}
   b5370:	0003023c 	.word	0x0003023c

000b5374 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5374:	b508      	push	{r3, lr}
   b5376:	4b02      	ldr	r3, [pc, #8]	; (b5380 <hal_usart_flush+0xc>)
   b5378:	681b      	ldr	r3, [r3, #0]
   b537a:	69db      	ldr	r3, [r3, #28]
   b537c:	9301      	str	r3, [sp, #4]
   b537e:	bd08      	pop	{r3, pc}
   b5380:	0003023c 	.word	0x0003023c

000b5384 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5384:	b508      	push	{r3, lr}
   b5386:	4b02      	ldr	r3, [pc, #8]	; (b5390 <hal_usart_is_enabled+0xc>)
   b5388:	681b      	ldr	r3, [r3, #0]
   b538a:	6a1b      	ldr	r3, [r3, #32]
   b538c:	9301      	str	r3, [sp, #4]
   b538e:	bd08      	pop	{r3, pc}
   b5390:	0003023c 	.word	0x0003023c

000b5394 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5394:	b508      	push	{r3, lr}
   b5396:	4b02      	ldr	r3, [pc, #8]	; (b53a0 <hal_usart_available_data_for_write+0xc>)
   b5398:	681b      	ldr	r3, [r3, #0]
   b539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b539c:	9301      	str	r3, [sp, #4]
   b539e:	bd08      	pop	{r3, pc}
   b53a0:	0003023c 	.word	0x0003023c

000b53a4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b53a4:	b508      	push	{r3, lr}
   b53a6:	4b02      	ldr	r3, [pc, #8]	; (b53b0 <hal_usart_init_ex+0xc>)
   b53a8:	681b      	ldr	r3, [r3, #0]
   b53aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b53ac:	9301      	str	r3, [sp, #4]
   b53ae:	bd08      	pop	{r3, pc}
   b53b0:	0003023c 	.word	0x0003023c

000b53b4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b53b4:	b508      	push	{r3, lr}
   b53b6:	4b02      	ldr	r3, [pc, #8]	; (b53c0 <hal_i2c_begin+0xc>)
   b53b8:	681b      	ldr	r3, [r3, #0]
   b53ba:	68db      	ldr	r3, [r3, #12]
   b53bc:	9301      	str	r3, [sp, #4]
   b53be:	bd08      	pop	{r3, pc}
   b53c0:	00030228 	.word	0x00030228

000b53c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b53c4:	b508      	push	{r3, lr}
   b53c6:	4b02      	ldr	r3, [pc, #8]	; (b53d0 <hal_i2c_begin_transmission+0xc>)
   b53c8:	681b      	ldr	r3, [r3, #0]
   b53ca:	699b      	ldr	r3, [r3, #24]
   b53cc:	9301      	str	r3, [sp, #4]
   b53ce:	bd08      	pop	{r3, pc}
   b53d0:	00030228 	.word	0x00030228

000b53d4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b53d4:	b508      	push	{r3, lr}
   b53d6:	4b02      	ldr	r3, [pc, #8]	; (b53e0 <hal_i2c_end_transmission+0xc>)
   b53d8:	681b      	ldr	r3, [r3, #0]
   b53da:	69db      	ldr	r3, [r3, #28]
   b53dc:	9301      	str	r3, [sp, #4]
   b53de:	bd08      	pop	{r3, pc}
   b53e0:	00030228 	.word	0x00030228

000b53e4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b53e4:	b508      	push	{r3, lr}
   b53e6:	4b02      	ldr	r3, [pc, #8]	; (b53f0 <hal_i2c_write+0xc>)
   b53e8:	681b      	ldr	r3, [r3, #0]
   b53ea:	6a1b      	ldr	r3, [r3, #32]
   b53ec:	9301      	str	r3, [sp, #4]
   b53ee:	bd08      	pop	{r3, pc}
   b53f0:	00030228 	.word	0x00030228

000b53f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b53f4:	b508      	push	{r3, lr}
   b53f6:	4b02      	ldr	r3, [pc, #8]	; (b5400 <hal_i2c_available+0xc>)
   b53f8:	681b      	ldr	r3, [r3, #0]
   b53fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b53fc:	9301      	str	r3, [sp, #4]
   b53fe:	bd08      	pop	{r3, pc}
   b5400:	00030228 	.word	0x00030228

000b5404 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5404:	b508      	push	{r3, lr}
   b5406:	4b02      	ldr	r3, [pc, #8]	; (b5410 <hal_i2c_read+0xc>)
   b5408:	681b      	ldr	r3, [r3, #0]
   b540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b540c:	9301      	str	r3, [sp, #4]
   b540e:	bd08      	pop	{r3, pc}
   b5410:	00030228 	.word	0x00030228

000b5414 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5414:	b508      	push	{r3, lr}
   b5416:	4b02      	ldr	r3, [pc, #8]	; (b5420 <hal_i2c_peek+0xc>)
   b5418:	681b      	ldr	r3, [r3, #0]
   b541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b541c:	9301      	str	r3, [sp, #4]
   b541e:	bd08      	pop	{r3, pc}
   b5420:	00030228 	.word	0x00030228

000b5424 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5424:	b508      	push	{r3, lr}
   b5426:	4b02      	ldr	r3, [pc, #8]	; (b5430 <hal_i2c_flush+0xc>)
   b5428:	681b      	ldr	r3, [r3, #0]
   b542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b542c:	9301      	str	r3, [sp, #4]
   b542e:	bd08      	pop	{r3, pc}
   b5430:	00030228 	.word	0x00030228

000b5434 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5434:	b508      	push	{r3, lr}
   b5436:	4b02      	ldr	r3, [pc, #8]	; (b5440 <hal_i2c_is_enabled+0xc>)
   b5438:	681b      	ldr	r3, [r3, #0]
   b543a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b543c:	9301      	str	r3, [sp, #4]
   b543e:	bd08      	pop	{r3, pc}
   b5440:	00030228 	.word	0x00030228

000b5444 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5444:	b508      	push	{r3, lr}
   b5446:	4b02      	ldr	r3, [pc, #8]	; (b5450 <hal_i2c_init+0xc>)
   b5448:	681b      	ldr	r3, [r3, #0]
   b544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b544c:	9301      	str	r3, [sp, #4]
   b544e:	bd08      	pop	{r3, pc}
   b5450:	00030228 	.word	0x00030228

000b5454 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5454:	b508      	push	{r3, lr}
   b5456:	4b02      	ldr	r3, [pc, #8]	; (b5460 <hal_spi_begin+0xc>)
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	681b      	ldr	r3, [r3, #0]
   b545c:	9301      	str	r3, [sp, #4]
   b545e:	bd08      	pop	{r3, pc}
   b5460:	00030230 	.word	0x00030230

000b5464 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5464:	b508      	push	{r3, lr}
   b5466:	4b02      	ldr	r3, [pc, #8]	; (b5470 <hal_spi_set_bit_order+0xc>)
   b5468:	681b      	ldr	r3, [r3, #0]
   b546a:	689b      	ldr	r3, [r3, #8]
   b546c:	9301      	str	r3, [sp, #4]
   b546e:	bd08      	pop	{r3, pc}
   b5470:	00030230 	.word	0x00030230

000b5474 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5474:	b508      	push	{r3, lr}
   b5476:	4b02      	ldr	r3, [pc, #8]	; (b5480 <hal_spi_set_data_mode+0xc>)
   b5478:	681b      	ldr	r3, [r3, #0]
   b547a:	68db      	ldr	r3, [r3, #12]
   b547c:	9301      	str	r3, [sp, #4]
   b547e:	bd08      	pop	{r3, pc}
   b5480:	00030230 	.word	0x00030230

000b5484 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5484:	b508      	push	{r3, lr}
   b5486:	4b02      	ldr	r3, [pc, #8]	; (b5490 <hal_spi_set_clock_divider+0xc>)
   b5488:	681b      	ldr	r3, [r3, #0]
   b548a:	691b      	ldr	r3, [r3, #16]
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	bd08      	pop	{r3, pc}
   b5490:	00030230 	.word	0x00030230

000b5494 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5494:	b508      	push	{r3, lr}
   b5496:	4b02      	ldr	r3, [pc, #8]	; (b54a0 <hal_spi_transfer+0xc>)
   b5498:	681b      	ldr	r3, [r3, #0]
   b549a:	695b      	ldr	r3, [r3, #20]
   b549c:	9301      	str	r3, [sp, #4]
   b549e:	bd08      	pop	{r3, pc}
   b54a0:	00030230 	.word	0x00030230

000b54a4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b54a4:	b508      	push	{r3, lr}
   b54a6:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <hal_spi_init+0xc>)
   b54a8:	681b      	ldr	r3, [r3, #0]
   b54aa:	69db      	ldr	r3, [r3, #28]
   b54ac:	9301      	str	r3, [sp, #4]
   b54ae:	bd08      	pop	{r3, pc}
   b54b0:	00030230 	.word	0x00030230

000b54b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b54b4:	b508      	push	{r3, lr}
   b54b6:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <hal_spi_is_enabled+0xc>)
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	6a1b      	ldr	r3, [r3, #32]
   b54bc:	9301      	str	r3, [sp, #4]
   b54be:	bd08      	pop	{r3, pc}
   b54c0:	00030230 	.word	0x00030230

000b54c4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b54c4:	b508      	push	{r3, lr}
   b54c6:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <hal_spi_info+0xc>)
   b54c8:	681b      	ldr	r3, [r3, #0]
   b54ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b54cc:	9301      	str	r3, [sp, #4]
   b54ce:	bd08      	pop	{r3, pc}
   b54d0:	00030230 	.word	0x00030230

000b54d4 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b54d4:	b508      	push	{r3, lr}
   b54d6:	4b02      	ldr	r3, [pc, #8]	; (b54e0 <hal_spi_acquire+0xc>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54dc:	9301      	str	r3, [sp, #4]
   b54de:	bd08      	pop	{r3, pc}
   b54e0:	00030230 	.word	0x00030230

000b54e4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <hal_spi_release+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	00030230 	.word	0x00030230

000b54f4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <HAL_USB_USART_Init+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	681b      	ldr	r3, [r3, #0]
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	0003024c 	.word	0x0003024c

000b5504 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b02      	ldr	r3, [pc, #8]	; (b5510 <HAL_USB_USART_Available_Data+0xc>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	691b      	ldr	r3, [r3, #16]
   b550c:	9301      	str	r3, [sp, #4]
   b550e:	bd08      	pop	{r3, pc}
   b5510:	0003024c 	.word	0x0003024c

000b5514 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5514:	b508      	push	{r3, lr}
   b5516:	4b02      	ldr	r3, [pc, #8]	; (b5520 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5518:	681b      	ldr	r3, [r3, #0]
   b551a:	695b      	ldr	r3, [r3, #20]
   b551c:	9301      	str	r3, [sp, #4]
   b551e:	bd08      	pop	{r3, pc}
   b5520:	0003024c 	.word	0x0003024c

000b5524 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5524:	b508      	push	{r3, lr}
   b5526:	4b02      	ldr	r3, [pc, #8]	; (b5530 <HAL_USB_USART_Receive_Data+0xc>)
   b5528:	681b      	ldr	r3, [r3, #0]
   b552a:	699b      	ldr	r3, [r3, #24]
   b552c:	9301      	str	r3, [sp, #4]
   b552e:	bd08      	pop	{r3, pc}
   b5530:	0003024c 	.word	0x0003024c

000b5534 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5534:	b508      	push	{r3, lr}
   b5536:	4b02      	ldr	r3, [pc, #8]	; (b5540 <HAL_USB_USART_Send_Data+0xc>)
   b5538:	681b      	ldr	r3, [r3, #0]
   b553a:	69db      	ldr	r3, [r3, #28]
   b553c:	9301      	str	r3, [sp, #4]
   b553e:	bd08      	pop	{r3, pc}
   b5540:	0003024c 	.word	0x0003024c

000b5544 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5544:	b508      	push	{r3, lr}
   b5546:	4b02      	ldr	r3, [pc, #8]	; (b5550 <HAL_USB_USART_Flush_Data+0xc>)
   b5548:	681b      	ldr	r3, [r3, #0]
   b554a:	6a1b      	ldr	r3, [r3, #32]
   b554c:	9301      	str	r3, [sp, #4]
   b554e:	bd08      	pop	{r3, pc}
   b5550:	0003024c 	.word	0x0003024c

000b5554 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5554:	b508      	push	{r3, lr}
   b5556:	4b02      	ldr	r3, [pc, #8]	; (b5560 <panic_+0xc>)
   b5558:	681b      	ldr	r3, [r3, #0]
   b555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b555c:	9301      	str	r3, [sp, #4]
   b555e:	bd08      	pop	{r3, pc}
   b5560:	00030260 	.word	0x00030260

000b5564 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5564:	b508      	push	{r3, lr}
   b5566:	4b02      	ldr	r3, [pc, #8]	; (b5570 <log_message+0xc>)
   b5568:	681b      	ldr	r3, [r3, #0]
   b556a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b556c:	9301      	str	r3, [sp, #4]
   b556e:	bd08      	pop	{r3, pc}
   b5570:	00030260 	.word	0x00030260

000b5574 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5574:	b508      	push	{r3, lr}
   b5576:	4b02      	ldr	r3, [pc, #8]	; (b5580 <set_system_mode+0xc>)
   b5578:	681b      	ldr	r3, [r3, #0]
   b557a:	685b      	ldr	r3, [r3, #4]
   b557c:	9301      	str	r3, [sp, #4]
   b557e:	bd08      	pop	{r3, pc}
   b5580:	00030220 	.word	0x00030220

000b5584 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5584:	b508      	push	{r3, lr}
   b5586:	4b02      	ldr	r3, [pc, #8]	; (b5590 <system_delay_ms+0xc>)
   b5588:	681b      	ldr	r3, [r3, #0]
   b558a:	695b      	ldr	r3, [r3, #20]
   b558c:	9301      	str	r3, [sp, #4]
   b558e:	bd08      	pop	{r3, pc}
   b5590:	00030220 	.word	0x00030220

000b5594 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b03      	ldr	r3, [pc, #12]	; (b55a4 <system_ctrl_set_app_request_handler+0x10>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b559e:	9301      	str	r3, [sp, #4]
   b55a0:	bd08      	pop	{r3, pc}
   b55a2:	0000      	.short	0x0000
   b55a4:	00030220 	.word	0x00030220

000b55a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b55a8:	b508      	push	{r3, lr}
   b55aa:	4b03      	ldr	r3, [pc, #12]	; (b55b8 <system_ctrl_set_result+0x10>)
   b55ac:	681b      	ldr	r3, [r3, #0]
   b55ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b55b2:	9301      	str	r3, [sp, #4]
   b55b4:	bd08      	pop	{r3, pc}
   b55b6:	0000      	.short	0x0000
   b55b8:	00030220 	.word	0x00030220

000b55bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b55bc:	b508      	push	{r3, lr}
   b55be:	4b02      	ldr	r3, [pc, #8]	; (b55c8 <network_connect+0xc>)
   b55c0:	681b      	ldr	r3, [r3, #0]
   b55c2:	685b      	ldr	r3, [r3, #4]
   b55c4:	9301      	str	r3, [sp, #4]
   b55c6:	bd08      	pop	{r3, pc}
   b55c8:	00030240 	.word	0x00030240

000b55cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b55cc:	b508      	push	{r3, lr}
   b55ce:	4b02      	ldr	r3, [pc, #8]	; (b55d8 <network_connecting+0xc>)
   b55d0:	681b      	ldr	r3, [r3, #0]
   b55d2:	689b      	ldr	r3, [r3, #8]
   b55d4:	9301      	str	r3, [sp, #4]
   b55d6:	bd08      	pop	{r3, pc}
   b55d8:	00030240 	.word	0x00030240

000b55dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b55dc:	b508      	push	{r3, lr}
   b55de:	4b02      	ldr	r3, [pc, #8]	; (b55e8 <network_disconnect+0xc>)
   b55e0:	681b      	ldr	r3, [r3, #0]
   b55e2:	68db      	ldr	r3, [r3, #12]
   b55e4:	9301      	str	r3, [sp, #4]
   b55e6:	bd08      	pop	{r3, pc}
   b55e8:	00030240 	.word	0x00030240

000b55ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b55ec:	b508      	push	{r3, lr}
   b55ee:	4b02      	ldr	r3, [pc, #8]	; (b55f8 <network_ready+0xc>)
   b55f0:	681b      	ldr	r3, [r3, #0]
   b55f2:	691b      	ldr	r3, [r3, #16]
   b55f4:	9301      	str	r3, [sp, #4]
   b55f6:	bd08      	pop	{r3, pc}
   b55f8:	00030240 	.word	0x00030240

000b55fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b55fc:	b508      	push	{r3, lr}
   b55fe:	4b02      	ldr	r3, [pc, #8]	; (b5608 <network_on+0xc>)
   b5600:	681b      	ldr	r3, [r3, #0]
   b5602:	695b      	ldr	r3, [r3, #20]
   b5604:	9301      	str	r3, [sp, #4]
   b5606:	bd08      	pop	{r3, pc}
   b5608:	00030240 	.word	0x00030240

000b560c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b560c:	b508      	push	{r3, lr}
   b560e:	4b02      	ldr	r3, [pc, #8]	; (b5618 <network_off+0xc>)
   b5610:	681b      	ldr	r3, [r3, #0]
   b5612:	699b      	ldr	r3, [r3, #24]
   b5614:	9301      	str	r3, [sp, #4]
   b5616:	bd08      	pop	{r3, pc}
   b5618:	00030240 	.word	0x00030240

000b561c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b561c:	b508      	push	{r3, lr}
   b561e:	4b02      	ldr	r3, [pc, #8]	; (b5628 <network_listen+0xc>)
   b5620:	681b      	ldr	r3, [r3, #0]
   b5622:	69db      	ldr	r3, [r3, #28]
   b5624:	9301      	str	r3, [sp, #4]
   b5626:	bd08      	pop	{r3, pc}
   b5628:	00030240 	.word	0x00030240

000b562c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b562c:	b508      	push	{r3, lr}
   b562e:	4b02      	ldr	r3, [pc, #8]	; (b5638 <network_listening+0xc>)
   b5630:	681b      	ldr	r3, [r3, #0]
   b5632:	6a1b      	ldr	r3, [r3, #32]
   b5634:	9301      	str	r3, [sp, #4]
   b5636:	bd08      	pop	{r3, pc}
   b5638:	00030240 	.word	0x00030240

000b563c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b563c:	b508      	push	{r3, lr}
   b563e:	4b02      	ldr	r3, [pc, #8]	; (b5648 <network_set_listen_timeout+0xc>)
   b5640:	681b      	ldr	r3, [r3, #0]
   b5642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5644:	9301      	str	r3, [sp, #4]
   b5646:	bd08      	pop	{r3, pc}
   b5648:	00030240 	.word	0x00030240

000b564c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b564c:	b508      	push	{r3, lr}
   b564e:	4b02      	ldr	r3, [pc, #8]	; (b5658 <network_get_listen_timeout+0xc>)
   b5650:	681b      	ldr	r3, [r3, #0]
   b5652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5654:	9301      	str	r3, [sp, #4]
   b5656:	bd08      	pop	{r3, pc}
   b5658:	00030240 	.word	0x00030240

000b565c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b565c:	b508      	push	{r3, lr}
   b565e:	4b02      	ldr	r3, [pc, #8]	; (b5668 <network_is_on+0xc>)
   b5660:	681b      	ldr	r3, [r3, #0]
   b5662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5664:	9301      	str	r3, [sp, #4]
   b5666:	bd08      	pop	{r3, pc}
   b5668:	00030240 	.word	0x00030240

000b566c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b566c:	b508      	push	{r3, lr}
   b566e:	4b02      	ldr	r3, [pc, #8]	; (b5678 <network_is_off+0xc>)
   b5670:	681b      	ldr	r3, [r3, #0]
   b5672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5674:	9301      	str	r3, [sp, #4]
   b5676:	bd08      	pop	{r3, pc}
   b5678:	00030240 	.word	0x00030240

000b567c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b567c:	b508      	push	{r3, lr}
   b567e:	4b02      	ldr	r3, [pc, #8]	; (b5688 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5680:	681b      	ldr	r3, [r3, #0]
   b5682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5684:	9301      	str	r3, [sp, #4]
   b5686:	bd08      	pop	{r3, pc}
   b5688:	00030244 	.word	0x00030244

000b568c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b568c:	b508      	push	{r3, lr}
   b568e:	4b02      	ldr	r3, [pc, #8]	; (b5698 <malloc+0xc>)
   b5690:	681b      	ldr	r3, [r3, #0]
   b5692:	681b      	ldr	r3, [r3, #0]
   b5694:	9301      	str	r3, [sp, #4]
   b5696:	bd08      	pop	{r3, pc}
   b5698:	0003021c 	.word	0x0003021c

000b569c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b569c:	b508      	push	{r3, lr}
   b569e:	4b02      	ldr	r3, [pc, #8]	; (b56a8 <free+0xc>)
   b56a0:	681b      	ldr	r3, [r3, #0]
   b56a2:	685b      	ldr	r3, [r3, #4]
   b56a4:	9301      	str	r3, [sp, #4]
   b56a6:	bd08      	pop	{r3, pc}
   b56a8:	0003021c 	.word	0x0003021c

000b56ac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b56ac:	b508      	push	{r3, lr}
   b56ae:	4b02      	ldr	r3, [pc, #8]	; (b56b8 <realloc+0xc>)
   b56b0:	681b      	ldr	r3, [r3, #0]
   b56b2:	689b      	ldr	r3, [r3, #8]
   b56b4:	9301      	str	r3, [sp, #4]
   b56b6:	bd08      	pop	{r3, pc}
   b56b8:	0003021c 	.word	0x0003021c

000b56bc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b56bc:	b508      	push	{r3, lr}
   b56be:	4b02      	ldr	r3, [pc, #8]	; (b56c8 <abort+0xc>)
   b56c0:	681b      	ldr	r3, [r3, #0]
   b56c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56c4:	9301      	str	r3, [sp, #4]
   b56c6:	bd08      	pop	{r3, pc}
   b56c8:	0003021c 	.word	0x0003021c

000b56cc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b56cc:	b508      	push	{r3, lr}
   b56ce:	4b02      	ldr	r3, [pc, #8]	; (b56d8 <__assert_func+0xc>)
   b56d0:	681b      	ldr	r3, [r3, #0]
   b56d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b56d4:	9301      	str	r3, [sp, #4]
   b56d6:	bd08      	pop	{r3, pc}
   b56d8:	0003021c 	.word	0x0003021c

000b56dc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b56dc:	b508      	push	{r3, lr}
   b56de:	4b02      	ldr	r3, [pc, #8]	; (b56e8 <newlib_impure_ptr_callback+0xc>)
   b56e0:	681b      	ldr	r3, [r3, #0]
   b56e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b56e4:	9301      	str	r3, [sp, #4]
   b56e6:	bd08      	pop	{r3, pc}
   b56e8:	0003021c 	.word	0x0003021c

000b56ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b56ec:	2200      	movs	r2, #0
   b56ee:	6840      	ldr	r0, [r0, #4]
   b56f0:	4611      	mov	r1, r2
   b56f2:	f7ff bf9b 	b.w	b562c <network_listening>

000b56f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b56f6:	2200      	movs	r2, #0
   b56f8:	6840      	ldr	r0, [r0, #4]
   b56fa:	4611      	mov	r1, r2
   b56fc:	f7ff bfa6 	b.w	b564c <network_get_listen_timeout>

000b5700 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5700:	6840      	ldr	r0, [r0, #4]
   b5702:	2200      	movs	r2, #0
   b5704:	f7ff bf9a 	b.w	b563c <network_set_listen_timeout>

000b5708 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5708:	6840      	ldr	r0, [r0, #4]
   b570a:	2200      	movs	r2, #0
   b570c:	f081 0101 	eor.w	r1, r1, #1
   b5710:	f7ff bf84 	b.w	b561c <network_listen>

000b5714 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5714:	2300      	movs	r3, #0
   b5716:	6840      	ldr	r0, [r0, #4]
   b5718:	461a      	mov	r2, r3
   b571a:	4619      	mov	r1, r3
   b571c:	f7ff bf76 	b.w	b560c <network_off>

000b5720 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5720:	2300      	movs	r3, #0
   b5722:	6840      	ldr	r0, [r0, #4]
   b5724:	461a      	mov	r2, r3
   b5726:	4619      	mov	r1, r3
   b5728:	f7ff bf68 	b.w	b55fc <network_on>

000b572c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b572c:	2200      	movs	r2, #0
   b572e:	6840      	ldr	r0, [r0, #4]
   b5730:	4611      	mov	r1, r2
   b5732:	f7ff bf5b 	b.w	b55ec <network_ready>

000b5736 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5736:	2200      	movs	r2, #0
   b5738:	6840      	ldr	r0, [r0, #4]
   b573a:	4611      	mov	r1, r2
   b573c:	f7ff bf46 	b.w	b55cc <network_connecting>

000b5740 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5740:	6840      	ldr	r0, [r0, #4]
   b5742:	2200      	movs	r2, #0
   b5744:	2102      	movs	r1, #2
   b5746:	f7ff bf49 	b.w	b55dc <network_disconnect>

000b574a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b574a:	2300      	movs	r3, #0
   b574c:	6840      	ldr	r0, [r0, #4]
   b574e:	461a      	mov	r2, r3
   b5750:	f7ff bf34 	b.w	b55bc <network_connect>

000b5754 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5754:	4b02      	ldr	r3, [pc, #8]	; (b5760 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5756:	2203      	movs	r2, #3
   b5758:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b575a:	4a02      	ldr	r2, [pc, #8]	; (b5764 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b575c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b575e:	4770      	bx	lr
   b5760:	2003e6b8 	.word	0x2003e6b8
   b5764:	000ba6ec 	.word	0x000ba6ec

000b5768 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5768:	2100      	movs	r1, #0
   b576a:	f7ff bebb 	b.w	b54e4 <hal_spi_release>

000b576e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b576e:	2100      	movs	r1, #0
   b5770:	f7ff beb0 	b.w	b54d4 <hal_spi_acquire>

000b5774 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5774:	b510      	push	{r4, lr}
   b5776:	4604      	mov	r4, r0
   b5778:	4608      	mov	r0, r1
{
    _spi = spi;
   b577a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b577c:	f7ff fe92 	bl	b54a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5780:	2300      	movs	r3, #0
   b5782:	6063      	str	r3, [r4, #4]
}
   b5784:	4620      	mov	r0, r4
   b5786:	bd10      	pop	{r4, pc}

000b5788 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5788:	b513      	push	{r0, r1, r4, lr}
   b578a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b578c:	7800      	ldrb	r0, [r0, #0]
   b578e:	f7ff ffee 	bl	b576e <_ZN8SPIClass4lockEv.isra.0>
   b5792:	b958      	cbnz	r0, b57ac <_ZN8SPIClass5beginEv+0x24>
   b5794:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5796:	9001      	str	r0, [sp, #4]
   b5798:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b579c:	f7ff fe5a 	bl	b5454 <hal_spi_begin>
        unlock();
   b57a0:	9801      	ldr	r0, [sp, #4]
    }
}
   b57a2:	b002      	add	sp, #8
   b57a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b57a8:	f7ff bfde 	b.w	b5768 <_ZN8SPIClass6unlockEv.isra.0>
   b57ac:	b002      	add	sp, #8
   b57ae:	bd10      	pop	{r4, pc}

000b57b0 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b57b0:	b513      	push	{r0, r1, r4, lr}
   b57b2:	4604      	mov	r4, r0
    if (!lock())
   b57b4:	7800      	ldrb	r0, [r0, #0]
{
   b57b6:	9101      	str	r1, [sp, #4]
    if (!lock())
   b57b8:	f7ff ffd9 	bl	b576e <_ZN8SPIClass4lockEv.isra.0>
   b57bc:	9901      	ldr	r1, [sp, #4]
   b57be:	b948      	cbnz	r0, b57d4 <_ZN8SPIClass11setBitOrderEh+0x24>
   b57c0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b57c2:	9001      	str	r0, [sp, #4]
   b57c4:	f7ff fe4e 	bl	b5464 <hal_spi_set_bit_order>
        unlock();
   b57c8:	9801      	ldr	r0, [sp, #4]
    }
}
   b57ca:	b002      	add	sp, #8
   b57cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b57d0:	f7ff bfca 	b.w	b5768 <_ZN8SPIClass6unlockEv.isra.0>
   b57d4:	b002      	add	sp, #8
   b57d6:	bd10      	pop	{r4, pc}

000b57d8 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b57d8:	b513      	push	{r0, r1, r4, lr}
   b57da:	4604      	mov	r4, r0
    if (!lock())
   b57dc:	7800      	ldrb	r0, [r0, #0]
{
   b57de:	9101      	str	r1, [sp, #4]
    if (!lock())
   b57e0:	f7ff ffc5 	bl	b576e <_ZN8SPIClass4lockEv.isra.0>
   b57e4:	9901      	ldr	r1, [sp, #4]
   b57e6:	b948      	cbnz	r0, b57fc <_ZN8SPIClass11setDataModeEh+0x24>
   b57e8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b57ea:	9001      	str	r0, [sp, #4]
   b57ec:	f7ff fe42 	bl	b5474 <hal_spi_set_data_mode>
        unlock();
   b57f0:	9801      	ldr	r0, [sp, #4]
    }
}
   b57f2:	b002      	add	sp, #8
   b57f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b57f8:	f7ff bfb6 	b.w	b5768 <_ZN8SPIClass6unlockEv.isra.0>
   b57fc:	b002      	add	sp, #8
   b57fe:	bd10      	pop	{r4, pc}

000b5800 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5800:	0840      	lsrs	r0, r0, #1
{
   b5802:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5804:	6018      	str	r0, [r3, #0]
   b5806:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5808:	6818      	ldr	r0, [r3, #0]
   b580a:	4288      	cmp	r0, r1
   b580c:	b2e5      	uxtb	r5, r4
   b580e:	d906      	bls.n	b581e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5810:	3401      	adds	r4, #1
   b5812:	2c08      	cmp	r4, #8
   b5814:	d002      	beq.n	b581c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5816:	0840      	lsrs	r0, r0, #1
   b5818:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b581a:	e7f5      	b.n	b5808 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b581c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b581e:	4b02      	ldr	r3, [pc, #8]	; (b5828 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5820:	5d5b      	ldrb	r3, [r3, r5]
   b5822:	7013      	strb	r3, [r2, #0]
}
   b5824:	bd30      	pop	{r4, r5, pc}
   b5826:	bf00      	nop
   b5828:	000ba720 	.word	0x000ba720

000b582c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b582c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5830:	b088      	sub	sp, #32
    unsigned clock = 0;
   b5832:	2300      	movs	r3, #0
{
   b5834:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b5836:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5838:	9302      	str	r3, [sp, #8]
{
   b583a:	460e      	mov	r6, r1
   b583c:	4617      	mov	r7, r2
    if (!lock())
   b583e:	f7ff ff96 	bl	b576e <_ZN8SPIClass4lockEv.isra.0>
   b5842:	4605      	mov	r5, r0
   b5844:	bb00      	cbnz	r0, b5888 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b5846:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b584a:	4601      	mov	r1, r0
   b584c:	2214      	movs	r2, #20
   b584e:	a803      	add	r0, sp, #12
   b5850:	f004 fb24 	bl	b9e9c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5854:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5856:	462a      	mov	r2, r5
   b5858:	a903      	add	r1, sp, #12
   b585a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b585c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5860:	f7ff fe30 	bl	b54c4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5864:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b5866:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b586a:	ab02      	add	r3, sp, #8
   b586c:	f10d 0207 	add.w	r2, sp, #7
   b5870:	fb07 f106 	mul.w	r1, r7, r6
   b5874:	f7ff ffc4 	bl	b5800 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b5878:	7820      	ldrb	r0, [r4, #0]
   b587a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b587e:	f7ff fe01 	bl	b5484 <hal_spi_set_clock_divider>
        unlock();
   b5882:	7820      	ldrb	r0, [r4, #0]
   b5884:	f7ff ff70 	bl	b5768 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b5888:	9802      	ldr	r0, [sp, #8]
   b588a:	b008      	add	sp, #32
   b588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5890 <_ZN8SPIClass15setClockDividerEh>:
{
   b5890:	b538      	push	{r3, r4, r5, lr}
   b5892:	4604      	mov	r4, r0
    if (!lock())
   b5894:	7800      	ldrb	r0, [r0, #0]
{
   b5896:	460d      	mov	r5, r1
    if (!lock())
   b5898:	f7ff ff69 	bl	b576e <_ZN8SPIClass4lockEv.isra.0>
   b589c:	4603      	mov	r3, r0
   b589e:	b9d0      	cbnz	r0, b58d6 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b58a0:	6861      	ldr	r1, [r4, #4]
   b58a2:	b199      	cbz	r1, b58cc <_ZN8SPIClass15setClockDividerEh+0x3c>
   b58a4:	4a0c      	ldr	r2, [pc, #48]	; (b58d8 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b58a6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b58aa:	4285      	cmp	r5, r0
   b58ac:	d002      	beq.n	b58b4 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b58ae:	3301      	adds	r3, #1
   b58b0:	2b08      	cmp	r3, #8
   b58b2:	d1f8      	bne.n	b58a6 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b58b4:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b58b6:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b58b8:	2201      	movs	r2, #1
   b58ba:	40d9      	lsrs	r1, r3
   b58bc:	4620      	mov	r0, r4
   b58be:	f7ff ffb5 	bl	b582c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b58c2:	7820      	ldrb	r0, [r4, #0]
}
   b58c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b58c8:	f7ff bf4e 	b.w	b5768 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b58cc:	7820      	ldrb	r0, [r4, #0]
   b58ce:	4629      	mov	r1, r5
   b58d0:	f7ff fdd8 	bl	b5484 <hal_spi_set_clock_divider>
   b58d4:	e7f5      	b.n	b58c2 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b58d6:	bd38      	pop	{r3, r4, r5, pc}
   b58d8:	000ba720 	.word	0x000ba720

000b58dc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b58dc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b58de:	7800      	ldrb	r0, [r0, #0]
   b58e0:	f7ff fdd8 	bl	b5494 <hal_spi_transfer>
}
   b58e4:	b2c0      	uxtb	r0, r0
   b58e6:	bd08      	pop	{r3, pc}

000b58e8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b58e8:	4b05      	ldr	r3, [pc, #20]	; (b5900 <_GLOBAL__sub_I_System+0x18>)
   b58ea:	2202      	movs	r2, #2
   b58ec:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b58ee:	4b05      	ldr	r3, [pc, #20]	; (b5904 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b58f0:	4a05      	ldr	r2, [pc, #20]	; (b5908 <_GLOBAL__sub_I_System+0x20>)
   b58f2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b58f4:	2000      	movs	r0, #0
   b58f6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b58fa:	f7ff be3b 	b.w	b5574 <set_system_mode>
   b58fe:	bf00      	nop
   b5900:	2003e6cc 	.word	0x2003e6cc
   b5904:	2003e6c0 	.word	0x2003e6c0
   b5908:	ffff0000 	.word	0xffff0000

000b590c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b590c:	b510      	push	{r4, lr}
   b590e:	4604      	mov	r4, r0
{
	free(buffer);
   b5910:	6800      	ldr	r0, [r0, #0]
   b5912:	f7ff fec3 	bl	b569c <free>
}
   b5916:	4620      	mov	r0, r4
   b5918:	bd10      	pop	{r4, pc}

000b591a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b591a:	b510      	push	{r4, lr}
   b591c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b591e:	6800      	ldr	r0, [r0, #0]
   b5920:	b108      	cbz	r0, b5926 <_ZN6String10invalidateEv+0xc>
   b5922:	f7ff febb 	bl	b569c <free>
	buffer = NULL;
   b5926:	2300      	movs	r3, #0
	capacity = len = 0;
   b5928:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b592c:	6023      	str	r3, [r4, #0]
}
   b592e:	bd10      	pop	{r4, pc}

000b5930 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5930:	b538      	push	{r3, r4, r5, lr}
   b5932:	4604      	mov	r4, r0
   b5934:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5936:	6800      	ldr	r0, [r0, #0]
   b5938:	3101      	adds	r1, #1
   b593a:	f7ff feb7 	bl	b56ac <realloc>
	if (newbuffer) {
   b593e:	b110      	cbz	r0, b5946 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5940:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5944:	2001      	movs	r0, #1
	}
	return 0;
}
   b5946:	bd38      	pop	{r3, r4, r5, pc}

000b5948 <_ZN6String7reserveEj>:
{
   b5948:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b594a:	6803      	ldr	r3, [r0, #0]
{
   b594c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b594e:	b123      	cbz	r3, b595a <_ZN6String7reserveEj+0x12>
   b5950:	6843      	ldr	r3, [r0, #4]
   b5952:	428b      	cmp	r3, r1
   b5954:	d301      	bcc.n	b595a <_ZN6String7reserveEj+0x12>
   b5956:	2001      	movs	r0, #1
}
   b5958:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b595a:	4620      	mov	r0, r4
   b595c:	f7ff ffe8 	bl	b5930 <_ZN6String12changeBufferEj>
   b5960:	2800      	cmp	r0, #0
   b5962:	d0f9      	beq.n	b5958 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5964:	68a3      	ldr	r3, [r4, #8]
   b5966:	2b00      	cmp	r3, #0
   b5968:	d1f5      	bne.n	b5956 <_ZN6String7reserveEj+0xe>
   b596a:	6822      	ldr	r2, [r4, #0]
   b596c:	7013      	strb	r3, [r2, #0]
   b596e:	e7f2      	b.n	b5956 <_ZN6String7reserveEj+0xe>

000b5970 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5970:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5972:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5974:	4611      	mov	r1, r2
   b5976:	9201      	str	r2, [sp, #4]
{
   b5978:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b597a:	f7ff ffe5 	bl	b5948 <_ZN6String7reserveEj>
   b597e:	9a01      	ldr	r2, [sp, #4]
   b5980:	b928      	cbnz	r0, b598e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5982:	4620      	mov	r0, r4
   b5984:	f7ff ffc9 	bl	b591a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5988:	4620      	mov	r0, r4
   b598a:	b003      	add	sp, #12
   b598c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b598e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5990:	4629      	mov	r1, r5
   b5992:	6820      	ldr	r0, [r4, #0]
   b5994:	f004 fa5a 	bl	b9e4c <memcpy>
	buffer[len] = 0;
   b5998:	6822      	ldr	r2, [r4, #0]
   b599a:	68a3      	ldr	r3, [r4, #8]
   b599c:	2100      	movs	r1, #0
   b599e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b59a0:	e7f2      	b.n	b5988 <_ZN6String4copyEPKcj+0x18>

000b59a2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b59a2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b59a4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b59a6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b59aa:	4604      	mov	r4, r0
	len = 0;
   b59ac:	6083      	str	r3, [r0, #8]
	flags = 0;
   b59ae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b59b0:	b141      	cbz	r1, b59c4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b59b2:	4608      	mov	r0, r1
   b59b4:	9101      	str	r1, [sp, #4]
   b59b6:	f004 fab9 	bl	b9f2c <strlen>
   b59ba:	9901      	ldr	r1, [sp, #4]
   b59bc:	4602      	mov	r2, r0
   b59be:	4620      	mov	r0, r4
   b59c0:	f7ff ffd6 	bl	b5970 <_ZN6String4copyEPKcj>
}
   b59c4:	4620      	mov	r0, r4
   b59c6:	b002      	add	sp, #8
   b59c8:	bd10      	pop	{r4, pc}

000b59ca <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b59ca:	b538      	push	{r3, r4, r5, lr}
   b59cc:	4605      	mov	r5, r0
	if (buffer) {
   b59ce:	6800      	ldr	r0, [r0, #0]
{
   b59d0:	460c      	mov	r4, r1
	if (buffer) {
   b59d2:	b168      	cbz	r0, b59f0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b59d4:	686a      	ldr	r2, [r5, #4]
   b59d6:	688b      	ldr	r3, [r1, #8]
   b59d8:	429a      	cmp	r2, r3
   b59da:	d307      	bcc.n	b59ec <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b59dc:	6809      	ldr	r1, [r1, #0]
   b59de:	f004 fa9d 	bl	b9f1c <strcpy>
			len = rhs.len;
   b59e2:	68a3      	ldr	r3, [r4, #8]
   b59e4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b59e6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b59e8:	60a3      	str	r3, [r4, #8]
}
   b59ea:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b59ec:	f7ff fe56 	bl	b569c <free>
	buffer = rhs.buffer;
   b59f0:	6823      	ldr	r3, [r4, #0]
   b59f2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b59f4:	6863      	ldr	r3, [r4, #4]
   b59f6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b59f8:	68a3      	ldr	r3, [r4, #8]
   b59fa:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b59fc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b59fe:	e9c4 3300 	strd	r3, r3, [r4]
   b5a02:	e7f1      	b.n	b59e8 <_ZN6String4moveERS_+0x1e>

000b5a04 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b5a04:	b510      	push	{r4, lr}
	buffer = NULL;
   b5a06:	2300      	movs	r3, #0
	capacity = 0;
   b5a08:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b5a0c:	4604      	mov	r4, r0
	len = 0;
   b5a0e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5a10:	7303      	strb	r3, [r0, #12]
	move(rval);
   b5a12:	f7ff ffda 	bl	b59ca <_ZN6String4moveERS_>
}
   b5a16:	4620      	mov	r0, r4
   b5a18:	bd10      	pop	{r4, pc}

000b5a1a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5a1a:	4288      	cmp	r0, r1
{
   b5a1c:	b510      	push	{r4, lr}
   b5a1e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5a20:	d005      	beq.n	b5a2e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5a22:	680b      	ldr	r3, [r1, #0]
   b5a24:	b12b      	cbz	r3, b5a32 <_ZN6StringaSERKS_+0x18>
   b5a26:	688a      	ldr	r2, [r1, #8]
   b5a28:	4619      	mov	r1, r3
   b5a2a:	f7ff ffa1 	bl	b5970 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5a2e:	4620      	mov	r0, r4
   b5a30:	bd10      	pop	{r4, pc}
	else invalidate();
   b5a32:	f7ff ff72 	bl	b591a <_ZN6String10invalidateEv>
   b5a36:	e7fa      	b.n	b5a2e <_ZN6StringaSERKS_+0x14>

000b5a38 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5a38:	b510      	push	{r4, lr}
	buffer = NULL;
   b5a3a:	2300      	movs	r3, #0
String::String(const String &value)
   b5a3c:	4604      	mov	r4, r0
	capacity = 0;
   b5a3e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5a42:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5a44:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5a46:	f7ff ffe8 	bl	b5a1a <_ZN6StringaSERKS_>
}
   b5a4a:	4620      	mov	r0, r4
   b5a4c:	bd10      	pop	{r4, pc}

000b5a4e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5a4e:	b513      	push	{r0, r1, r4, lr}
   b5a50:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5a52:	b159      	cbz	r1, b5a6c <_ZN6StringaSEPKc+0x1e>
   b5a54:	4608      	mov	r0, r1
   b5a56:	9101      	str	r1, [sp, #4]
   b5a58:	f004 fa68 	bl	b9f2c <strlen>
   b5a5c:	9901      	ldr	r1, [sp, #4]
   b5a5e:	4602      	mov	r2, r0
   b5a60:	4620      	mov	r0, r4
   b5a62:	f7ff ff85 	bl	b5970 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5a66:	4620      	mov	r0, r4
   b5a68:	b002      	add	sp, #8
   b5a6a:	bd10      	pop	{r4, pc}
	else invalidate();
   b5a6c:	f7ff ff55 	bl	b591a <_ZN6String10invalidateEv>
   b5a70:	e7f9      	b.n	b5a66 <_ZN6StringaSEPKc+0x18>

000b5a72 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5a72:	b570      	push	{r4, r5, r6, lr}
   b5a74:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5a76:	460e      	mov	r6, r1
   b5a78:	b909      	cbnz	r1, b5a7e <_ZN6String6concatEPKcj+0xc>
   b5a7a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5a7c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5a7e:	b16a      	cbz	r2, b5a9c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5a80:	6884      	ldr	r4, [r0, #8]
   b5a82:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5a84:	4621      	mov	r1, r4
   b5a86:	f7ff ff5f 	bl	b5948 <_ZN6String7reserveEj>
   b5a8a:	2800      	cmp	r0, #0
   b5a8c:	d0f5      	beq.n	b5a7a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5a8e:	6828      	ldr	r0, [r5, #0]
   b5a90:	68ab      	ldr	r3, [r5, #8]
   b5a92:	4631      	mov	r1, r6
   b5a94:	4418      	add	r0, r3
   b5a96:	f004 fa41 	bl	b9f1c <strcpy>
	len = newlen;
   b5a9a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5a9c:	2001      	movs	r0, #1
   b5a9e:	e7ed      	b.n	b5a7c <_ZN6String6concatEPKcj+0xa>

000b5aa0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b5aa0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b5aa2:	2300      	movs	r3, #0
	buf[0] = c;
   b5aa4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b5aa8:	2201      	movs	r2, #1
   b5aaa:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b5aac:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b5ab0:	f7ff ffdf 	bl	b5a72 <_ZN6String6concatEPKcj>
}
   b5ab4:	b003      	add	sp, #12
   b5ab6:	f85d fb04 	ldr.w	pc, [sp], #4

000b5aba <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b5aba:	6802      	ldr	r2, [r0, #0]
{
   b5abc:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b5abe:	6809      	ldr	r1, [r1, #0]
   b5ac0:	b162      	cbz	r2, b5adc <_ZNK6String9compareToERKS_+0x22>
   b5ac2:	b941      	cbnz	r1, b5ad6 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b5ac4:	6880      	ldr	r0, [r0, #8]
   b5ac6:	b160      	cbz	r0, b5ae2 <_ZNK6String9compareToERKS_+0x28>
   b5ac8:	7810      	ldrb	r0, [r2, #0]
   b5aca:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b5acc:	6898      	ldr	r0, [r3, #8]
   b5ace:	b140      	cbz	r0, b5ae2 <_ZNK6String9compareToERKS_+0x28>
   b5ad0:	7809      	ldrb	r1, [r1, #0]
   b5ad2:	4248      	negs	r0, r1
   b5ad4:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b5ad6:	4610      	mov	r0, r2
   b5ad8:	f004 ba16 	b.w	b9f08 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b5adc:	2900      	cmp	r1, #0
   b5ade:	d1f5      	bne.n	b5acc <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b5ae0:	4608      	mov	r0, r1
}
   b5ae2:	4770      	bx	lr

000b5ae4 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b5ae4:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b5ae6:	6882      	ldr	r2, [r0, #8]
   b5ae8:	688b      	ldr	r3, [r1, #8]
   b5aea:	429a      	cmp	r2, r3
   b5aec:	d105      	bne.n	b5afa <_ZNK6String6equalsERKS_+0x16>
   b5aee:	f7ff ffe4 	bl	b5aba <_ZNK6String9compareToERKS_>
   b5af2:	fab0 f080 	clz	r0, r0
   b5af6:	0940      	lsrs	r0, r0, #5
}
   b5af8:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b5afa:	2000      	movs	r0, #0
   b5afc:	e7fc      	b.n	b5af8 <_ZNK6String6equalsERKS_+0x14>

000b5afe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5afe:	4770      	bx	lr

000b5b00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5b00:	4770      	bx	lr

000b5b02 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5b02:	4770      	bx	lr

000b5b04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5b04:	4770      	bx	lr
	...

000b5b08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5b08:	4b06      	ldr	r3, [pc, #24]	; (b5b24 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5b0a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5b0c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5b0e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5b12:	d005      	beq.n	b5b20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5b14:	4608      	mov	r0, r1
   b5b16:	f003 fbbd 	bl	b9294 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5b1a:	2800      	cmp	r0, #0
   b5b1c:	bf08      	it	eq
   b5b1e:	2400      	moveq	r4, #0
      }
   b5b20:	4620      	mov	r0, r4
   b5b22:	bd10      	pop	{r4, pc}
   b5b24:	000ba9ec 	.word	0x000ba9ec

000b5b28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5b28:	4b06      	ldr	r3, [pc, #24]	; (b5b44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5b2a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5b2c:	b510      	push	{r4, lr}
   b5b2e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5b32:	d005      	beq.n	b5b40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5b34:	4608      	mov	r0, r1
   b5b36:	f003 fbad 	bl	b9294 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5b3a:	2800      	cmp	r0, #0
   b5b3c:	bf08      	it	eq
   b5b3e:	2400      	moveq	r4, #0
      }
   b5b40:	4620      	mov	r0, r4
   b5b42:	bd10      	pop	{r4, pc}
   b5b44:	000ba9ec 	.word	0x000ba9ec

000b5b48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5b48:	4b06      	ldr	r3, [pc, #24]	; (b5b64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5b4a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5b4c:	b510      	push	{r4, lr}
   b5b4e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5b52:	d005      	beq.n	b5b60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5b54:	4608      	mov	r0, r1
   b5b56:	f003 fb9d 	bl	b9294 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5b5a:	2800      	cmp	r0, #0
   b5b5c:	bf08      	it	eq
   b5b5e:	2400      	moveq	r4, #0
      }
   b5b60:	4620      	mov	r0, r4
   b5b62:	bd10      	pop	{r4, pc}
   b5b64:	000ba9ec 	.word	0x000ba9ec

000b5b68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5b68:	b510      	push	{r4, lr}
   b5b6a:	2168      	movs	r1, #104	; 0x68
   b5b6c:	4604      	mov	r4, r0
   b5b6e:	f7fe fa94 	bl	b409a <_ZdlPvj>
   b5b72:	4620      	mov	r0, r4
   b5b74:	bd10      	pop	{r4, pc}

000b5b76 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5b76:	b510      	push	{r4, lr}
   b5b78:	2128      	movs	r1, #40	; 0x28
   b5b7a:	4604      	mov	r4, r0
   b5b7c:	f7fe fa8d 	bl	b409a <_ZdlPvj>
   b5b80:	4620      	mov	r0, r4
   b5b82:	bd10      	pop	{r4, pc}

000b5b84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5b84:	b510      	push	{r4, lr}
   b5b86:	2130      	movs	r1, #48	; 0x30
   b5b88:	4604      	mov	r4, r0
   b5b8a:	f7fe fa86 	bl	b409a <_ZdlPvj>
   b5b8e:	4620      	mov	r0, r4
   b5b90:	bd10      	pop	{r4, pc}

000b5b92 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5b92:	2168      	movs	r1, #104	; 0x68
   b5b94:	f7fe ba81 	b.w	b409a <_ZdlPvj>

000b5b98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5b98:	2128      	movs	r1, #40	; 0x28
   b5b9a:	f7fe ba7e 	b.w	b409a <_ZdlPvj>

000b5b9e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5b9e:	2130      	movs	r1, #48	; 0x30
   b5ba0:	f7fe ba7b 	b.w	b409a <_ZdlPvj>

000b5ba4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b5ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5ba6:	2500      	movs	r5, #0
   b5ba8:	1cec      	adds	r4, r5, #3
   b5baa:	428c      	cmp	r4, r1
   b5bac:	d80d      	bhi.n	b5bca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b5bae:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5bb0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5bb2:	5d87      	ldrb	r7, [r0, r6]
   b5bb4:	4297      	cmp	r7, r2
   b5bb6:	d105      	bne.n	b5bc4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5bb8:	4426      	add	r6, r4
   b5bba:	42b1      	cmp	r1, r6
   b5bbc:	d305      	bcc.n	b5bca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b5bbe:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5bc0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5bc4:	3401      	adds	r4, #1
   b5bc6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5bc8:	e7ee      	b.n	b5ba8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b5bca:	2000      	movs	r0, #0
   b5bcc:	e7f9      	b.n	b5bc2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b5bd0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b5bd0:	4a02      	ldr	r2, [pc, #8]	; (b5bdc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b5bd2:	4903      	ldr	r1, [pc, #12]	; (b5be0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b5bd4:	200a      	movs	r0, #10
   b5bd6:	f7ff bcbd 	b.w	b5554 <panic_>
   b5bda:	bf00      	nop
   b5bdc:	000b5159 	.word	0x000b5159
   b5be0:	000ba728 	.word	0x000ba728

000b5be4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5be4:	b430      	push	{r4, r5}
   b5be6:	460d      	mov	r5, r1
   b5be8:	4611      	mov	r1, r2
   b5bea:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b5bec:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5bee:	6809      	ldr	r1, [r1, #0]
   b5bf0:	6828      	ldr	r0, [r5, #0]
   b5bf2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b5bf6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b5bf8:	bc30      	pop	{r4, r5}
   b5bfa:	4760      	bx	ip

000b5bfc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b5bfc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5bfe:	b538      	push	{r3, r4, r5, lr}
   b5c00:	4604      	mov	r4, r0
	switch (__op)
   b5c02:	d102      	bne.n	b5c0a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5c04:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5c06:	6023      	str	r3, [r4, #0]
	}
   b5c08:	e003      	b.n	b5c12 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b5c0a:	2a02      	cmp	r2, #2
   b5c0c:	d003      	beq.n	b5c16 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b5c0e:	2a03      	cmp	r2, #3
   b5c10:	d00d      	beq.n	b5c2e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b5c12:	2000      	movs	r0, #0
   b5c14:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c16:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b5c18:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c1a:	f7fe fa3a 	bl	b4092 <_Znwj>
   b5c1e:	4603      	mov	r3, r0
   b5c20:	2800      	cmp	r0, #0
   b5c22:	d0f0      	beq.n	b5c06 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b5c24:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5c28:	e883 0003 	stmia.w	r3, {r0, r1}
   b5c2c:	e7eb      	b.n	b5c06 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5c2e:	6800      	ldr	r0, [r0, #0]
   b5c30:	2800      	cmp	r0, #0
   b5c32:	d0ee      	beq.n	b5c12 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5c34:	2108      	movs	r1, #8
   b5c36:	f7fe fa30 	bl	b409a <_ZdlPvj>
   b5c3a:	e7ea      	b.n	b5c12 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b5c3c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b5c3c:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b5c3e:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b5c40:	4604      	mov	r4, r0
	if (_M_manager)
   b5c42:	b12b      	cbz	r3, b5c50 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b5c44:	2203      	movs	r2, #3
   b5c46:	4601      	mov	r1, r0
   b5c48:	4798      	blx	r3
	    _M_manager = nullptr;
   b5c4a:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b5c4c:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b5c50:	bd10      	pop	{r4, pc}

000b5c52 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b5c52:	b510      	push	{r4, lr}
	if (_M_manager)
   b5c54:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b5c56:	4604      	mov	r4, r0
	if (_M_manager)
   b5c58:	b12b      	cbz	r3, b5c66 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b5c5a:	2203      	movs	r2, #3
   b5c5c:	4601      	mov	r1, r0
   b5c5e:	4798      	blx	r3
	    _M_manager = nullptr;
   b5c60:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b5c62:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b5c66:	bd10      	pop	{r4, pc}

000b5c68 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b5c68:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b5c6a:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b5c6c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b5c6e:	2220      	movs	r2, #32
   b5c70:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b5c74:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b5c76:	4a08      	ldr	r2, [pc, #32]	; (b5c98 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b5c78:	9200      	str	r2, [sp, #0]
   b5c7a:	4908      	ldr	r1, [pc, #32]	; (b5c9c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b5c7c:	aa02      	add	r2, sp, #8
   b5c7e:	2001      	movs	r0, #1
   b5c80:	f7ff fc70 	bl	b5564 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b5c84:	6820      	ldr	r0, [r4, #0]
   b5c86:	4906      	ldr	r1, [pc, #24]	; (b5ca0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b5c88:	8800      	ldrh	r0, [r0, #0]
   b5c8a:	2300      	movs	r3, #0
   b5c8c:	4622      	mov	r2, r4
    }
   b5c8e:	b00a      	add	sp, #40	; 0x28
   b5c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b5c94:	f7ff bac0 	b.w	b5218 <hal_ble_gatt_client_discover_all_services>
   b5c98:	000ba74a 	.word	0x000ba74a
   b5c9c:	000ba73f 	.word	0x000ba73f
   b5ca0:	000b7b09 	.word	0x000b7b09

000b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b5ca4:	b510      	push	{r4, lr}
   b5ca6:	3801      	subs	r0, #1
   b5ca8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b5cac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b5cb0:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b5cb2:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b5cb6:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b5cb8:	bf88      	it	hi
   b5cba:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b5cbe:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b5cc2:	7803      	ldrb	r3, [r0, #0]
   b5cc4:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b5cc8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b5ccc:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b5cce:	bf88      	it	hi
   b5cd0:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b5cd4:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b5cd6:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b5cda:	d1e7      	bne.n	b5cac <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b5cdc:	bd10      	pop	{r4, pc}

000b5cde <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5cde:	b510      	push	{r4, lr}
      if (_M_manager)
   b5ce0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5ce2:	4604      	mov	r4, r0
      if (_M_manager)
   b5ce4:	b113      	cbz	r3, b5cec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5ce6:	2203      	movs	r2, #3
   b5ce8:	4601      	mov	r1, r0
   b5cea:	4798      	blx	r3
    }
   b5cec:	4620      	mov	r0, r4
   b5cee:	bd10      	pop	{r4, pc}

000b5cf0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5cf0:	b510      	push	{r4, lr}
   b5cf2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b5cf4:	3058      	adds	r0, #88	; 0x58
   b5cf6:	f7ff fff2 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b5cfa:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b5cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d02:	f7ff be03 	b.w	b590c <_ZN6StringD1Ev>

000b5d06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5d06:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5d08:	6843      	ldr	r3, [r0, #4]
   b5d0a:	3b01      	subs	r3, #1
    {
   b5d0c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5d0e:	6043      	str	r3, [r0, #4]
   b5d10:	b963      	cbnz	r3, b5d2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5d12:	6803      	ldr	r3, [r0, #0]
   b5d14:	689b      	ldr	r3, [r3, #8]
   b5d16:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d18:	68a3      	ldr	r3, [r4, #8]
   b5d1a:	3b01      	subs	r3, #1
   b5d1c:	60a3      	str	r3, [r4, #8]
   b5d1e:	b92b      	cbnz	r3, b5d2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5d20:	6823      	ldr	r3, [r4, #0]
   b5d22:	4620      	mov	r0, r4
   b5d24:	68db      	ldr	r3, [r3, #12]
    }
   b5d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5d2a:	4718      	bx	r3
    }
   b5d2c:	bd10      	pop	{r4, pc}

000b5d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b5d2e:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b5d30:	6803      	ldr	r3, [r0, #0]
   b5d32:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b5d34:	4605      	mov	r5, r0
   b5d36:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b5d38:	d008      	beq.n	b5d4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b5d3a:	b111      	cbz	r1, b5d42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b5d3c:	684b      	ldr	r3, [r1, #4]
   b5d3e:	3301      	adds	r3, #1
   b5d40:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b5d42:	6828      	ldr	r0, [r5, #0]
   b5d44:	b108      	cbz	r0, b5d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b5d46:	f7ff ffde 	bl	b5d06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5d4a:	602c      	str	r4, [r5, #0]
      }
   b5d4c:	bd38      	pop	{r3, r4, r5, pc}

000b5d4e <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b5d4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5d52:	b2da      	uxtb	r2, r3
   b5d54:	2a09      	cmp	r2, #9
   b5d56:	d801      	bhi.n	b5d5c <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b5d58:	4618      	mov	r0, r3
   b5d5a:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b5d5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b5d60:	2b05      	cmp	r3, #5
   b5d62:	d801      	bhi.n	b5d68 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b5d64:	3857      	subs	r0, #87	; 0x57
   b5d66:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b5d68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b5d6c:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b5d6e:	bf94      	ite	ls
   b5d70:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b5d72:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b5d76:	4770      	bx	lr

000b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b5d78:	b510      	push	{r4, lr}
            locked_(false) {
   b5d7a:	2300      	movs	r3, #0
   b5d7c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5d7e:	4b04      	ldr	r3, [pc, #16]	; (b5d90 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5d80:	4604      	mov	r4, r0
   b5d82:	6818      	ldr	r0, [r3, #0]
   b5d84:	f7ff fabe 	bl	b5304 <os_mutex_recursive_lock>
        locked_ = true;
   b5d88:	2301      	movs	r3, #1
   b5d8a:	7023      	strb	r3, [r4, #0]
    }
   b5d8c:	4620      	mov	r0, r4
   b5d8e:	bd10      	pop	{r4, pc}
   b5d90:	2003e6d8 	.word	0x2003e6d8

000b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5d94:	b510      	push	{r4, lr}
        if (locked_) {
   b5d96:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b5d98:	4604      	mov	r4, r0
        if (locked_) {
   b5d9a:	b11b      	cbz	r3, b5da4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5d9c:	4b02      	ldr	r3, [pc, #8]	; (b5da8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b5d9e:	6818      	ldr	r0, [r3, #0]
   b5da0:	f7ff fab8 	bl	b5314 <os_mutex_recursive_unlock>
    }
   b5da4:	4620      	mov	r0, r4
   b5da6:	bd10      	pop	{r4, pc}
   b5da8:	2003e6d8 	.word	0x2003e6d8

000b5dac <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5dac:	b082      	sub	sp, #8
   b5dae:	4603      	mov	r3, r0
    address_ = addr;
   b5db0:	6808      	ldr	r0, [r1, #0]
   b5db2:	6849      	ldr	r1, [r1, #4]
   b5db4:	466a      	mov	r2, sp
   b5db6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5db8:	466a      	mov	r2, sp
   b5dba:	ca03      	ldmia	r2!, {r0, r1}
   b5dbc:	6018      	str	r0, [r3, #0]
}
   b5dbe:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5dc0:	6059      	str	r1, [r3, #4]
}
   b5dc2:	b002      	add	sp, #8
   b5dc4:	4770      	bx	lr

000b5dc6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b5dc6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5dc8:	7982      	ldrb	r2, [r0, #6]
   b5dca:	798b      	ldrb	r3, [r1, #6]
   b5dcc:	429a      	cmp	r2, r3
   b5dce:	d106      	bne.n	b5dde <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5dd0:	2206      	movs	r2, #6
   b5dd2:	f004 f82b 	bl	b9e2c <memcmp>
   b5dd6:	fab0 f080 	clz	r0, r0
   b5dda:	0940      	lsrs	r0, r0, #5
}
   b5ddc:	bd08      	pop	{r3, pc}
    return false;
   b5dde:	2000      	movs	r0, #0
   b5de0:	e7fc      	b.n	b5ddc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b5de2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b5de2:	f04f 33ff 	mov.w	r3, #4294967295
   b5de6:	6003      	str	r3, [r0, #0]
   b5de8:	8083      	strh	r3, [r0, #4]
}
   b5dea:	2000      	movs	r0, #0
   b5dec:	4770      	bx	lr

000b5dee <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b5dee:	b508      	push	{r3, lr}
   b5df0:	4602      	mov	r2, r0
        : address_{} {
   b5df2:	2100      	movs	r1, #0
   b5df4:	6001      	str	r1, [r0, #0]
   b5df6:	6041      	str	r1, [r0, #4]
    clear();
   b5df8:	f7ff fff3 	bl	b5de2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b5dfc:	7191      	strb	r1, [r2, #6]
}
   b5dfe:	4610      	mov	r0, r2
   b5e00:	bd08      	pop	{r3, pc}

000b5e02 <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b5e02:	b510      	push	{r4, lr}
   b5e04:	1d43      	adds	r3, r0, #5
   b5e06:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b5e08:	781c      	ldrb	r4, [r3, #0]
   b5e0a:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b5e0e:	4283      	cmp	r3, r0
   b5e10:	f103 33ff 	add.w	r3, r3, #4294967295
   b5e14:	d1f8      	bne.n	b5e08 <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b5e16:	bd10      	pop	{r4, pc}

000b5e18 <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b5e18:	b570      	push	{r4, r5, r6, lr}
   b5e1a:	4614      	mov	r4, r2
   b5e1c:	b088      	sub	sp, #32
   b5e1e:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b5e20:	460d      	mov	r5, r1
   b5e22:	2900      	cmp	r1, #0
   b5e24:	d048      	beq.n	b5eb8 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b5e26:	b1a4      	cbz	r4, b5e52 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b5e28:	a901      	add	r1, sp, #4
   b5e2a:	f7ff ffea 	bl	b5e02 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b5e2e:	b19a      	cbz	r2, b5e58 <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b5e30:	aa03      	add	r2, sp, #12
   b5e32:	2106      	movs	r1, #6
   b5e34:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b5e36:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b5e38:	f7ff ff34 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b5e3c:	2e11      	cmp	r6, #17
   b5e3e:	bf28      	it	cs
   b5e40:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b5e42:	4632      	mov	r2, r6
   b5e44:	a903      	add	r1, sp, #12
   b5e46:	4628      	mov	r0, r5
   b5e48:	f004 f800 	bl	b9e4c <memcpy>
    buf[len++] = '\0';
   b5e4c:	2300      	movs	r3, #0
   b5e4e:	55ab      	strb	r3, [r5, r6]
   b5e50:	1c74      	adds	r4, r6, #1
}
   b5e52:	4620      	mov	r0, r4
   b5e54:	b008      	add	sp, #32
   b5e56:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b5e58:	aa03      	add	r2, sp, #12
   b5e5a:	2101      	movs	r1, #1
   b5e5c:	a801      	add	r0, sp, #4
   b5e5e:	f7ff ff21 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b5e62:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b5e64:	f10d 020f 	add.w	r2, sp, #15
   b5e68:	2101      	movs	r1, #1
   b5e6a:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b5e6e:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b5e72:	f7ff ff17 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b5e76:	f10d 0212 	add.w	r2, sp, #18
   b5e7a:	2101      	movs	r1, #1
   b5e7c:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b5e80:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b5e84:	f7ff ff0e 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b5e88:	f10d 0215 	add.w	r2, sp, #21
   b5e8c:	2101      	movs	r1, #1
   b5e8e:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b5e92:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b5e96:	f7ff ff05 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b5e9a:	aa06      	add	r2, sp, #24
   b5e9c:	2101      	movs	r1, #1
   b5e9e:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b5ea0:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b5ea4:	f7ff fefe 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b5ea8:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b5eac:	f10d 021b 	add.w	r2, sp, #27
   b5eb0:	2101      	movs	r1, #1
   b5eb2:	f10d 0009 	add.w	r0, sp, #9
   b5eb6:	e7be      	b.n	b5e36 <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b5eb8:	460c      	mov	r4, r1
   b5eba:	e7ca      	b.n	b5e52 <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b5ebc <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b5ebc:	b510      	push	{r4, lr}
   b5ebe:	b086      	sub	sp, #24
   b5ec0:	4604      	mov	r4, r0
   b5ec2:	4613      	mov	r3, r2
   b5ec4:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b5ec6:	2212      	movs	r2, #18
   b5ec8:	a901      	add	r1, sp, #4
   b5eca:	f7ff ffa5 	bl	b5e18 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b5ece:	a901      	add	r1, sp, #4
   b5ed0:	4620      	mov	r0, r4
   b5ed2:	f7ff fd66 	bl	b59a2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5ed6:	4620      	mov	r0, r4
   b5ed8:	b006      	add	sp, #24
   b5eda:	bd10      	pop	{r4, pc}

000b5edc <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5edc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5ede:	2301      	movs	r3, #1
   b5ee0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5ee2:	4b05      	ldr	r3, [pc, #20]	; (b5ef8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b5ee4:	4602      	mov	r2, r0
   b5ee6:	f103 0110 	add.w	r1, r3, #16
   b5eea:	f853 4b04 	ldr.w	r4, [r3], #4
   b5eee:	f842 4b04 	str.w	r4, [r2], #4
   b5ef2:	428b      	cmp	r3, r1
   b5ef4:	d1f9      	bne.n	b5eea <_ZN8particle7BleUuidC1Ev+0xe>
}
   b5ef6:	bd10      	pop	{r4, pc}
   b5ef8:	000ba9fa 	.word	0x000ba9fa

000b5efc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b5efc:	7c0b      	ldrb	r3, [r1, #16]
   b5efe:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b5f02:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b5f04:	d10d      	bne.n	b5f22 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b5f06:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5f08:	4b0c      	ldr	r3, [pc, #48]	; (b5f3c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b5f0a:	4602      	mov	r2, r0
   b5f0c:	f103 0410 	add.w	r4, r3, #16
   b5f10:	f853 5b04 	ldr.w	r5, [r3], #4
   b5f14:	f842 5b04 	str.w	r5, [r2], #4
   b5f18:	42a3      	cmp	r3, r4
   b5f1a:	d1f9      	bne.n	b5f10 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b5f1c:	880b      	ldrh	r3, [r1, #0]
   b5f1e:	8183      	strh	r3, [r0, #12]
}
   b5f20:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b5f22:	2301      	movs	r3, #1
   b5f24:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b5f26:	f101 0210 	add.w	r2, r1, #16
   b5f2a:	4603      	mov	r3, r0
   b5f2c:	f851 4b04 	ldr.w	r4, [r1], #4
   b5f30:	f843 4b04 	str.w	r4, [r3], #4
   b5f34:	4291      	cmp	r1, r2
   b5f36:	d1f9      	bne.n	b5f2c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b5f38:	e7f2      	b.n	b5f20 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b5f3a:	bf00      	nop
   b5f3c:	000ba9fa 	.word	0x000ba9fa

000b5f40 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5f40:	b510      	push	{r4, lr}
    if (uuid128) {
   b5f42:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5f44:	4604      	mov	r4, r0
    if (uuid128) {
   b5f46:	b1b1      	cbz	r1, b5f76 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b5f48:	2a01      	cmp	r2, #1
   b5f4a:	f101 0210 	add.w	r2, r1, #16
   b5f4e:	d10a      	bne.n	b5f66 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b5f50:	4601      	mov	r1, r0
   b5f52:	f853 0b04 	ldr.w	r0, [r3], #4
   b5f56:	f841 0b04 	str.w	r0, [r1], #4
   b5f5a:	4293      	cmp	r3, r2
   b5f5c:	d1f9      	bne.n	b5f52 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b5f5e:	2301      	movs	r3, #1
   b5f60:	6123      	str	r3, [r4, #16]
}
   b5f62:	4620      	mov	r0, r4
   b5f64:	bd10      	pop	{r4, pc}
   b5f66:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b5f68:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b5f6c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b5f70:	429a      	cmp	r2, r3
   b5f72:	d1f9      	bne.n	b5f68 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b5f74:	e7f3      	b.n	b5f5e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b5f76:	2210      	movs	r2, #16
   b5f78:	f003 ff90 	bl	b9e9c <memset>
   b5f7c:	e7f1      	b.n	b5f62 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b5f7e <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b5f7e:	b538      	push	{r3, r4, r5, lr}
   b5f80:	4604      	mov	r4, r0
   b5f82:	460d      	mov	r5, r1
        : BleUuid() {
   b5f84:	f7ff ffaa 	bl	b5edc <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b5f88:	2300      	movs	r3, #0
   b5f8a:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5f8c:	81a5      	strh	r5, [r4, #12]
}
   b5f8e:	4620      	mov	r0, r4
   b5f90:	bd38      	pop	{r3, r4, r5, pc}

000b5f92 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b5f92:	b538      	push	{r3, r4, r5, lr}
   b5f94:	4604      	mov	r4, r0
   b5f96:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b5f98:	461a      	mov	r2, r3
   b5f9a:	f7ff ffd1 	bl	b5f40 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5f9e:	81a5      	strh	r5, [r4, #12]
}
   b5fa0:	4620      	mov	r0, r4
   b5fa2:	bd38      	pop	{r3, r4, r5, pc}

000b5fa4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b5fa4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b5fa6:	6902      	ldr	r2, [r0, #16]
   b5fa8:	b922      	cbnz	r2, b5fb4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b5faa:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5fac:	3800      	subs	r0, #0
   b5fae:	bf18      	it	ne
   b5fb0:	2001      	movne	r0, #1
}
   b5fb2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5fb4:	4902      	ldr	r1, [pc, #8]	; (b5fc0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b5fb6:	2210      	movs	r2, #16
   b5fb8:	f003 ff38 	bl	b9e2c <memcmp>
   b5fbc:	e7f6      	b.n	b5fac <_ZNK8particle7BleUuid7isValidEv+0x8>
   b5fbe:	bf00      	nop
   b5fc0:	000baa1a 	.word	0x000baa1a

000b5fc4 <_ZNK8particle7BleUuid4typeEv>:
}
   b5fc4:	6900      	ldr	r0, [r0, #16]
   b5fc6:	4770      	bx	lr

000b5fc8 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b5fc8:	b538      	push	{r3, r4, r5, lr}
   b5fca:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b5fcc:	2214      	movs	r2, #20
   b5fce:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b5fd0:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b5fd2:	f003 ff63 	bl	b9e9c <memset>
    if (type_ == BleUuidType::SHORT) {
   b5fd6:	6923      	ldr	r3, [r4, #16]
   b5fd8:	b91b      	cbnz	r3, b5fe2 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b5fda:	89a3      	ldrh	r3, [r4, #12]
   b5fdc:	802b      	strh	r3, [r5, #0]
}
   b5fde:	4628      	mov	r0, r5
   b5fe0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b5fe2:	2301      	movs	r3, #1
   b5fe4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b5fe6:	4621      	mov	r1, r4
   b5fe8:	462b      	mov	r3, r5
   b5fea:	f104 0210 	add.w	r2, r4, #16
   b5fee:	f851 0b04 	ldr.w	r0, [r1], #4
   b5ff2:	f843 0b04 	str.w	r0, [r3], #4
   b5ff6:	4291      	cmp	r1, r2
   b5ff8:	d1f9      	bne.n	b5fee <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b5ffa:	e7f0      	b.n	b5fde <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b5ffc <_ZNK8particle7BleUuid7shortedEv>:
}
   b5ffc:	8980      	ldrh	r0, [r0, #12]
   b5ffe:	4770      	bx	lr

000b6000 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6000:	4770      	bx	lr

000b6002 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6002:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6004:	6902      	ldr	r2, [r0, #16]
   b6006:	690b      	ldr	r3, [r1, #16]
   b6008:	429a      	cmp	r2, r3
   b600a:	d106      	bne.n	b601a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b600c:	2210      	movs	r2, #16
   b600e:	f003 ff0d 	bl	b9e2c <memcmp>
   b6012:	fab0 f080 	clz	r0, r0
   b6016:	0940      	lsrs	r0, r0, #5
}
   b6018:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b601a:	2000      	movs	r0, #0
   b601c:	e7fc      	b.n	b6018 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6020 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6020:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6022:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6026:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6028:	4b34      	ldr	r3, [pc, #208]	; (b60fc <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b602a:	460c      	mov	r4, r1
   b602c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b602e:	4602      	mov	r2, r0
   b6030:	f103 0110 	add.w	r1, r3, #16
   b6034:	f853 0b04 	ldr.w	r0, [r3], #4
   b6038:	f842 0b04 	str.w	r0, [r2], #4
   b603c:	428b      	cmp	r3, r1
   b603e:	d1f9      	bne.n	b6034 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6040:	b344      	cbz	r4, b6094 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6042:	2124      	movs	r1, #36	; 0x24
   b6044:	4620      	mov	r0, r4
   b6046:	f003 ff79 	bl	b9f3c <strnlen>
   b604a:	2804      	cmp	r0, #4
   b604c:	f04f 0500 	mov.w	r5, #0
   b6050:	d123      	bne.n	b609a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6052:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6056:	af01      	add	r7, sp, #4
   b6058:	1ca5      	adds	r5, r4, #2
   b605a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b605c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6060:	f7ff fe75 	bl	b5d4e <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6064:	f1b0 0800 	subs.w	r8, r0, #0
   b6068:	db12      	blt.n	b6090 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b606a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b606e:	f7ff fe6e 	bl	b5d4e <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6072:	2800      	cmp	r0, #0
   b6074:	db0c      	blt.n	b6090 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6076:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6078:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b607c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b607e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6082:	d1eb      	bne.n	b605c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6084:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6088:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b608a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b608e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6090:	2300      	movs	r3, #0
   b6092:	6133      	str	r3, [r6, #16]
}
   b6094:	b002      	add	sp, #8
   b6096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b609a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b609e:	2124      	movs	r1, #36	; 0x24
   b60a0:	4620      	mov	r0, r4
   b60a2:	f003 ff4b 	bl	b9f3c <strnlen>
   b60a6:	42a8      	cmp	r0, r5
   b60a8:	d807      	bhi.n	b60ba <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b60aa:	4642      	mov	r2, r8
   b60ac:	2100      	movs	r1, #0
   b60ae:	4630      	mov	r0, r6
}
   b60b0:	b002      	add	sp, #8
   b60b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b60b6:	f003 bef1 	b.w	b9e9c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b60ba:	f1b8 0f00 	cmp.w	r8, #0
   b60be:	d0e9      	beq.n	b6094 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b60c0:	5d60      	ldrb	r0, [r4, r5]
   b60c2:	f7ff fe44 	bl	b5d4e <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b60c6:	0603      	lsls	r3, r0, #24
   b60c8:	d415      	bmi.n	b60f6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b60ca:	0100      	lsls	r0, r0, #4
   b60cc:	f108 38ff 	add.w	r8, r8, #4294967295
   b60d0:	b2c7      	uxtb	r7, r0
   b60d2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b60d6:	2124      	movs	r1, #36	; 0x24
   b60d8:	4620      	mov	r0, r4
   b60da:	f003 ff2f 	bl	b9f3c <strnlen>
   b60de:	3501      	adds	r5, #1
   b60e0:	42a8      	cmp	r0, r5
   b60e2:	d908      	bls.n	b60f6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b60e4:	5d60      	ldrb	r0, [r4, r5]
   b60e6:	f7ff fe32 	bl	b5d4e <_ZN8particle11hexToNibbleEc>
   b60ea:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b60ec:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b60ee:	bfa4      	itt	ge
   b60f0:	4338      	orrge	r0, r7
   b60f2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b60f6:	3501      	adds	r5, #1
   b60f8:	e7d1      	b.n	b609e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b60fa:	bf00      	nop
   b60fc:	000ba9fa 	.word	0x000ba9fa

000b6100 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6100:	b513      	push	{r0, r1, r4, lr}
   b6102:	4604      	mov	r4, r0
   b6104:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6106:	f7ff fee9 	bl	b5edc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b610a:	4620      	mov	r0, r4
   b610c:	9901      	ldr	r1, [sp, #4]
   b610e:	f7ff ff87 	bl	b6020 <_ZN8particle7BleUuid9constructEPKc>
}
   b6112:	4620      	mov	r0, r4
   b6114:	b002      	add	sp, #8
   b6116:	bd10      	pop	{r4, pc}

000b6118 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b6118:	b510      	push	{r4, lr}
   b611a:	f100 030f 	add.w	r3, r0, #15
   b611e:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b6120:	781c      	ldrb	r4, [r3, #0]
   b6122:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6126:	4283      	cmp	r3, r0
   b6128:	f103 33ff 	add.w	r3, r3, #4294967295
   b612c:	d1f8      	bne.n	b6120 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b612e:	bd10      	pop	{r4, pc}

000b6130 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b6130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6134:	461f      	mov	r7, r3
   b6136:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b6138:	460d      	mov	r5, r1
   b613a:	2900      	cmp	r1, #0
   b613c:	d05b      	beq.n	b61f6 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b613e:	b1da      	cbz	r2, b6178 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b6140:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b6144:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b6146:	f1b8 0f00 	cmp.w	r8, #0
   b614a:	d119      	bne.n	b6180 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b614c:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b614e:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b6152:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b6154:	aa05      	add	r2, sp, #20
   b6156:	2102      	movs	r1, #2
   b6158:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b615a:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b615e:	f7ff fda1 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b6162:	2c04      	cmp	r4, #4
   b6164:	bf28      	it	cs
   b6166:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b6168:	4622      	mov	r2, r4
   b616a:	a905      	add	r1, sp, #20
   b616c:	4628      	mov	r0, r5
   b616e:	f003 fe6d 	bl	b9e4c <memcpy>
        buf[len++] = '\0';
   b6172:	f805 8004 	strb.w	r8, [r5, r4]
   b6176:	1c62      	adds	r2, r4, #1
}
   b6178:	4610      	mov	r0, r2
   b617a:	b00e      	add	sp, #56	; 0x38
   b617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b6180:	a901      	add	r1, sp, #4
   b6182:	f7ff ffc9 	bl	b6118 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b6186:	aa05      	add	r2, sp, #20
    if (stripped) {
   b6188:	b17f      	cbz	r7, b61aa <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b618a:	2110      	movs	r1, #16
   b618c:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b618e:	f7ff fd89 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b6192:	2c24      	cmp	r4, #36	; 0x24
   b6194:	bf28      	it	cs
   b6196:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b6198:	4622      	mov	r2, r4
   b619a:	a905      	add	r1, sp, #20
   b619c:	4628      	mov	r0, r5
   b619e:	f003 fe55 	bl	b9e4c <memcpy>
    buf[len++] = '\0';
   b61a2:	2300      	movs	r3, #0
   b61a4:	552b      	strb	r3, [r5, r4]
   b61a6:	1c62      	adds	r2, r4, #1
    return len;
   b61a8:	e7e6      	b.n	b6178 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b61aa:	2104      	movs	r1, #4
   b61ac:	eb0d 0001 	add.w	r0, sp, r1
   b61b0:	f7ff fd78 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b61b4:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b61b6:	f10d 021d 	add.w	r2, sp, #29
   b61ba:	2102      	movs	r1, #2
   b61bc:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b61be:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b61c2:	f7ff fd6f 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b61c6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b61ca:	2102      	movs	r1, #2
   b61cc:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b61d0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b61d4:	f7ff fd66 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b61d8:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b61dc:	2102      	movs	r1, #2
   b61de:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b61e0:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b61e4:	f7ff fd5e 	bl	b5ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b61e8:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b61ec:	aa0b      	add	r2, sp, #44	; 0x2c
   b61ee:	2106      	movs	r1, #6
   b61f0:	f10d 000e 	add.w	r0, sp, #14
   b61f4:	e7cb      	b.n	b618e <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b61f6:	460a      	mov	r2, r1
   b61f8:	e7be      	b.n	b6178 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b61fa <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b61fa:	b510      	push	{r4, lr}
   b61fc:	b08a      	sub	sp, #40	; 0x28
   b61fe:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b6200:	2300      	movs	r3, #0
   b6202:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b6204:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b6206:	4669      	mov	r1, sp
   b6208:	f7ff ff92 	bl	b6130 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b620c:	4669      	mov	r1, sp
   b620e:	4620      	mov	r0, r4
   b6210:	f7ff fbc7 	bl	b59a2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b6214:	4620      	mov	r0, r4
   b6216:	b00a      	add	sp, #40	; 0x28
   b6218:	bd10      	pop	{r4, pc}

000b621a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b621a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b621c:	4605      	mov	r5, r0
   b621e:	4616      	mov	r6, r2
   b6220:	461f      	mov	r7, r3
   b6222:	460a      	mov	r2, r1
   b6224:	ab01      	add	r3, sp, #4
   b6226:	e9d0 0100 	ldrd	r0, r1, [r0]
   b622a:	f7ff fcbb 	bl	b5ba4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b622e:	f030 0402 	bics.w	r4, r0, #2
   b6232:	d00c      	beq.n	b624e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b6234:	1e84      	subs	r4, r0, #2
   b6236:	42bc      	cmp	r4, r7
   b6238:	bf28      	it	cs
   b623a:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b623c:	b13e      	cbz	r6, b624e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b623e:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b6240:	682b      	ldr	r3, [r5, #0]
   b6242:	3102      	adds	r1, #2
   b6244:	4622      	mov	r2, r4
   b6246:	4419      	add	r1, r3
   b6248:	4630      	mov	r0, r6
   b624a:	f003 fdff 	bl	b9e4c <memcpy>
}
   b624e:	4620      	mov	r0, r4
   b6250:	b003      	add	sp, #12
   b6252:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6254 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6254:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6256:	4613      	mov	r3, r2
   b6258:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b625a:	9201      	str	r2, [sp, #4]
   b625c:	460a      	mov	r2, r1
   b625e:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6260:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6262:	f7ff ffda 	bl	b621a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b6266:	b940      	cbnz	r0, b627a <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6268:	9b01      	ldr	r3, [sp, #4]
   b626a:	4622      	mov	r2, r4
   b626c:	2109      	movs	r1, #9
   b626e:	4628      	mov	r0, r5
}
   b6270:	b003      	add	sp, #12
   b6272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6276:	f7ff bfd0 	b.w	b621a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b627a:	b003      	add	sp, #12
   b627c:	bd30      	pop	{r4, r5, pc}
	...

000b6280 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b6280:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6282:	460c      	mov	r4, r1
   b6284:	b089      	sub	sp, #36	; 0x24
    String name;
   b6286:	490c      	ldr	r1, [pc, #48]	; (b62b8 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b6288:	4605      	mov	r5, r0
    String name;
   b628a:	f7ff fb8a 	bl	b59a2 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b628e:	221f      	movs	r2, #31
   b6290:	4669      	mov	r1, sp
   b6292:	4620      	mov	r0, r4
   b6294:	f7ff ffde 	bl	b6254 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b6298:	4606      	mov	r6, r0
   b629a:	b150      	cbz	r0, b62b2 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b629c:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b629e:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b62a0:	f814 1b01 	ldrb.w	r1, [r4], #1
   b62a4:	4628      	mov	r0, r5
   b62a6:	f7ff fbfb 	bl	b5aa0 <_ZN6String6concatEc>
   b62aa:	b110      	cbz	r0, b62b2 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b62ac:	3701      	adds	r7, #1
   b62ae:	42be      	cmp	r6, r7
   b62b0:	d1f6      	bne.n	b62a0 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b62b2:	4628      	mov	r0, r5
   b62b4:	b009      	add	sp, #36	; 0x24
   b62b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b62b8:	000ba08c 	.word	0x000ba08c

000b62bc <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b62bc:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b62be:	2302      	movs	r3, #2
   b62c0:	aa01      	add	r2, sp, #4
   b62c2:	2119      	movs	r1, #25
   b62c4:	f7ff ffa9 	bl	b621a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b62c8:	b108      	cbz	r0, b62ce <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b62ca:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b62ce:	b003      	add	sp, #12
   b62d0:	f85d fb04 	ldr.w	pc, [sp], #4

000b62d4 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b62d4:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b62d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b62da:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b62dc:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b62de:	8043      	strh	r3, [r0, #2]
   b62e0:	220e      	movs	r2, #14
   b62e2:	4629      	mov	r1, r5
   b62e4:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b62e6:	7105      	strb	r5, [r0, #4]
   b62e8:	3006      	adds	r0, #6
   b62ea:	f003 fdd7 	bl	b9e9c <memset>
   b62ee:	f104 0014 	add.w	r0, r4, #20
   b62f2:	f7ff fdf3 	bl	b5edc <_ZN8particle7BleUuidC1Ev>
   b62f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b62fa:	f7ff fdef 	bl	b5edc <_ZN8particle7BleUuidC1Ev>
   b62fe:	4904      	ldr	r1, [pc, #16]	; (b6310 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6300:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6304:	f7ff fb4d 	bl	b59a2 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6308:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b630a:	4620      	mov	r0, r4
   b630c:	bd38      	pop	{r3, r4, r5, pc}
   b630e:	bf00      	nop
   b6310:	000ba08c 	.word	0x000ba08c

000b6314 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b6314:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6316:	680d      	ldr	r5, [r1, #0]
   b6318:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b631a:	4601      	mov	r1, r0
   b631c:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b6320:	f7ff fe6f 	bl	b6002 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b6324:	b140      	cbz	r0, b6338 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b6326:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b6328:	8aa2      	ldrh	r2, [r4, #20]
   b632a:	429a      	cmp	r2, r3
   b632c:	d805      	bhi.n	b633a <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b632e:	8ae0      	ldrh	r0, [r4, #22]
   b6330:	4298      	cmp	r0, r3
   b6332:	bf34      	ite	cc
   b6334:	2000      	movcc	r0, #0
   b6336:	2001      	movcs	r0, #1
    }
   b6338:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b633a:	2000      	movs	r0, #0
   b633c:	e7fc      	b.n	b6338 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b633e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b633e:	b510      	push	{r4, lr}
    return data_ + size_;
   b6340:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6344:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6348:	4293      	cmp	r3, r2
   b634a:	4618      	mov	r0, r3
   b634c:	d006      	beq.n	b635c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b634e:	6804      	ldr	r4, [r0, #0]
   b6350:	8824      	ldrh	r4, [r4, #0]
   b6352:	428c      	cmp	r4, r1
   b6354:	f103 0308 	add.w	r3, r3, #8
   b6358:	d1f6      	bne.n	b6348 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b635a:	bd10      	pop	{r4, pc}
        return nullptr;
   b635c:	2000      	movs	r0, #0
   b635e:	e7fc      	b.n	b635a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b6360 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6360:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b6362:	b570      	push	{r4, r5, r6, lr}
   b6364:	6003      	str	r3, [r0, #0]
   b6366:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6368:	2068      	movs	r0, #104	; 0x68
   b636a:	f7fd fe92 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b636e:	1e04      	subs	r4, r0, #0
   b6370:	f104 060c 	add.w	r6, r4, #12
   b6374:	d007      	beq.n	b6386 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b6376:	2301      	movs	r3, #1
   b6378:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b637c:	4b04      	ldr	r3, [pc, #16]	; (b6390 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b637e:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6380:	4630      	mov	r0, r6
   b6382:	f7ff ffa7 	bl	b62d4 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b6386:	e9c5 6400 	strd	r6, r4, [r5]
}
   b638a:	4628      	mov	r0, r5
   b638c:	bd70      	pop	{r4, r5, r6, pc}
   b638e:	bf00      	nop
   b6390:	000ba9a0 	.word	0x000ba9a0

000b6394 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b6394:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b6396:	680c      	ldr	r4, [r1, #0]
   b6398:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b639a:	4606      	mov	r6, r0
    return impl()->charUUID();
   b639c:	4605      	mov	r5, r0
   b639e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b63a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b63a2:	6823      	ldr	r3, [r4, #0]
   b63a4:	602b      	str	r3, [r5, #0]
}
   b63a6:	4630      	mov	r0, r6
   b63a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b63ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b63ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63ae:	4606      	mov	r6, r0
   b63b0:	b085      	sub	sp, #20
   b63b2:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b63b4:	460d      	mov	r5, r1
   b63b6:	2900      	cmp	r1, #0
   b63b8:	d050      	beq.n	b645c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b63ba:	2a00      	cmp	r2, #0
   b63bc:	d04e      	beq.n	b645c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b63be:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b63c0:	7823      	ldrb	r3, [r4, #0]
   b63c2:	2af4      	cmp	r2, #244	; 0xf4
   b63c4:	bf28      	it	cs
   b63c6:	22f4      	movcs	r2, #244	; 0xf4
   b63c8:	b343      	cbz	r3, b641c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b63ca:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b63cc:	0798      	lsls	r0, r3, #30
   b63ce:	d509      	bpl.n	b63e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b63d0:	89a0      	ldrh	r0, [r4, #12]
   b63d2:	9203      	str	r2, [sp, #12]
   b63d4:	2300      	movs	r3, #0
   b63d6:	f7fe ff15 	bl	b5204 <hal_ble_gatt_server_set_characteristic_value>
   b63da:	2800      	cmp	r0, #0
   b63dc:	9a03      	ldr	r2, [sp, #12]
   b63de:	da03      	bge.n	b63e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b63e0:	b005      	add	sp, #20
   b63e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b63e4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b63e8:	6834      	ldr	r4, [r6, #0]
   b63ea:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b63ec:	06d9      	lsls	r1, r3, #27
   b63ee:	d509      	bpl.n	b6404 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b63f0:	2f01      	cmp	r7, #1
   b63f2:	d007      	beq.n	b6404 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b63f4:	89a0      	ldrh	r0, [r4, #12]
   b63f6:	2300      	movs	r3, #0
   b63f8:	4629      	mov	r1, r5
}
   b63fa:	b005      	add	sp, #20
   b63fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6400:	f7fe bf64 	b.w	b52cc <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6404:	069b      	lsls	r3, r3, #26
   b6406:	d5eb      	bpl.n	b63e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6408:	2f02      	cmp	r7, #2
   b640a:	d0e9      	beq.n	b63e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b640c:	89a0      	ldrh	r0, [r4, #12]
   b640e:	2300      	movs	r3, #0
   b6410:	4629      	mov	r1, r5
}
   b6412:	b005      	add	sp, #20
   b6414:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6418:	f7fe bf62 	b.w	b52e0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b641c:	8860      	ldrh	r0, [r4, #2]
   b641e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6422:	4288      	cmp	r0, r1
   b6424:	d01c      	beq.n	b6460 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6426:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6428:	074e      	lsls	r6, r1, #29
   b642a:	d501      	bpl.n	b6430 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b642c:	2f01      	cmp	r7, #1
   b642e:	d104      	bne.n	b643a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6430:	070b      	lsls	r3, r1, #28
   b6432:	d409      	bmi.n	b6448 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6434:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6438:	e7d2      	b.n	b63e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b643a:	89a1      	ldrh	r1, [r4, #12]
   b643c:	9300      	str	r3, [sp, #0]
   b643e:	4613      	mov	r3, r2
   b6440:	462a      	mov	r2, r5
   b6442:	f7fe ff07 	bl	b5254 <hal_ble_gatt_client_write_without_response>
   b6446:	e7cb      	b.n	b63e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6448:	2f02      	cmp	r7, #2
   b644a:	d0f3      	beq.n	b6434 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b644c:	2300      	movs	r3, #0
   b644e:	89a1      	ldrh	r1, [r4, #12]
   b6450:	9300      	str	r3, [sp, #0]
   b6452:	4613      	mov	r3, r2
   b6454:	462a      	mov	r2, r5
   b6456:	f7fe fef3 	bl	b5240 <hal_ble_gatt_client_write_with_response>
   b645a:	e7c1      	b.n	b63e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b645c:	4802      	ldr	r0, [pc, #8]	; (b6468 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b645e:	e7bf      	b.n	b63e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6460:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6464:	e7bc      	b.n	b63e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6466:	bf00      	nop
   b6468:	fffffef2 	.word	0xfffffef2

000b646c <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b646c:	b510      	push	{r4, lr}
   b646e:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b6470:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b6472:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b6474:	bb52      	cbnz	r2, b64cc <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b6476:	885c      	ldrh	r4, [r3, #2]
   b6478:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b647c:	4284      	cmp	r4, r0
   b647e:	d025      	beq.n	b64cc <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b6480:	8a18      	ldrh	r0, [r3, #16]
   b6482:	b330      	cbz	r0, b64d2 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b6484:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b6488:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b648a:	4a13      	ldr	r2, [pc, #76]	; (b64d8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b648c:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b648e:	4a13      	ldr	r2, [pc, #76]	; (b64dc <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b6490:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b6494:	885a      	ldrh	r2, [r3, #2]
   b6496:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b649a:	8a1a      	ldrh	r2, [r3, #16]
   b649c:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b64a0:	899a      	ldrh	r2, [r3, #12]
   b64a2:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b64a6:	b159      	cbz	r1, b64c0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b64a8:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b64aa:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b64ac:	bf44      	itt	mi
   b64ae:	2202      	movmi	r2, #2
   b64b0:	9205      	strmi	r2, [sp, #20]
   b64b2:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b64b4:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b64b6:	bf42      	ittt	mi
   b64b8:	9b05      	ldrmi	r3, [sp, #20]
   b64ba:	f043 0301 	orrmi.w	r3, r3, #1
   b64be:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b64c0:	2100      	movs	r1, #0
   b64c2:	4668      	mov	r0, sp
   b64c4:	f7fe fef8 	bl	b52b8 <hal_ble_gatt_client_configure_cccd>
}
   b64c8:	b006      	add	sp, #24
   b64ca:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b64cc:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b64d0:	e7fa      	b.n	b64c8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b64d2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b64d6:	e7f7      	b.n	b64c8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b64d8:	00180003 	.word	0x00180003
   b64dc:	000b66f9 	.word	0x000b66f9

000b64e0 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b64e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b64e2:	2600      	movs	r6, #0
   b64e4:	6006      	str	r6, [r0, #0]
   b64e6:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b64e8:	2028      	movs	r0, #40	; 0x28
   b64ea:	f7fd fdd2 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b64ee:	1e04      	subs	r4, r0, #0
   b64f0:	f104 070c 	add.w	r7, r4, #12
   b64f4:	d00a      	beq.n	b650c <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b64f6:	2301      	movs	r3, #1
   b64f8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b64fc:	4b05      	ldr	r3, [pc, #20]	; (b6514 <_ZN8particle10BleServiceC1Ev+0x34>)
   b64fe:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b6500:	4638      	mov	r0, r7
   b6502:	f7ff fceb 	bl	b5edc <_ZN8particle7BleUuidC1Ev>
   b6506:	6226      	str	r6, [r4, #32]
   b6508:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b650c:	e9c5 7400 	strd	r7, r4, [r5]
}
   b6510:	4628      	mov	r0, r5
   b6512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6514:	000ba9bc 	.word	0x000ba9bc

000b6518 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
BleService::BleService(const BleUuid& uuid)
   b6518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b651c:	2600      	movs	r6, #0
   b651e:	6006      	str	r6, [r0, #0]
   b6520:	4607      	mov	r7, r0
   b6522:	2028      	movs	r0, #40	; 0x28
   b6524:	460c      	mov	r4, r1
   b6526:	f7fd fdb4 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b652a:	1e05      	subs	r5, r0, #0
   b652c:	f105 080c 	add.w	r8, r5, #12
   b6530:	d00f      	beq.n	b6552 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6532:	2301      	movs	r3, #1
   b6534:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6538:	4b08      	ldr	r3, [pc, #32]	; (b655c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b653a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b653c:	4640      	mov	r0, r8
   b653e:	f7ff fccd 	bl	b5edc <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6544:	622e      	str	r6, [r5, #32]
   b6546:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b654a:	4646      	mov	r6, r8
   b654c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b654e:	6823      	ldr	r3, [r4, #0]
   b6550:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6552:	e9c7 8500 	strd	r8, r5, [r7]
}
   b6556:	4638      	mov	r0, r7
   b6558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b655c:	000ba9bc 	.word	0x000ba9bc

000b6560 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6560:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6562:	2500      	movs	r5, #0
   b6564:	6005      	str	r5, [r0, #0]
   b6566:	4606      	mov	r6, r0
   b6568:	2030      	movs	r0, #48	; 0x30
   b656a:	f7fd fd92 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b656e:	4604      	mov	r4, r0
   b6570:	b188      	cbz	r0, b6596 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6572:	2301      	movs	r3, #1
   b6574:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6578:	4b09      	ldr	r3, [pc, #36]	; (b65a0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b657a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b657c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6580:	8183      	strh	r3, [r0, #12]
   b6582:	300e      	adds	r0, #14
   b6584:	f7ff fc33 	bl	b5dee <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6588:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b658c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6590:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6594:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6596:	6074      	str	r4, [r6, #4]
   b6598:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b659a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b659c:	4630      	mov	r0, r6
   b659e:	bd70      	pop	{r4, r5, r6, pc}
   b65a0:	000ba9d8 	.word	0x000ba9d8

000b65a4 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b65a4:	b513      	push	{r0, r1, r4, lr}
   b65a6:	4604      	mov	r4, r0
    WiringBleLock lk;
   b65a8:	a801      	add	r0, sp, #4
   b65aa:	f7ff fbe5 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b65ae:	6823      	ldr	r3, [r4, #0]
   b65b0:	881c      	ldrh	r4, [r3, #0]
   b65b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b65b6:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b65b8:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b65ba:	bf18      	it	ne
   b65bc:	2401      	movne	r4, #1
    WiringBleLock lk;
   b65be:	f7ff fbe9 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b65c2:	4620      	mov	r0, r4
   b65c4:	b002      	add	sp, #8
   b65c6:	bd10      	pop	{r4, pc}

000b65c8 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b65c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b65ca:	4605      	mov	r5, r0
   b65cc:	460c      	mov	r4, r1
    WiringBleLock lk;
   b65ce:	a801      	add	r0, sp, #4
   b65d0:	f7ff fbd2 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b65d4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b65d6:	6823      	ldr	r3, [r4, #0]
   b65d8:	f8c2 3002 	str.w	r3, [r2, #2]
   b65dc:	6863      	ldr	r3, [r4, #4]
   b65de:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b65e2:	a801      	add	r0, sp, #4
   b65e4:	f7ff fbd6 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b65e8:	b003      	add	sp, #12
   b65ea:	bd30      	pop	{r4, r5, pc}

000b65ec <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b65ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b65ee:	460d      	mov	r5, r1
   b65f0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b65f2:	a801      	add	r0, sp, #4
   b65f4:	f7ff fbc0 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
   b65f8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b65fa:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b65fe:	6023      	str	r3, [r4, #0]
   b6600:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6604:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6606:	a801      	add	r0, sp, #4
   b6608:	f7ff fbc4 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b660c:	4620      	mov	r0, r4
   b660e:	b003      	add	sp, #12
   b6610:	bd30      	pop	{r4, r5, pc}

000b6612 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6612:	b530      	push	{r4, r5, lr}
   b6614:	4605      	mov	r5, r0
   b6616:	b087      	sub	sp, #28
   b6618:	460c      	mov	r4, r1
    WiringBleLock lk;
   b661a:	a801      	add	r0, sp, #4
   b661c:	f7ff fbac 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6620:	682a      	ldr	r2, [r5, #0]
   b6622:	6823      	ldr	r3, [r4, #0]
   b6624:	8812      	ldrh	r2, [r2, #0]
   b6626:	881b      	ldrh	r3, [r3, #0]
   b6628:	429a      	cmp	r2, r3
   b662a:	d10d      	bne.n	b6648 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b662c:	4629      	mov	r1, r5
   b662e:	a802      	add	r0, sp, #8
   b6630:	f7ff ffdc 	bl	b65ec <_ZNK8particle13BlePeerDevice7addressEv>
   b6634:	4621      	mov	r1, r4
   b6636:	a804      	add	r0, sp, #16
   b6638:	f7ff ffd8 	bl	b65ec <_ZNK8particle13BlePeerDevice7addressEv>
   b663c:	a904      	add	r1, sp, #16
   b663e:	a802      	add	r0, sp, #8
   b6640:	f7ff fbc1 	bl	b5dc6 <_ZNK8particle10BleAddresseqERKS0_>
   b6644:	4604      	mov	r4, r0
   b6646:	b900      	cbnz	r0, b664a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6648:	2400      	movs	r4, #0
    WiringBleLock lk;
   b664a:	a801      	add	r0, sp, #4
   b664c:	f7ff fba2 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6650:	4620      	mov	r0, r4
   b6652:	b007      	add	sp, #28
   b6654:	bd30      	pop	{r4, r5, pc}
	...

000b6658 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6658:	b510      	push	{r4, lr}
   b665a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b665c:	2064      	movs	r0, #100	; 0x64
   b665e:	f7fd fd18 	bl	b4092 <_Znwj>
   b6662:	b168      	cbz	r0, b6680 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6664:	2300      	movs	r3, #0
   b6666:	e9c0 3300 	strd	r3, r3, [r0]
   b666a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b666e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6672:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6676:	6203      	str	r3, [r0, #32]
   b6678:	62c3      	str	r3, [r0, #44]	; 0x2c
   b667a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b667c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b667e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6680:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6682:	b920      	cbnz	r0, b668e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6684:	4a0a      	ldr	r2, [pc, #40]	; (b66b0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6686:	490b      	ldr	r1, [pc, #44]	; (b66b4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6688:	200a      	movs	r0, #10
   b668a:	f7fe ff63 	bl	b5554 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b668e:	2000      	movs	r0, #0
   b6690:	f7fe fd72 	bl	b5178 <hal_ble_stack_init>
   b6694:	b120      	cbz	r0, b66a0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6696:	4a06      	ldr	r2, [pc, #24]	; (b66b0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6698:	4907      	ldr	r1, [pc, #28]	; (b66b8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b669a:	200a      	movs	r0, #10
   b669c:	f7fe ff5a 	bl	b5554 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b66a0:	6821      	ldr	r1, [r4, #0]
   b66a2:	4806      	ldr	r0, [pc, #24]	; (b66bc <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b66a4:	2200      	movs	r2, #0
   b66a6:	f7fe fdfd 	bl	b52a4 <hal_ble_set_callback_on_periph_link_events>
}
   b66aa:	4620      	mov	r0, r4
   b66ac:	bd10      	pop	{r4, pc}
   b66ae:	bf00      	nop
   b66b0:	000b5159 	.word	0x000b5159
   b66b4:	000ba728 	.word	0x000ba728
   b66b8:	000ba766 	.word	0x000ba766
   b66bc:	000b711d 	.word	0x000b711d

000b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b66c0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b66c2:	4c0a      	ldr	r4, [pc, #40]	; (b66ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b66c4:	7823      	ldrb	r3, [r4, #0]
   b66c6:	f3bf 8f5b 	dmb	ish
   b66ca:	07db      	lsls	r3, r3, #31
   b66cc:	d40c      	bmi.n	b66e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b66ce:	4620      	mov	r0, r4
   b66d0:	f7fd fcf2 	bl	b40b8 <__cxa_guard_acquire>
   b66d4:	b140      	cbz	r0, b66e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b66d6:	4806      	ldr	r0, [pc, #24]	; (b66f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b66d8:	f7ff ffbe 	bl	b6658 <_ZN8particle14BleLocalDeviceC1Ev>
   b66dc:	4620      	mov	r0, r4
   b66de:	f7fd fcf0 	bl	b40c2 <__cxa_guard_release>
   b66e2:	4804      	ldr	r0, [pc, #16]	; (b66f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b66e4:	f003 fb9c 	bl	b9e20 <atexit>
    return instance;
}
   b66e8:	4801      	ldr	r0, [pc, #4]	; (b66f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b66ea:	bd10      	pop	{r4, pc}
   b66ec:	2003e6d0 	.word	0x2003e6d0
   b66f0:	2003e6dc 	.word	0x2003e6dc
   b66f4:	000b69fd 	.word	0x000b69fd

000b66f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b66f8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b66fa:	6803      	ldr	r3, [r0, #0]
   b66fc:	3b09      	subs	r3, #9
   b66fe:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6700:	b08d      	sub	sp, #52	; 0x34
   b6702:	4604      	mov	r4, r0
   b6704:	460d      	mov	r5, r1
    switch (event->type) {
   b6706:	d811      	bhi.n	b672c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6708:	f7ff ffda 	bl	b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b670c:	88a1      	ldrh	r1, [r4, #4]
   b670e:	6800      	ldr	r0, [r0, #0]
   b6710:	f7ff fe15 	bl	b633e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6714:	4603      	mov	r3, r0
   b6716:	b958      	cbnz	r0, b6730 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6718:	2220      	movs	r2, #32
   b671a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b671e:	4a0b      	ldr	r2, [pc, #44]	; (b674c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6720:	9200      	str	r2, [sp, #0]
   b6722:	490b      	ldr	r1, [pc, #44]	; (b6750 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6724:	aa04      	add	r2, sp, #16
   b6726:	2032      	movs	r0, #50	; 0x32
   b6728:	f7fe ff1c 	bl	b5564 <log_message>
}
   b672c:	b00d      	add	sp, #52	; 0x34
   b672e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6730:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6732:	2a00      	cmp	r2, #0
   b6734:	d0fa      	beq.n	b672c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6736:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b673a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b673e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6742:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6744:	aa04      	add	r2, sp, #16
   b6746:	a903      	add	r1, sp, #12
   b6748:	47a0      	blx	r4
}
   b674a:	e7ef      	b.n	b672c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b674c:	000ba7a8 	.word	0x000ba7a8
   b6750:	000ba73f 	.word	0x000ba73f

000b6754 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6754:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6756:	2000      	movs	r0, #0
   b6758:	f7fe fd0e 	bl	b5178 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b675c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6760:	bd08      	pop	{r3, pc}

000b6762 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6762:	b919      	cbnz	r1, b676c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6764:	460a      	mov	r2, r1
   b6766:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6768:	f7fe bd0e 	b.w	b5188 <hal_ble_gap_set_advertising_data>
   b676c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6770:	2200      	movs	r2, #0
   b6772:	e7f9      	b.n	b6768 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6774 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b6774:	b510      	push	{r4, lr}
   b6776:	4604      	mov	r4, r0
    ::free(ptr);
   b6778:	6940      	ldr	r0, [r0, #20]
   b677a:	f7fe ff8f 	bl	b569c <free>
   b677e:	68a0      	ldr	r0, [r4, #8]
   b6780:	f7fe ff8c 	bl	b569c <free>
   b6784:	4620      	mov	r0, r4
   b6786:	bd10      	pop	{r4, pc}

000b6788 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b6788:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b678a:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b678e:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   b6792:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b6796:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b679a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b679e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b67a2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b67a6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b67aa:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b67ae:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b67b2:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b67b6:	6202      	str	r2, [r0, #32]
   b67b8:	6302      	str	r2, [r0, #48]	; 0x30
   b67ba:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   b67be:	4770      	bx	lr

000b67c0 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b67c0:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b67c2:	69d8      	ldr	r0, [r3, #28]
}
   b67c4:	2800      	cmp	r0, #0
   b67c6:	bfd4      	ite	le
   b67c8:	2000      	movle	r0, #0
   b67ca:	2001      	movgt	r0, #1
   b67cc:	4770      	bx	lr

000b67ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b67ce:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b67d0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b67d4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b67d6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b67da:	42ae      	cmp	r6, r5
   b67dc:	d004      	beq.n	b67e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b67de:	4628      	mov	r0, r5
   b67e0:	f7ff f894 	bl	b590c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b67e4:	3510      	adds	r5, #16
   b67e6:	e7f8      	b.n	b67da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b67e8:	6820      	ldr	r0, [r4, #0]
   b67ea:	f7fe ff57 	bl	b569c <free>
}
   b67ee:	4620      	mov	r0, r4
   b67f0:	bd70      	pop	{r4, r5, r6, pc}

000b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b67f2:	b510      	push	{r4, lr}
   b67f4:	4604      	mov	r4, r0
    ::free(ptr);
   b67f6:	6800      	ldr	r0, [r0, #0]
   b67f8:	f7fe ff50 	bl	b569c <free>
}
   b67fc:	4620      	mov	r0, r4
   b67fe:	bd10      	pop	{r4, pc}

000b6800 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b6800:	b570      	push	{r4, r5, r6, lr}
   b6802:	4604      	mov	r4, r0
    ::free(ptr);
   b6804:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b6806:	f7fe ff49 	bl	b569c <free>
   b680a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b680c:	f7fe ff46 	bl	b569c <free>
    }
    ~BleScanFilter() = default;
   b6810:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b6814:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6818:	f7ff ffeb 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b681c:	4628      	mov	r0, r5
   b681e:	f7ff ffd6 	bl	b67ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b6822:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6826:	f7ff fa5a 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
   b682a:	f104 0018 	add.w	r0, r4, #24
   b682e:	f7ff fa56 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6832:	e9d4 5300 	ldrd	r5, r3, [r4]
   b6836:	2624      	movs	r6, #36	; 0x24
   b6838:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b683c:	42ae      	cmp	r6, r5
   b683e:	d004      	beq.n	b684a <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b6840:	4628      	mov	r0, r5
   b6842:	f7ff ff97 	bl	b6774 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b6846:	3524      	adds	r5, #36	; 0x24
   b6848:	e7f8      	b.n	b683c <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b684a:	6820      	ldr	r0, [r4, #0]
   b684c:	f7fe ff26 	bl	b569c <free>
   b6850:	4620      	mov	r0, r4
   b6852:	bd70      	pop	{r4, r5, r6, pc}

000b6854 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6854:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6856:	1e14      	subs	r4, r2, #0
   b6858:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b685a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b685c:	db02      	blt.n	b6864 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b685e:	1862      	adds	r2, r4, r1
   b6860:	429a      	cmp	r2, r3
   b6862:	dd00      	ble.n	b6866 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6864:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6866:	682a      	ldr	r2, [r5, #0]
   b6868:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b686a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b686c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b686e:	1a52      	subs	r2, r2, r1
   b6870:	f003 fafa 	bl	b9e68 <memmove>
    size_ -= n;
   b6874:	686a      	ldr	r2, [r5, #4]
   b6876:	1b12      	subs	r2, r2, r4
   b6878:	606a      	str	r2, [r5, #4]
}
   b687a:	bd38      	pop	{r3, r4, r5, pc}

000b687c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b687c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b687e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6880:	4604      	mov	r4, r0
   b6882:	460d      	mov	r5, r1
   b6884:	ab01      	add	r3, sp, #4
   b6886:	e9d0 0100 	ldrd	r0, r1, [r0]
   b688a:	f7ff f98b 	bl	b5ba4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b688e:	4602      	mov	r2, r0
   b6890:	b138      	cbz	r0, b68a2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6892:	9901      	ldr	r1, [sp, #4]
   b6894:	4620      	mov	r0, r4
   b6896:	f7ff ffdd 	bl	b6854 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b689a:	4629      	mov	r1, r5
   b689c:	4620      	mov	r0, r4
   b689e:	f7ff ffed 	bl	b687c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b68a2:	b003      	add	sp, #12
   b68a4:	bd30      	pop	{r4, r5, pc}

000b68a6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b68a6:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b68a8:	460c      	mov	r4, r1
   b68aa:	b929      	cbnz	r1, b68b8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b68ac:	460a      	mov	r2, r1
   b68ae:	4608      	mov	r0, r1
}
   b68b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b68b4:	f7fe bc70 	b.w	b5198 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b68b8:	2101      	movs	r1, #1
   b68ba:	4620      	mov	r0, r4
   b68bc:	f7ff ffde 	bl	b687c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b68c0:	e9d4 0100 	ldrd	r0, r1, [r4]
   b68c4:	2200      	movs	r2, #0
   b68c6:	e7f3      	b.n	b68b0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b68c8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b68c8:	b538      	push	{r3, r4, r5, lr}
   b68ca:	4604      	mov	r4, r0
   b68cc:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b68ce:	f7ff ff48 	bl	b6762 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b68d2:	2800      	cmp	r0, #0
   b68d4:	db0a      	blt.n	b68ec <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b68d6:	4629      	mov	r1, r5
   b68d8:	4620      	mov	r0, r4
   b68da:	f7ff ffe4 	bl	b68a6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b68de:	2800      	cmp	r0, #0
   b68e0:	db04      	blt.n	b68ec <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b68e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b68e6:	2000      	movs	r0, #0
   b68e8:	f7fe bc5e 	b.w	b51a8 <hal_ble_gap_start_advertising>
}
   b68ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000b68f0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b68f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b68f2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b68f4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b68f6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b68f8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b68fa:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b68fc:	f7fd fbc9 	bl	b4092 <_Znwj>
   b6900:	b118      	cbz	r0, b690a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6902:	682b      	ldr	r3, [r5, #0]
   b6904:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6906:	686b      	ldr	r3, [r5, #4]
   b6908:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b690a:	4b03      	ldr	r3, [pc, #12]	; (b6918 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b690c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b690e:	4b03      	ldr	r3, [pc, #12]	; (b691c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6910:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6912:	60a3      	str	r3, [r4, #8]
      }
   b6914:	4620      	mov	r0, r4
   b6916:	bd38      	pop	{r3, r4, r5, pc}
   b6918:	000b5be5 	.word	0x000b5be5
   b691c:	000b5bfd 	.word	0x000b5bfd

000b6920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6920:	680b      	ldr	r3, [r1, #0]
   b6922:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6924:	b113      	cbz	r3, b692c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6926:	685a      	ldr	r2, [r3, #4]
   b6928:	3201      	adds	r2, #1
   b692a:	605a      	str	r2, [r3, #4]
      }
   b692c:	4770      	bx	lr

000b692e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b692e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6930:	f851 3b04 	ldr.w	r3, [r1], #4
   b6934:	4604      	mov	r4, r0
   b6936:	f840 3b04 	str.w	r3, [r0], #4
   b693a:	f7ff fff1 	bl	b6920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b693e:	6823      	ldr	r3, [r4, #0]
   b6940:	b90b      	cbnz	r3, b6946 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6942:	f7ff f945 	bl	b5bd0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6946:	4620      	mov	r0, r4
   b6948:	bd10      	pop	{r4, pc}

000b694a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b694a:	b510      	push	{r4, lr}
   b694c:	f851 3b04 	ldr.w	r3, [r1], #4
   b6950:	4604      	mov	r4, r0
   b6952:	f840 3b04 	str.w	r3, [r0], #4
   b6956:	f7ff ffe3 	bl	b6920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b695a:	4620      	mov	r0, r4
   b695c:	bd10      	pop	{r4, pc}

000b695e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b695e:	b510      	push	{r4, lr}
   b6960:	f851 3b04 	ldr.w	r3, [r1], #4
   b6964:	4604      	mov	r4, r0
   b6966:	f840 3b04 	str.w	r3, [r0], #4
   b696a:	f7ff ffd9 	bl	b6920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b696e:	4620      	mov	r0, r4
   b6970:	bd10      	pop	{r4, pc}

000b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6972:	b510      	push	{r4, lr}
   b6974:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6976:	6800      	ldr	r0, [r0, #0]
   b6978:	b108      	cbz	r0, b697e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b697a:	f7ff f9c4 	bl	b5d06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b697e:	4620      	mov	r0, r4
   b6980:	bd10      	pop	{r4, pc}

000b6982 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6982:	b510      	push	{r4, lr}
   b6984:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6986:	3004      	adds	r0, #4
   b6988:	f7ff fff3 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b698c:	4620      	mov	r0, r4
   b698e:	bd10      	pop	{r4, pc}

000b6990 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b6990:	b510      	push	{r4, lr}
   b6992:	4604      	mov	r4, r0
   b6994:	3004      	adds	r0, #4
   b6996:	f7ff ffec 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b699a:	4620      	mov	r0, r4
   b699c:	bd10      	pop	{r4, pc}

000b699e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b699e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b69a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b69a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b69a6:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b69aa:	42ae      	cmp	r6, r5
   b69ac:	d004      	beq.n	b69b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b69ae:	1d28      	adds	r0, r5, #4
   b69b0:	f7ff ffdf 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b69b4:	3508      	adds	r5, #8
   b69b6:	e7f8      	b.n	b69aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b69b8:	6820      	ldr	r0, [r4, #0]
   b69ba:	f7fe fe6f 	bl	b569c <free>
}
   b69be:	4620      	mov	r0, r4
   b69c0:	bd70      	pop	{r4, r5, r6, pc}

000b69c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b69c2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b69c4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b69c8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b69ca:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b69ce:	42ae      	cmp	r6, r5
   b69d0:	d004      	beq.n	b69dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b69d2:	1d28      	adds	r0, r5, #4
   b69d4:	f7ff ffcd 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b69d8:	3508      	adds	r5, #8
   b69da:	e7f8      	b.n	b69ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b69dc:	6820      	ldr	r0, [r4, #0]
   b69de:	f7fe fe5d 	bl	b569c <free>
}
   b69e2:	4620      	mov	r0, r4
   b69e4:	bd70      	pop	{r4, r5, r6, pc}

000b69e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b69e6:	b510      	push	{r4, lr}
   b69e8:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b69ea:	3024      	adds	r0, #36	; 0x24
   b69ec:	f7ff ffe9 	bl	b69c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b69f0:	f104 0018 	add.w	r0, r4, #24
   b69f4:	f7ff ffd3 	bl	b699e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b69f8:	bd10      	pop	{r4, pc}
	...

000b69fc <__tcf_0>:
    static BleLocalDevice instance;
   b69fc:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b69fe:	4b17      	ldr	r3, [pc, #92]	; (b6a5c <__tcf_0+0x60>)
   b6a00:	681c      	ldr	r4, [r3, #0]
   b6a02:	b354      	cbz	r4, b6a5a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6a04:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6a08:	f7ff f969 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
   b6a0c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6a10:	f7ff f965 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
   b6a14:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6a18:	f7ff f961 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
   b6a1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6a20:	f7ff f95d 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6a24:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6a28:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6a2c:	42ae      	cmp	r6, r5
   b6a2e:	d004      	beq.n	b6a3a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6a30:	1d28      	adds	r0, r5, #4
   b6a32:	f7ff ff9e 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a36:	3508      	adds	r5, #8
   b6a38:	e7f8      	b.n	b6a2c <__tcf_0+0x30>
    ::free(ptr);
   b6a3a:	69a0      	ldr	r0, [r4, #24]
   b6a3c:	f7fe fe2e 	bl	b569c <free>
    ~BleLocalDeviceImpl() = default;
   b6a40:	f104 000c 	add.w	r0, r4, #12
   b6a44:	f7ff ffbd 	bl	b69c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6a48:	4620      	mov	r0, r4
   b6a4a:	f7ff ffa8 	bl	b699e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6a4e:	4620      	mov	r0, r4
   b6a50:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6a56:	f7fd bb20 	b.w	b409a <_ZdlPvj>
   b6a5a:	bd70      	pop	{r4, r5, r6, pc}
   b6a5c:	2003e6dc 	.word	0x2003e6dc

000b6a60 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6a60:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6a62:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6a64:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6a68:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b6a6c:	6803      	ldr	r3, [r0, #0]
   b6a6e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a70:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6a72:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6a74:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6a76:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6a78:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6a7a:	f7ff ff7a 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6a7e:	b002      	add	sp, #8
   b6a80:	bd10      	pop	{r4, pc}

000b6a82 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6a82:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6a84:	b510      	push	{r4, lr}
      if (_M_empty())
   b6a86:	b90a      	cbnz	r2, b6a8c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6a88:	f002 fc00 	bl	b928c <_ZSt25__throw_bad_function_callv>
    }
   b6a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a90:	68c3      	ldr	r3, [r0, #12]
   b6a92:	4718      	bx	r3

000b6a94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b6a98:	2300      	movs	r3, #0
   b6a9a:	e9c0 3300 	strd	r3, r3, [r0]
   b6a9e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6aa0:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b6aa4:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6aa6:	4605      	mov	r5, r0
   b6aa8:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6aaa:	dd4a      	ble.n	b6b42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b6aac:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b6ab0:	f7fe fdec 	bl	b568c <malloc>
            if (!d) {
   b6ab4:	4606      	mov	r6, r0
   b6ab6:	2800      	cmp	r0, #0
   b6ab8:	d043      	beq.n	b6b42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b6aba:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b6abe:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b6ac0:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b6ac4:	d916      	bls.n	b6af4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b6ac6:	4550      	cmp	r0, sl
   b6ac8:	d215      	bcs.n	b6af6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b6aca:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b6ace:	f1a4 0910 	sub.w	r9, r4, #16
   b6ad2:	ebaa 0404 	sub.w	r4, sl, r4
   b6ad6:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b6ad8:	45d1      	cmp	r9, sl
   b6ada:	d01d      	beq.n	b6b18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b6adc:	b11c      	cbz	r4, b6ae6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b6ade:	4651      	mov	r1, sl
   b6ae0:	4620      	mov	r0, r4
   b6ae2:	f7fe ff8f 	bl	b5a04 <_ZN6StringC1EOS_>
                end->~T();
   b6ae6:	4650      	mov	r0, sl
   b6ae8:	f7fe ff10 	bl	b590c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6aec:	f1aa 0a10 	sub.w	sl, sl, #16
   b6af0:	3c10      	subs	r4, #16
   b6af2:	e7f1      	b.n	b6ad8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b6af4:	d010      	beq.n	b6b18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b6af6:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b6af8:	45a2      	cmp	sl, r4
   b6afa:	d00d      	beq.n	b6b18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b6afc:	f1b9 0f00 	cmp.w	r9, #0
   b6b00:	d003      	beq.n	b6b0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b6b02:	4621      	mov	r1, r4
   b6b04:	4648      	mov	r0, r9
   b6b06:	f7fe ff7d 	bl	b5a04 <_ZN6StringC1EOS_>
                p->~T();
   b6b0a:	4620      	mov	r0, r4
   b6b0c:	f7fe fefe 	bl	b590c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6b10:	3410      	adds	r4, #16
   b6b12:	f109 0910 	add.w	r9, r9, #16
   b6b16:	e7ef      	b.n	b6af8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b6b18:	6828      	ldr	r0, [r5, #0]
   b6b1a:	f7fe fdbf 	bl	b569c <free>
        capacity_ = n;
   b6b1e:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b6b22:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6b24:	e9d7 4300 	ldrd	r4, r3, [r7]
   b6b28:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b6b2c:	45a0      	cmp	r8, r4
   b6b2e:	d006      	beq.n	b6b3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b6b30:	4621      	mov	r1, r4
   b6b32:	4630      	mov	r0, r6
   b6b34:	f7fe ff80 	bl	b5a38 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b6b38:	3410      	adds	r4, #16
   b6b3a:	3610      	adds	r6, #16
   b6b3c:	e7f6      	b.n	b6b2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b6b3e:	687b      	ldr	r3, [r7, #4]
   b6b40:	606b      	str	r3, [r5, #4]
}
   b6b42:	4628      	mov	r0, r5
   b6b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6b48 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b6b48:	b530      	push	{r4, r5, lr}
   b6b4a:	b08d      	sub	sp, #52	; 0x34
   b6b4c:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b6b4e:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b6b52:	a801      	add	r0, sp, #4
   b6b54:	f7ff ff9e 	bl	b6a94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b6b58:	9b02      	ldr	r3, [sp, #8]
   b6b5a:	2b00      	cmp	r3, #0
   b6b5c:	dd2f      	ble.n	b6bbe <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b6b5e:	f104 0114 	add.w	r1, r4, #20
   b6b62:	a804      	add	r0, sp, #16
   b6b64:	f7ff fb8c 	bl	b6280 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b6b68:	f104 0108 	add.w	r1, r4, #8
   b6b6c:	a808      	add	r0, sp, #32
   b6b6e:	f7ff fb87 	bl	b6280 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b6b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6b74:	9b06      	ldr	r3, [sp, #24]
   b6b76:	4313      	orrs	r3, r2
   b6b78:	d01f      	beq.n	b6bba <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b6b7a:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b6b7e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b6b82:	42ac      	cmp	r4, r5
   b6b84:	d019      	beq.n	b6bba <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b6b86:	a904      	add	r1, sp, #16
   b6b88:	4620      	mov	r0, r4
   b6b8a:	f7fe ffab 	bl	b5ae4 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b6b8e:	b160      	cbz	r0, b6baa <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b6b90:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b6b92:	a808      	add	r0, sp, #32
   b6b94:	f7fe feba 	bl	b590c <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b6b98:	a804      	add	r0, sp, #16
   b6b9a:	f7fe feb7 	bl	b590c <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b6b9e:	a801      	add	r0, sp, #4
   b6ba0:	f7ff fe15 	bl	b67ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b6ba4:	4620      	mov	r0, r4
   b6ba6:	b00d      	add	sp, #52	; 0x34
   b6ba8:	bd30      	pop	{r4, r5, pc}
   b6baa:	4620      	mov	r0, r4
   b6bac:	a908      	add	r1, sp, #32
   b6bae:	f7fe ff99 	bl	b5ae4 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b6bb2:	3410      	adds	r4, #16
   b6bb4:	2800      	cmp	r0, #0
   b6bb6:	d0e4      	beq.n	b6b82 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b6bb8:	e7ea      	b.n	b6b90 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b6bba:	2400      	movs	r4, #0
   b6bbc:	e7e9      	b.n	b6b92 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b6bbe:	2401      	movs	r4, #1
   b6bc0:	e7ed      	b.n	b6b9e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b6bc2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b6bc4:	2300      	movs	r3, #0
   b6bc6:	e9c0 3300 	strd	r3, r3, [r0]
   b6bca:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6bcc:	684f      	ldr	r7, [r1, #4]
   b6bce:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6bd0:	4605      	mov	r5, r0
   b6bd2:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6bd4:	dd3e      	ble.n	b6c54 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b6bd6:	00f8      	lsls	r0, r7, #3
   b6bd8:	f7fe fd58 	bl	b568c <malloc>
            if (!d) {
   b6bdc:	4604      	mov	r4, r0
   b6bde:	b3c8      	cbz	r0, b6c54 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b6be0:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b6be4:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b6be6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b6bea:	d910      	bls.n	b6c0e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b6bec:	429c      	cmp	r4, r3
   b6bee:	d20f      	bcs.n	b6c10 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b6bf0:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b6bf2:	1a1a      	subs	r2, r3, r0
   b6bf4:	f1a0 0c08 	sub.w	ip, r0, #8
   b6bf8:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b6bfa:	459c      	cmp	ip, r3
   b6bfc:	d018      	beq.n	b6c30 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b6bfe:	b11a      	cbz	r2, b6c08 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b6c00:	6819      	ldr	r1, [r3, #0]
   b6c02:	6011      	str	r1, [r2, #0]
   b6c04:	6859      	ldr	r1, [r3, #4]
   b6c06:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b6c08:	3b08      	subs	r3, #8
   b6c0a:	3a08      	subs	r2, #8
   b6c0c:	e7f5      	b.n	b6bfa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b6c0e:	d00f      	beq.n	b6c30 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b6c10:	4601      	mov	r1, r0
   b6c12:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b6c14:	428b      	cmp	r3, r1
   b6c16:	d00b      	beq.n	b6c30 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b6c18:	b13a      	cbz	r2, b6c2a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b6c1a:	f8d1 c000 	ldr.w	ip, [r1]
   b6c1e:	f8c2 c000 	str.w	ip, [r2]
   b6c22:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b6c26:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b6c2a:	3108      	adds	r1, #8
   b6c2c:	3208      	adds	r2, #8
   b6c2e:	e7f1      	b.n	b6c14 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b6c30:	f7fe fd34 	bl	b569c <free>
        data_ = d;
   b6c34:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6c36:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6c38:	e9d6 3100 	ldrd	r3, r1, [r6]
   b6c3c:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b6c40:	4298      	cmp	r0, r3
   b6c42:	d006      	beq.n	b6c52 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b6c44:	681a      	ldr	r2, [r3, #0]
   b6c46:	6022      	str	r2, [r4, #0]
   b6c48:	685a      	ldr	r2, [r3, #4]
   b6c4a:	6062      	str	r2, [r4, #4]
   b6c4c:	3308      	adds	r3, #8
   b6c4e:	3408      	adds	r4, #8
   b6c50:	e7f6      	b.n	b6c40 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b6c52:	6069      	str	r1, [r5, #4]
}
   b6c54:	4628      	mov	r0, r5
   b6c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c58 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6c58:	b570      	push	{r4, r5, r6, lr}
   b6c5a:	4604      	mov	r4, r0
        capacity_(0) {
   b6c5c:	2000      	movs	r0, #0
   b6c5e:	e9c4 0000 	strd	r0, r0, [r4]
   b6c62:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6c64:	684e      	ldr	r6, [r1, #4]
   b6c66:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6c68:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6c6a:	dd12      	ble.n	b6c92 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b6c6c:	0071      	lsls	r1, r6, #1
   b6c6e:	f7fe fd1d 	bl	b56ac <realloc>
            if (!d) {
   b6c72:	b170      	cbz	r0, b6c92 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b6c74:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6c76:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6c78:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6c7c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b6c80:	429a      	cmp	r2, r3
   b6c82:	d004      	beq.n	b6c8e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b6c84:	f833 1b02 	ldrh.w	r1, [r3], #2
   b6c88:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b6c8c:	e7f8      	b.n	b6c80 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b6c8e:	686b      	ldr	r3, [r5, #4]
   b6c90:	6063      	str	r3, [r4, #4]
}
   b6c92:	4620      	mov	r0, r4
   b6c94:	bd70      	pop	{r4, r5, r6, pc}

000b6c96 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b6c96:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b6c98:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b6c9a:	4604      	mov	r4, r0
        if (!dismissed_) {
   b6c9c:	b923      	cbnz	r3, b6ca8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b6c9e:	6803      	ldr	r3, [r0, #0]
   b6ca0:	6818      	ldr	r0, [r3, #0]
   b6ca2:	b108      	cbz	r0, b6ca8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b6ca4:	f7fe fcfa 	bl	b569c <free>
            func_();
        }
    }
   b6ca8:	4620      	mov	r0, r4
   b6caa:	bd10      	pop	{r4, pc}

000b6cac <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b6cac:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b6cae:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b6cb0:	4604      	mov	r4, r0
        if (!dismissed_) {
   b6cb2:	b923      	cbnz	r3, b6cbe <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b6cb4:	6803      	ldr	r3, [r0, #0]
   b6cb6:	6818      	ldr	r0, [r3, #0]
   b6cb8:	b108      	cbz	r0, b6cbe <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b6cba:	f7fe fcef 	bl	b569c <free>
    }
   b6cbe:	4620      	mov	r0, r4
   b6cc0:	bd10      	pop	{r4, pc}
	...

000b6cc4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b6cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b6cc8:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b6ccc:	b08f      	sub	sp, #60	; 0x3c
   b6cce:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b6cd0:	f1b8 0f00 	cmp.w	r8, #0
   b6cd4:	d072      	beq.n	b6dbc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b6cd6:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b6cd8:	2d00      	cmp	r5, #0
   b6cda:	d06f      	beq.n	b6dbc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b6cdc:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b6ce0:	231f      	movs	r3, #31
   b6ce2:	2200      	movs	r2, #0
   b6ce4:	21ff      	movs	r1, #255	; 0xff
   b6ce6:	4648      	mov	r0, r9
   b6ce8:	f7ff fa97 	bl	b621a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b6cec:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6cee:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b6cf0:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6cf2:	2200      	movs	r2, #0
   b6cf4:	4619      	mov	r1, r3
   b6cf6:	4638      	mov	r0, r7
   b6cf8:	f7ff fa8f 	bl	b621a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b6cfc:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6cfe:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b6d00:	d006      	beq.n	b6d10 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b6d02:	42ae      	cmp	r6, r5
   b6d04:	d030      	beq.n	b6d68 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b6d06:	2400      	movs	r4, #0
    }
   b6d08:	4620      	mov	r0, r4
   b6d0a:	b00f      	add	sp, #60	; 0x3c
   b6d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b6d10:	4620      	mov	r0, r4
   b6d12:	f7fe fcbb 	bl	b568c <malloc>
            dismissed_(false) {
   b6d16:	ab03      	add	r3, sp, #12
   b6d18:	9304      	str	r3, [sp, #16]
   b6d1a:	2300      	movs	r3, #0
   b6d1c:	4604      	mov	r4, r0
   b6d1e:	9003      	str	r0, [sp, #12]
   b6d20:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b6d24:	b970      	cbnz	r0, b6d44 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b6d26:	2320      	movs	r3, #32
   b6d28:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b6d2c:	4b24      	ldr	r3, [pc, #144]	; (b6dc0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b6d2e:	9300      	str	r3, [sp, #0]
   b6d30:	4924      	ldr	r1, [pc, #144]	; (b6dc4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b6d32:	4603      	mov	r3, r0
   b6d34:	aa06      	add	r2, sp, #24
   b6d36:	2032      	movs	r0, #50	; 0x32
   b6d38:	f7fe fc14 	bl	b5564 <log_message>
                    return false;
   b6d3c:	a804      	add	r0, sp, #16
   b6d3e:	f7ff ffaa 	bl	b6c96 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b6d42:	e7e1      	b.n	b6d08 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b6d44:	4602      	mov	r2, r0
   b6d46:	21ff      	movs	r1, #255	; 0xff
   b6d48:	462b      	mov	r3, r5
   b6d4a:	4648      	mov	r0, r9
   b6d4c:	f7ff fa65 	bl	b621a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b6d50:	9803      	ldr	r0, [sp, #12]
   b6d52:	462a      	mov	r2, r5
   b6d54:	4641      	mov	r1, r8
   b6d56:	f003 f869 	bl	b9e2c <memcmp>
   b6d5a:	b118      	cbz	r0, b6d64 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b6d5c:	a804      	add	r0, sp, #16
   b6d5e:	f7ff ff9a 	bl	b6c96 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b6d62:	e7ce      	b.n	b6d02 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b6d64:	2401      	movs	r4, #1
   b6d66:	e7e9      	b.n	b6d3c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b6d68:	4628      	mov	r0, r5
   b6d6a:	f7fe fc8f 	bl	b568c <malloc>
   b6d6e:	2400      	movs	r4, #0
   b6d70:	ab03      	add	r3, sp, #12
   b6d72:	4606      	mov	r6, r0
   b6d74:	9003      	str	r0, [sp, #12]
   b6d76:	9304      	str	r3, [sp, #16]
   b6d78:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b6d7c:	b978      	cbnz	r0, b6d9e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b6d7e:	2320      	movs	r3, #32
   b6d80:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b6d84:	4b0e      	ldr	r3, [pc, #56]	; (b6dc0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b6d86:	9300      	str	r3, [sp, #0]
   b6d88:	490e      	ldr	r1, [pc, #56]	; (b6dc4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b6d8a:	4603      	mov	r3, r0
   b6d8c:	aa06      	add	r2, sp, #24
   b6d8e:	2032      	movs	r0, #50	; 0x32
   b6d90:	f7fe fbe8 	bl	b5564 <log_message>
                    return false;
   b6d94:	4634      	mov	r4, r6
   b6d96:	a804      	add	r0, sp, #16
   b6d98:	f7ff ff88 	bl	b6cac <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b6d9c:	e7b4      	b.n	b6d08 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b6d9e:	4602      	mov	r2, r0
   b6da0:	21ff      	movs	r1, #255	; 0xff
   b6da2:	462b      	mov	r3, r5
   b6da4:	4638      	mov	r0, r7
   b6da6:	f7ff fa38 	bl	b621a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b6daa:	9803      	ldr	r0, [sp, #12]
   b6dac:	462a      	mov	r2, r5
   b6dae:	4641      	mov	r1, r8
   b6db0:	f003 f83c 	bl	b9e2c <memcmp>
   b6db4:	2800      	cmp	r0, #0
   b6db6:	d1ee      	bne.n	b6d96 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b6db8:	2401      	movs	r4, #1
   b6dba:	e7ec      	b.n	b6d96 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b6dbc:	2401      	movs	r4, #1
   b6dbe:	e7a3      	b.n	b6d08 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b6dc0:	000ba7c0 	.word	0x000ba7c0
   b6dc4:	000ba73f 	.word	0x000ba73f

000b6dc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b6dc8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6dca:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6dcc:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6dce:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6dd0:	dd03      	ble.n	b6dda <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b6dd2:	f7fe fc6b 	bl	b56ac <realloc>
            if (!d) {
   b6dd6:	b918      	cbnz	r0, b6de0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6dd8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b6dda:	f7fe fc5f 	bl	b569c <free>
        T* d = nullptr;
   b6dde:	2000      	movs	r0, #0
        data_ = d;
   b6de0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6de2:	60a5      	str	r5, [r4, #8]
        return true;
   b6de4:	2001      	movs	r0, #1
   b6de6:	e7f7      	b.n	b6dd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6de8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6de8:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6dea:	6883      	ldr	r3, [r0, #8]
   b6dec:	428b      	cmp	r3, r1
   b6dee:	da02      	bge.n	b6df6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6df0:	f7ff ffea 	bl	b6dc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6df4:	bd08      	pop	{r3, pc}
    return true;
   b6df6:	2001      	movs	r0, #1
   b6df8:	e7fc      	b.n	b6df4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6dfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6dfa:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b6dfc:	2300      	movs	r3, #0
   b6dfe:	e9c0 3300 	strd	r3, r3, [r0]
   b6e02:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6e04:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6e06:	6849      	ldr	r1, [r1, #4]
   b6e08:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6e0a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6e0c:	dd10      	ble.n	b6e30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b6e0e:	f7ff ffdb 	bl	b6dc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6e12:	b168      	cbz	r0, b6e30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6e14:	e9d5 3100 	ldrd	r3, r1, [r5]
   b6e18:	6822      	ldr	r2, [r4, #0]
   b6e1a:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b6e1c:	4299      	cmp	r1, r3
   b6e1e:	d005      	beq.n	b6e2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b6e20:	b10a      	cbz	r2, b6e26 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b6e22:	7818      	ldrb	r0, [r3, #0]
   b6e24:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b6e26:	3301      	adds	r3, #1
   b6e28:	3201      	adds	r2, #1
   b6e2a:	e7f7      	b.n	b6e1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b6e2c:	686b      	ldr	r3, [r5, #4]
   b6e2e:	6063      	str	r3, [r4, #4]
}
   b6e30:	4620      	mov	r0, r4
   b6e32:	bd38      	pop	{r3, r4, r5, pc}

000b6e34 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b6e34:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b6e36:	680b      	ldr	r3, [r1, #0]
   b6e38:	6003      	str	r3, [r0, #0]
   b6e3a:	684b      	ldr	r3, [r1, #4]
   b6e3c:	6043      	str	r3, [r0, #4]
   b6e3e:	4604      	mov	r4, r0
   b6e40:	460d      	mov	r5, r1
class BleAdvertisingData {
   b6e42:	3008      	adds	r0, #8
   b6e44:	3108      	adds	r1, #8
   b6e46:	f7ff ffd8 	bl	b6dfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b6e4a:	f105 0114 	add.w	r1, r5, #20
   b6e4e:	f104 0014 	add.w	r0, r4, #20
   b6e52:	f7ff ffd2 	bl	b6dfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b6e56:	f895 3020 	ldrb.w	r3, [r5, #32]
   b6e5a:	f884 3020 	strb.w	r3, [r4, #32]
   b6e5e:	4620      	mov	r0, r4
   b6e60:	bd38      	pop	{r3, r4, r5, pc}

000b6e62 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b6e62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6e64:	4604      	mov	r4, r0
   b6e66:	a801      	add	r0, sp, #4
   b6e68:	f7ff ffc7 	bl	b6dfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   b6e6c:	9b01      	ldr	r3, [sp, #4]
   b6e6e:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6e70:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6e72:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6e74:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6e76:	6062      	str	r2, [r4, #4]
   b6e78:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e7a:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6e7c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6e7e:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e80:	9001      	str	r0, [sp, #4]
   b6e82:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b6e84:	f7fe fc0a 	bl	b569c <free>
   b6e88:	b004      	add	sp, #16
   b6e8a:	bd10      	pop	{r4, pc}

000b6e8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6e90:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6e92:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6e94:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6e96:	4419      	add	r1, r3
   b6e98:	6883      	ldr	r3, [r0, #8]
   b6e9a:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6e9c:	4604      	mov	r4, r0
   b6e9e:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6ea0:	dc12      	bgt.n	b6ec8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6ea2:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6ea4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6ea6:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6ea8:	1bd2      	subs	r2, r2, r7
   b6eaa:	4631      	mov	r1, r6
   b6eac:	1970      	adds	r0, r6, r5
   b6eae:	f002 ffdb 	bl	b9e68 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6eb2:	462a      	mov	r2, r5
   b6eb4:	4641      	mov	r1, r8
   b6eb6:	4630      	mov	r0, r6
   b6eb8:	f002 ffc8 	bl	b9e4c <memcpy>
    size_ += n;
   b6ebc:	6863      	ldr	r3, [r4, #4]
   b6ebe:	442b      	add	r3, r5
   b6ec0:	6063      	str	r3, [r4, #4]
    return true;
   b6ec2:	2001      	movs	r0, #1
}
   b6ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6ec8:	f7ff ff7e 	bl	b6dc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6ecc:	2800      	cmp	r0, #0
   b6ece:	d1e8      	bne.n	b6ea2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6ed0:	e7f8      	b.n	b6ec4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6ed2 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b6ed2:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b6ed4:	460a      	mov	r2, r1
   b6ed6:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b6ed8:	b510      	push	{r4, lr}
   b6eda:	4604      	mov	r4, r0
    size_ = 0;
   b6edc:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b6ede:	b102      	cbz	r2, b6ee2 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b6ee0:	b90b      	cbnz	r3, b6ee6 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b6ee2:	2000      	movs	r0, #0
}
   b6ee4:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b6ee6:	2bff      	cmp	r3, #255	; 0xff
   b6ee8:	bf28      	it	cs
   b6eea:	23ff      	movcs	r3, #255	; 0xff
   b6eec:	f7ff ffce 	bl	b6e8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b6ef0:	2800      	cmp	r0, #0
   b6ef2:	d0f7      	beq.n	b6ee4 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b6ef4:	6860      	ldr	r0, [r4, #4]
   b6ef6:	e7f5      	b.n	b6ee4 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b6ef8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6efa:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6efc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6f00:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6f02:	4604      	mov	r4, r0
   b6f04:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f06:	da0b      	bge.n	b6f20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6f08:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6f0a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6f0c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6f0e:	1b52      	subs	r2, r2, r5
   b6f10:	1c48      	adds	r0, r1, #1
   b6f12:	f002 ffa9 	bl	b9e68 <memmove>
    new(p) T(std::move(value));
   b6f16:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6f18:	6863      	ldr	r3, [r4, #4]
   b6f1a:	3301      	adds	r3, #1
   b6f1c:	6063      	str	r3, [r4, #4]
}
   b6f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f20:	3101      	adds	r1, #1
   b6f22:	f7ff ff51 	bl	b6dc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6f26:	2800      	cmp	r0, #0
   b6f28:	d1ee      	bne.n	b6f08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6f2a:	e7f8      	b.n	b6f1e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6f2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6f2c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b6f2e:	6841      	ldr	r1, [r0, #4]
   b6f30:	f7ff bfe2 	b.w	b6ef8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6f34 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6f38:	4604      	mov	r4, r0
   b6f3a:	461d      	mov	r5, r3
   b6f3c:	460f      	mov	r7, r1
   b6f3e:	ab01      	add	r3, sp, #4
   b6f40:	4690      	mov	r8, r2
   b6f42:	460a      	mov	r2, r1
   b6f44:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6f48:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6f4c:	f7fe fe2a 	bl	b5ba4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6f50:	1cae      	adds	r6, r5, #2
   b6f52:	6863      	ldr	r3, [r4, #4]
   b6f54:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b6f56:	f1b9 0f00 	cmp.w	r9, #0
   b6f5a:	d126      	bne.n	b6faa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b6f5c:	b328      	cbz	r0, b6faa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6f5e:	4433      	add	r3, r6
   b6f60:	1a1b      	subs	r3, r3, r0
   b6f62:	2bff      	cmp	r3, #255	; 0xff
   b6f64:	d809      	bhi.n	b6f7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b6f66:	9901      	ldr	r1, [sp, #4]
   b6f68:	4620      	mov	r0, r4
   b6f6a:	f7ff fc73 	bl	b6854 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6f6e:	6861      	ldr	r1, [r4, #4]
   b6f70:	4620      	mov	r0, r4
   b6f72:	4431      	add	r1, r6
   b6f74:	f7ff ff38 	bl	b6de8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6f78:	b918      	cbnz	r0, b6f82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b6f7a:	6860      	ldr	r0, [r4, #4]
}
   b6f7c:	b003      	add	sp, #12
   b6f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b6f82:	1c6a      	adds	r2, r5, #1
   b6f84:	9901      	ldr	r1, [sp, #4]
   b6f86:	b2d2      	uxtb	r2, r2
   b6f88:	4620      	mov	r0, r4
   b6f8a:	f7ff ffb5 	bl	b6ef8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b6f8e:	9901      	ldr	r1, [sp, #4]
   b6f90:	463a      	mov	r2, r7
   b6f92:	3101      	adds	r1, #1
   b6f94:	4620      	mov	r0, r4
   b6f96:	f7ff ffaf 	bl	b6ef8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b6f9a:	9901      	ldr	r1, [sp, #4]
   b6f9c:	462b      	mov	r3, r5
   b6f9e:	4642      	mov	r2, r8
   b6fa0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b6fa2:	4620      	mov	r0, r4
   b6fa4:	f7ff ff72 	bl	b6e8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b6fa8:	e7e7      	b.n	b6f7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6faa:	18f1      	adds	r1, r6, r3
   b6fac:	29ff      	cmp	r1, #255	; 0xff
   b6fae:	d8e4      	bhi.n	b6f7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6fb0:	4620      	mov	r0, r4
   b6fb2:	f7ff ff19 	bl	b6de8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6fb6:	2800      	cmp	r0, #0
   b6fb8:	d0df      	beq.n	b6f7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b6fba:	1c69      	adds	r1, r5, #1
   b6fbc:	b2c9      	uxtb	r1, r1
   b6fbe:	4620      	mov	r0, r4
   b6fc0:	f7ff ffb4 	bl	b6f2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b6fc4:	4639      	mov	r1, r7
   b6fc6:	4620      	mov	r0, r4
   b6fc8:	f7ff ffb0 	bl	b6f2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b6fcc:	6861      	ldr	r1, [r4, #4]
   b6fce:	462b      	mov	r3, r5
   b6fd0:	4642      	mov	r2, r8
   b6fd2:	e7e6      	b.n	b6fa2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b6fd4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6fd4:	b430      	push	{r4, r5}
   b6fd6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6fda:	b11a      	cbz	r2, b6fe4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6fdc:	9502      	str	r5, [sp, #8]
}
   b6fde:	bc30      	pop	{r4, r5}
   b6fe0:	f7ff bfa8 	b.w	b6f34 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b6fe4:	6840      	ldr	r0, [r0, #4]
}
   b6fe6:	bc30      	pop	{r4, r5}
   b6fe8:	4770      	bx	lr

000b6fea <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6fea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b6fec:	2300      	movs	r3, #0
   b6fee:	e9c0 3300 	strd	r3, r3, [r0]
   b6ff2:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6ff4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6ff6:	9300      	str	r3, [sp, #0]
   b6ff8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6ffa:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6ffe:	4619      	mov	r1, r3
   b7000:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7004:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7006:	f7ff ffe5 	bl	b6fd4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b700a:	4620      	mov	r0, r4
   b700c:	b004      	add	sp, #16
   b700e:	bd10      	pop	{r4, pc}

000b7010 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7010:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7014:	4604      	mov	r4, r0
   b7016:	460d      	mov	r5, r1
   b7018:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b701a:	d914      	bls.n	b7046 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b701c:	4290      	cmp	r0, r2
   b701e:	d213      	bcs.n	b7048 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7020:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7024:	1a75      	subs	r5, r6, r1
   b7026:	f1a1 0708 	sub.w	r7, r1, #8
   b702a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b702c:	42b7      	cmp	r7, r6
   b702e:	d018      	beq.n	b7062 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7030:	b11c      	cbz	r4, b703a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7032:	4631      	mov	r1, r6
   b7034:	4620      	mov	r0, r4
   b7036:	f7ff fc92 	bl	b695e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b703a:	1d30      	adds	r0, r6, #4
   b703c:	f7ff fc99 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7040:	3e08      	subs	r6, #8
   b7042:	3c08      	subs	r4, #8
   b7044:	e7f2      	b.n	b702c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7046:	d00c      	beq.n	b7062 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7048:	42b5      	cmp	r5, r6
   b704a:	d00a      	beq.n	b7062 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b704c:	b11c      	cbz	r4, b7056 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b704e:	4629      	mov	r1, r5
   b7050:	4620      	mov	r0, r4
   b7052:	f7ff fc84 	bl	b695e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7056:	1d28      	adds	r0, r5, #4
   b7058:	f7ff fc8b 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b705c:	3508      	adds	r5, #8
   b705e:	3408      	adds	r4, #8
   b7060:	e7f2      	b.n	b7048 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7064 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7066:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7068:	6846      	ldr	r6, [r0, #4]
   b706a:	4668      	mov	r0, sp
   b706c:	f7ff fc77 	bl	b695e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7070:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7074:	429f      	cmp	r7, r3
   b7076:	db12      	blt.n	b709e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7078:	3701      	adds	r7, #1
        if (n > 0) {
   b707a:	2f00      	cmp	r7, #0
   b707c:	dd29      	ble.n	b70d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b707e:	00f8      	lsls	r0, r7, #3
   b7080:	f7fe fb04 	bl	b568c <malloc>
            if (!d) {
   b7084:	4605      	mov	r5, r0
   b7086:	b1f0      	cbz	r0, b70c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7088:	e9d4 1200 	ldrd	r1, r2, [r4]
   b708c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7090:	f7ff ffbe 	bl	b7010 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7094:	6820      	ldr	r0, [r4, #0]
   b7096:	f7fe fb01 	bl	b569c <free>
        data_ = d;
   b709a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b709c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b709e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b70a0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b70a2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b70a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b70aa:	4631      	mov	r1, r6
   b70ac:	f106 0008 	add.w	r0, r6, #8
   b70b0:	f7ff ffae 	bl	b7010 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b70b4:	b11e      	cbz	r6, b70be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b70b6:	4669      	mov	r1, sp
   b70b8:	4630      	mov	r0, r6
   b70ba:	f7ff fc50 	bl	b695e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b70be:	6863      	ldr	r3, [r4, #4]
   b70c0:	3301      	adds	r3, #1
   b70c2:	6063      	str	r3, [r4, #4]
    return true;
   b70c4:	2501      	movs	r5, #1
   b70c6:	a801      	add	r0, sp, #4
   b70c8:	f7ff fc53 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b70cc:	4628      	mov	r0, r5
   b70ce:	b003      	add	sp, #12
   b70d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b70d2:	2500      	movs	r5, #0
   b70d4:	e7de      	b.n	b7094 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b70d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b70d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b70d8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b70dc:	4605      	mov	r5, r0
   b70de:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b70e0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b70e4:	42a6      	cmp	r6, r4
   b70e6:	d005      	beq.n	b70f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b70e8:	4639      	mov	r1, r7
   b70ea:	4620      	mov	r0, r4
   b70ec:	f7ff fa91 	bl	b6612 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b70f0:	b108      	cbz	r0, b70f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b70f2:	b914      	cbnz	r4, b70fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b70f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b70f6:	3408      	adds	r4, #8
   b70f8:	e7f4      	b.n	b70e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b70fa:	1d20      	adds	r0, r4, #4
   b70fc:	f7ff fc39 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7100:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7104:	f104 0108 	add.w	r1, r4, #8
   b7108:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b710c:	4620      	mov	r0, r4
   b710e:	f7ff ff7f 	bl	b7010 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7112:	686b      	ldr	r3, [r5, #4]
   b7114:	3b01      	subs	r3, #1
   b7116:	606b      	str	r3, [r5, #4]
    return true;
   b7118:	e7ec      	b.n	b70f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b711c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b711c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7120:	4605      	mov	r5, r0
   b7122:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7124:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7126:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7128:	f7fe fe26 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b712c:	682e      	ldr	r6, [r5, #0]
   b712e:	1ef3      	subs	r3, r6, #3
   b7130:	2b0d      	cmp	r3, #13
   b7132:	d83c      	bhi.n	b71ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7134:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7138:	0053000e 	.word	0x0053000e
   b713c:	00d1003b 	.word	0x00d1003b
   b7140:	003b003b 	.word	0x003b003b
   b7144:	003b003b 	.word	0x003b003b
   b7148:	009b003b 	.word	0x009b003b
   b714c:	009b009b 	.word	0x009b009b
   b7150:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7154:	a804      	add	r0, sp, #16
   b7156:	f7ff fa03 	bl	b6560 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b715a:	9b04      	ldr	r3, [sp, #16]
   b715c:	89aa      	ldrh	r2, [r5, #12]
   b715e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7160:	6869      	ldr	r1, [r5, #4]
   b7162:	9804      	ldr	r0, [sp, #16]
   b7164:	3108      	adds	r1, #8
   b7166:	3002      	adds	r0, #2
   b7168:	f7fe fe20 	bl	b5dac <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b716c:	a904      	add	r1, sp, #16
   b716e:	a806      	add	r0, sp, #24
   b7170:	f7ff fbf5 	bl	b695e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7174:	a906      	add	r1, sp, #24
   b7176:	f104 0018 	add.w	r0, r4, #24
   b717a:	f7ff ff73 	bl	b7064 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b717e:	4605      	mov	r5, r0
   b7180:	a807      	add	r0, sp, #28
   b7182:	f7ff fbf6 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7186:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7188:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b718a:	b9b5      	cbnz	r5, b71ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b718c:	4b5d      	ldr	r3, [pc, #372]	; (b7304 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b718e:	495e      	ldr	r1, [pc, #376]	; (b7308 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7190:	9300      	str	r3, [sp, #0]
   b7192:	2032      	movs	r0, #50	; 0x32
   b7194:	462b      	mov	r3, r5
   b7196:	aa06      	add	r2, sp, #24
   b7198:	9507      	str	r5, [sp, #28]
   b719a:	f7fe f9e3 	bl	b5564 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b719e:	9b04      	ldr	r3, [sp, #16]
   b71a0:	4629      	mov	r1, r5
   b71a2:	8818      	ldrh	r0, [r3, #0]
   b71a4:	f7fe f81a 	bl	b51dc <hal_ble_gap_disconnect>
   b71a8:	a805      	add	r0, sp, #20
   b71aa:	f7ff fbe2 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b71ae:	a803      	add	r0, sp, #12
   b71b0:	f7fe fdf0 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b71b4:	b00e      	add	sp, #56	; 0x38
   b71b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b71ba:	4a54      	ldr	r2, [pc, #336]	; (b730c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b71bc:	9200      	str	r2, [sp, #0]
   b71be:	2300      	movs	r3, #0
   b71c0:	4951      	ldr	r1, [pc, #324]	; (b7308 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b71c2:	9307      	str	r3, [sp, #28]
   b71c4:	aa06      	add	r2, sp, #24
   b71c6:	2001      	movs	r0, #1
   b71c8:	f7fe f9cc 	bl	b5564 <log_message>
                if (impl->connectedCallback_) {
   b71cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b71ce:	2b00      	cmp	r3, #0
   b71d0:	d0ea      	beq.n	b71a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b71d2:	a904      	add	r1, sp, #16
   b71d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b71d8:	f7ff fc53 	bl	b6a82 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b71dc:	e7e4      	b.n	b71a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b71de:	89a9      	ldrh	r1, [r5, #12]
   b71e0:	4620      	mov	r0, r4
   b71e2:	f7ff f8ac 	bl	b633e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b71e6:	4606      	mov	r6, r0
   b71e8:	2800      	cmp	r0, #0
   b71ea:	d0e0      	beq.n	b71ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b71ec:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b71ee:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b71f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b71f6:	8029      	strh	r1, [r5, #0]
   b71f8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b71fc:	429a      	cmp	r2, r3
   b71fe:	d003      	beq.n	b7208 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7200:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7204:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7206:	e7f9      	b.n	b71fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b7208:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b720c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7210:	45b8      	cmp	r8, r7
   b7212:	d004      	beq.n	b721e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7214:	1d38      	adds	r0, r7, #4
   b7216:	f7ff fbac 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b721a:	3708      	adds	r7, #8
   b721c:	e7f8      	b.n	b7210 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b721e:	2300      	movs	r3, #0
   b7220:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7222:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7226:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b722a:	45b8      	cmp	r8, r7
   b722c:	d004      	beq.n	b7238 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b722e:	1d38      	adds	r0, r7, #4
   b7230:	f7ff fb9f 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7234:	3708      	adds	r7, #8
   b7236:	e7f8      	b.n	b722a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7238:	2300      	movs	r3, #0
   b723a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b723c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b723e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7240:	b123      	cbz	r3, b724c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b7242:	4631      	mov	r1, r6
   b7244:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7248:	f7ff fc1b 	bl	b6a82 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b724c:	2300      	movs	r3, #0
   b724e:	2220      	movs	r2, #32
   b7250:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7254:	4a2e      	ldr	r2, [pc, #184]	; (b7310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7256:	9200      	str	r2, [sp, #0]
   b7258:	492b      	ldr	r1, [pc, #172]	; (b7308 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b725a:	aa06      	add	r2, sp, #24
   b725c:	2001      	movs	r0, #1
   b725e:	f7fe f981 	bl	b5564 <log_message>
                    impl->peers_.removeOne(*peer);
   b7262:	4631      	mov	r1, r6
   b7264:	f104 0018 	add.w	r0, r4, #24
   b7268:	f7ff ff35 	bl	b70d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b726c:	e79f      	b.n	b71ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b726e:	89a9      	ldrh	r1, [r5, #12]
   b7270:	4620      	mov	r0, r4
   b7272:	f7ff f864 	bl	b633e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7276:	2800      	cmp	r0, #0
   b7278:	d099      	beq.n	b71ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b727a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b727c:	2b00      	cmp	r3, #0
   b727e:	d096      	beq.n	b71ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7280:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7282:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7284:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7288:	d001      	beq.n	b728e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b728a:	2e10      	cmp	r6, #16
   b728c:	d117      	bne.n	b72be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b728e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7290:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7292:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7294:	2506      	movs	r5, #6
                        };
   b7296:	f88d 3015 	strb.w	r3, [sp, #21]
   b729a:	9104      	str	r1, [sp, #16]
   b729c:	f88d 2014 	strb.w	r2, [sp, #20]
   b72a0:	9006      	str	r0, [sp, #24]
   b72a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b72a6:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b72a8:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b72ac:	9508      	str	r5, [sp, #32]
   b72ae:	e883 0003 	stmia.w	r3, {r0, r1}
   b72b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b72b4:	a906      	add	r1, sp, #24
   b72b6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b72ba:	4798      	blx	r3
   b72bc:	e777      	b.n	b71ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b72be:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b72c0:	bf01      	itttt	eq
   b72c2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b72c4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b72c6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b72ca:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b72cc:	bf0f      	iteee	eq
   b72ce:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b72d2:	461a      	movne	r2, r3
   b72d4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b72d6:	461d      	movne	r5, r3
   b72d8:	e7dd      	b.n	b7296 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b72da:	89a9      	ldrh	r1, [r5, #12]
   b72dc:	4620      	mov	r0, r4
   b72de:	f7ff f82e 	bl	b633e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b72e2:	4601      	mov	r1, r0
   b72e4:	2800      	cmp	r0, #0
   b72e6:	f43f af62 	beq.w	b71ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b72ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b72ec:	2b00      	cmp	r3, #0
   b72ee:	f43f af5e 	beq.w	b71ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b72f2:	686b      	ldr	r3, [r5, #4]
   b72f4:	9306      	str	r3, [sp, #24]
   b72f6:	aa06      	add	r2, sp, #24
   b72f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b72fa:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b72fe:	4798      	blx	r3
   b7300:	e755      	b.n	b71ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7302:	bf00      	nop
   b7304:	000ba7db 	.word	0x000ba7db
   b7308:	000ba73f 	.word	0x000ba73f
   b730c:	000ba801 	.word	0x000ba801
   b7310:	000ba81e 	.word	0x000ba81e

000b7314 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7314:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7316:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7318:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b731a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b731c:	dd05      	ble.n	b732a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b731e:	2114      	movs	r1, #20
   b7320:	4369      	muls	r1, r5
   b7322:	f7fe f9c3 	bl	b56ac <realloc>
            if (!d) {
   b7326:	b918      	cbnz	r0, b7330 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b7328:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b732a:	f7fe f9b7 	bl	b569c <free>
        T* d = nullptr;
   b732e:	2000      	movs	r0, #0
        data_ = d;
   b7330:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7332:	60a5      	str	r5, [r4, #8]
        return true;
   b7334:	2001      	movs	r0, #1
   b7336:	e7f7      	b.n	b7328 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b7338 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b733c:	2400      	movs	r4, #0
   b733e:	e9c0 4400 	strd	r4, r4, [r0]
   b7342:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7344:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7346:	6849      	ldr	r1, [r1, #4]
   b7348:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b734a:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b734c:	dd1a      	ble.n	b7384 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b734e:	f7ff ffe1 	bl	b7314 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7352:	b1b8      	cbz	r0, b7384 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7354:	e9d8 9300 	ldrd	r9, r3, [r8]
   b7358:	f04f 0c14 	mov.w	ip, #20
   b735c:	f8d7 e000 	ldr.w	lr, [r7]
   b7360:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b7364:	eb09 0504 	add.w	r5, r9, r4
   b7368:	45ac      	cmp	ip, r5
   b736a:	d008      	beq.n	b737e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b736c:	eb1e 0604 	adds.w	r6, lr, r4
   b7370:	bf1f      	itttt	ne
   b7372:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b7374:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b7376:	682b      	ldrne	r3, [r5, #0]
   b7378:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b737a:	3414      	adds	r4, #20
   b737c:	e7f2      	b.n	b7364 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b737e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7382:	607b      	str	r3, [r7, #4]
}
   b7384:	4638      	mov	r0, r7
   b7386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b738a <_ZN8particle13BleScanFilteraSERKS0_.isra.0>:
class BleScanFilter {
   b738a:	b530      	push	{r4, r5, lr}
   b738c:	b085      	sub	sp, #20
   b738e:	4604      	mov	r4, r0
   b7390:	a801      	add	r0, sp, #4
   b7392:	460d      	mov	r5, r1
   b7394:	f7ff fb7e 	bl	b6a94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
      __a = _GLIBCXX_MOVE(__b);
   b7398:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b739a:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b739c:	6022      	str	r2, [r4, #0]
   b739e:	9a02      	ldr	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b73a0:	9301      	str	r3, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73a2:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b73a4:	6062      	str	r2, [r4, #4]
   b73a6:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b73a8:	9302      	str	r3, [sp, #8]
   b73aa:	a801      	add	r0, sp, #4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73ac:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b73ae:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b73b0:	9303      	str	r3, [sp, #12]
   b73b2:	f7ff fa0c 	bl	b67ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
   b73b6:	f105 010c 	add.w	r1, r5, #12
   b73ba:	a801      	add	r0, sp, #4
   b73bc:	f7ff ffbc 	bl	b7338 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
      __a = _GLIBCXX_MOVE(__b);
   b73c0:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73c2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b73c4:	60e2      	str	r2, [r4, #12]
   b73c6:	9a02      	ldr	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b73c8:	9301      	str	r3, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73ca:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b73cc:	6122      	str	r2, [r4, #16]
   b73ce:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b73d0:	9302      	str	r3, [sp, #8]
   b73d2:	a801      	add	r0, sp, #4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73d4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b73d6:	6162      	str	r2, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   b73d8:	9303      	str	r3, [sp, #12]
   b73da:	f7ff fa0a 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b73de:	f105 0118 	add.w	r1, r5, #24
   b73e2:	a801      	add	r0, sp, #4
   b73e4:	f7ff fbed 	bl	b6bc2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
      __a = _GLIBCXX_MOVE(__b);
   b73e8:	9b01      	ldr	r3, [sp, #4]
   b73ea:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73ec:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   b73ee:	61a3      	str	r3, [r4, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73f0:	69e3      	ldr	r3, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   b73f2:	61e2      	str	r2, [r4, #28]
   b73f4:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b73f6:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73f8:	6a23      	ldr	r3, [r4, #32]
      __a = _GLIBCXX_MOVE(__b);
   b73fa:	6222      	str	r2, [r4, #32]
      __b = _GLIBCXX_MOVE(__tmp);
   b73fc:	9303      	str	r3, [sp, #12]
   b73fe:	9001      	str	r0, [sp, #4]
    ::free(ptr);
   b7400:	f7fe f94c 	bl	b569c <free>
   b7404:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b7408:	a801      	add	r0, sp, #4
   b740a:	f7ff fc25 	bl	b6c58 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
      __a = _GLIBCXX_MOVE(__b);
   b740e:	9b01      	ldr	r3, [sp, #4]
   b7410:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7412:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b7414:	6263      	str	r3, [r4, #36]	; 0x24
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   b7418:	62a2      	str	r2, [r4, #40]	; 0x28
   b741a:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b741c:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b741e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   b7420:	62e2      	str	r2, [r4, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b7422:	9303      	str	r3, [sp, #12]
   b7424:	9001      	str	r0, [sp, #4]
   b7426:	f7fe f939 	bl	b569c <free>
   b742a:	f995 3030 	ldrsb.w	r3, [r5, #48]	; 0x30
   b742e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   b7432:	f995 3031 	ldrsb.w	r3, [r5, #49]	; 0x31
   b7436:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   b743a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   b743c:	6363      	str	r3, [r4, #52]	; 0x34
   b743e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7440:	63a3      	str	r3, [r4, #56]	; 0x38
   b7442:	b005      	add	sp, #20
   b7444:	bd30      	pop	{r4, r5, pc}

000b7446 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7446:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b744a:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b744e:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7450:	6883      	ldr	r3, [r0, #8]
   b7452:	19e9      	adds	r1, r5, r7
   b7454:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7456:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7458:	dc17      	bgt.n	b748a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b745a:	2314      	movs	r3, #20
   b745c:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b745e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7460:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b7462:	fb03 f907 	mul.w	r9, r3, r7
   b7466:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7468:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b746a:	1b52      	subs	r2, r2, r5
   b746c:	4631      	mov	r1, r6
   b746e:	eb06 0009 	add.w	r0, r6, r9
   b7472:	f002 fcf9 	bl	b9e68 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7476:	464a      	mov	r2, r9
   b7478:	4641      	mov	r1, r8
   b747a:	4630      	mov	r0, r6
   b747c:	f002 fce6 	bl	b9e4c <memcpy>
    size_ += n;
   b7480:	6863      	ldr	r3, [r4, #4]
   b7482:	443b      	add	r3, r7
   b7484:	6063      	str	r3, [r4, #4]
}
   b7486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b748a:	f7ff ff43 	bl	b7314 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b748e:	2800      	cmp	r0, #0
   b7490:	d1e3      	bne.n	b745a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b7492:	e7f8      	b.n	b7486 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b7494 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7494:	b082      	sub	sp, #8
   b7496:	b570      	push	{r4, r5, r6, lr}
   b7498:	460c      	mov	r4, r1
   b749a:	a904      	add	r1, sp, #16
   b749c:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b74a0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b74a4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b74a6:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b74a8:	da17      	bge.n	b74da <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b74aa:	2314      	movs	r3, #20
   b74ac:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b74b0:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b74b2:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b74b4:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b74b6:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b74b8:	1a52      	subs	r2, r2, r1
   b74ba:	18e0      	adds	r0, r4, r3
   b74bc:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b74be:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b74c0:	f002 fcd2 	bl	b9e68 <memmove>
    new(p) T(std::move(value));
   b74c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b74c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b74c8:	6833      	ldr	r3, [r6, #0]
   b74ca:	6023      	str	r3, [r4, #0]
    ++size_;
   b74cc:	686b      	ldr	r3, [r5, #4]
   b74ce:	3301      	adds	r3, #1
   b74d0:	606b      	str	r3, [r5, #4]
}
   b74d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b74d6:	b002      	add	sp, #8
   b74d8:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b74da:	3101      	adds	r1, #1
   b74dc:	f7ff ff1a 	bl	b7314 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b74e0:	2800      	cmp	r0, #0
   b74e2:	d1e2      	bne.n	b74aa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b74e4:	e7f5      	b.n	b74d2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b74e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b74e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b74ea:	2400      	movs	r4, #0
   b74ec:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b74ee:	1e93      	subs	r3, r2, #2
   b74f0:	e9c0 4400 	strd	r4, r4, [r0]
   b74f4:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b74f6:	4605      	mov	r5, r0
   b74f8:	460f      	mov	r7, r1
   b74fa:	4690      	mov	r8, r2
   b74fc:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b74fe:	9305      	str	r3, [sp, #20]
    return size_;
   b7500:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b7502:	428c      	cmp	r4, r1
   b7504:	da72      	bge.n	b75ec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b7506:	6838      	ldr	r0, [r7, #0]
   b7508:	ab07      	add	r3, sp, #28
   b750a:	4642      	mov	r2, r8
   b750c:	1b09      	subs	r1, r1, r4
   b750e:	4420      	add	r0, r4
   b7510:	f7fe fb48 	bl	b5ba4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b7514:	4606      	mov	r6, r0
   b7516:	2800      	cmp	r0, #0
   b7518:	d068      	beq.n	b75ec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b751a:	9b05      	ldr	r3, [sp, #20]
   b751c:	2b01      	cmp	r3, #1
   b751e:	d82f      	bhi.n	b7580 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7520:	f1a0 0b02 	sub.w	fp, r0, #2
   b7524:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b7528:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b752c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7530:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7532:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7534:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7536:	d055      	beq.n	b75e4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b7538:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b753a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b753e:	4413      	add	r3, r2
   b7540:	a808      	add	r0, sp, #32
   b7542:	78d9      	ldrb	r1, [r3, #3]
   b7544:	789b      	ldrb	r3, [r3, #2]
   b7546:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b754a:	f7fe fd18 	bl	b5f7e <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b754e:	f10d 0e20 	add.w	lr, sp, #32
   b7552:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7556:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b755a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b755e:	f8de 3000 	ldr.w	r3, [lr]
   b7562:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b7566:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b756a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b756e:	ab0d      	add	r3, sp, #52	; 0x34
   b7570:	cb0c      	ldmia	r3, {r2, r3}
   b7572:	6869      	ldr	r1, [r5, #4]
   b7574:	4628      	mov	r0, r5
   b7576:	f7ff ff8d 	bl	b7494 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b757a:	f109 0901 	add.w	r9, r9, #1
   b757e:	e7d7      	b.n	b7530 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b7580:	f1a8 0306 	sub.w	r3, r8, #6
   b7584:	2b01      	cmp	r3, #1
   b7586:	d82d      	bhi.n	b75e4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7588:	f1a0 0b02 	sub.w	fp, r0, #2
   b758c:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b7590:	f04f 0900 	mov.w	r9, #0
   b7594:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b7598:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b759a:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b759c:	d022      	beq.n	b75e4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b759e:	3302      	adds	r3, #2
    return data_[i];
   b75a0:	6839      	ldr	r1, [r7, #0]
   b75a2:	4423      	add	r3, r4
   b75a4:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b75a8:	2201      	movs	r2, #1
   b75aa:	4419      	add	r1, r3
   b75ac:	a808      	add	r0, sp, #32
   b75ae:	f7fe fcc7 	bl	b5f40 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b75b2:	f10d 0e20 	add.w	lr, sp, #32
   b75b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b75ba:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b75be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b75c2:	f8de 3000 	ldr.w	r3, [lr]
   b75c6:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b75ca:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b75ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b75d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b75d6:	6869      	ldr	r1, [r5, #4]
   b75d8:	4628      	mov	r0, r5
   b75da:	f7ff ff5b 	bl	b7494 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b75de:	f109 0901 	add.w	r9, r9, #1
   b75e2:	e7d9      	b.n	b7598 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b75e4:	9b07      	ldr	r3, [sp, #28]
   b75e6:	441c      	add	r4, r3
   b75e8:	4434      	add	r4, r6
   b75ea:	e789      	b.n	b7500 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b75ec:	4628      	mov	r0, r5
   b75ee:	b013      	add	sp, #76	; 0x4c
   b75f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b75f4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b75f4:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b75f6:	2300      	movs	r3, #0
   b75f8:	b085      	sub	sp, #20
   b75fa:	e9c0 3300 	strd	r3, r3, [r0]
   b75fe:	6083      	str	r3, [r0, #8]
   b7600:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7602:	2202      	movs	r2, #2
   b7604:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b7606:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7608:	f7ff ff6d 	bl	b74e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b760c:	a901      	add	r1, sp, #4
   b760e:	4620      	mov	r0, r4
   b7610:	f7ff ff19 	bl	b7446 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7614:	a801      	add	r0, sp, #4
   b7616:	f7ff f8ec 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b761a:	2202      	movs	r2, #2
   b761c:	4629      	mov	r1, r5
   b761e:	a801      	add	r0, sp, #4
   b7620:	f7ff ff61 	bl	b74e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7624:	a901      	add	r1, sp, #4
   b7626:	4620      	mov	r0, r4
   b7628:	f7ff ff0d 	bl	b7446 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b762c:	a801      	add	r0, sp, #4
   b762e:	f7ff f8e0 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b7632:	2203      	movs	r2, #3
   b7634:	4629      	mov	r1, r5
   b7636:	a801      	add	r0, sp, #4
   b7638:	f7ff ff55 	bl	b74e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b763c:	a901      	add	r1, sp, #4
   b763e:	4620      	mov	r0, r4
   b7640:	f7ff ff01 	bl	b7446 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7644:	a801      	add	r0, sp, #4
   b7646:	f7ff f8d4 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b764a:	2206      	movs	r2, #6
   b764c:	4629      	mov	r1, r5
   b764e:	a801      	add	r0, sp, #4
   b7650:	f7ff ff49 	bl	b74e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7654:	a901      	add	r1, sp, #4
   b7656:	4620      	mov	r0, r4
   b7658:	f7ff fef5 	bl	b7446 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b765c:	a801      	add	r0, sp, #4
   b765e:	f7ff f8c8 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b7662:	2207      	movs	r2, #7
   b7664:	4629      	mov	r1, r5
   b7666:	a801      	add	r0, sp, #4
   b7668:	f7ff ff3d 	bl	b74e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b766c:	a901      	add	r1, sp, #4
   b766e:	4620      	mov	r0, r4
   b7670:	f7ff fee9 	bl	b7446 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7674:	a801      	add	r0, sp, #4
   b7676:	f7ff f8bc 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b767a:	4620      	mov	r0, r4
   b767c:	b005      	add	sp, #20
   b767e:	bd30      	pop	{r4, r5, pc}

000b7680 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b7680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7684:	b085      	sub	sp, #20
   b7686:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b7688:	4601      	mov	r1, r0
   b768a:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b768c:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b768e:	f7ff ffb1 	bl	b75f4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b7692:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b7694:	9b02      	ldr	r3, [sp, #8]
   b7696:	f04f 0e14 	mov.w	lr, #20
   b769a:	fb0e 6c03 	mla	ip, lr, r3, r6
   b769e:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b76a0:	45b4      	cmp	ip, r6
   b76a2:	d00d      	beq.n	b76c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b76a4:	45b9      	cmp	r9, r7
   b76a6:	f106 0614 	add.w	r6, r6, #20
   b76aa:	d009      	beq.n	b76c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b76ac:	f1a6 0514 	sub.w	r5, r6, #20
   b76b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b76b2:	fb0e 8407 	mla	r4, lr, r7, r8
   b76b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b76b8:	682b      	ldr	r3, [r5, #0]
   b76ba:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b76bc:	3701      	adds	r7, #1
   b76be:	e7ef      	b.n	b76a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b76c0:	a801      	add	r0, sp, #4
   b76c2:	f7ff f896 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b76c6:	4638      	mov	r0, r7
   b76c8:	b005      	add	sp, #20
   b76ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b76ce <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b76ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76d2:	b08b      	sub	sp, #44	; 0x2c
   b76d4:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b76d6:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b76da:	a801      	add	r0, sp, #4
   b76dc:	f7ff fe2c 	bl	b7338 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b76e0:	9b02      	ldr	r3, [sp, #8]
   b76e2:	2b00      	cmp	r3, #0
   b76e4:	dd4a      	ble.n	b777c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b76e6:	f104 0114 	add.w	r1, r4, #20
   b76ea:	a804      	add	r0, sp, #16
   b76ec:	f7ff ff82 	bl	b75f4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b76f0:	f104 0108 	add.w	r1, r4, #8
   b76f4:	a807      	add	r0, sp, #28
   b76f6:	f7ff ff7d 	bl	b75f4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b76fa:	9d05      	ldr	r5, [sp, #20]
   b76fc:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b76fe:	2d00      	cmp	r5, #0
   b7700:	dc01      	bgt.n	b7706 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b7702:	2e00      	cmp	r6, #0
   b7704:	dd38      	ble.n	b7778 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b7706:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b7708:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b770a:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b770e:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b7712:	2314      	movs	r3, #20
   b7714:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b7718:	fb03 8505 	mla	r5, r3, r5, r8
   b771c:	fb03 9606 	mla	r6, r3, r6, r9
   b7720:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b7722:	45ba      	cmp	sl, r7
   b7724:	d028      	beq.n	b7778 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b7726:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b7728:	45ab      	cmp	fp, r5
   b772a:	d015      	beq.n	b7758 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b772c:	4659      	mov	r1, fp
   b772e:	4650      	mov	r0, sl
   b7730:	f7fe fc67 	bl	b6002 <_ZNK8particle7BleUuideqERKS0_>
   b7734:	f10b 0b14 	add.w	fp, fp, #20
   b7738:	4604      	mov	r4, r0
   b773a:	2800      	cmp	r0, #0
   b773c:	d0f4      	beq.n	b7728 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b773e:	a807      	add	r0, sp, #28
   b7740:	f7ff f857 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b7744:	a804      	add	r0, sp, #16
   b7746:	f7ff f854 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b774a:	a801      	add	r0, sp, #4
   b774c:	f7ff f851 	bl	b67f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b7750:	4620      	mov	r0, r4
   b7752:	b00b      	add	sp, #44	; 0x2c
   b7754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7758:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b775a:	45b3      	cmp	fp, r6
   b775c:	d009      	beq.n	b7772 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b775e:	4659      	mov	r1, fp
   b7760:	4650      	mov	r0, sl
   b7762:	f7fe fc4e 	bl	b6002 <_ZNK8particle7BleUuideqERKS0_>
   b7766:	f10b 0b14 	add.w	fp, fp, #20
   b776a:	4604      	mov	r4, r0
   b776c:	2800      	cmp	r0, #0
   b776e:	d0f4      	beq.n	b775a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b7770:	e7e5      	b.n	b773e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b7772:	f10a 0a14 	add.w	sl, sl, #20
   b7776:	e7d4      	b.n	b7722 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b7778:	2400      	movs	r4, #0
   b777a:	e7e0      	b.n	b773e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b777c:	2401      	movs	r4, #1
   b777e:	e7e4      	b.n	b774a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b7780 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7780:	b513      	push	{r0, r1, r4, lr}
   b7782:	460b      	mov	r3, r1
   b7784:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7786:	e9d0 0100 	ldrd	r0, r1, [r0]
   b778a:	466c      	mov	r4, sp
   b778c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7790:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7794:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7798:	e894 0003 	ldmia.w	r4, {r0, r1}
   b779c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b77a0:	b002      	add	sp, #8
   b77a2:	bd10      	pop	{r4, pc}

000b77a4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b77a4:	b538      	push	{r3, r4, r5, lr}
   b77a6:	4605      	mov	r5, r0
   b77a8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b77aa:	f7ff ffe9 	bl	b7780 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b77ae:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b77b0:	68a2      	ldr	r2, [r4, #8]
   b77b2:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b77b4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b77b6:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b77b8:	68e2      	ldr	r2, [r4, #12]
   b77ba:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b77bc:	60e3      	str	r3, [r4, #12]
      }
   b77be:	bd38      	pop	{r3, r4, r5, pc}

000b77c0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b77c0:	b530      	push	{r4, r5, lr}
   b77c2:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b77c4:	2300      	movs	r3, #0
   b77c6:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b77c8:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b77ca:	4605      	mov	r5, r0
   b77cc:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b77ce:	b133      	cbz	r3, b77de <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b77d0:	2202      	movs	r2, #2
   b77d2:	4668      	mov	r0, sp
   b77d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b77d6:	68e3      	ldr	r3, [r4, #12]
   b77d8:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b77da:	68a3      	ldr	r3, [r4, #8]
   b77dc:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b77de:	4629      	mov	r1, r5
   b77e0:	4668      	mov	r0, sp
   b77e2:	f7ff ffdf 	bl	b77a4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b77e6:	4668      	mov	r0, sp
   b77e8:	f7fe fa79 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
      }
   b77ec:	b005      	add	sp, #20
   b77ee:	bd30      	pop	{r4, r5, pc}

000b77f0 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b77f0:	b538      	push	{r3, r4, r5, lr}
   b77f2:	460d      	mov	r5, r1
      { return _M_ptr; }
   b77f4:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b77f6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b77f8:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b77fa:	b123      	cbz	r3, b7806 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b77fc:	6828      	ldr	r0, [r5, #0]
   b77fe:	314c      	adds	r1, #76	; 0x4c
   b7800:	304c      	adds	r0, #76	; 0x4c
   b7802:	f7ff ffdd 	bl	b77c0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7806:	4620      	mov	r0, r4
   b7808:	682b      	ldr	r3, [r5, #0]
   b780a:	f840 3b04 	str.w	r3, [r0], #4
   b780e:	6869      	ldr	r1, [r5, #4]
   b7810:	f7fe fa8d 	bl	b5d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b7814:	4620      	mov	r0, r4
   b7816:	bd38      	pop	{r3, r4, r5, pc}

000b7818 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b7818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b781c:	4604      	mov	r4, r0
   b781e:	b087      	sub	sp, #28
    WiringBleLock lk;
   b7820:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b7822:	460e      	mov	r6, r1
   b7824:	4617      	mov	r7, r2
    WiringBleLock lk;
   b7826:	f7fe faa7 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b782a:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b782c:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b7830:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b7834:	4544      	cmp	r4, r8
   b7836:	46a1      	mov	r9, r4
   b7838:	d016      	beq.n	b7868 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b783a:	4621      	mov	r1, r4
   b783c:	a801      	add	r0, sp, #4
   b783e:	f7fe fda9 	bl	b6394 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b7842:	4639      	mov	r1, r7
   b7844:	a801      	add	r0, sp, #4
   b7846:	f7fe fbdc 	bl	b6002 <_ZNK8particle7BleUuideqERKS0_>
   b784a:	3408      	adds	r4, #8
   b784c:	4605      	mov	r5, r0
   b784e:	2800      	cmp	r0, #0
   b7850:	d0f0      	beq.n	b7834 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b7852:	4649      	mov	r1, r9
   b7854:	4630      	mov	r0, r6
   b7856:	f7ff ffcb 	bl	b77f0 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b785a:	4668      	mov	r0, sp
   b785c:	f7fe fa9a 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7860:	4628      	mov	r0, r5
   b7862:	b007      	add	sp, #28
   b7864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b7868:	2500      	movs	r5, #0
   b786a:	e7f6      	b.n	b785a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b786c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b786c:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b786e:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7870:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7872:	344c      	adds	r4, #76	; 0x4c
   b7874:	b1b9      	cbz	r1, b78a6 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b7876:	e9cd 1200 	strd	r1, r2, [sp]
   b787a:	a802      	add	r0, sp, #8
   b787c:	4669      	mov	r1, sp
   b787e:	f7ff f837 	bl	b68f0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7882:	2300      	movs	r3, #0
	__x.swap(*this);
   b7884:	a906      	add	r1, sp, #24
   b7886:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7888:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b788a:	f7ff ff8b 	bl	b77a4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b788e:	4621      	mov	r1, r4
   b7890:	a806      	add	r0, sp, #24
   b7892:	f7ff ff87 	bl	b77a4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7896:	a806      	add	r0, sp, #24
   b7898:	f7fe fa21 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
   b789c:	a802      	add	r0, sp, #8
   b789e:	f7fe fa1e 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
}
   b78a2:	b00a      	add	sp, #40	; 0x28
   b78a4:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b78a6:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b78a8:	e7eb      	b.n	b7882 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b78aa <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b78aa:	b570      	push	{r4, r5, r6, lr}
   b78ac:	4604      	mov	r4, r0
   b78ae:	b08c      	sub	sp, #48	; 0x30
   b78b0:	460e      	mov	r6, r1
   b78b2:	9201      	str	r2, [sp, #4]
   b78b4:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b78b6:	f7fe fd0d 	bl	b62d4 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b78ba:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b78bc:	9901      	ldr	r1, [sp, #4]
   b78be:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b78c2:	f7fe f8c4 	bl	b5a4e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b78c6:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b78ca:	b1cd      	cbz	r5, b7900 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b78cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b78ce:	9502      	str	r5, [sp, #8]
   b78d0:	a902      	add	r1, sp, #8
   b78d2:	a804      	add	r0, sp, #16
   b78d4:	9303      	str	r3, [sp, #12]
   b78d6:	f7ff f80b 	bl	b68f0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b78da:	2300      	movs	r3, #0
	__x.swap(*this);
   b78dc:	a908      	add	r1, sp, #32
   b78de:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b78e0:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b78e2:	f7ff ff5f 	bl	b77a4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b78e6:	4631      	mov	r1, r6
   b78e8:	a808      	add	r0, sp, #32
   b78ea:	f7ff ff5b 	bl	b77a4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b78ee:	a808      	add	r0, sp, #32
   b78f0:	f7fe f9f5 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
   b78f4:	a804      	add	r0, sp, #16
   b78f6:	f7fe f9f2 	bl	b5cde <_ZNSt14_Function_baseD1Ev>
    }
   b78fa:	4620      	mov	r0, r4
   b78fc:	b00c      	add	sp, #48	; 0x30
   b78fe:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7900:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7902:	e7ea      	b.n	b78da <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>

000b7904 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7908:	b087      	sub	sp, #28
   b790a:	461d      	mov	r5, r3
   b790c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7910:	4680      	mov	r8, r0
   b7912:	468b      	mov	fp, r1
   b7914:	4692      	mov	sl, r2
   b7916:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7918:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b791a:	2200      	movs	r2, #0
   b791c:	2068      	movs	r0, #104	; 0x68
   b791e:	9102      	str	r1, [sp, #8]
   b7920:	9204      	str	r2, [sp, #16]
   b7922:	f7fc fbb6 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7926:	1e06      	subs	r6, r0, #0
   b7928:	f106 090c 	add.w	r9, r6, #12
   b792c:	d018      	beq.n	b7960 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b792e:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7930:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7932:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7936:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7938:	4a15      	ldr	r2, [pc, #84]	; (b7990 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b793a:	f847 2b20 	str.w	r2, [r7], #32
   b793e:	9b03      	ldr	r3, [sp, #12]
   b7940:	9100      	str	r1, [sp, #0]
   b7942:	465a      	mov	r2, fp
   b7944:	4651      	mov	r1, sl
   b7946:	4648      	mov	r0, r9
   b7948:	f7ff ffaf 	bl	b78aa <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b794c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b794e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7950:	682b      	ldr	r3, [r5, #0]
   b7952:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7956:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b795a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b795c:	6823      	ldr	r3, [r4, #0]
   b795e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7960:	a904      	add	r1, sp, #16
   b7962:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7964:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7968:	f7ff f87a 	bl	b6a60 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b796c:	a805      	add	r0, sp, #20
   b796e:	f7ff f800 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7972:	f8d8 3000 	ldr.w	r3, [r8]
   b7976:	b93b      	cbnz	r3, b7988 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7978:	4a06      	ldr	r2, [pc, #24]	; (b7994 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b797a:	4907      	ldr	r1, [pc, #28]	; (b7998 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b797c:	200a      	movs	r0, #10
}
   b797e:	b007      	add	sp, #28
   b7980:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7984:	f7fd bde6 	b.w	b5554 <panic_>
}
   b7988:	b007      	add	sp, #28
   b798a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b798e:	bf00      	nop
   b7990:	000ba9a0 	.word	0x000ba9a0
   b7994:	000b5159 	.word	0x000b5159
   b7998:	000ba728 	.word	0x000ba728

000b799c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b799c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b799e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79a0:	4604      	mov	r4, r0
   b79a2:	460d      	mov	r5, r1
   b79a4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b79a6:	d914      	bls.n	b79d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b79a8:	4290      	cmp	r0, r2
   b79aa:	d213      	bcs.n	b79d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b79ac:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b79b0:	1a75      	subs	r5, r6, r1
   b79b2:	f1a1 0708 	sub.w	r7, r1, #8
   b79b6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b79b8:	42b7      	cmp	r7, r6
   b79ba:	d018      	beq.n	b79ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b79bc:	b11c      	cbz	r4, b79c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b79be:	4631      	mov	r1, r6
   b79c0:	4620      	mov	r0, r4
   b79c2:	f7fe ffc2 	bl	b694a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b79c6:	1d30      	adds	r0, r6, #4
   b79c8:	f7fe ffd3 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b79cc:	3e08      	subs	r6, #8
   b79ce:	3c08      	subs	r4, #8
   b79d0:	e7f2      	b.n	b79b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b79d2:	d00c      	beq.n	b79ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b79d4:	42b5      	cmp	r5, r6
   b79d6:	d00a      	beq.n	b79ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b79d8:	b11c      	cbz	r4, b79e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b79da:	4629      	mov	r1, r5
   b79dc:	4620      	mov	r0, r4
   b79de:	f7fe ffb4 	bl	b694a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b79e2:	1d28      	adds	r0, r5, #4
   b79e4:	f7fe ffc5 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b79e8:	3508      	adds	r5, #8
   b79ea:	3408      	adds	r4, #8
   b79ec:	e7f2      	b.n	b79d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b79ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b79f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b79f0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b79f2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b79f4:	4605      	mov	r5, r0
        if (n > 0) {
   b79f6:	dd11      	ble.n	b7a1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b79f8:	00f0      	lsls	r0, r6, #3
   b79fa:	f7fd fe47 	bl	b568c <malloc>
            if (!d) {
   b79fe:	4604      	mov	r4, r0
   b7a00:	b158      	cbz	r0, b7a1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7a02:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7a06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7a0a:	f7ff ffc7 	bl	b799c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7a0e:	6828      	ldr	r0, [r5, #0]
   b7a10:	f7fd fe44 	bl	b569c <free>
        data_ = d;
   b7a14:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7a16:	60ae      	str	r6, [r5, #8]
        return true;
   b7a18:	2001      	movs	r0, #1
    }
   b7a1a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7a1c:	2400      	movs	r4, #0
   b7a1e:	e7f6      	b.n	b7a0e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7a20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b7a24:	2300      	movs	r3, #0
   b7a26:	e9c0 3300 	strd	r3, r3, [r0]
   b7a2a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7a2c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7a2e:	6849      	ldr	r1, [r1, #4]
   b7a30:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7a32:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7a34:	dd13      	ble.n	b7a5e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b7a36:	f7ff ffdb 	bl	b79f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7a3a:	b180      	cbz	r0, b7a5e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7a3c:	e9d5 6300 	ldrd	r6, r3, [r5]
   b7a40:	6827      	ldr	r7, [r4, #0]
   b7a42:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b7a46:	45b0      	cmp	r8, r6
   b7a48:	d007      	beq.n	b7a5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b7a4a:	b11f      	cbz	r7, b7a54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b7a4c:	4631      	mov	r1, r6
   b7a4e:	4638      	mov	r0, r7
   b7a50:	f7fe ff7b 	bl	b694a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b7a54:	3608      	adds	r6, #8
   b7a56:	3708      	adds	r7, #8
   b7a58:	e7f5      	b.n	b7a46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b7a5a:	686b      	ldr	r3, [r5, #4]
   b7a5c:	6063      	str	r3, [r4, #4]
}
   b7a5e:	4620      	mov	r0, r4
   b7a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a64 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b7a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7a66:	460d      	mov	r5, r1
   b7a68:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7a6a:	a801      	add	r0, sp, #4
   b7a6c:	f7fe f984 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b7a70:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b7a72:	4620      	mov	r0, r4
   b7a74:	310c      	adds	r1, #12
   b7a76:	f7ff ffd3 	bl	b7a20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b7a7a:	a801      	add	r0, sp, #4
   b7a7c:	f7fe f98a 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7a80:	4620      	mov	r0, r4
   b7a82:	b003      	add	sp, #12
   b7a84:	bd30      	pop	{r4, r5, pc}

000b7a86 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b7a86:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b7a88:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b7a8a:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b7a8c:	4605      	mov	r5, r0
   b7a8e:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b7a90:	b933      	cbnz	r3, b7aa0 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b7a92:	4608      	mov	r0, r1
   b7a94:	f7fe f8e8 	bl	b5c68 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b7a98:	b910      	cbnz	r0, b7aa0 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b7a9a:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b7a9c:	2201      	movs	r2, #1
   b7a9e:	729a      	strb	r2, [r3, #10]
    return services();
   b7aa0:	4628      	mov	r0, r5
   b7aa2:	4621      	mov	r1, r4
   b7aa4:	f7ff ffde 	bl	b7a64 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b7aa8:	4628      	mov	r0, r5
   b7aaa:	bd38      	pop	{r3, r4, r5, pc}

000b7aac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7aac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7aae:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7ab0:	6845      	ldr	r5, [r0, #4]
   b7ab2:	4668      	mov	r0, sp
   b7ab4:	f7fe ff49 	bl	b694a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ab8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7abc:	4299      	cmp	r1, r3
   b7abe:	da10      	bge.n	b7ae2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7ac0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7ac2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7ac4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7ac8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7acc:	4629      	mov	r1, r5
   b7ace:	f105 0008 	add.w	r0, r5, #8
   b7ad2:	f7ff ff63 	bl	b799c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7ad6:	b98d      	cbnz	r5, b7afc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7ad8:	6863      	ldr	r3, [r4, #4]
   b7ada:	3301      	adds	r3, #1
   b7adc:	6063      	str	r3, [r4, #4]
    return true;
   b7ade:	2601      	movs	r6, #1
   b7ae0:	e006      	b.n	b7af0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ae2:	3101      	adds	r1, #1
   b7ae4:	4620      	mov	r0, r4
   b7ae6:	f7ff ff83 	bl	b79f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7aea:	4606      	mov	r6, r0
   b7aec:	2800      	cmp	r0, #0
   b7aee:	d1e7      	bne.n	b7ac0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b7af0:	a801      	add	r0, sp, #4
   b7af2:	f7fe ff3e 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7af6:	4630      	mov	r0, r6
   b7af8:	b002      	add	sp, #8
   b7afa:	bd70      	pop	{r4, r5, r6, pc}
   b7afc:	4669      	mov	r1, sp
   b7afe:	4628      	mov	r0, r5
   b7b00:	f7fe ff23 	bl	b694a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7b04:	e7e8      	b.n	b7ad8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b7b08 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b7b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b7b0c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b7bc8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b7b10:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b7bcc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b7b14:	b093      	sub	sp, #76	; 0x4c
   b7b16:	4605      	mov	r5, r0
   b7b18:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b7b1a:	2700      	movs	r7, #0
   b7b1c:	682b      	ldr	r3, [r5, #0]
   b7b1e:	42bb      	cmp	r3, r7
   b7b20:	d94e      	bls.n	b7bc0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b7b22:	a803      	add	r0, sp, #12
   b7b24:	f7fe fcdc 	bl	b64e0 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b7b28:	261c      	movs	r6, #28
   b7b2a:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b7b2c:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b7b2e:	437e      	muls	r6, r7
   b7b30:	4432      	add	r2, r6
   b7b32:	f10d 0c14 	add.w	ip, sp, #20
   b7b36:	1d13      	adds	r3, r2, #4
   b7b38:	46e3      	mov	fp, ip
   b7b3a:	3214      	adds	r2, #20
   b7b3c:	6818      	ldr	r0, [r3, #0]
   b7b3e:	6859      	ldr	r1, [r3, #4]
   b7b40:	46e6      	mov	lr, ip
   b7b42:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b7b46:	3308      	adds	r3, #8
   b7b48:	4293      	cmp	r3, r2
   b7b4a:	46f4      	mov	ip, lr
   b7b4c:	d1f6      	bne.n	b7b3c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b7b4e:	6818      	ldr	r0, [r3, #0]
   b7b50:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b7b54:	4659      	mov	r1, fp
   b7b56:	a80a      	add	r0, sp, #40	; 0x28
   b7b58:	f7fe f9d0 	bl	b5efc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b7b5c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b7b60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7b66:	f8dc 3000 	ldr.w	r3, [ip]
   b7b6a:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b7b6c:	686b      	ldr	r3, [r5, #4]
   b7b6e:	9a03      	ldr	r2, [sp, #12]
   b7b70:	4433      	add	r3, r6
   b7b72:	a903      	add	r1, sp, #12
   b7b74:	8b1b      	ldrh	r3, [r3, #24]
   b7b76:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b7b78:	686b      	ldr	r3, [r5, #4]
   b7b7a:	4433      	add	r3, r6
   b7b7c:	8b5b      	ldrh	r3, [r3, #26]
   b7b7e:	82d3      	strh	r3, [r2, #22]
        return services_;
   b7b80:	f8d8 0000 	ldr.w	r0, [r8]
   b7b84:	f100 040c 	add.w	r4, r0, #12
   b7b88:	a80a      	add	r0, sp, #40	; 0x28
   b7b8a:	f7fe fede 	bl	b694a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b7b8e:	4620      	mov	r0, r4
   b7b90:	a90a      	add	r1, sp, #40	; 0x28
   b7b92:	f7ff ff8b 	bl	b7aac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7b96:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7b98:	a80b      	add	r0, sp, #44	; 0x2c
   b7b9a:	f7fe feea 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b9e:	b954      	cbnz	r4, b7bb6 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b7ba0:	2320      	movs	r3, #32
   b7ba2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b7ba6:	f8cd 9000 	str.w	r9, [sp]
   b7baa:	4623      	mov	r3, r4
   b7bac:	aa0a      	add	r2, sp, #40	; 0x28
   b7bae:	4651      	mov	r1, sl
   b7bb0:	2032      	movs	r0, #50	; 0x32
   b7bb2:	f7fd fcd7 	bl	b5564 <log_message>
   b7bb6:	a804      	add	r0, sp, #16
   b7bb8:	f7fe fedb 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b7bbc:	3701      	adds	r7, #1
   b7bbe:	e7ad      	b.n	b7b1c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b7bc0:	b013      	add	sp, #76	; 0x4c
   b7bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7bc6:	bf00      	nop
   b7bc8:	000ba83d 	.word	0x000ba83d
   b7bcc:	000ba73f 	.word	0x000ba73f

000b7bd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7bd0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bd4:	4604      	mov	r4, r0
   b7bd6:	460d      	mov	r5, r1
   b7bd8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7bda:	d914      	bls.n	b7c06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7bdc:	4290      	cmp	r0, r2
   b7bde:	d213      	bcs.n	b7c08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7be0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7be4:	1a75      	subs	r5, r6, r1
   b7be6:	f1a1 0708 	sub.w	r7, r1, #8
   b7bea:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7bec:	42b7      	cmp	r7, r6
   b7bee:	d018      	beq.n	b7c22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7bf0:	b11c      	cbz	r4, b7bfa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7bf2:	4631      	mov	r1, r6
   b7bf4:	4620      	mov	r0, r4
   b7bf6:	f7fe fe9a 	bl	b692e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7bfa:	1d30      	adds	r0, r6, #4
   b7bfc:	f7fe feb9 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7c00:	3e08      	subs	r6, #8
   b7c02:	3c08      	subs	r4, #8
   b7c04:	e7f2      	b.n	b7bec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7c06:	d00c      	beq.n	b7c22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7c08:	42b5      	cmp	r5, r6
   b7c0a:	d00a      	beq.n	b7c22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7c0c:	b11c      	cbz	r4, b7c16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7c0e:	4629      	mov	r1, r5
   b7c10:	4620      	mov	r0, r4
   b7c12:	f7fe fe8c 	bl	b692e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7c16:	1d28      	adds	r0, r5, #4
   b7c18:	f7fe feab 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7c1c:	3508      	adds	r5, #8
   b7c1e:	3408      	adds	r4, #8
   b7c20:	e7f2      	b.n	b7c08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7c24:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7c26:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7c28:	4605      	mov	r5, r0
        if (n > 0) {
   b7c2a:	dd11      	ble.n	b7c50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7c2c:	00f0      	lsls	r0, r6, #3
   b7c2e:	f7fd fd2d 	bl	b568c <malloc>
            if (!d) {
   b7c32:	4604      	mov	r4, r0
   b7c34:	b158      	cbz	r0, b7c4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7c36:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7c3a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7c3e:	f7ff ffc7 	bl	b7bd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7c42:	6828      	ldr	r0, [r5, #0]
   b7c44:	f7fd fd2a 	bl	b569c <free>
        data_ = d;
   b7c48:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7c4a:	60ae      	str	r6, [r5, #8]
        return true;
   b7c4c:	2001      	movs	r0, #1
    }
   b7c4e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7c50:	2400      	movs	r4, #0
   b7c52:	e7f6      	b.n	b7c42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7c54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b7c58:	2300      	movs	r3, #0
   b7c5a:	e9c0 3300 	strd	r3, r3, [r0]
   b7c5e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7c60:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7c62:	6849      	ldr	r1, [r1, #4]
   b7c64:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7c66:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7c68:	dd13      	ble.n	b7c92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b7c6a:	f7ff ffdb 	bl	b7c24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7c6e:	b180      	cbz	r0, b7c92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7c70:	e9d5 6300 	ldrd	r6, r3, [r5]
   b7c74:	6827      	ldr	r7, [r4, #0]
   b7c76:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b7c7a:	45b0      	cmp	r8, r6
   b7c7c:	d007      	beq.n	b7c8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b7c7e:	b11f      	cbz	r7, b7c88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b7c80:	4631      	mov	r1, r6
   b7c82:	4638      	mov	r0, r7
   b7c84:	f7fe fe53 	bl	b692e <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b7c88:	3608      	adds	r6, #8
   b7c8a:	3708      	adds	r7, #8
   b7c8c:	e7f5      	b.n	b7c7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b7c8e:	686b      	ldr	r3, [r5, #4]
   b7c90:	6063      	str	r3, [r4, #4]
}
   b7c92:	4620      	mov	r0, r4
   b7c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7c98 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b7c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c9a:	460d      	mov	r5, r1
   b7c9c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7c9e:	a801      	add	r0, sp, #4
   b7ca0:	f7fe f86a 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b7ca4:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b7ca6:	4620      	mov	r0, r4
   b7ca8:	3118      	adds	r1, #24
   b7caa:	f7ff ffd3 	bl	b7c54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b7cae:	a801      	add	r0, sp, #4
   b7cb0:	f7fe f870 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7cb4:	4620      	mov	r0, r4
   b7cb6:	b003      	add	sp, #12
   b7cb8:	bd30      	pop	{r4, r5, pc}

000b7cba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7cbc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7cbe:	6845      	ldr	r5, [r0, #4]
   b7cc0:	4668      	mov	r0, sp
   b7cc2:	f7fe fe34 	bl	b692e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7cc6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7cca:	4299      	cmp	r1, r3
   b7ccc:	da10      	bge.n	b7cf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7cce:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7cd0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7cd2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7cd6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7cda:	4629      	mov	r1, r5
   b7cdc:	f105 0008 	add.w	r0, r5, #8
   b7ce0:	f7ff ff76 	bl	b7bd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7ce4:	b98d      	cbnz	r5, b7d0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7ce6:	6863      	ldr	r3, [r4, #4]
   b7ce8:	3301      	adds	r3, #1
   b7cea:	6063      	str	r3, [r4, #4]
    return true;
   b7cec:	2601      	movs	r6, #1
   b7cee:	e006      	b.n	b7cfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7cf0:	3101      	adds	r1, #1
   b7cf2:	4620      	mov	r0, r4
   b7cf4:	f7ff ff96 	bl	b7c24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7cf8:	4606      	mov	r6, r0
   b7cfa:	2800      	cmp	r0, #0
   b7cfc:	d1e7      	bne.n	b7cce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7cfe:	a801      	add	r0, sp, #4
   b7d00:	f7fe fe37 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7d04:	4630      	mov	r0, r6
   b7d06:	b002      	add	sp, #8
   b7d08:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7d0a:	4669      	mov	r1, sp
   b7d0c:	4628      	mov	r0, r5
   b7d0e:	f7fe fe0e 	bl	b692e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7d12:	e7e8      	b.n	b7ce6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7d14 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b7d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7d16:	b085      	sub	sp, #20
   b7d18:	4605      	mov	r5, r0
    WiringBleLock lk;
   b7d1a:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b7d1c:	460c      	mov	r4, r1
   b7d1e:	4617      	mov	r7, r2
    WiringBleLock lk;
   b7d20:	f7fe f82a 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b7d24:	2300      	movs	r3, #0
   b7d26:	e9c5 3300 	strd	r3, r3, [r5]
   b7d2a:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b7d2c:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b7d2e:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b7d32:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b7d36:	42b4      	cmp	r4, r6
   b7d38:	d011      	beq.n	b7d5e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b7d3a:	6838      	ldr	r0, [r7, #0]
   b7d3c:	4621      	mov	r1, r4
   b7d3e:	f7fe fae9 	bl	b6314 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b7d42:	b150      	cbz	r0, b7d5a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b7d44:	4621      	mov	r1, r4
   b7d46:	a802      	add	r0, sp, #8
   b7d48:	f7fe fdf1 	bl	b692e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7d4c:	a902      	add	r1, sp, #8
   b7d4e:	4628      	mov	r0, r5
   b7d50:	f7ff ffb3 	bl	b7cba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b7d54:	a803      	add	r0, sp, #12
   b7d56:	f7fe fe0c 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b7d5a:	3408      	adds	r4, #8
   b7d5c:	e7eb      	b.n	b7d36 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b7d5e:	a801      	add	r0, sp, #4
   b7d60:	f7fe f818 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7d64:	4628      	mov	r0, r5
   b7d66:	b005      	add	sp, #20
   b7d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b7d6c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b7d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b7d70:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b7d72:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b7d74:	b091      	sub	sp, #68	; 0x44
   b7d76:	4606      	mov	r6, r0
   b7d78:	460f      	mov	r7, r1
   b7d7a:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b7d7c:	b933      	cbnz	r3, b7d8c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b7d7e:	e9c0 3300 	strd	r3, r3, [r0]
   b7d82:	6083      	str	r3, [r0, #8]
}
   b7d84:	4630      	mov	r0, r6
   b7d86:	b011      	add	sp, #68	; 0x44
   b7d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b7d8c:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b7d8e:	7e0d      	ldrb	r5, [r1, #24]
   b7d90:	2d00      	cmp	r5, #0
   b7d92:	d158      	bne.n	b7e46 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b7d94:	2320      	movs	r3, #32
   b7d96:	462a      	mov	r2, r5
   b7d98:	a803      	add	r0, sp, #12
   b7d9a:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b7d9e:	f7fe fa2c 	bl	b61fa <_ZNK8particle7BleUuid8toStringEb>
   b7da2:	9b03      	ldr	r3, [sp, #12]
   b7da4:	9301      	str	r3, [sp, #4]
   b7da6:	4b2b      	ldr	r3, [pc, #172]	; (b7e54 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b7da8:	492b      	ldr	r1, [pc, #172]	; (b7e58 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b7daa:	9300      	str	r3, [sp, #0]
   b7dac:	aa08      	add	r2, sp, #32
   b7dae:	462b      	mov	r3, r5
   b7db0:	2001      	movs	r0, #1
   b7db2:	f7fd fbd7 	bl	b5564 <log_message>
   b7db6:	a803      	add	r0, sp, #12
   b7db8:	f7fd fda8 	bl	b590c <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b7dbc:	231c      	movs	r3, #28
   b7dbe:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b7dc2:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b7dc6:	8a9a      	ldrh	r2, [r3, #20]
   b7dc8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b7dcc:	8adb      	ldrh	r3, [r3, #22]
   b7dce:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b7dd2:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b7dd4:	4a21      	ldr	r2, [pc, #132]	; (b7e5c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b7dd6:	8818      	ldrh	r0, [r3, #0]
   b7dd8:	9500      	str	r5, [sp, #0]
   b7dda:	a908      	add	r1, sp, #32
   b7ddc:	f7fd fa26 	bl	b522c <hal_ble_gatt_client_discover_characteristics>
   b7de0:	2800      	cmp	r0, #0
   b7de2:	db30      	blt.n	b7e46 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b7de4:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b7de6:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b7dea:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b7dee:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b7df0:	f1a4 0308 	sub.w	r3, r4, #8
   b7df4:	4599      	cmp	r9, r3
   b7df6:	d022      	beq.n	b7e3e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b7df8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b7dfc:	89db      	ldrh	r3, [r3, #14]
   b7dfe:	2b00      	cmp	r3, #0
   b7e00:	d0f5      	beq.n	b7dee <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b7e02:	2210      	movs	r2, #16
   b7e04:	2100      	movs	r1, #0
   b7e06:	eb0d 0002 	add.w	r0, sp, r2
   b7e0a:	9503      	str	r5, [sp, #12]
   b7e0c:	f002 f846 	bl	b9e9c <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b7e10:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b7e14:	89d9      	ldrh	r1, [r3, #14]
   b7e16:	683b      	ldr	r3, [r7, #0]
   b7e18:	aa03      	add	r2, sp, #12
   b7e1a:	8818      	ldrh	r0, [r3, #0]
   b7e1c:	9500      	str	r5, [sp, #0]
   b7e1e:	2313      	movs	r3, #19
   b7e20:	f7fd fa22 	bl	b5268 <hal_ble_gatt_client_read>
                if (len > 0) {
   b7e24:	2800      	cmp	r0, #0
   b7e26:	d0e2      	beq.n	b7dee <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b7e28:	ab10      	add	r3, sp, #64	; 0x40
   b7e2a:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b7e2c:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b7e2e:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b7e32:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b7e36:	303c      	adds	r0, #60	; 0x3c
   b7e38:	f7fd fe09 	bl	b5a4e <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b7e3c:	e7d7      	b.n	b7dee <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b7e3e:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b7e42:	2201      	movs	r2, #1
   b7e44:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b7e46:	4642      	mov	r2, r8
   b7e48:	4639      	mov	r1, r7
   b7e4a:	4630      	mov	r0, r6
   b7e4c:	f7ff ff62 	bl	b7d14 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b7e50:	e798      	b.n	b7d84 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b7e52:	bf00      	nop
   b7e54:	000ba862 	.word	0x000ba862
   b7e58:	000ba73f 	.word	0x000ba73f
   b7e5c:	000b8005 	.word	0x000b8005

000b7e60 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b7e60:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b7e62:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b7e64:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b7e66:	b085      	sub	sp, #20
   b7e68:	4606      	mov	r6, r0
   b7e6a:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b7e6c:	b92b      	cbnz	r3, b7e7a <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b7e6e:	a801      	add	r0, sp, #4
   b7e70:	f7ff fe09 	bl	b7a86 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b7e74:	a801      	add	r0, sp, #4
   b7e76:	f7fe fd92 	bl	b699e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b7e7a:	682b      	ldr	r3, [r5, #0]
   b7e7c:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b7e80:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b7e84:	42bc      	cmp	r4, r7
   b7e86:	d009      	beq.n	b7e9c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b7e88:	4622      	mov	r2, r4
   b7e8a:	4629      	mov	r1, r5
   b7e8c:	a801      	add	r0, sp, #4
   b7e8e:	f7ff ff6d 	bl	b7d6c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b7e92:	a801      	add	r0, sp, #4
   b7e94:	f7fe fd95 	bl	b69c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b7e98:	3408      	adds	r4, #8
   b7e9a:	e7f3      	b.n	b7e84 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b7e9c:	4630      	mov	r0, r6
   b7e9e:	4629      	mov	r1, r5
   b7ea0:	f7ff fefa 	bl	b7c98 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b7ea4:	4630      	mov	r0, r6
   b7ea6:	b005      	add	sp, #20
   b7ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b7eac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b7eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7eb0:	4605      	mov	r5, r0
   b7eb2:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b7eb4:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b7eb6:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b7eb8:	460f      	mov	r7, r1
    return address_;
   b7eba:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b7ebc:	4698      	mov	r8, r3
    return address_;
   b7ebe:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b7ec0:	4b41      	ldr	r3, [pc, #260]	; (b7fc8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b7ec2:	9304      	str	r3, [sp, #16]
    return address_;
   b7ec4:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b7ec6:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b7ec8:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b7ecc:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b7ed0:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b7ed4:	f7fe fbf4 	bl	b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7ed8:	4b3c      	ldr	r3, [pc, #240]	; (b7fcc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b7eda:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b7edc:	f7fe fbf0 	bl	b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b7ee0:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7ee2:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b7ee4:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b7ee6:	464a      	mov	r2, r9
   b7ee8:	a804      	add	r0, sp, #16
   b7eea:	f7fd f9c7 	bl	b527c <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b7eee:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b7ef0:	4604      	mov	r4, r0
   b7ef2:	b138      	cbz	r0, b7f04 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b7ef4:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7efa:	801a      	strh	r2, [r3, #0]
}
   b7efc:	4620      	mov	r0, r4
   b7efe:	b013      	add	sp, #76	; 0x4c
   b7f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b7f04:	4639      	mov	r1, r7
   b7f06:	4628      	mov	r0, r5
   b7f08:	f7fe fb5e 	bl	b65c8 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b7f0c:	a803      	add	r0, sp, #12
   b7f0e:	f7fd ff33 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b7f12:	f7fe fbd5 	bl	b66c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b7f16:	6807      	ldr	r7, [r0, #0]
   b7f18:	4629      	mov	r1, r5
   b7f1a:	3718      	adds	r7, #24
   b7f1c:	4630      	mov	r0, r6
   b7f1e:	f7fe fd1e 	bl	b695e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b7f22:	4631      	mov	r1, r6
   b7f24:	4638      	mov	r0, r7
   b7f26:	f7ff f89d 	bl	b7064 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7f2a:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b7f2c:	a80b      	add	r0, sp, #44	; 0x2c
   b7f2e:	f7fe fd20 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7f32:	f04f 0920 	mov.w	r9, #32
   b7f36:	bb1f      	cbnz	r7, b7f80 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b7f38:	4632      	mov	r2, r6
   b7f3a:	4b25      	ldr	r3, [pc, #148]	; (b7fd0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b7f3c:	4e25      	ldr	r6, [pc, #148]	; (b7fd4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b7f3e:	4926      	ldr	r1, [pc, #152]	; (b7fd8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b7f40:	9300      	str	r3, [sp, #0]
   b7f42:	2032      	movs	r0, #50	; 0x32
   b7f44:	4623      	mov	r3, r4
   b7f46:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b7f4a:	f7fd fb0b 	bl	b5564 <log_message>
   b7f4e:	6830      	ldr	r0, [r6, #0]
   b7f50:	f7fd f9e0 	bl	b5314 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b7f54:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b7f56:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b7f5a:	4621      	mov	r1, r4
   b7f5c:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b7f5e:	4c1f      	ldr	r4, [pc, #124]	; (b7fdc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b7f60:	f7fd f93c 	bl	b51dc <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b7f64:	6830      	ldr	r0, [r6, #0]
   b7f66:	f7fd f9cd 	bl	b5304 <os_mutex_recursive_lock>
        locked_ = true;
   b7f6a:	2301      	movs	r3, #1
   b7f6c:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b7f70:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7f76:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b7f78:	a803      	add	r0, sp, #12
   b7f7a:	f7fd ff0b 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
   b7f7e:	e7bd      	b.n	b7efc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b7f80:	a803      	add	r0, sp, #12
   b7f82:	f7fd ff07 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b7f86:	4b16      	ldr	r3, [pc, #88]	; (b7fe0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b7f88:	9300      	str	r3, [sp, #0]
   b7f8a:	4913      	ldr	r1, [pc, #76]	; (b7fd8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b7f8c:	4623      	mov	r3, r4
   b7f8e:	4632      	mov	r2, r6
   b7f90:	2001      	movs	r0, #1
   b7f92:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b7f96:	f7fd fae5 	bl	b5564 <log_message>
    if (automatic) {
   b7f9a:	f1b8 0f00 	cmp.w	r8, #0
   b7f9e:	d0ad      	beq.n	b7efc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b7fa0:	4629      	mov	r1, r5
   b7fa2:	4630      	mov	r0, r6
   b7fa4:	f7ff ff5c 	bl	b7e60 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b7fa8:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b7fac:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b7fb0:	42bd      	cmp	r5, r7
   b7fb2:	d005      	beq.n	b7fc0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b7fb4:	4628      	mov	r0, r5
   b7fb6:	2101      	movs	r1, #1
   b7fb8:	f7fe fa58 	bl	b646c <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b7fbc:	3508      	adds	r5, #8
   b7fbe:	e7f7      	b.n	b7fb0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b7fc0:	4630      	mov	r0, r6
   b7fc2:	f7fe fcfe 	bl	b69c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7fc6:	e799      	b.n	b7efc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b7fc8:	00180003 	.word	0x00180003
   b7fcc:	000b711d 	.word	0x000b711d
   b7fd0:	000ba894 	.word	0x000ba894
   b7fd4:	2003e6d8 	.word	0x2003e6d8
   b7fd8:	000ba73f 	.word	0x000ba73f
   b7fdc:	fffffefc 	.word	0xfffffefc
   b7fe0:	000ba8b0 	.word	0x000ba8b0

000b7fe4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b7fe4:	b513      	push	{r0, r1, r4, lr}
   b7fe6:	4604      	mov	r4, r0
   b7fe8:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b7fec:	f7fe fab8 	bl	b6560 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b7ff0:	9b00      	ldr	r3, [sp, #0]
   b7ff2:	9901      	ldr	r1, [sp, #4]
   b7ff4:	2200      	movs	r2, #0
   b7ff6:	4620      	mov	r0, r4
   b7ff8:	f7ff ff58 	bl	b7eac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   b7ffc:	4620      	mov	r0, r4
   b7ffe:	b002      	add	sp, #8
   b8000:	bd10      	pop	{r4, pc}
	...

000b8004 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b8004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b8008:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b800a:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b800c:	2600      	movs	r6, #0
   b800e:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b8012:	4b66      	ldr	r3, [pc, #408]	; (b81ac <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b8014:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b8016:	4605      	mov	r5, r0
   b8018:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b801a:	4633      	mov	r3, r6
   b801c:	4964      	ldr	r1, [pc, #400]	; (b81b0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b801e:	f8df 9194 	ldr.w	r9, [pc, #404]	; b81b4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b8022:	f8df 818c 	ldr.w	r8, [pc, #396]	; b81b0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b8026:	f8df a190 	ldr.w	sl, [pc, #400]	; b81b8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b802a:	aa0c      	add	r2, sp, #48	; 0x30
   b802c:	2001      	movs	r0, #1
   b802e:	f7fd fa99 	bl	b5564 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b8032:	682b      	ldr	r3, [r5, #0]
   b8034:	42b3      	cmp	r3, r6
   b8036:	f240 80b5 	bls.w	b81a4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b803a:	a803      	add	r0, sp, #12
   b803c:	f7fe f990 	bl	b6360 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b8040:	a805      	add	r0, sp, #20
   b8042:	f7fe fa4d 	bl	b64e0 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b8046:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b804a:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b804c:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b804e:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b8052:	445b      	add	r3, fp
        this->size = halHandles.size;
   b8054:	8bd9      	ldrh	r1, [r3, #30]
   b8056:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b8058:	8c19      	ldrh	r1, [r3, #32]
   b805a:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b805c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b805e:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b8060:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b8062:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b8064:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b8066:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b8068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b806a:	8253      	strh	r3, [r2, #18]
   b806c:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b8070:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b8074:	429a      	cmp	r2, r3
   b8076:	d07d      	beq.n	b8174 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b8078:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b807a:	8ac4      	ldrh	r4, [r0, #22]
   b807c:	428c      	cmp	r4, r1
   b807e:	d377      	bcc.n	b8170 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b8080:	8a84      	ldrh	r4, [r0, #20]
   b8082:	428c      	cmp	r4, r1
   b8084:	d874      	bhi.n	b8170 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8086:	6859      	ldr	r1, [r3, #4]
   b8088:	9005      	str	r0, [sp, #20]
   b808a:	a806      	add	r0, sp, #24
   b808c:	f7fd fe4f 	bl	b5d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b8090:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b8094:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b8098:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b809c:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b80a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b80a2:	f8dc 3000 	ldr.w	r3, [ip]
   b80a6:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b80a8:	892b      	ldrh	r3, [r5, #8]
   b80aa:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b80ae:	686b      	ldr	r3, [r5, #4]
   b80b0:	9c03      	ldr	r4, [sp, #12]
   b80b2:	445b      	add	r3, fp
   b80b4:	7e5b      	ldrb	r3, [r3, #25]
   b80b6:	f013 0f02 	tst.w	r3, #2
   b80ba:	d16e      	bne.n	b819a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b80bc:	686b      	ldr	r3, [r5, #4]
   b80be:	445b      	add	r3, fp
   b80c0:	7e5b      	ldrb	r3, [r3, #25]
   b80c2:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b80c4:	bf42      	ittt	mi
   b80c6:	7923      	ldrbmi	r3, [r4, #4]
   b80c8:	f043 0304 	orrmi.w	r3, r3, #4
   b80cc:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b80ce:	686b      	ldr	r3, [r5, #4]
   b80d0:	445b      	add	r3, fp
   b80d2:	7e5b      	ldrb	r3, [r3, #25]
   b80d4:	0719      	lsls	r1, r3, #28
   b80d6:	bf42      	ittt	mi
   b80d8:	7923      	ldrbmi	r3, [r4, #4]
   b80da:	f043 0308 	orrmi.w	r3, r3, #8
   b80de:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b80e0:	686b      	ldr	r3, [r5, #4]
   b80e2:	445b      	add	r3, fp
   b80e4:	7e5b      	ldrb	r3, [r3, #25]
   b80e6:	06da      	lsls	r2, r3, #27
   b80e8:	bf42      	ittt	mi
   b80ea:	7923      	ldrbmi	r3, [r4, #4]
   b80ec:	f043 0310 	orrmi.w	r3, r3, #16
   b80f0:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b80f2:	686b      	ldr	r3, [r5, #4]
   b80f4:	445b      	add	r3, fp
   b80f6:	aa07      	add	r2, sp, #28
   b80f8:	7e5b      	ldrb	r3, [r3, #25]
   b80fa:	069b      	lsls	r3, r3, #26
   b80fc:	bf42      	ittt	mi
   b80fe:	7923      	ldrbmi	r3, [r4, #4]
   b8100:	f043 0320 	orrmi.w	r3, r3, #32
   b8104:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b8106:	686b      	ldr	r3, [r5, #4]
   b8108:	449b      	add	fp, r3
   b810a:	f10b 0304 	add.w	r3, fp, #4
   b810e:	4696      	mov	lr, r2
   b8110:	f10b 0b14 	add.w	fp, fp, #20
   b8114:	6818      	ldr	r0, [r3, #0]
   b8116:	6859      	ldr	r1, [r3, #4]
   b8118:	4694      	mov	ip, r2
   b811a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b811e:	3308      	adds	r3, #8
   b8120:	455b      	cmp	r3, fp
   b8122:	4662      	mov	r2, ip
   b8124:	d1f6      	bne.n	b8114 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b8126:	6818      	ldr	r0, [r3, #0]
   b8128:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b812c:	4671      	mov	r1, lr
   b812e:	a80c      	add	r0, sp, #48	; 0x30
   b8130:	f7fd fee4 	bl	b5efc <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b8134:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b8138:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b813c:	3414      	adds	r4, #20
   b813e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8140:	f8dc 3000 	ldr.w	r3, [ip]
   b8144:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b8146:	a903      	add	r1, sp, #12
   b8148:	a80c      	add	r0, sp, #48	; 0x30
   b814a:	f7fe fbf0 	bl	b692e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b814e:	a90c      	add	r1, sp, #48	; 0x30
   b8150:	f107 0018 	add.w	r0, r7, #24
   b8154:	f7ff fdb1 	bl	b7cba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8158:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b815a:	a80d      	add	r0, sp, #52	; 0x34
   b815c:	f7fe fc09 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8160:	b99c      	cbnz	r4, b818a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b8162:	2320      	movs	r3, #32
   b8164:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b8168:	f8cd a000 	str.w	sl, [sp]
   b816c:	4623      	mov	r3, r4
   b816e:	e007      	b.n	b8180 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b8170:	3308      	adds	r3, #8
   b8172:	e77f      	b.n	b8074 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b8174:	2420      	movs	r4, #32
   b8176:	2300      	movs	r3, #0
   b8178:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b817c:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b8180:	aa0c      	add	r2, sp, #48	; 0x30
   b8182:	4641      	mov	r1, r8
   b8184:	2032      	movs	r0, #50	; 0x32
   b8186:	f7fd f9ed 	bl	b5564 <log_message>
   b818a:	a806      	add	r0, sp, #24
   b818c:	f7fe fbf1 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8190:	a804      	add	r0, sp, #16
   b8192:	f7fe fbee 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b8196:	3601      	adds	r6, #1
   b8198:	e74b      	b.n	b8032 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b819a:	7923      	ldrb	r3, [r4, #4]
   b819c:	f043 0302 	orr.w	r3, r3, #2
   b81a0:	7123      	strb	r3, [r4, #4]
   b81a2:	e78b      	b.n	b80bc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b81a4:	b015      	add	sp, #84	; 0x54
   b81a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b81aa:	bf00      	nop
   b81ac:	000ba8cd 	.word	0x000ba8cd
   b81b0:	000ba73f 	.word	0x000ba73f
   b81b4:	000ba8e8 	.word	0x000ba8e8
   b81b8:	000ba917 	.word	0x000ba917

000b81bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b81bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b81c0:	4617      	mov	r7, r2
   b81c2:	b0a1      	sub	sp, #132	; 0x84
   b81c4:	4680      	mov	r8, r0
    WiringBleLock lk;
   b81c6:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b81c8:	460e      	mov	r6, r1
    WiringBleLock lk;
   b81ca:	f7fd fdd5 	bl	b5d78 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b81ce:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b81d0:	7923      	ldrb	r3, [r4, #4]
   b81d2:	b953      	cbnz	r3, b81ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b81d4:	4639      	mov	r1, r7
   b81d6:	4640      	mov	r0, r8
   b81d8:	f7fe fba9 	bl	b692e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b81dc:	a80a      	add	r0, sp, #40	; 0x28
   b81de:	f7fd fdd9 	bl	b5d94 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b81e2:	4640      	mov	r0, r8
   b81e4:	b021      	add	sp, #132	; 0x84
   b81e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b81ea:	6833      	ldr	r3, [r6, #0]
   b81ec:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b81f0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b81f4:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b81f6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b81fa:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b81fe:	9b03      	ldr	r3, [sp, #12]
   b8200:	429d      	cmp	r5, r3
   b8202:	d021      	beq.n	b8248 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8204:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8208:	4658      	mov	r0, fp
   b820a:	f109 0114 	add.w	r1, r9, #20
   b820e:	f7fd fef8 	bl	b6002 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8212:	b1b8      	cbz	r0, b8244 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8214:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8218:	4650      	mov	r0, sl
   b821a:	f7fd fef2 	bl	b6002 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b821e:	b188      	cbz	r0, b8244 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8220:	6823      	ldr	r3, [r4, #0]
   b8222:	f8d9 2000 	ldr.w	r2, [r9]
   b8226:	4053      	eors	r3, r2
   b8228:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b822c:	d10a      	bne.n	b8244 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b822e:	2220      	movs	r2, #32
   b8230:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8234:	4a5e      	ldr	r2, [pc, #376]	; (b83b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8236:	9200      	str	r2, [sp, #0]
   b8238:	aa15      	add	r2, sp, #84	; 0x54
   b823a:	495e      	ldr	r1, [pc, #376]	; (b83b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b823c:	2032      	movs	r0, #50	; 0x32
   b823e:	f7fd f991 	bl	b5564 <log_message>
   b8242:	e7c7      	b.n	b81d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8244:	3508      	adds	r5, #8
   b8246:	e7da      	b.n	b81fe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8248:	4650      	mov	r0, sl
   b824a:	f7fd feab 	bl	b5fa4 <_ZNK8particle7BleUuid7isValidEv>
   b824e:	b960      	cbnz	r0, b826a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
   b8250:	4959      	ldr	r1, [pc, #356]	; (b83b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b8252:	2201      	movs	r2, #1
   b8254:	a815      	add	r0, sp, #84	; 0x54
   b8256:	ad15      	add	r5, sp, #84	; 0x54
   b8258:	f7fd fe72 	bl	b5f40 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b825c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b825e:	46d4      	mov	ip, sl
   b8260:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8264:	682b      	ldr	r3, [r5, #0]
   b8266:	f8cc 3000 	str.w	r3, [ip]
   b826a:	6833      	ldr	r3, [r6, #0]
   b826c:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8270:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8274:	455d      	cmp	r5, fp
   b8276:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8278:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b827a:	d06e      	beq.n	b835a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b827c:	f855 0b08 	ldr.w	r0, [r5], #8
   b8280:	f7fd febf 	bl	b6002 <_ZNK8particle7BleUuideqERKS0_>
   b8284:	2800      	cmp	r0, #0
   b8286:	d0f5      	beq.n	b8274 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b8288:	f104 0a14 	add.w	sl, r4, #20
   b828c:	4650      	mov	r0, sl
   b828e:	f7fd fe89 	bl	b5fa4 <_ZNK8particle7BleUuid7isValidEv>
   b8292:	b988      	cbnz	r0, b82b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8294:	4b49      	ldr	r3, [pc, #292]	; (b83bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8296:	4948      	ldr	r1, [pc, #288]	; (b83b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b8298:	881a      	ldrh	r2, [r3, #0]
   b829a:	3201      	adds	r2, #1
   b829c:	b292      	uxth	r2, r2
   b829e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b82a0:	a815      	add	r0, sp, #84	; 0x54
   b82a2:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b82a4:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b82a6:	f7fd fe74 	bl	b5f92 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b82aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b82ac:	46d4      	mov	ip, sl
   b82ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b82b2:	682b      	ldr	r3, [r5, #0]
   b82b4:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b82b8:	4b41      	ldr	r3, [pc, #260]	; (b83c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b82ba:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b82bc:	2228      	movs	r2, #40	; 0x28
   b82be:	2100      	movs	r1, #0
   b82c0:	a816      	add	r0, sp, #88	; 0x58
   b82c2:	f001 fdeb 	bl	b9e9c <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b82c6:	4651      	mov	r1, sl
   b82c8:	a804      	add	r0, sp, #16
   b82ca:	f7fd fe7d 	bl	b5fc8 <_ZN8particle7BleUuid7halUUIDEv>
   b82ce:	ab04      	add	r3, sp, #16
   b82d0:	aa18      	add	r2, sp, #96	; 0x60
   b82d2:	f10d 0c20 	add.w	ip, sp, #32
   b82d6:	6818      	ldr	r0, [r3, #0]
   b82d8:	6859      	ldr	r1, [r3, #4]
   b82da:	4615      	mov	r5, r2
   b82dc:	c503      	stmia	r5!, {r0, r1}
   b82de:	3308      	adds	r3, #8
   b82e0:	4563      	cmp	r3, ip
   b82e2:	462a      	mov	r2, r5
   b82e4:	d1f7      	bne.n	b82d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b82e6:	6818      	ldr	r0, [r3, #0]
   b82e8:	6028      	str	r0, [r5, #0]
    return value_;
   b82ea:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b82ec:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b82f0:	f8d9 3000 	ldr.w	r3, [r9]
   b82f4:	8a9b      	ldrh	r3, [r3, #20]
   b82f6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b82fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b82fc:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b82fe:	4b31      	ldr	r3, [pc, #196]	; (b83c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8300:	2200      	movs	r2, #0
   b8302:	1da1      	adds	r1, r4, #6
   b8304:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8306:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b830a:	f7fc ffc1 	bl	b5290 <hal_ble_gatt_server_add_characteristic>
   b830e:	2800      	cmp	r0, #0
   b8310:	f47f af60 	bne.w	b81d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8314:	2301      	movs	r3, #1
   b8316:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8318:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b831a:	4639      	mov	r1, r7
        return characteristics_;
   b831c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b831e:	a80d      	add	r0, sp, #52	; 0x34
   b8320:	f7fe fb05 	bl	b692e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8324:	4620      	mov	r0, r4
   b8326:	a90d      	add	r1, sp, #52	; 0x34
   b8328:	f7ff fcc7 	bl	b7cba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b832c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b832e:	a80e      	add	r0, sp, #56	; 0x38
   b8330:	f7fe fb1f 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8334:	2c00      	cmp	r4, #0
   b8336:	f47f af4d 	bne.w	b81d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b833a:	2320      	movs	r3, #32
   b833c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8340:	4b21      	ldr	r3, [pc, #132]	; (b83c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8342:	9300      	str	r3, [sp, #0]
   b8344:	aa0d      	add	r2, sp, #52	; 0x34
   b8346:	4623      	mov	r3, r4
   b8348:	e777      	b.n	b823a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b834a:	4639      	mov	r1, r7
   b834c:	4640      	mov	r0, r8
   b834e:	f7fe faee 	bl	b692e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8352:	a80c      	add	r0, sp, #48	; 0x30
   b8354:	f7fe fb0d 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8358:	e740      	b.n	b81dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b835a:	a80b      	add	r0, sp, #44	; 0x2c
   b835c:	f7fe f8dc 	bl	b6518 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8360:	4651      	mov	r1, sl
   b8362:	a815      	add	r0, sp, #84	; 0x54
   b8364:	f7fd fe30 	bl	b5fc8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b836a:	2300      	movs	r3, #0
   b836c:	3214      	adds	r2, #20
   b836e:	a915      	add	r1, sp, #84	; 0x54
   b8370:	2001      	movs	r0, #1
   b8372:	f7fc ff3d 	bl	b51f0 <hal_ble_gatt_server_add_service>
   b8376:	2800      	cmp	r0, #0
   b8378:	d1e7      	bne.n	b834a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b837a:	6835      	ldr	r5, [r6, #0]
   b837c:	a90b      	add	r1, sp, #44	; 0x2c
   b837e:	a80d      	add	r0, sp, #52	; 0x34
   b8380:	f7fe fae3 	bl	b694a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8384:	4628      	mov	r0, r5
   b8386:	a90d      	add	r1, sp, #52	; 0x34
   b8388:	f7ff fb90 	bl	b7aac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b838c:	4605      	mov	r5, r0
   b838e:	a80e      	add	r0, sp, #56	; 0x38
   b8390:	f7fe faef 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8394:	2d00      	cmp	r5, #0
   b8396:	d0d8      	beq.n	b834a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b8398:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b839a:	6853      	ldr	r3, [r2, #4]
   b839c:	6812      	ldr	r2, [r2, #0]
   b839e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b83a2:	3b01      	subs	r3, #1
   b83a4:	a80c      	add	r0, sp, #48	; 0x30
   b83a6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b83aa:	f7fe fae2 	bl	b6972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b83ae:	e76b      	b.n	b8288 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b83b0:	000ba943 	.word	0x000ba943
   b83b4:	000ba73f 	.word	0x000ba73f
   b83b8:	000baa0a 	.word	0x000baa0a
   b83bc:	2003e6d4 	.word	0x2003e6d4
   b83c0:	002c0003 	.word	0x002c0003
   b83c4:	000b66f9 	.word	0x000b66f9
   b83c8:	000ba96e 	.word	0x000ba96e

000b83cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b83cc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b83ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b83d0:	4604      	mov	r4, r0
   b83d2:	460d      	mov	r5, r1
   b83d4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b83d6:	d914      	bls.n	b8402 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b83d8:	4290      	cmp	r0, r2
   b83da:	d213      	bcs.n	b8404 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b83dc:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b83e0:	1a75      	subs	r5, r6, r1
   b83e2:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b83e6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b83e8:	42b7      	cmp	r7, r6
   b83ea:	d018      	beq.n	b841e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b83ec:	b11c      	cbz	r4, b83f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b83ee:	4631      	mov	r1, r6
   b83f0:	4620      	mov	r0, r4
   b83f2:	f7fe fd1f 	bl	b6e34 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b83f6:	4630      	mov	r0, r6
   b83f8:	f7fe f9bc 	bl	b6774 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b83fc:	3e24      	subs	r6, #36	; 0x24
   b83fe:	3c24      	subs	r4, #36	; 0x24
   b8400:	e7f2      	b.n	b83e8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8402:	d00c      	beq.n	b841e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8404:	42b5      	cmp	r5, r6
   b8406:	d00a      	beq.n	b841e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8408:	b11c      	cbz	r4, b8412 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b840a:	4629      	mov	r1, r5
   b840c:	4620      	mov	r0, r4
   b840e:	f7fe fd11 	bl	b6e34 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b8412:	4628      	mov	r0, r5
   b8414:	f7fe f9ae 	bl	b6774 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b8418:	3524      	adds	r5, #36	; 0x24
   b841a:	3424      	adds	r4, #36	; 0x24
   b841c:	e7f2      	b.n	b8404 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b841e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8420 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b8422:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8424:	4605      	mov	r5, r0
        if (n > 0) {
   b8426:	dd13      	ble.n	b8450 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b8428:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b842a:	fb07 f006 	mul.w	r0, r7, r6
   b842e:	f7fd f92d 	bl	b568c <malloc>
            if (!d) {
   b8432:	4604      	mov	r4, r0
   b8434:	b158      	cbz	r0, b844e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b8436:	e9d5 1200 	ldrd	r1, r2, [r5]
   b843a:	fb07 1202 	mla	r2, r7, r2, r1
   b843e:	f7ff ffc5 	bl	b83cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8442:	6828      	ldr	r0, [r5, #0]
   b8444:	f7fd f92a 	bl	b569c <free>
        data_ = d;
   b8448:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b844a:	60ae      	str	r6, [r5, #8]
        return true;
   b844c:	2001      	movs	r0, #1
    }
   b844e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8450:	2400      	movs	r4, #0
   b8452:	e7f6      	b.n	b8442 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b8454 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b8458:	2300      	movs	r3, #0
   b845a:	e9c0 3300 	strd	r3, r3, [r0]
   b845e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8460:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8462:	6849      	ldr	r1, [r1, #4]
   b8464:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8466:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8468:	dd29      	ble.n	b84be <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
   b846a:	f7ff ffd9 	bl	b8420 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b846e:	b330      	cbz	r0, b84be <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8470:	e9d7 4300 	ldrd	r4, r3, [r7]
   b8474:	f04f 0824 	mov.w	r8, #36	; 0x24
   b8478:	682e      	ldr	r6, [r5, #0]
   b847a:	fb08 4803 	mla	r8, r8, r3, r4
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
   b847e:	3408      	adds	r4, #8
        for (; it != end; ++it, ++dest) {
   b8480:	f1a4 0208 	sub.w	r2, r4, #8
   b8484:	4590      	cmp	r8, r2
   b8486:	d018      	beq.n	b84ba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x66>
            new(dest) T(*it);
   b8488:	b1a6      	cbz	r6, b84b4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x60>
    address_ = addr.address_;
   b848a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b848e:	6033      	str	r3, [r6, #0]
   b8490:	f854 3c04 	ldr.w	r3, [r4, #-4]
   b8494:	6073      	str	r3, [r6, #4]
class BleAdvertisingData {
   b8496:	4621      	mov	r1, r4
   b8498:	f106 0008 	add.w	r0, r6, #8
   b849c:	f7fe fcad 	bl	b6dfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b84a0:	f104 010c 	add.w	r1, r4, #12
   b84a4:	f106 0014 	add.w	r0, r6, #20
   b84a8:	f7fe fca7 	bl	b6dfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b84ac:	f994 3018 	ldrsb.w	r3, [r4, #24]
   b84b0:	f886 3020 	strb.w	r3, [r6, #32]
        for (; it != end; ++it, ++dest) {
   b84b4:	3624      	adds	r6, #36	; 0x24
   b84b6:	3424      	adds	r4, #36	; 0x24
   b84b8:	e7e2      	b.n	b8480 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b84ba:	687b      	ldr	r3, [r7, #4]
   b84bc:	606b      	str	r3, [r5, #4]
}
   b84be:	4628      	mov	r0, r5
   b84c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b84c4 <_ZN8particle16BleScanDelegator5startEv>:
    Vector<BleScanResult> start() {
   b84c4:	b538      	push	{r3, r4, r5, lr}
   b84c6:	460c      	mov	r4, r1
   b84c8:	4605      	mov	r5, r0
        scanResultCallback_ = nullptr;
   b84ca:	f101 0018 	add.w	r0, r1, #24
   b84ce:	f7fd fbb5 	bl	b5c3c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b84d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b84d6:	f7fd fbbc 	bl	b5c52 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        hal_ble_gap_start_scan(onScanResultCallback, this, nullptr);
   b84da:	2200      	movs	r2, #0
   b84dc:	4621      	mov	r1, r4
   b84de:	4804      	ldr	r0, [pc, #16]	; (b84f0 <_ZN8particle16BleScanDelegator5startEv+0x2c>)
   b84e0:	f7fc fe6a 	bl	b51b8 <hal_ble_gap_start_scan>
        return resultsVector_;
   b84e4:	4621      	mov	r1, r4
   b84e6:	4628      	mov	r0, r5
   b84e8:	f7ff ffb4 	bl	b8454 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
    }
   b84ec:	4628      	mov	r0, r5
   b84ee:	bd38      	pop	{r3, r4, r5, pc}
   b84f0:	000b851f 	.word	0x000b851f

000b84f4 <_ZNK8particle14BleLocalDevice14scanWithFilterERKNS_13BleScanFilterE>:
Vector<BleScanResult> BleLocalDevice::scanWithFilter(const BleScanFilter& filter) const {
   b84f4:	b510      	push	{r4, lr}
   b84f6:	b0a0      	sub	sp, #128	; 0x80
   b84f8:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b84fa:	a803      	add	r0, sp, #12
Vector<BleScanResult> BleLocalDevice::scanWithFilter(const BleScanFilter& filter) const {
   b84fc:	9201      	str	r2, [sp, #4]
    BleScanDelegator scanner;
   b84fe:	f7fe f943 	bl	b6788 <_ZN8particle16BleScanDelegatorC1Ev>
        filter_ = filter;
   b8502:	9901      	ldr	r1, [sp, #4]
   b8504:	a811      	add	r0, sp, #68	; 0x44
   b8506:	f7fe ff40 	bl	b738a <_ZN8particle13BleScanFilteraSERKS0_.isra.0>
    return scanner.setScanFilter(filter).start();
   b850a:	a903      	add	r1, sp, #12
   b850c:	4620      	mov	r0, r4
   b850e:	f7ff ffd9 	bl	b84c4 <_ZN8particle16BleScanDelegator5startEv>
    BleScanDelegator scanner;
   b8512:	a803      	add	r0, sp, #12
   b8514:	f7fe f974 	bl	b6800 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b8518:	4620      	mov	r0, r4
   b851a:	b020      	add	sp, #128	; 0x80
   b851c:	bd10      	pop	{r4, pc}

000b851e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b851e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8522:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b8524:	ad01      	add	r5, sp, #4
   b8526:	4606      	mov	r6, r0
   b8528:	4628      	mov	r0, r5
   b852a:	460c      	mov	r4, r1
   b852c:	f7fd fc5f 	bl	b5dee <_ZN8particle10BleAddressC1Ev>
   b8530:	a803      	add	r0, sp, #12
   b8532:	f7fe fd5a 	bl	b6fea <_ZN8particle18BleAdvertisingDataC1Ev>
   b8536:	a806      	add	r0, sp, #24
   b8538:	f7fe fd57 	bl	b6fea <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b853c:	6930      	ldr	r0, [r6, #16]
   b853e:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b8540:	89f2      	ldrh	r2, [r6, #14]
   b8542:	ab13      	add	r3, sp, #76	; 0x4c
   b8544:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b8546:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b854a:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b854c:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b854e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b8552:	a806      	add	r0, sp, #24
   b8554:	f7fe fcbd 	bl	b6ed2 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b8558:	89b2      	ldrh	r2, [r6, #12]
   b855a:	6871      	ldr	r1, [r6, #4]
   b855c:	a803      	add	r0, sp, #12
   b855e:	f7fe fcb8 	bl	b6ed2 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b8562:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b8566:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b8568:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b856a:	d003      	beq.n	b8574 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b856c:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b8570:	429a      	cmp	r2, r3
   b8572:	db5c      	blt.n	b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b8574:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b8578:	2b7f      	cmp	r3, #127	; 0x7f
   b857a:	d003      	beq.n	b8584 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b857c:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b8580:	429a      	cmp	r2, r3
   b8582:	dc54      	bgt.n	b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b8584:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b8588:	4638      	mov	r0, r7
   b858a:	f7fe fb1a 	bl	b6bc2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b858e:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b8590:	2b00      	cmp	r3, #0
   b8592:	dd52      	ble.n	b863a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b8594:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b8596:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b859a:	45b1      	cmp	r9, r6
   b859c:	d050      	beq.n	b8640 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b859e:	4630      	mov	r0, r6
   b85a0:	4629      	mov	r1, r5
   b85a2:	f7fd fc10 	bl	b5dc6 <_ZNK8particle10BleAddresseqERKS0_>
   b85a6:	3608      	adds	r6, #8
   b85a8:	4680      	mov	r8, r0
   b85aa:	2800      	cmp	r0, #0
   b85ac:	d0f5      	beq.n	b859a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b85ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b85b0:	f7fd f874 	bl	b569c <free>
        if (!delegator->filterByRssi(result) ||
   b85b4:	f1b8 0f00 	cmp.w	r8, #0
   b85b8:	d039      	beq.n	b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b85ba:	4629      	mov	r1, r5
   b85bc:	4620      	mov	r0, r4
   b85be:	f7fe fac3 	bl	b6b48 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b85c2:	b3a0      	cbz	r0, b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b85c4:	4629      	mov	r1, r5
   b85c6:	4620      	mov	r0, r4
   b85c8:	f7ff f881 	bl	b76ce <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b85cc:	4606      	mov	r6, r0
   b85ce:	b370      	cbz	r0, b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b85d0:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b85d4:	4638      	mov	r0, r7
   b85d6:	f7fe fb3f 	bl	b6c58 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b85da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b85dc:	2b00      	cmp	r3, #0
   b85de:	dd12      	ble.n	b8606 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b85e0:	a806      	add	r0, sp, #24
   b85e2:	f7fd fe6b 	bl	b62bc <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b85e6:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b85e8:	a803      	add	r0, sp, #12
   b85ea:	f7fd fe67 	bl	b62bc <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b85ee:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b85f2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b85f6:	429a      	cmp	r2, r3
   b85f8:	d025      	beq.n	b8646 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b85fa:	f833 1b02 	ldrh.w	r1, [r3], #2
   b85fe:	4588      	cmp	r8, r1
   b8600:	d001      	beq.n	b8606 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b8602:	4288      	cmp	r0, r1
   b8604:	d1f7      	bne.n	b85f6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b8606:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b8608:	f7fd f848 	bl	b569c <free>
              !delegator->filterByServiceUUID(result) ||
   b860c:	b17e      	cbz	r6, b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b860e:	4629      	mov	r1, r5
   b8610:	4620      	mov	r0, r4
   b8612:	f7fe fb57 	bl	b6cc4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b8616:	b150      	cbz	r0, b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b8618:	6a23      	ldr	r3, [r4, #32]
   b861a:	b1b3      	cbz	r3, b864a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b861c:	6963      	ldr	r3, [r4, #20]
   b861e:	9513      	str	r5, [sp, #76]	; 0x4c
   b8620:	3301      	adds	r3, #1
   b8622:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8624:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b8626:	4639      	mov	r1, r7
   b8628:	f104 0018 	add.w	r0, r4, #24
   b862c:	4798      	blx	r3
            return;
   b862e:	4628      	mov	r0, r5
   b8630:	f7fe f8a0 	bl	b6774 <_ZN8particle13BleScanResultD1Ev>
    }
   b8634:	b01d      	add	sp, #116	; 0x74
   b8636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b863a:	f04f 0801 	mov.w	r8, #1
   b863e:	e7b6      	b.n	b85ae <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b8640:	f04f 0800 	mov.w	r8, #0
   b8644:	e7b3      	b.n	b85ae <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b8646:	2600      	movs	r6, #0
   b8648:	e7dd      	b.n	b8606 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b864a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b864e:	f1b8 0f00 	cmp.w	r8, #0
   b8652:	d007      	beq.n	b8664 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b8654:	6963      	ldr	r3, [r4, #20]
   b8656:	3301      	adds	r3, #1
   b8658:	6163      	str	r3, [r4, #20]
   b865a:	4629      	mov	r1, r5
   b865c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b865e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8662:	e7e3      	b.n	b862c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b8664:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b8668:	f1bc 0f00 	cmp.w	ip, #0
   b866c:	d025      	beq.n	b86ba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b866e:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b8670:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b8672:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b8674:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b8676:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b8678:	d8d9      	bhi.n	b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b867a:	2224      	movs	r2, #36	; 0x24
   b867c:	4353      	muls	r3, r2
    address_ = addr.address_;
   b867e:	462a      	mov	r2, r5
   b8680:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b8682:	3b24      	subs	r3, #36	; 0x24
   b8684:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b8688:	f84c 0003 	str.w	r0, [ip, r3]
   b868c:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b868e:	f106 0008 	add.w	r0, r6, #8
   b8692:	a903      	add	r1, sp, #12
   b8694:	f7fe fbe5 	bl	b6e62 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b8698:	a906      	add	r1, sp, #24
   b869a:	f106 0014 	add.w	r0, r6, #20
   b869e:	f7fe fbe0 	bl	b6e62 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b86a2:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b86a6:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b86aa:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b86ae:	429a      	cmp	r2, r3
   b86b0:	d3bd      	bcc.n	b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b86b2:	4640      	mov	r0, r8
   b86b4:	f7fc fd88 	bl	b51c8 <hal_ble_gap_stop_scan>
   b86b8:	e7b9      	b.n	b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b86ba:	e895 0003 	ldmia.w	r5, {r0, r1}
   b86be:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b86c2:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b86c6:	a903      	add	r1, sp, #12
   b86c8:	a80c      	add	r0, sp, #48	; 0x30
   b86ca:	f7fe fb96 	bl	b6dfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b86ce:	a906      	add	r1, sp, #24
   b86d0:	a80f      	add	r0, sp, #60	; 0x3c
   b86d2:	f7fe fb92 	bl	b6dfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b86d6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b86da:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b86de:	4641      	mov	r1, r8
   b86e0:	4638      	mov	r0, r7
   b86e2:	6866      	ldr	r6, [r4, #4]
   b86e4:	f7fe fba6 	bl	b6e34 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b86e8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b86ec:	4299      	cmp	r1, r3
   b86ee:	da10      	bge.n	b8712 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b86f0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b86f2:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b86f4:	2224      	movs	r2, #36	; 0x24
   b86f6:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b86fa:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b86fe:	fb02 3201 	mla	r2, r2, r1, r3
   b8702:	4631      	mov	r1, r6
   b8704:	f7ff fe62 	bl	b83cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8708:	b986      	cbnz	r6, b872c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b870a:	6863      	ldr	r3, [r4, #4]
   b870c:	3301      	adds	r3, #1
   b870e:	6063      	str	r3, [r4, #4]
    return true;
   b8710:	e005      	b.n	b871e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8712:	3101      	adds	r1, #1
   b8714:	4620      	mov	r0, r4
   b8716:	f7ff fe83 	bl	b8420 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b871a:	2800      	cmp	r0, #0
   b871c:	d1e8      	bne.n	b86f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b871e:	4638      	mov	r0, r7
   b8720:	f7fe f828 	bl	b6774 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b8724:	4640      	mov	r0, r8
   b8726:	f7fe f825 	bl	b6774 <_ZN8particle13BleScanResultD1Ev>
   b872a:	e780      	b.n	b862e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b872c:	4639      	mov	r1, r7
   b872e:	4630      	mov	r0, r6
   b8730:	f7fe fb80 	bl	b6e34 <_ZN8particle13BleScanResultC1EOS0_>
   b8734:	e7e9      	b.n	b870a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>
	...

000b8738 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8738:	4802      	ldr	r0, [pc, #8]	; (b8744 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b873a:	2300      	movs	r3, #0
   b873c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b873e:	f7fc bdd9 	b.w	b52f4 <os_mutex_recursive_create>
   b8742:	bf00      	nop
   b8744:	2003e6d8 	.word	0x2003e6d8

000b8748 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b874a:	4606      	mov	r6, r0
   b874c:	460d      	mov	r5, r1
  size_t n = 0;
   b874e:	188f      	adds	r7, r1, r2
   b8750:	2400      	movs	r4, #0
  while (size--) {
   b8752:	42bd      	cmp	r5, r7
   b8754:	d00c      	beq.n	b8770 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8756:	6833      	ldr	r3, [r6, #0]
   b8758:	f815 1b01 	ldrb.w	r1, [r5], #1
   b875c:	689b      	ldr	r3, [r3, #8]
   b875e:	4630      	mov	r0, r6
   b8760:	4798      	blx	r3
     if (chunk>=0)
   b8762:	1e03      	subs	r3, r0, #0
   b8764:	db01      	blt.n	b876a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8766:	441c      	add	r4, r3
  while (size--) {
   b8768:	e7f3      	b.n	b8752 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b876a:	2c00      	cmp	r4, #0
   b876c:	bf08      	it	eq
   b876e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8770:	4620      	mov	r0, r4
   b8772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8774 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8774:	b513      	push	{r0, r1, r4, lr}
   b8776:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8778:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b877a:	b159      	cbz	r1, b8794 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b877c:	9101      	str	r1, [sp, #4]
   b877e:	f001 fbd5 	bl	b9f2c <strlen>
   b8782:	6823      	ldr	r3, [r4, #0]
   b8784:	9901      	ldr	r1, [sp, #4]
   b8786:	68db      	ldr	r3, [r3, #12]
   b8788:	4602      	mov	r2, r0
   b878a:	4620      	mov	r0, r4
    }
   b878c:	b002      	add	sp, #8
   b878e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8792:	4718      	bx	r3
    }
   b8794:	b002      	add	sp, #8
   b8796:	bd10      	pop	{r4, pc}

000b8798 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8798:	b508      	push	{r3, lr}
  return write(str);
   b879a:	f7ff ffeb 	bl	b8774 <_ZN5Print5writeEPKc>
}
   b879e:	bd08      	pop	{r3, pc}

000b87a0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b87a0:	6803      	ldr	r3, [r0, #0]
   b87a2:	689b      	ldr	r3, [r3, #8]
   b87a4:	4718      	bx	r3

000b87a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b87a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b87a8:	210d      	movs	r1, #13
{
   b87aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b87ac:	f7ff fff8 	bl	b87a0 <_ZN5Print5printEc>
  n += print('\n');
   b87b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b87b2:	4604      	mov	r4, r0
  n += print('\n');
   b87b4:	4628      	mov	r0, r5
   b87b6:	f7ff fff3 	bl	b87a0 <_ZN5Print5printEc>
  return n;
}
   b87ba:	4420      	add	r0, r4
   b87bc:	bd38      	pop	{r3, r4, r5, pc}

000b87be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b87be:	b538      	push	{r3, r4, r5, lr}
   b87c0:	4605      	mov	r5, r0
  return write(str);
   b87c2:	f7ff ffd7 	bl	b8774 <_ZN5Print5writeEPKc>
   b87c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b87c8:	4628      	mov	r0, r5
   b87ca:	f7ff ffec 	bl	b87a6 <_ZN5Print7printlnEv>
  return n;
}
   b87ce:	4420      	add	r0, r4
   b87d0:	bd38      	pop	{r3, r4, r5, pc}

000b87d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b87d2:	b530      	push	{r4, r5, lr}
   b87d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b87d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b87d8:	2a01      	cmp	r2, #1
  *str = '\0';
   b87da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b87de:	bf98      	it	ls
   b87e0:	220a      	movls	r2, #10
   b87e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b87e4:	460d      	mov	r5, r1
   b87e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b87ea:	fb01 5312 	mls	r3, r1, r2, r5
   b87ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b87f2:	2b09      	cmp	r3, #9
   b87f4:	bf94      	ite	ls
   b87f6:	3330      	addls	r3, #48	; 0x30
   b87f8:	3337      	addhi	r3, #55	; 0x37
   b87fa:	b2db      	uxtb	r3, r3
  } while(n);
   b87fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b87fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8802:	d9ef      	bls.n	b87e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8804:	4621      	mov	r1, r4
   b8806:	f7ff ffb5 	bl	b8774 <_ZN5Print5writeEPKc>
}
   b880a:	b00b      	add	sp, #44	; 0x2c
   b880c:	bd30      	pop	{r4, r5, pc}
	...

000b8810 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b8810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8814:	ec55 4b10 	vmov	r4, r5, d0
   b8818:	4606      	mov	r6, r0
   b881a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b881c:	ee10 2a10 	vmov	r2, s0
   b8820:	ee10 0a10 	vmov	r0, s0
   b8824:	462b      	mov	r3, r5
   b8826:	4629      	mov	r1, r5
   b8828:	f001 fa9c 	bl	b9d64 <__aeabi_dcmpun>
   b882c:	b140      	cbz	r0, b8840 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b882e:	4953      	ldr	r1, [pc, #332]	; (b897c <_ZN5Print10printFloatEdh+0x16c>)
   b8830:	4630      	mov	r0, r6
   b8832:	f7ff ff9f 	bl	b8774 <_ZN5Print5writeEPKc>
   b8836:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b8838:	4650      	mov	r0, sl
   b883a:	b003      	add	sp, #12
   b883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b8840:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b8844:	4b4e      	ldr	r3, [pc, #312]	; (b8980 <_ZN5Print10printFloatEdh+0x170>)
   b8846:	f04f 32ff 	mov.w	r2, #4294967295
   b884a:	4620      	mov	r0, r4
   b884c:	4649      	mov	r1, r9
   b884e:	f001 fa89 	bl	b9d64 <__aeabi_dcmpun>
   b8852:	b948      	cbnz	r0, b8868 <_ZN5Print10printFloatEdh+0x58>
   b8854:	4b4a      	ldr	r3, [pc, #296]	; (b8980 <_ZN5Print10printFloatEdh+0x170>)
   b8856:	f04f 32ff 	mov.w	r2, #4294967295
   b885a:	4620      	mov	r0, r4
   b885c:	4649      	mov	r1, r9
   b885e:	f001 fa63 	bl	b9d28 <__aeabi_dcmple>
   b8862:	b908      	cbnz	r0, b8868 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b8864:	4947      	ldr	r1, [pc, #284]	; (b8984 <_ZN5Print10printFloatEdh+0x174>)
   b8866:	e7e3      	b.n	b8830 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b8868:	4b47      	ldr	r3, [pc, #284]	; (b8988 <_ZN5Print10printFloatEdh+0x178>)
   b886a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b886e:	4620      	mov	r0, r4
   b8870:	4629      	mov	r1, r5
   b8872:	f001 fa6d 	bl	b9d50 <__aeabi_dcmpgt>
   b8876:	b108      	cbz	r0, b887c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b8878:	4944      	ldr	r1, [pc, #272]	; (b898c <_ZN5Print10printFloatEdh+0x17c>)
   b887a:	e7d9      	b.n	b8830 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b887c:	4b44      	ldr	r3, [pc, #272]	; (b8990 <_ZN5Print10printFloatEdh+0x180>)
   b887e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b8882:	4620      	mov	r0, r4
   b8884:	4629      	mov	r1, r5
   b8886:	f001 fa45 	bl	b9d14 <__aeabi_dcmplt>
   b888a:	2800      	cmp	r0, #0
   b888c:	d1f4      	bne.n	b8878 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b888e:	2200      	movs	r2, #0
   b8890:	2300      	movs	r3, #0
   b8892:	4620      	mov	r0, r4
   b8894:	4629      	mov	r1, r5
   b8896:	f001 fa3d 	bl	b9d14 <__aeabi_dcmplt>
   b889a:	b1d0      	cbz	r0, b88d2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b889c:	212d      	movs	r1, #45	; 0x2d
   b889e:	4630      	mov	r0, r6
   b88a0:	f7ff ff7e 	bl	b87a0 <_ZN5Print5printEc>
     number = -number;
   b88a4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b88a8:	4682      	mov	sl, r0
     number = -number;
   b88aa:	461d      	mov	r5, r3
  double rounding = 0.5;
   b88ac:	4939      	ldr	r1, [pc, #228]	; (b8994 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b88ae:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b899c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b88b2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b88b6:	2000      	movs	r0, #0
    rounding /= 10.0;
   b88b8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b88bc:	fa5f f38b 	uxtb.w	r3, fp
   b88c0:	429f      	cmp	r7, r3
   b88c2:	d908      	bls.n	b88d6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b88c4:	4642      	mov	r2, r8
   b88c6:	464b      	mov	r3, r9
   b88c8:	f001 f8dc 	bl	b9a84 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b88cc:	f10b 0b01 	add.w	fp, fp, #1
   b88d0:	e7f4      	b.n	b88bc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b88d2:	4682      	mov	sl, r0
   b88d4:	e7ea      	b.n	b88ac <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b88d6:	4622      	mov	r2, r4
   b88d8:	462b      	mov	r3, r5
   b88da:	f000 fdf3 	bl	b94c4 <__adddf3>
   b88de:	460d      	mov	r5, r1
   b88e0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b88e2:	f001 fa7d 	bl	b9de0 <__aeabi_d2uiz>
   b88e6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b88e8:	f000 ff28 	bl	b973c <__aeabi_ui2d>
   b88ec:	4602      	mov	r2, r0
   b88ee:	460b      	mov	r3, r1
   b88f0:	4620      	mov	r0, r4
   b88f2:	4629      	mov	r1, r5
   b88f4:	f000 fde4 	bl	b94c0 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b88f8:	220a      	movs	r2, #10
   b88fa:	4604      	mov	r4, r0
   b88fc:	460d      	mov	r5, r1
   b88fe:	4630      	mov	r0, r6
   b8900:	4641      	mov	r1, r8
   b8902:	f7ff ff66 	bl	b87d2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b8906:	4482      	add	sl, r0
  if (digits > 0) {
   b8908:	2f00      	cmp	r7, #0
   b890a:	d095      	beq.n	b8838 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b890c:	4922      	ldr	r1, [pc, #136]	; (b8998 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b890e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b899c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b8912:	4630      	mov	r0, r6
   b8914:	f7ff ff2e 	bl	b8774 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b8918:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b891c:	4482      	add	sl, r0
  while (digits-- > 0)
   b891e:	2f00      	cmp	r7, #0
   b8920:	d08a      	beq.n	b8838 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b8922:	4642      	mov	r2, r8
   b8924:	464b      	mov	r3, r9
   b8926:	4620      	mov	r0, r4
   b8928:	4629      	mov	r1, r5
   b892a:	f000 ff81 	bl	b9830 <__aeabi_dmul>
   b892e:	4604      	mov	r4, r0
   b8930:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b8932:	f001 fa2d 	bl	b9d90 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b8936:	f1b0 0b00 	subs.w	fp, r0, #0
   b893a:	da1c      	bge.n	b8976 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b893c:	212d      	movs	r1, #45	; 0x2d
   b893e:	4630      	mov	r0, r6
   b8940:	f7ff ff2e 	bl	b87a0 <_ZN5Print5printEc>
            val = -n;
   b8944:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b8948:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b894a:	220a      	movs	r2, #10
   b894c:	4630      	mov	r0, r6
   b894e:	9301      	str	r3, [sp, #4]
   b8950:	f7ff ff3f 	bl	b87d2 <_ZN5Print11printNumberEmh>
   b8954:	9b01      	ldr	r3, [sp, #4]
   b8956:	4418      	add	r0, r3
    n += print(toPrint);
   b8958:	4482      	add	sl, r0
    remainder -= toPrint;
   b895a:	4658      	mov	r0, fp
   b895c:	f000 fefe 	bl	b975c <__aeabi_i2d>
   b8960:	4602      	mov	r2, r0
   b8962:	460b      	mov	r3, r1
   b8964:	4620      	mov	r0, r4
   b8966:	4629      	mov	r1, r5
   b8968:	f000 fdaa 	bl	b94c0 <__aeabi_dsub>
   b896c:	3f01      	subs	r7, #1
   b896e:	4604      	mov	r4, r0
   b8970:	460d      	mov	r5, r1
   b8972:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b8974:	e7d3      	b.n	b891e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b8976:	4659      	mov	r1, fp
        size_t t = 0;
   b8978:	2300      	movs	r3, #0
   b897a:	e7e6      	b.n	b894a <_ZN5Print10printFloatEdh+0x13a>
   b897c:	000baa2a 	.word	0x000baa2a
   b8980:	7fefffff 	.word	0x7fefffff
   b8984:	000baa2e 	.word	0x000baa2e
   b8988:	41efffff 	.word	0x41efffff
   b898c:	000baa32 	.word	0x000baa32
   b8990:	c1efffff 	.word	0xc1efffff
   b8994:	3fe00000 	.word	0x3fe00000
   b8998:	000ba941 	.word	0x000ba941
   b899c:	40240000 	.word	0x40240000

000b89a0 <_ZN5Print7printlnEdi>:
{
   b89a0:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b89a2:	b2c9      	uxtb	r1, r1
{
   b89a4:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b89a6:	f7ff ff33 	bl	b8810 <_ZN5Print10printFloatEdh>
   b89aa:	4604      	mov	r4, r0
  n += println();
   b89ac:	4628      	mov	r0, r5
   b89ae:	f7ff fefa 	bl	b87a6 <_ZN5Print7printlnEv>
}
   b89b2:	4420      	add	r0, r4
   b89b4:	bd38      	pop	{r3, r4, r5, pc}

000b89b6 <_ZN5Print7printlnEfi>:
{
   b89b6:	b538      	push	{r3, r4, r5, lr}
   b89b8:	4604      	mov	r4, r0
   b89ba:	ee10 0a10 	vmov	r0, s0
   b89be:	460d      	mov	r5, r1
    return println((double)num, digits);
   b89c0:	f000 fede 	bl	b9780 <__aeabi_f2d>
   b89c4:	ec41 0b10 	vmov	d0, r0, r1
   b89c8:	4629      	mov	r1, r5
   b89ca:	4620      	mov	r0, r4
}
   b89cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b89d0:	f7ff bfe6 	b.w	b89a0 <_ZN5Print7printlnEdi>

000b89d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b89d4:	4b01      	ldr	r3, [pc, #4]	; (b89dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b89d6:	4a02      	ldr	r2, [pc, #8]	; (b89e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b89d8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b89da:	4770      	bx	lr
   b89dc:	2003e6e0 	.word	0x2003e6e0
   b89e0:	000baa36 	.word	0x000baa36

000b89e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b89e4:	4b02      	ldr	r3, [pc, #8]	; (b89f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b89e6:	681a      	ldr	r2, [r3, #0]
   b89e8:	4b02      	ldr	r3, [pc, #8]	; (b89f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b89ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b89ec:	4770      	bx	lr
   b89ee:	bf00      	nop
   b89f0:	2003e14c 	.word	0x2003e14c
   b89f4:	2003e6e4 	.word	0x2003e6e4

000b89f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b89f8:	2100      	movs	r1, #0
   b89fa:	f7fc bdc3 	b.w	b5584 <system_delay_ms>
	...

000b8a00 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8a00:	4b01      	ldr	r3, [pc, #4]	; (b8a08 <_GLOBAL__sub_I_RGB+0x8>)
   b8a02:	2200      	movs	r2, #0
   b8a04:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8a06:	4770      	bx	lr
   b8a08:	2003e6e8 	.word	0x2003e6e8

000b8a0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8a0c:	4b01      	ldr	r3, [pc, #4]	; (b8a14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8a0e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8a10:	4770      	bx	lr
   b8a12:	bf00      	nop
   b8a14:	2003e150 	.word	0x2003e150

000b8a18 <serialEventRun>:
{
   b8a18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8a1a:	4b0b      	ldr	r3, [pc, #44]	; (b8a48 <serialEventRun+0x30>)
   b8a1c:	b143      	cbz	r3, b8a30 <serialEventRun+0x18>
   b8a1e:	f000 f963 	bl	b8ce8 <_Z16_fetch_usbserialv>
   b8a22:	6803      	ldr	r3, [r0, #0]
   b8a24:	691b      	ldr	r3, [r3, #16]
   b8a26:	4798      	blx	r3
   b8a28:	2800      	cmp	r0, #0
   b8a2a:	dd01      	ble.n	b8a30 <serialEventRun+0x18>
        serialEvent();
   b8a2c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8a30:	4b06      	ldr	r3, [pc, #24]	; (b8a4c <serialEventRun+0x34>)
   b8a32:	b143      	cbz	r3, b8a46 <serialEventRun+0x2e>
   b8a34:	f000 fbc4 	bl	b91c0 <_Z22__fetch_global_Serial1v>
   b8a38:	6803      	ldr	r3, [r0, #0]
   b8a3a:	691b      	ldr	r3, [r3, #16]
   b8a3c:	4798      	blx	r3
   b8a3e:	2800      	cmp	r0, #0
   b8a40:	dd01      	ble.n	b8a46 <serialEventRun+0x2e>
        serialEvent1();
   b8a42:	f3af 8000 	nop.w
}
   b8a46:	bd08      	pop	{r3, pc}
	...

000b8a50 <_post_loop>:
{
   b8a50:	b508      	push	{r3, lr}
	serialEventRun();
   b8a52:	f7ff ffe1 	bl	b8a18 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8a56:	f7fc fb87 	bl	b5168 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8a5a:	4b01      	ldr	r3, [pc, #4]	; (b8a60 <_post_loop+0x10>)
   b8a5c:	6018      	str	r0, [r3, #0]
}
   b8a5e:	bd08      	pop	{r3, pc}
   b8a60:	2003e740 	.word	0x2003e740

000b8a64 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8a64:	4805      	ldr	r0, [pc, #20]	; (b8a7c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8a66:	4a06      	ldr	r2, [pc, #24]	; (b8a80 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8a68:	4906      	ldr	r1, [pc, #24]	; (b8a84 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8a6a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8a6c:	1a12      	subs	r2, r2, r0
   b8a6e:	f001 f9ed 	bl	b9e4c <memcpy>
    __backup_sram_signature = signature;
   b8a72:	4b05      	ldr	r3, [pc, #20]	; (b8a88 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8a74:	4a05      	ldr	r2, [pc, #20]	; (b8a8c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8a76:	601a      	str	r2, [r3, #0]
}
   b8a78:	bd08      	pop	{r3, pc}
   b8a7a:	bf00      	nop
   b8a7c:	2003f400 	.word	0x2003f400
   b8a80:	2003f404 	.word	0x2003f404
   b8a84:	000bad44 	.word	0x000bad44
   b8a88:	2003f400 	.word	0x2003f400
   b8a8c:	9a271c1e 	.word	0x9a271c1e

000b8a90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8a90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8a92:	2300      	movs	r3, #0
   b8a94:	9300      	str	r3, [sp, #0]
   b8a96:	461a      	mov	r2, r3
   b8a98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8a9c:	f7fc fd84 	bl	b55a8 <system_ctrl_set_result>
}
   b8aa0:	b003      	add	sp, #12
   b8aa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8aa8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8aa8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8aaa:	8843      	ldrh	r3, [r0, #2]
   b8aac:	2b0a      	cmp	r3, #10
   b8aae:	d008      	beq.n	b8ac2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8ab0:	2b50      	cmp	r3, #80	; 0x50
   b8ab2:	d10b      	bne.n	b8acc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8ab4:	4b09      	ldr	r3, [pc, #36]	; (b8adc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8ab6:	681b      	ldr	r3, [r3, #0]
   b8ab8:	b14b      	cbz	r3, b8ace <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8aba:	b003      	add	sp, #12
   b8abc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8ac0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8ac2:	f7ff ffe5 	bl	b8a90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8ac6:	b003      	add	sp, #12
   b8ac8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8acc:	2300      	movs	r3, #0
   b8ace:	9300      	str	r3, [sp, #0]
   b8ad0:	461a      	mov	r2, r3
   b8ad2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8ad6:	f7fc fd67 	bl	b55a8 <system_ctrl_set_result>
}
   b8ada:	e7f4      	b.n	b8ac6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8adc:	2003e6fc 	.word	0x2003e6fc

000b8ae0 <module_user_init_hook>:
{
   b8ae0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8ae2:	4812      	ldr	r0, [pc, #72]	; (b8b2c <module_user_init_hook+0x4c>)
   b8ae4:	2100      	movs	r1, #0
   b8ae6:	f7fc fdf9 	bl	b56dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8aea:	4b11      	ldr	r3, [pc, #68]	; (b8b30 <module_user_init_hook+0x50>)
   b8aec:	681a      	ldr	r2, [r3, #0]
   b8aee:	4b11      	ldr	r3, [pc, #68]	; (b8b34 <module_user_init_hook+0x54>)
   b8af0:	429a      	cmp	r2, r3
   b8af2:	4b11      	ldr	r3, [pc, #68]	; (b8b38 <module_user_init_hook+0x58>)
   b8af4:	bf0c      	ite	eq
   b8af6:	2201      	moveq	r2, #1
   b8af8:	2200      	movne	r2, #0
   b8afa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8afc:	d001      	beq.n	b8b02 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8afe:	f7ff ffb1 	bl	b8a64 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8b02:	f7fc fb21 	bl	b5148 <HAL_RNG_GetRandomNumber>
   b8b06:	4604      	mov	r4, r0
    srand(seed);
   b8b08:	f001 f9d0 	bl	b9eac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8b0c:	4b0b      	ldr	r3, [pc, #44]	; (b8b3c <module_user_init_hook+0x5c>)
   b8b0e:	b113      	cbz	r3, b8b16 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8b10:	4620      	mov	r0, r4
   b8b12:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8b16:	2100      	movs	r1, #0
   b8b18:	4808      	ldr	r0, [pc, #32]	; (b8b3c <module_user_init_hook+0x5c>)
   b8b1a:	f7fc fdaf 	bl	b567c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8b22:	4807      	ldr	r0, [pc, #28]	; (b8b40 <module_user_init_hook+0x60>)
   b8b24:	2100      	movs	r1, #0
   b8b26:	f7fc bd35 	b.w	b5594 <system_ctrl_set_app_request_handler>
   b8b2a:	bf00      	nop
   b8b2c:	000b8a0d 	.word	0x000b8a0d
   b8b30:	2003f400 	.word	0x2003f400
   b8b34:	9a271c1e 	.word	0x9a271c1e
   b8b38:	2003e6f8 	.word	0x2003e6f8
   b8b3c:	00000000 	.word	0x00000000
   b8b40:	000b8aa9 	.word	0x000b8aa9

000b8b44 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8b44:	4770      	bx	lr

000b8b46 <_ZN9IPAddressD0Ev>:
   b8b46:	b510      	push	{r4, lr}
   b8b48:	2118      	movs	r1, #24
   b8b4a:	4604      	mov	r4, r0
   b8b4c:	f7fb faa5 	bl	b409a <_ZdlPvj>
   b8b50:	4620      	mov	r0, r4
   b8b52:	bd10      	pop	{r4, pc}

000b8b54 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8b54:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8b56:	7d03      	ldrb	r3, [r0, #20]
   b8b58:	2b06      	cmp	r3, #6
{
   b8b5a:	b08d      	sub	sp, #52	; 0x34
   b8b5c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8b5e:	f100 0704 	add.w	r7, r0, #4
   b8b62:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8b66:	d012      	beq.n	b8b8e <_ZNK9IPAddress7printToER5Print+0x3a>
   b8b68:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b8b6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8b70:	220a      	movs	r2, #10
   b8b72:	4630      	mov	r0, r6
   b8b74:	f7ff fe2d 	bl	b87d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8b78:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8b7a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8b7c:	d019      	beq.n	b8bb2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8b7e:	2c00      	cmp	r4, #0
   b8b80:	d0f4      	beq.n	b8b6c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8b82:	212e      	movs	r1, #46	; 0x2e
   b8b84:	4630      	mov	r0, r6
   b8b86:	f7ff fe0b 	bl	b87a0 <_ZN5Print5printEc>
   b8b8a:	4404      	add	r4, r0
   b8b8c:	e7ee      	b.n	b8b6c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8b8e:	232f      	movs	r3, #47	; 0x2f
   b8b90:	466a      	mov	r2, sp
   b8b92:	4639      	mov	r1, r7
   b8b94:	200a      	movs	r0, #10
		buf[0] = 0;
   b8b96:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8b9a:	f7fc fbc3 	bl	b5324 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8b9e:	4668      	mov	r0, sp
   b8ba0:	f001 f9c4 	bl	b9f2c <strlen>
   b8ba4:	6833      	ldr	r3, [r6, #0]
   b8ba6:	4602      	mov	r2, r0
   b8ba8:	68db      	ldr	r3, [r3, #12]
   b8baa:	4669      	mov	r1, sp
   b8bac:	4630      	mov	r0, r6
   b8bae:	4798      	blx	r3
   b8bb0:	4604      	mov	r4, r0
    }
    return n;
}
   b8bb2:	4620      	mov	r0, r4
   b8bb4:	b00d      	add	sp, #52	; 0x34
   b8bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8bb8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8bb8:	b510      	push	{r4, lr}
   b8bba:	4b05      	ldr	r3, [pc, #20]	; (b8bd0 <_ZN9IPAddressC1Ev+0x18>)
   b8bbc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8bbe:	2211      	movs	r2, #17
   b8bc0:	f840 3b04 	str.w	r3, [r0], #4
   b8bc4:	2100      	movs	r1, #0
   b8bc6:	f001 f969 	bl	b9e9c <memset>
}
   b8bca:	4620      	mov	r0, r4
   b8bcc:	bd10      	pop	{r4, pc}
   b8bce:	bf00      	nop
   b8bd0:	000baa60 	.word	0x000baa60

000b8bd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8bd4:	4603      	mov	r3, r0
   b8bd6:	4a07      	ldr	r2, [pc, #28]	; (b8bf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8bd8:	b510      	push	{r4, lr}
   b8bda:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8bde:	f101 0210 	add.w	r2, r1, #16
   b8be2:	f851 4b04 	ldr.w	r4, [r1], #4
   b8be6:	f843 4b04 	str.w	r4, [r3], #4
   b8bea:	4291      	cmp	r1, r2
   b8bec:	d1f9      	bne.n	b8be2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8bee:	780a      	ldrb	r2, [r1, #0]
   b8bf0:	701a      	strb	r2, [r3, #0]
}
   b8bf2:	bd10      	pop	{r4, pc}
   b8bf4:	000baa60 	.word	0x000baa60

000b8bf8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8bf8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8bfa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8bfe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8c02:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8c06:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8c0a:	2304      	movs	r3, #4
   b8c0c:	6041      	str	r1, [r0, #4]
   b8c0e:	7503      	strb	r3, [r0, #20]
}
   b8c10:	bd10      	pop	{r4, pc}
	...

000b8c14 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8c14:	b507      	push	{r0, r1, r2, lr}
   b8c16:	4b06      	ldr	r3, [pc, #24]	; (b8c30 <_ZN9IPAddressC1EPKh+0x1c>)
   b8c18:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8c1a:	78cb      	ldrb	r3, [r1, #3]
   b8c1c:	9300      	str	r3, [sp, #0]
   b8c1e:	788b      	ldrb	r3, [r1, #2]
   b8c20:	784a      	ldrb	r2, [r1, #1]
   b8c22:	7809      	ldrb	r1, [r1, #0]
   b8c24:	f7ff ffe8 	bl	b8bf8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8c28:	b003      	add	sp, #12
   b8c2a:	f85d fb04 	ldr.w	pc, [sp], #4
   b8c2e:	bf00      	nop
   b8c30:	000baa60 	.word	0x000baa60

000b8c34 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8c34:	7441      	strb	r1, [r0, #17]
}
   b8c36:	4770      	bx	lr

000b8c38 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8c38:	4770      	bx	lr

000b8c3a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8c3a:	4770      	bx	lr

000b8c3c <_ZN9USBSerial4readEv>:
{
   b8c3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8c3e:	2100      	movs	r1, #0
   b8c40:	7c00      	ldrb	r0, [r0, #16]
   b8c42:	f7fc fc6f 	bl	b5524 <HAL_USB_USART_Receive_Data>
}
   b8c46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8c4a:	bd08      	pop	{r3, pc}

000b8c4c <_ZN9USBSerial4peekEv>:
{
   b8c4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8c4e:	2101      	movs	r1, #1
   b8c50:	7c00      	ldrb	r0, [r0, #16]
   b8c52:	f7fc fc67 	bl	b5524 <HAL_USB_USART_Receive_Data>
}
   b8c56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8c5a:	bd08      	pop	{r3, pc}

000b8c5c <_ZN9USBSerial17availableForWriteEv>:
{
   b8c5c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8c5e:	7c00      	ldrb	r0, [r0, #16]
   b8c60:	f7fc fc58 	bl	b5514 <HAL_USB_USART_Available_Data_For_Write>
}
   b8c64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8c68:	bd08      	pop	{r3, pc}

000b8c6a <_ZN9USBSerial9availableEv>:
{
   b8c6a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8c6c:	7c00      	ldrb	r0, [r0, #16]
   b8c6e:	f7fc fc49 	bl	b5504 <HAL_USB_USART_Available_Data>
}
   b8c72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8c76:	bd08      	pop	{r3, pc}

000b8c78 <_ZN9USBSerial5writeEh>:
{
   b8c78:	b513      	push	{r0, r1, r4, lr}
   b8c7a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8c7c:	7c00      	ldrb	r0, [r0, #16]
{
   b8c7e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8c80:	f7fc fc48 	bl	b5514 <HAL_USB_USART_Available_Data_For_Write>
   b8c84:	2800      	cmp	r0, #0
   b8c86:	9901      	ldr	r1, [sp, #4]
   b8c88:	dc01      	bgt.n	b8c8e <_ZN9USBSerial5writeEh+0x16>
   b8c8a:	7c60      	ldrb	r0, [r4, #17]
   b8c8c:	b120      	cbz	r0, b8c98 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8c8e:	7c20      	ldrb	r0, [r4, #16]
   b8c90:	f7fc fc50 	bl	b5534 <HAL_USB_USART_Send_Data>
   b8c94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8c98:	b002      	add	sp, #8
   b8c9a:	bd10      	pop	{r4, pc}

000b8c9c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8c9c:	7c00      	ldrb	r0, [r0, #16]
   b8c9e:	f7fc bc51 	b.w	b5544 <HAL_USB_USART_Flush_Data>

000b8ca2 <_ZN9USBSerialD0Ev>:
   b8ca2:	b510      	push	{r4, lr}
   b8ca4:	2114      	movs	r1, #20
   b8ca6:	4604      	mov	r4, r0
   b8ca8:	f7fb f9f7 	bl	b409a <_ZdlPvj>
   b8cac:	4620      	mov	r0, r4
   b8cae:	bd10      	pop	{r4, pc}

000b8cb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8cb0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8cb6:	4604      	mov	r4, r0
   b8cb8:	4608      	mov	r0, r1
   b8cba:	2100      	movs	r1, #0
   b8cbc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8cc0:	4b04      	ldr	r3, [pc, #16]	; (b8cd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8cc2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8cc4:	2301      	movs	r3, #1
  _serial = serial;
   b8cc6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8cc8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8cca:	4611      	mov	r1, r2
   b8ccc:	f7fc fc12 	bl	b54f4 <HAL_USB_USART_Init>
}
   b8cd0:	4620      	mov	r0, r4
   b8cd2:	bd10      	pop	{r4, pc}
   b8cd4:	000baa74 	.word	0x000baa74

000b8cd8 <_Z19acquireSerialBufferv>:
{
   b8cd8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8cda:	2214      	movs	r2, #20
{
   b8cdc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8cde:	2100      	movs	r1, #0
   b8ce0:	f001 f8dc 	bl	b9e9c <memset>
}
   b8ce4:	4620      	mov	r0, r4
   b8ce6:	bd10      	pop	{r4, pc}

000b8ce8 <_Z16_fetch_usbserialv>:
{
   b8ce8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8cea:	4c0f      	ldr	r4, [pc, #60]	; (b8d28 <_Z16_fetch_usbserialv+0x40>)
{
   b8cec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8cee:	a803      	add	r0, sp, #12
   b8cf0:	f7ff fff2 	bl	b8cd8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8cf4:	7821      	ldrb	r1, [r4, #0]
   b8cf6:	f3bf 8f5b 	dmb	ish
   b8cfa:	f011 0101 	ands.w	r1, r1, #1
   b8cfe:	d10f      	bne.n	b8d20 <_Z16_fetch_usbserialv+0x38>
   b8d00:	4620      	mov	r0, r4
   b8d02:	9101      	str	r1, [sp, #4]
   b8d04:	f7fb f9d8 	bl	b40b8 <__cxa_guard_acquire>
   b8d08:	9901      	ldr	r1, [sp, #4]
   b8d0a:	b148      	cbz	r0, b8d20 <_Z16_fetch_usbserialv+0x38>
   b8d0c:	aa03      	add	r2, sp, #12
   b8d0e:	4807      	ldr	r0, [pc, #28]	; (b8d2c <_Z16_fetch_usbserialv+0x44>)
   b8d10:	f7ff ffce 	bl	b8cb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8d14:	4620      	mov	r0, r4
   b8d16:	f7fb f9d4 	bl	b40c2 <__cxa_guard_release>
   b8d1a:	4805      	ldr	r0, [pc, #20]	; (b8d30 <_Z16_fetch_usbserialv+0x48>)
   b8d1c:	f001 f880 	bl	b9e20 <atexit>
	return _usbserial;
}
   b8d20:	4802      	ldr	r0, [pc, #8]	; (b8d2c <_Z16_fetch_usbserialv+0x44>)
   b8d22:	b008      	add	sp, #32
   b8d24:	bd10      	pop	{r4, pc}
   b8d26:	bf00      	nop
   b8d28:	2003e700 	.word	0x2003e700
   b8d2c:	2003e704 	.word	0x2003e704
   b8d30:	000b8c39 	.word	0x000b8c39

000b8d34 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8d34:	4770      	bx	lr

000b8d36 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8d36:	7441      	strb	r1, [r0, #17]
}
   b8d38:	4770      	bx	lr

000b8d3a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8d3a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8d3c:	7c00      	ldrb	r0, [r0, #16]
   b8d3e:	f7fc fb29 	bl	b5394 <hal_usart_available_data_for_write>
}
   b8d42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8d46:	bd08      	pop	{r3, pc}

000b8d48 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8d48:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8d4a:	7c00      	ldrb	r0, [r0, #16]
   b8d4c:	f7fc fafa 	bl	b5344 <hal_usart_available>
}
   b8d50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8d54:	bd08      	pop	{r3, pc}

000b8d56 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8d56:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8d58:	7c00      	ldrb	r0, [r0, #16]
   b8d5a:	f7fc fb03 	bl	b5364 <hal_usart_peek>
}
   b8d5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d62:	bd08      	pop	{r3, pc}

000b8d64 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8d64:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8d66:	7c00      	ldrb	r0, [r0, #16]
   b8d68:	f7fc faf4 	bl	b5354 <hal_usart_read>
}
   b8d6c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d70:	bd08      	pop	{r3, pc}

000b8d72 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8d72:	7c00      	ldrb	r0, [r0, #16]
   b8d74:	f7fc bafe 	b.w	b5374 <hal_usart_flush>

000b8d78 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8d7a:	7c45      	ldrb	r5, [r0, #17]
{
   b8d7c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8d7e:	b12d      	cbz	r5, b8d8c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8d80:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8d82:	b003      	add	sp, #12
   b8d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8d88:	f7fc bad4 	b.w	b5334 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8d8c:	7c00      	ldrb	r0, [r0, #16]
   b8d8e:	9101      	str	r1, [sp, #4]
   b8d90:	f7fc fb00 	bl	b5394 <hal_usart_available_data_for_write>
   b8d94:	2800      	cmp	r0, #0
   b8d96:	9901      	ldr	r1, [sp, #4]
   b8d98:	dcf2      	bgt.n	b8d80 <_ZN11USARTSerial5writeEh+0x8>
}
   b8d9a:	4628      	mov	r0, r5
   b8d9c:	b003      	add	sp, #12
   b8d9e:	bd30      	pop	{r4, r5, pc}

000b8da0 <_ZN11USARTSerialD0Ev>:
   b8da0:	b510      	push	{r4, lr}
   b8da2:	2114      	movs	r1, #20
   b8da4:	4604      	mov	r4, r0
   b8da6:	f7fb f978 	bl	b409a <_ZdlPvj>
   b8daa:	4620      	mov	r0, r4
   b8dac:	bd10      	pop	{r4, pc}
	...

000b8db0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8db0:	b510      	push	{r4, lr}
   b8db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8db6:	4604      	mov	r4, r0
   b8db8:	4608      	mov	r0, r1
   b8dba:	4611      	mov	r1, r2
   b8dbc:	2200      	movs	r2, #0
   b8dbe:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8dc2:	4b04      	ldr	r3, [pc, #16]	; (b8dd4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8dc4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8dc6:	2301      	movs	r3, #1
  _serial = serial;
   b8dc8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8dca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8dcc:	f7fc faea 	bl	b53a4 <hal_usart_init_ex>
}
   b8dd0:	4620      	mov	r0, r4
   b8dd2:	bd10      	pop	{r4, pc}
   b8dd4:	000baaa4 	.word	0x000baaa4

000b8dd8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8dd8:	4770      	bx	lr

000b8dda <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ddc:	4606      	mov	r6, r0
   b8dde:	4615      	mov	r5, r2
   b8de0:	460c      	mov	r4, r1
   b8de2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8de4:	42bc      	cmp	r4, r7
   b8de6:	d006      	beq.n	b8df6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8de8:	6833      	ldr	r3, [r6, #0]
   b8dea:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8dee:	689b      	ldr	r3, [r3, #8]
   b8df0:	4630      	mov	r0, r6
   b8df2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8df4:	e7f6      	b.n	b8de4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8df6:	4628      	mov	r0, r5
   b8df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8dfa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8dfa:	7c00      	ldrb	r0, [r0, #16]
   b8dfc:	2200      	movs	r2, #0
   b8dfe:	f7fc baf1 	b.w	b53e4 <hal_i2c_write>

000b8e02 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8e02:	7c00      	ldrb	r0, [r0, #16]
   b8e04:	2100      	movs	r1, #0
   b8e06:	f7fc baf5 	b.w	b53f4 <hal_i2c_available>

000b8e0a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8e0a:	7c00      	ldrb	r0, [r0, #16]
   b8e0c:	2100      	movs	r1, #0
   b8e0e:	f7fc baf9 	b.w	b5404 <hal_i2c_read>

000b8e12 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8e12:	7c00      	ldrb	r0, [r0, #16]
   b8e14:	2100      	movs	r1, #0
   b8e16:	f7fc bafd 	b.w	b5414 <hal_i2c_peek>

000b8e1a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8e1a:	7c00      	ldrb	r0, [r0, #16]
   b8e1c:	2100      	movs	r1, #0
   b8e1e:	f7fc bb01 	b.w	b5424 <hal_i2c_flush>

000b8e22 <_ZN7TwoWireD0Ev>:
   b8e22:	b510      	push	{r4, lr}
   b8e24:	2114      	movs	r1, #20
   b8e26:	4604      	mov	r4, r0
   b8e28:	f7fb f937 	bl	b409a <_ZdlPvj>
   b8e2c:	4620      	mov	r0, r4
   b8e2e:	bd10      	pop	{r4, pc}

000b8e30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8e30:	b538      	push	{r3, r4, r5, lr}
   b8e32:	4604      	mov	r4, r0
   b8e34:	4615      	mov	r5, r2
   b8e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8e3a:	2200      	movs	r2, #0
   b8e3c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8e40:	4b09      	ldr	r3, [pc, #36]	; (b8e68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b8e42:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8e44:	4608      	mov	r0, r1
   b8e46:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b8e48:	4629      	mov	r1, r5
   b8e4a:	f7fc fafb 	bl	b5444 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8e4e:	30bf      	adds	r0, #191	; 0xbf
   b8e50:	d108      	bne.n	b8e64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b8e52:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8e54:	07db      	lsls	r3, r3, #31
   b8e56:	d505      	bpl.n	b8e64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b8e58:	6868      	ldr	r0, [r5, #4]
   b8e5a:	f7fc fc1f 	bl	b569c <free>
    free(conf.tx_buffer);
   b8e5e:	68e8      	ldr	r0, [r5, #12]
   b8e60:	f7fc fc1c 	bl	b569c <free>
}
   b8e64:	4620      	mov	r0, r4
   b8e66:	bd38      	pop	{r3, r4, r5, pc}
   b8e68:	000baad4 	.word	0x000baad4

000b8e6c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8e6c:	2300      	movs	r3, #0
   b8e6e:	7c00      	ldrb	r0, [r0, #16]
   b8e70:	461a      	mov	r2, r3
   b8e72:	4619      	mov	r1, r3
   b8e74:	f7fc ba9e 	b.w	b53b4 <hal_i2c_begin>

000b8e78 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8e78:	7c00      	ldrb	r0, [r0, #16]
   b8e7a:	2200      	movs	r2, #0
   b8e7c:	f7fc baa2 	b.w	b53c4 <hal_i2c_begin_transmission>

000b8e80 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8e80:	b2c9      	uxtb	r1, r1
   b8e82:	f7ff bff9 	b.w	b8e78 <_ZN7TwoWire17beginTransmissionEh>

000b8e86 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8e86:	7c00      	ldrb	r0, [r0, #16]
   b8e88:	2200      	movs	r2, #0
   b8e8a:	f7fc baa3 	b.w	b53d4 <hal_i2c_end_transmission>

000b8e8e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8e8e:	2101      	movs	r1, #1
   b8e90:	f7ff bff9 	b.w	b8e86 <_ZN7TwoWire15endTransmissionEh>

000b8e94 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8e94:	2200      	movs	r2, #0
   b8e96:	6840      	ldr	r0, [r0, #4]
   b8e98:	4611      	mov	r1, r2
   b8e9a:	f7fc bba7 	b.w	b55ec <network_ready>

000b8e9e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8e9e:	2200      	movs	r2, #0
   b8ea0:	6840      	ldr	r0, [r0, #4]
   b8ea2:	4611      	mov	r1, r2
   b8ea4:	f7fc bbc2 	b.w	b562c <network_listening>

000b8ea8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8ea8:	2200      	movs	r2, #0
   b8eaa:	6840      	ldr	r0, [r0, #4]
   b8eac:	4611      	mov	r1, r2
   b8eae:	f7fc bbcd 	b.w	b564c <network_get_listen_timeout>

000b8eb2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8eb2:	6840      	ldr	r0, [r0, #4]
   b8eb4:	2200      	movs	r2, #0
   b8eb6:	f7fc bbc1 	b.w	b563c <network_set_listen_timeout>

000b8eba <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8eba:	6840      	ldr	r0, [r0, #4]
   b8ebc:	2200      	movs	r2, #0
   b8ebe:	f081 0101 	eor.w	r1, r1, #1
   b8ec2:	f7fc bbab 	b.w	b561c <network_listen>

000b8ec6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8ec6:	2300      	movs	r3, #0
   b8ec8:	6840      	ldr	r0, [r0, #4]
   b8eca:	461a      	mov	r2, r3
   b8ecc:	4619      	mov	r1, r3
   b8ece:	f7fc bb9d 	b.w	b560c <network_off>

000b8ed2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8ed2:	2300      	movs	r3, #0
   b8ed4:	6840      	ldr	r0, [r0, #4]
   b8ed6:	461a      	mov	r2, r3
   b8ed8:	4619      	mov	r1, r3
   b8eda:	f7fc bb8f 	b.w	b55fc <network_on>

000b8ede <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8ede:	2200      	movs	r2, #0
   b8ee0:	6840      	ldr	r0, [r0, #4]
   b8ee2:	4611      	mov	r1, r2
   b8ee4:	f7fc bb72 	b.w	b55cc <network_connecting>

000b8ee8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8ee8:	6840      	ldr	r0, [r0, #4]
   b8eea:	2200      	movs	r2, #0
   b8eec:	2102      	movs	r1, #2
   b8eee:	f7fc bb75 	b.w	b55dc <network_disconnect>

000b8ef2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8ef2:	2300      	movs	r3, #0
   b8ef4:	6840      	ldr	r0, [r0, #4]
   b8ef6:	461a      	mov	r2, r3
   b8ef8:	f7fc bb60 	b.w	b55bc <network_connect>

000b8efc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8efc:	4b02      	ldr	r3, [pc, #8]	; (b8f08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8efe:	2204      	movs	r2, #4
   b8f00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8f02:	4a02      	ldr	r2, [pc, #8]	; (b8f0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8f04:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8f06:	4770      	bx	lr
   b8f08:	2003e718 	.word	0x2003e718
   b8f0c:	000baafc 	.word	0x000baafc

000b8f10 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8f10:	2300      	movs	r3, #0
   b8f12:	6840      	ldr	r0, [r0, #4]
   b8f14:	461a      	mov	r2, r3
   b8f16:	f7fc bb51 	b.w	b55bc <network_connect>

000b8f1a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8f1a:	6840      	ldr	r0, [r0, #4]
   b8f1c:	2200      	movs	r2, #0
   b8f1e:	2102      	movs	r1, #2
   b8f20:	f7fc bb5c 	b.w	b55dc <network_disconnect>

000b8f24 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8f24:	2200      	movs	r2, #0
   b8f26:	6840      	ldr	r0, [r0, #4]
   b8f28:	4611      	mov	r1, r2
   b8f2a:	f7fc bb4f 	b.w	b55cc <network_connecting>

000b8f2e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8f2e:	2200      	movs	r2, #0
   b8f30:	6840      	ldr	r0, [r0, #4]
   b8f32:	4611      	mov	r1, r2
   b8f34:	f7fc bb5a 	b.w	b55ec <network_ready>

000b8f38 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8f38:	2300      	movs	r3, #0
   b8f3a:	6840      	ldr	r0, [r0, #4]
   b8f3c:	461a      	mov	r2, r3
   b8f3e:	4619      	mov	r1, r3
   b8f40:	f7fc bb5c 	b.w	b55fc <network_on>

000b8f44 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8f44:	2300      	movs	r3, #0
   b8f46:	6840      	ldr	r0, [r0, #4]
   b8f48:	461a      	mov	r2, r3
   b8f4a:	4619      	mov	r1, r3
   b8f4c:	f7fc bb5e 	b.w	b560c <network_off>

000b8f50 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8f50:	6840      	ldr	r0, [r0, #4]
   b8f52:	2100      	movs	r1, #0
   b8f54:	f7fc bb82 	b.w	b565c <network_is_on>

000b8f58 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8f58:	6840      	ldr	r0, [r0, #4]
   b8f5a:	2100      	movs	r1, #0
   b8f5c:	f7fc bb86 	b.w	b566c <network_is_off>

000b8f60 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8f60:	6840      	ldr	r0, [r0, #4]
   b8f62:	2200      	movs	r2, #0
   b8f64:	f081 0101 	eor.w	r1, r1, #1
   b8f68:	f7fc bb58 	b.w	b561c <network_listen>

000b8f6c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8f6c:	6840      	ldr	r0, [r0, #4]
   b8f6e:	2200      	movs	r2, #0
   b8f70:	f7fc bb64 	b.w	b563c <network_set_listen_timeout>

000b8f74 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8f74:	2200      	movs	r2, #0
   b8f76:	6840      	ldr	r0, [r0, #4]
   b8f78:	4611      	mov	r1, r2
   b8f7a:	f7fc bb67 	b.w	b564c <network_get_listen_timeout>

000b8f7e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8f7e:	2200      	movs	r2, #0
   b8f80:	6840      	ldr	r0, [r0, #4]
   b8f82:	4611      	mov	r1, r2
   b8f84:	f7fc bb52 	b.w	b562c <network_listening>

000b8f88 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8f8c:	b095      	sub	sp, #84	; 0x54
   b8f8e:	4614      	mov	r4, r2
   b8f90:	460d      	mov	r5, r1
   b8f92:	4607      	mov	r7, r0
    IPAddress addr;
   b8f94:	f7ff fe10 	bl	b8bb8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8f98:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8f9a:	221c      	movs	r2, #28
   b8f9c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8f9e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8fa0:	f000 ff7c 	bl	b9e9c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8fa4:	2340      	movs	r3, #64	; 0x40
   b8fa6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8fa8:	4620      	mov	r0, r4
   b8faa:	466b      	mov	r3, sp
   b8fac:	aa0c      	add	r2, sp, #48	; 0x30
   b8fae:	2100      	movs	r1, #0
   b8fb0:	f7fc f8a2 	bl	b50f8 <netdb_getaddrinfo>
    if (!r) {
   b8fb4:	4604      	mov	r4, r0
   b8fb6:	2800      	cmp	r0, #0
   b8fb8:	d14b      	bne.n	b9052 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8fba:	4602      	mov	r2, r0
   b8fbc:	2101      	movs	r1, #1
   b8fbe:	6868      	ldr	r0, [r5, #4]
   b8fc0:	f7fc fb14 	bl	b55ec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8fc4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8fc6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8fc8:	4622      	mov	r2, r4
   b8fca:	6868      	ldr	r0, [r5, #4]
   b8fcc:	f7fc fb0e 	bl	b55ec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8fd0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8fd2:	4681      	mov	r9, r0
        bool ok = false;
   b8fd4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8fd6:	2e00      	cmp	r6, #0
   b8fd8:	d03b      	beq.n	b9052 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8fda:	2900      	cmp	r1, #0
   b8fdc:	d139      	bne.n	b9052 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8fde:	6873      	ldr	r3, [r6, #4]
   b8fe0:	2b02      	cmp	r3, #2
   b8fe2:	d003      	beq.n	b8fec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8fe4:	2b0a      	cmp	r3, #10
   b8fe6:	d011      	beq.n	b900c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8fe8:	69f6      	ldr	r6, [r6, #28]
   b8fea:	e7f4      	b.n	b8fd6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8fec:	f1b8 0f00 	cmp.w	r8, #0
   b8ff0:	d0fa      	beq.n	b8fe8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8ff2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8ff4:	a806      	add	r0, sp, #24
   b8ff6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8ff8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8ffa:	f7ff fe0b 	bl	b8c14 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9000:	1d3c      	adds	r4, r7, #4
   b9002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9004:	682b      	ldr	r3, [r5, #0]
   b9006:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9008:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b900a:	e7ed      	b.n	b8fe8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b900c:	f1b9 0f00 	cmp.w	r9, #0
   b9010:	d0ea      	beq.n	b8fe8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9012:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9014:	2210      	movs	r2, #16
   b9016:	a801      	add	r0, sp, #4
   b9018:	f000 ff40 	bl	b9e9c <memset>
                    a.v = 6;
   b901c:	2306      	movs	r3, #6
   b901e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9022:	ad01      	add	r5, sp, #4
   b9024:	f104 0308 	add.w	r3, r4, #8
   b9028:	3418      	adds	r4, #24
   b902a:	6818      	ldr	r0, [r3, #0]
   b902c:	6859      	ldr	r1, [r3, #4]
   b902e:	462a      	mov	r2, r5
   b9030:	c203      	stmia	r2!, {r0, r1}
   b9032:	3308      	adds	r3, #8
   b9034:	42a3      	cmp	r3, r4
   b9036:	4615      	mov	r5, r2
   b9038:	d1f7      	bne.n	b902a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b903a:	a901      	add	r1, sp, #4
   b903c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b903e:	ad07      	add	r5, sp, #28
   b9040:	f7ff fdc8 	bl	b8bd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9046:	1d3c      	adds	r4, r7, #4
   b9048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b904a:	682b      	ldr	r3, [r5, #0]
   b904c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b904e:	4649      	mov	r1, r9
   b9050:	e7ca      	b.n	b8fe8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9052:	9800      	ldr	r0, [sp, #0]
   b9054:	f7fc f848 	bl	b50e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9058:	4638      	mov	r0, r7
   b905a:	b015      	add	sp, #84	; 0x54
   b905c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9060 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9060:	4b02      	ldr	r3, [pc, #8]	; (b906c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9062:	4a03      	ldr	r2, [pc, #12]	; (b9070 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9064:	601a      	str	r2, [r3, #0]
   b9066:	2200      	movs	r2, #0
   b9068:	605a      	str	r2, [r3, #4]

} // spark
   b906a:	4770      	bx	lr
   b906c:	2003e720 	.word	0x2003e720
   b9070:	000bab38 	.word	0x000bab38

000b9074 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9074:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9076:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9078:	d902      	bls.n	b9080 <pinAvailable+0xc>
    return false;
   b907a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b907c:	b002      	add	sp, #8
   b907e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9080:	f1a0 030b 	sub.w	r3, r0, #11
   b9084:	2b02      	cmp	r3, #2
   b9086:	d81a      	bhi.n	b90be <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9088:	4c17      	ldr	r4, [pc, #92]	; (b90e8 <pinAvailable+0x74>)
   b908a:	7821      	ldrb	r1, [r4, #0]
   b908c:	f3bf 8f5b 	dmb	ish
   b9090:	f011 0101 	ands.w	r1, r1, #1
   b9094:	d10b      	bne.n	b90ae <pinAvailable+0x3a>
   b9096:	4620      	mov	r0, r4
   b9098:	9101      	str	r1, [sp, #4]
   b909a:	f7fb f80d 	bl	b40b8 <__cxa_guard_acquire>
   b909e:	9901      	ldr	r1, [sp, #4]
   b90a0:	b128      	cbz	r0, b90ae <pinAvailable+0x3a>
   b90a2:	4812      	ldr	r0, [pc, #72]	; (b90ec <pinAvailable+0x78>)
   b90a4:	f7fc fb66 	bl	b5774 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b90a8:	4620      	mov	r0, r4
   b90aa:	f7fb f80a 	bl	b40c2 <__cxa_guard_release>
   b90ae:	4b0f      	ldr	r3, [pc, #60]	; (b90ec <pinAvailable+0x78>)
   b90b0:	7818      	ldrb	r0, [r3, #0]
   b90b2:	f7fc f9ff 	bl	b54b4 <hal_spi_is_enabled>
   b90b6:	2800      	cmp	r0, #0
   b90b8:	d1df      	bne.n	b907a <pinAvailable+0x6>
  return true; // 'pin' is available
   b90ba:	2001      	movs	r0, #1
   b90bc:	e7de      	b.n	b907c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b90be:	2801      	cmp	r0, #1
   b90c0:	d809      	bhi.n	b90d6 <pinAvailable+0x62>
   b90c2:	f000 f8bd 	bl	b9240 <_Z19__fetch_global_Wirev>
   b90c6:	2100      	movs	r1, #0
   b90c8:	7c00      	ldrb	r0, [r0, #16]
   b90ca:	f7fc f9b3 	bl	b5434 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b90ce:	f080 0001 	eor.w	r0, r0, #1
   b90d2:	b2c0      	uxtb	r0, r0
   b90d4:	e7d2      	b.n	b907c <pinAvailable+0x8>
   b90d6:	3809      	subs	r0, #9
   b90d8:	2801      	cmp	r0, #1
   b90da:	d8ee      	bhi.n	b90ba <pinAvailable+0x46>
   b90dc:	f000 f870 	bl	b91c0 <_Z22__fetch_global_Serial1v>
   b90e0:	7c00      	ldrb	r0, [r0, #16]
   b90e2:	f7fc f94f 	bl	b5384 <hal_usart_is_enabled>
   b90e6:	e7f2      	b.n	b90ce <pinAvailable+0x5a>
   b90e8:	2003e6a8 	.word	0x2003e6a8
   b90ec:	2003e6ac 	.word	0x2003e6ac

000b90f0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b90f0:	2823      	cmp	r0, #35	; 0x23
{
   b90f2:	b538      	push	{r3, r4, r5, lr}
   b90f4:	4604      	mov	r4, r0
   b90f6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b90f8:	d80a      	bhi.n	b9110 <pinMode+0x20>
   b90fa:	29ff      	cmp	r1, #255	; 0xff
   b90fc:	d008      	beq.n	b9110 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b90fe:	f7ff ffb9 	bl	b9074 <pinAvailable>
   b9102:	b128      	cbz	r0, b9110 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9104:	4629      	mov	r1, r5
   b9106:	4620      	mov	r0, r4
}
   b9108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b910c:	f7fc b804 	b.w	b5118 <HAL_Pin_Mode>
}
   b9110:	bd38      	pop	{r3, r4, r5, pc}

000b9112 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b9112:	b538      	push	{r3, r4, r5, lr}
   b9114:	4604      	mov	r4, r0
   b9116:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9118:	f7fc f806 	bl	b5128 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b911c:	28ff      	cmp	r0, #255	; 0xff
   b911e:	d010      	beq.n	b9142 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9120:	2806      	cmp	r0, #6
   b9122:	d804      	bhi.n	b912e <digitalWrite+0x1c>
   b9124:	234d      	movs	r3, #77	; 0x4d
   b9126:	fa23 f000 	lsr.w	r0, r3, r0
   b912a:	07c3      	lsls	r3, r0, #31
   b912c:	d409      	bmi.n	b9142 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b912e:	4620      	mov	r0, r4
   b9130:	f7ff ffa0 	bl	b9074 <pinAvailable>
   b9134:	b128      	cbz	r0, b9142 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b9136:	4629      	mov	r1, r5
   b9138:	4620      	mov	r0, r4
}
   b913a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b913e:	f7fb bffb 	b.w	b5138 <HAL_GPIO_Write>
}
   b9142:	bd38      	pop	{r3, r4, r5, pc}

000b9144 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b9144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9148:	4690      	mov	r8, r2
   b914a:	461f      	mov	r7, r3
   b914c:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b914e:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b9150:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b9152:	f1c4 0107 	rsb	r1, r4, #7
   b9156:	f1b8 0f00 	cmp.w	r8, #0
   b915a:	d112      	bne.n	b9182 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b915c:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b9160:	f001 0101 	and.w	r1, r1, #1
   b9164:	4630      	mov	r0, r6
   b9166:	f7ff ffd4 	bl	b9112 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b916a:	2101      	movs	r1, #1
   b916c:	4628      	mov	r0, r5
   b916e:	f7ff ffd0 	bl	b9112 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b9172:	2100      	movs	r1, #0
   b9174:	4628      	mov	r0, r5
   b9176:	f7ff ffcc 	bl	b9112 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b917a:	3c01      	subs	r4, #1
   b917c:	d2e9      	bcs.n	b9152 <shiftOut+0xe>
  }
}
   b917e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b9182:	fa47 f104 	asr.w	r1, r7, r4
   b9186:	e7eb      	b.n	b9160 <shiftOut+0x1c>

000b9188 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9188:	4770      	bx	lr
	...

000b918c <_Z20acquireSerial1Bufferv>:
{
   b918c:	b538      	push	{r3, r4, r5, lr}
   b918e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9190:	2514      	movs	r5, #20
   b9192:	462a      	mov	r2, r5
   b9194:	2100      	movs	r1, #0
   b9196:	f000 fe81 	bl	b9e9c <memset>
   b919a:	8025      	strh	r5, [r4, #0]
   b919c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b919e:	4907      	ldr	r1, [pc, #28]	; (b91bc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b91a0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b91a2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b91a4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b91a6:	f000 f86f 	bl	b9288 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b91aa:	4904      	ldr	r1, [pc, #16]	; (b91bc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b91ac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b91ae:	4628      	mov	r0, r5
   b91b0:	f000 f86a 	bl	b9288 <_ZnajRKSt9nothrow_t>
    };
   b91b4:	60e0      	str	r0, [r4, #12]
}
   b91b6:	4620      	mov	r0, r4
   b91b8:	bd38      	pop	{r3, r4, r5, pc}
   b91ba:	bf00      	nop
   b91bc:	000bab6c 	.word	0x000bab6c

000b91c0 <_Z22__fetch_global_Serial1v>:
{
   b91c0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b91c2:	4d0e      	ldr	r5, [pc, #56]	; (b91fc <_Z22__fetch_global_Serial1v+0x3c>)
   b91c4:	7829      	ldrb	r1, [r5, #0]
   b91c6:	f3bf 8f5b 	dmb	ish
   b91ca:	f011 0401 	ands.w	r4, r1, #1
{
   b91ce:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b91d0:	d111      	bne.n	b91f6 <_Z22__fetch_global_Serial1v+0x36>
   b91d2:	4628      	mov	r0, r5
   b91d4:	f7fa ff70 	bl	b40b8 <__cxa_guard_acquire>
   b91d8:	b168      	cbz	r0, b91f6 <_Z22__fetch_global_Serial1v+0x36>
   b91da:	a801      	add	r0, sp, #4
   b91dc:	f7ff ffd6 	bl	b918c <_Z20acquireSerial1Bufferv>
   b91e0:	aa01      	add	r2, sp, #4
   b91e2:	4621      	mov	r1, r4
   b91e4:	4806      	ldr	r0, [pc, #24]	; (b9200 <_Z22__fetch_global_Serial1v+0x40>)
   b91e6:	f7ff fde3 	bl	b8db0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b91ea:	4628      	mov	r0, r5
   b91ec:	f7fa ff69 	bl	b40c2 <__cxa_guard_release>
   b91f0:	4804      	ldr	r0, [pc, #16]	; (b9204 <_Z22__fetch_global_Serial1v+0x44>)
   b91f2:	f000 fe15 	bl	b9e20 <atexit>
    return serial1;
}
   b91f6:	4802      	ldr	r0, [pc, #8]	; (b9200 <_Z22__fetch_global_Serial1v+0x40>)
   b91f8:	b007      	add	sp, #28
   b91fa:	bd30      	pop	{r4, r5, pc}
   b91fc:	2003e728 	.word	0x2003e728
   b9200:	2003e72c 	.word	0x2003e72c
   b9204:	000b9189 	.word	0x000b9189

000b9208 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9208:	4770      	bx	lr
	...

000b920c <_Z17acquireWireBufferv>:
{
   b920c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b920e:	4b0a      	ldr	r3, [pc, #40]	; (b9238 <_Z17acquireWireBufferv+0x2c>)
   b9210:	6003      	str	r3, [r0, #0]
   b9212:	2301      	movs	r3, #1
{
   b9214:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9216:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9218:	4908      	ldr	r1, [pc, #32]	; (b923c <_Z17acquireWireBufferv+0x30>)
   b921a:	2020      	movs	r0, #32
   b921c:	f000 f834 	bl	b9288 <_ZnajRKSt9nothrow_t>
	};
   b9220:	2520      	movs	r5, #32
   b9222:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9224:	4905      	ldr	r1, [pc, #20]	; (b923c <_Z17acquireWireBufferv+0x30>)
	};
   b9226:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9228:	4628      	mov	r0, r5
   b922a:	f000 f82d 	bl	b9288 <_ZnajRKSt9nothrow_t>
	};
   b922e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b9232:	4620      	mov	r0, r4
   b9234:	bd38      	pop	{r3, r4, r5, pc}
   b9236:	bf00      	nop
   b9238:	00010018 	.word	0x00010018
   b923c:	000bab6c 	.word	0x000bab6c

000b9240 <_Z19__fetch_global_Wirev>:
{
   b9240:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9242:	4d0e      	ldr	r5, [pc, #56]	; (b927c <_Z19__fetch_global_Wirev+0x3c>)
   b9244:	7829      	ldrb	r1, [r5, #0]
   b9246:	f3bf 8f5b 	dmb	ish
   b924a:	f011 0401 	ands.w	r4, r1, #1
{
   b924e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9250:	d111      	bne.n	b9276 <_Z19__fetch_global_Wirev+0x36>
   b9252:	4628      	mov	r0, r5
   b9254:	f7fa ff30 	bl	b40b8 <__cxa_guard_acquire>
   b9258:	b168      	cbz	r0, b9276 <_Z19__fetch_global_Wirev+0x36>
   b925a:	4668      	mov	r0, sp
   b925c:	f7ff ffd6 	bl	b920c <_Z17acquireWireBufferv>
   b9260:	466a      	mov	r2, sp
   b9262:	4621      	mov	r1, r4
   b9264:	4806      	ldr	r0, [pc, #24]	; (b9280 <_Z19__fetch_global_Wirev+0x40>)
   b9266:	f7ff fde3 	bl	b8e30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b926a:	4628      	mov	r0, r5
   b926c:	f7fa ff29 	bl	b40c2 <__cxa_guard_release>
   b9270:	4804      	ldr	r0, [pc, #16]	; (b9284 <_Z19__fetch_global_Wirev+0x44>)
   b9272:	f000 fdd5 	bl	b9e20 <atexit>
	return wire;
}
   b9276:	4802      	ldr	r0, [pc, #8]	; (b9280 <_Z19__fetch_global_Wirev+0x40>)
   b9278:	b007      	add	sp, #28
   b927a:	bd30      	pop	{r4, r5, pc}
   b927c:	2003e744 	.word	0x2003e744
   b9280:	2003e748 	.word	0x2003e748
   b9284:	000b9209 	.word	0x000b9209

000b9288 <_ZnajRKSt9nothrow_t>:
   b9288:	f7fa bf05 	b.w	b4096 <_Znaj>

000b928c <_ZSt25__throw_bad_function_callv>:
   b928c:	b508      	push	{r3, lr}
   b928e:	f7fc fa15 	bl	b56bc <abort>
	...

000b9294 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9294:	4901      	ldr	r1, [pc, #4]	; (b929c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9296:	f000 b8f9 	b.w	b948c <_ZNKSt9type_infoeqERKS_>
   b929a:	bf00      	nop
   b929c:	000bab88 	.word	0x000bab88

000b92a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b92a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b92a2:	2400      	movs	r4, #0
   b92a4:	2310      	movs	r3, #16
   b92a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b92aa:	6803      	ldr	r3, [r0, #0]
   b92ac:	4615      	mov	r5, r2
   b92ae:	699e      	ldr	r6, [r3, #24]
   b92b0:	6812      	ldr	r2, [r2, #0]
   b92b2:	466b      	mov	r3, sp
   b92b4:	e9cd 4400 	strd	r4, r4, [sp]
   b92b8:	47b0      	blx	r6
   b92ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b92be:	f003 0306 	and.w	r3, r3, #6
   b92c2:	2b06      	cmp	r3, #6
   b92c4:	bf03      	ittte	eq
   b92c6:	9b00      	ldreq	r3, [sp, #0]
   b92c8:	602b      	streq	r3, [r5, #0]
   b92ca:	2001      	moveq	r0, #1
   b92cc:	4620      	movne	r0, r4
   b92ce:	b004      	add	sp, #16
   b92d0:	bd70      	pop	{r4, r5, r6, pc}

000b92d2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b92d2:	9800      	ldr	r0, [sp, #0]
   b92d4:	4290      	cmp	r0, r2
   b92d6:	bf14      	ite	ne
   b92d8:	2001      	movne	r0, #1
   b92da:	2006      	moveq	r0, #6
   b92dc:	4770      	bx	lr
	...

000b92e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b92e0:	b510      	push	{r4, lr}
   b92e2:	4b03      	ldr	r3, [pc, #12]	; (b92f0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b92e4:	6003      	str	r3, [r0, #0]
   b92e6:	4604      	mov	r4, r0
   b92e8:	f000 f8cd 	bl	b9486 <_ZNSt9type_infoD1Ev>
   b92ec:	4620      	mov	r0, r4
   b92ee:	bd10      	pop	{r4, pc}
   b92f0:	000babc8 	.word	0x000babc8

000b92f4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b92f4:	b510      	push	{r4, lr}
   b92f6:	4604      	mov	r4, r0
   b92f8:	f7ff fff2 	bl	b92e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b92fc:	4620      	mov	r0, r4
   b92fe:	2108      	movs	r1, #8
   b9300:	f7fa fecb 	bl	b409a <_ZdlPvj>
   b9304:	4620      	mov	r0, r4
   b9306:	bd10      	pop	{r4, pc}

000b9308 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b930c:	461f      	mov	r7, r3
   b930e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9312:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9316:	4598      	cmp	r8, r3
   b9318:	4606      	mov	r6, r0
   b931a:	4615      	mov	r5, r2
   b931c:	d107      	bne.n	b932e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b931e:	9907      	ldr	r1, [sp, #28]
   b9320:	f000 f8b4 	bl	b948c <_ZNKSt9type_infoeqERKS_>
   b9324:	b118      	cbz	r0, b932e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9326:	7165      	strb	r5, [r4, #5]
   b9328:	2000      	movs	r0, #0
   b932a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b932e:	4639      	mov	r1, r7
   b9330:	4630      	mov	r0, r6
   b9332:	f000 f8ab 	bl	b948c <_ZNKSt9type_infoeqERKS_>
   b9336:	2800      	cmp	r0, #0
   b9338:	d0f6      	beq.n	b9328 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b933a:	2301      	movs	r3, #1
   b933c:	f8c4 8000 	str.w	r8, [r4]
   b9340:	7125      	strb	r5, [r4, #4]
   b9342:	71a3      	strb	r3, [r4, #6]
   b9344:	e7f0      	b.n	b9328 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9346 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9346:	b538      	push	{r3, r4, r5, lr}
   b9348:	4615      	mov	r5, r2
   b934a:	461c      	mov	r4, r3
   b934c:	f000 f89e 	bl	b948c <_ZNKSt9type_infoeqERKS_>
   b9350:	b120      	cbz	r0, b935c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9352:	2308      	movs	r3, #8
   b9354:	60e3      	str	r3, [r4, #12]
   b9356:	2306      	movs	r3, #6
   b9358:	6025      	str	r5, [r4, #0]
   b935a:	7123      	strb	r3, [r4, #4]
   b935c:	bd38      	pop	{r3, r4, r5, pc}

000b935e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b935e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9360:	4605      	mov	r5, r0
   b9362:	460c      	mov	r4, r1
   b9364:	9201      	str	r2, [sp, #4]
   b9366:	461e      	mov	r6, r3
   b9368:	f000 f890 	bl	b948c <_ZNKSt9type_infoeqERKS_>
   b936c:	b950      	cbnz	r0, b9384 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b936e:	2e03      	cmp	r6, #3
   b9370:	d808      	bhi.n	b9384 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9372:	6823      	ldr	r3, [r4, #0]
   b9374:	9a01      	ldr	r2, [sp, #4]
   b9376:	695b      	ldr	r3, [r3, #20]
   b9378:	4629      	mov	r1, r5
   b937a:	4620      	mov	r0, r4
   b937c:	b002      	add	sp, #8
   b937e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9382:	4718      	bx	r3
   b9384:	b002      	add	sp, #8
   b9386:	bd70      	pop	{r4, r5, r6, pc}

000b9388 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9388:	b510      	push	{r4, lr}
   b938a:	4b03      	ldr	r3, [pc, #12]	; (b9398 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b938c:	6003      	str	r3, [r0, #0]
   b938e:	4604      	mov	r4, r0
   b9390:	f7ff ffa6 	bl	b92e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9394:	4620      	mov	r0, r4
   b9396:	bd10      	pop	{r4, pc}
   b9398:	000bac28 	.word	0x000bac28

000b939c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b939c:	b510      	push	{r4, lr}
   b939e:	4604      	mov	r4, r0
   b93a0:	f7ff fff2 	bl	b9388 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b93a4:	4620      	mov	r0, r4
   b93a6:	210c      	movs	r1, #12
   b93a8:	f7fa fe77 	bl	b409a <_ZdlPvj>
   b93ac:	4620      	mov	r0, r4
   b93ae:	bd10      	pop	{r4, pc}

000b93b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b93b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b93b2:	9f08      	ldr	r7, [sp, #32]
   b93b4:	4297      	cmp	r7, r2
   b93b6:	4605      	mov	r5, r0
   b93b8:	460e      	mov	r6, r1
   b93ba:	4614      	mov	r4, r2
   b93bc:	d00a      	beq.n	b93d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b93be:	68a8      	ldr	r0, [r5, #8]
   b93c0:	6802      	ldr	r2, [r0, #0]
   b93c2:	9708      	str	r7, [sp, #32]
   b93c4:	6a15      	ldr	r5, [r2, #32]
   b93c6:	4631      	mov	r1, r6
   b93c8:	4622      	mov	r2, r4
   b93ca:	46ac      	mov	ip, r5
   b93cc:	b003      	add	sp, #12
   b93ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b93d2:	4760      	bx	ip
   b93d4:	4619      	mov	r1, r3
   b93d6:	9301      	str	r3, [sp, #4]
   b93d8:	f000 f858 	bl	b948c <_ZNKSt9type_infoeqERKS_>
   b93dc:	9b01      	ldr	r3, [sp, #4]
   b93de:	2800      	cmp	r0, #0
   b93e0:	d0ed      	beq.n	b93be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b93e2:	2006      	movs	r0, #6
   b93e4:	b003      	add	sp, #12
   b93e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b93e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b93e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b93ec:	460d      	mov	r5, r1
   b93ee:	4619      	mov	r1, r3
   b93f0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b93f4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b93f8:	4681      	mov	r9, r0
   b93fa:	4617      	mov	r7, r2
   b93fc:	4698      	mov	r8, r3
   b93fe:	f000 f845 	bl	b948c <_ZNKSt9type_infoeqERKS_>
   b9402:	b190      	cbz	r0, b942a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9404:	2d00      	cmp	r5, #0
   b9406:	6034      	str	r4, [r6, #0]
   b9408:	7137      	strb	r7, [r6, #4]
   b940a:	db09      	blt.n	b9420 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b940c:	1961      	adds	r1, r4, r5
   b940e:	458a      	cmp	sl, r1
   b9410:	bf0c      	ite	eq
   b9412:	2106      	moveq	r1, #6
   b9414:	2101      	movne	r1, #1
   b9416:	71b1      	strb	r1, [r6, #6]
   b9418:	2000      	movs	r0, #0
   b941a:	b001      	add	sp, #4
   b941c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9420:	3502      	adds	r5, #2
   b9422:	d1f9      	bne.n	b9418 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9424:	2301      	movs	r3, #1
   b9426:	71b3      	strb	r3, [r6, #6]
   b9428:	e7f6      	b.n	b9418 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b942a:	4554      	cmp	r4, sl
   b942c:	d106      	bne.n	b943c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b942e:	4659      	mov	r1, fp
   b9430:	4648      	mov	r0, r9
   b9432:	f000 f82b 	bl	b948c <_ZNKSt9type_infoeqERKS_>
   b9436:	b108      	cbz	r0, b943c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9438:	7177      	strb	r7, [r6, #5]
   b943a:	e7ed      	b.n	b9418 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b943c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9440:	6803      	ldr	r3, [r0, #0]
   b9442:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9446:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b944a:	69dc      	ldr	r4, [r3, #28]
   b944c:	463a      	mov	r2, r7
   b944e:	4643      	mov	r3, r8
   b9450:	4629      	mov	r1, r5
   b9452:	46a4      	mov	ip, r4
   b9454:	b001      	add	sp, #4
   b9456:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b945a:	4760      	bx	ip

000b945c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9460:	4607      	mov	r7, r0
   b9462:	460c      	mov	r4, r1
   b9464:	4615      	mov	r5, r2
   b9466:	461e      	mov	r6, r3
   b9468:	f7ff ff6d 	bl	b9346 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b946c:	b948      	cbnz	r0, b9482 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b946e:	68b8      	ldr	r0, [r7, #8]
   b9470:	6803      	ldr	r3, [r0, #0]
   b9472:	699f      	ldr	r7, [r3, #24]
   b9474:	462a      	mov	r2, r5
   b9476:	4633      	mov	r3, r6
   b9478:	4621      	mov	r1, r4
   b947a:	46bc      	mov	ip, r7
   b947c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9480:	4760      	bx	ip
   b9482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9486 <_ZNSt9type_infoD1Ev>:
   b9486:	4770      	bx	lr

000b9488 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9488:	2000      	movs	r0, #0
   b948a:	4770      	bx	lr

000b948c <_ZNKSt9type_infoeqERKS_>:
   b948c:	4281      	cmp	r1, r0
   b948e:	b508      	push	{r3, lr}
   b9490:	d00e      	beq.n	b94b0 <_ZNKSt9type_infoeqERKS_+0x24>
   b9492:	6840      	ldr	r0, [r0, #4]
   b9494:	7803      	ldrb	r3, [r0, #0]
   b9496:	2b2a      	cmp	r3, #42	; 0x2a
   b9498:	d00c      	beq.n	b94b4 <_ZNKSt9type_infoeqERKS_+0x28>
   b949a:	6849      	ldr	r1, [r1, #4]
   b949c:	780b      	ldrb	r3, [r1, #0]
   b949e:	2b2a      	cmp	r3, #42	; 0x2a
   b94a0:	bf08      	it	eq
   b94a2:	3101      	addeq	r1, #1
   b94a4:	f000 fd30 	bl	b9f08 <strcmp>
   b94a8:	fab0 f080 	clz	r0, r0
   b94ac:	0940      	lsrs	r0, r0, #5
   b94ae:	bd08      	pop	{r3, pc}
   b94b0:	2001      	movs	r0, #1
   b94b2:	e7fc      	b.n	b94ae <_ZNKSt9type_infoeqERKS_+0x22>
   b94b4:	2000      	movs	r0, #0
   b94b6:	e7fa      	b.n	b94ae <_ZNKSt9type_infoeqERKS_+0x22>

000b94b8 <__aeabi_drsub>:
   b94b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b94bc:	e002      	b.n	b94c4 <__adddf3>
   b94be:	bf00      	nop

000b94c0 <__aeabi_dsub>:
   b94c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b94c4 <__adddf3>:
   b94c4:	b530      	push	{r4, r5, lr}
   b94c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b94ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b94ce:	ea94 0f05 	teq	r4, r5
   b94d2:	bf08      	it	eq
   b94d4:	ea90 0f02 	teqeq	r0, r2
   b94d8:	bf1f      	itttt	ne
   b94da:	ea54 0c00 	orrsne.w	ip, r4, r0
   b94de:	ea55 0c02 	orrsne.w	ip, r5, r2
   b94e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b94e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b94ea:	f000 80e2 	beq.w	b96b2 <__adddf3+0x1ee>
   b94ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b94f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b94f6:	bfb8      	it	lt
   b94f8:	426d      	neglt	r5, r5
   b94fa:	dd0c      	ble.n	b9516 <__adddf3+0x52>
   b94fc:	442c      	add	r4, r5
   b94fe:	ea80 0202 	eor.w	r2, r0, r2
   b9502:	ea81 0303 	eor.w	r3, r1, r3
   b9506:	ea82 0000 	eor.w	r0, r2, r0
   b950a:	ea83 0101 	eor.w	r1, r3, r1
   b950e:	ea80 0202 	eor.w	r2, r0, r2
   b9512:	ea81 0303 	eor.w	r3, r1, r3
   b9516:	2d36      	cmp	r5, #54	; 0x36
   b9518:	bf88      	it	hi
   b951a:	bd30      	pophi	{r4, r5, pc}
   b951c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9520:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9524:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9528:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b952c:	d002      	beq.n	b9534 <__adddf3+0x70>
   b952e:	4240      	negs	r0, r0
   b9530:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9534:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9538:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b953c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9540:	d002      	beq.n	b9548 <__adddf3+0x84>
   b9542:	4252      	negs	r2, r2
   b9544:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9548:	ea94 0f05 	teq	r4, r5
   b954c:	f000 80a7 	beq.w	b969e <__adddf3+0x1da>
   b9550:	f1a4 0401 	sub.w	r4, r4, #1
   b9554:	f1d5 0e20 	rsbs	lr, r5, #32
   b9558:	db0d      	blt.n	b9576 <__adddf3+0xb2>
   b955a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b955e:	fa22 f205 	lsr.w	r2, r2, r5
   b9562:	1880      	adds	r0, r0, r2
   b9564:	f141 0100 	adc.w	r1, r1, #0
   b9568:	fa03 f20e 	lsl.w	r2, r3, lr
   b956c:	1880      	adds	r0, r0, r2
   b956e:	fa43 f305 	asr.w	r3, r3, r5
   b9572:	4159      	adcs	r1, r3
   b9574:	e00e      	b.n	b9594 <__adddf3+0xd0>
   b9576:	f1a5 0520 	sub.w	r5, r5, #32
   b957a:	f10e 0e20 	add.w	lr, lr, #32
   b957e:	2a01      	cmp	r2, #1
   b9580:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9584:	bf28      	it	cs
   b9586:	f04c 0c02 	orrcs.w	ip, ip, #2
   b958a:	fa43 f305 	asr.w	r3, r3, r5
   b958e:	18c0      	adds	r0, r0, r3
   b9590:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9598:	d507      	bpl.n	b95aa <__adddf3+0xe6>
   b959a:	f04f 0e00 	mov.w	lr, #0
   b959e:	f1dc 0c00 	rsbs	ip, ip, #0
   b95a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   b95a6:	eb6e 0101 	sbc.w	r1, lr, r1
   b95aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b95ae:	d31b      	bcc.n	b95e8 <__adddf3+0x124>
   b95b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b95b4:	d30c      	bcc.n	b95d0 <__adddf3+0x10c>
   b95b6:	0849      	lsrs	r1, r1, #1
   b95b8:	ea5f 0030 	movs.w	r0, r0, rrx
   b95bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b95c0:	f104 0401 	add.w	r4, r4, #1
   b95c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b95c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b95cc:	f080 809a 	bcs.w	b9704 <__adddf3+0x240>
   b95d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b95d4:	bf08      	it	eq
   b95d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b95da:	f150 0000 	adcs.w	r0, r0, #0
   b95de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b95e2:	ea41 0105 	orr.w	r1, r1, r5
   b95e6:	bd30      	pop	{r4, r5, pc}
   b95e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b95ec:	4140      	adcs	r0, r0
   b95ee:	eb41 0101 	adc.w	r1, r1, r1
   b95f2:	3c01      	subs	r4, #1
   b95f4:	bf28      	it	cs
   b95f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b95fa:	d2e9      	bcs.n	b95d0 <__adddf3+0x10c>
   b95fc:	f091 0f00 	teq	r1, #0
   b9600:	bf04      	itt	eq
   b9602:	4601      	moveq	r1, r0
   b9604:	2000      	moveq	r0, #0
   b9606:	fab1 f381 	clz	r3, r1
   b960a:	bf08      	it	eq
   b960c:	3320      	addeq	r3, #32
   b960e:	f1a3 030b 	sub.w	r3, r3, #11
   b9612:	f1b3 0220 	subs.w	r2, r3, #32
   b9616:	da0c      	bge.n	b9632 <__adddf3+0x16e>
   b9618:	320c      	adds	r2, #12
   b961a:	dd08      	ble.n	b962e <__adddf3+0x16a>
   b961c:	f102 0c14 	add.w	ip, r2, #20
   b9620:	f1c2 020c 	rsb	r2, r2, #12
   b9624:	fa01 f00c 	lsl.w	r0, r1, ip
   b9628:	fa21 f102 	lsr.w	r1, r1, r2
   b962c:	e00c      	b.n	b9648 <__adddf3+0x184>
   b962e:	f102 0214 	add.w	r2, r2, #20
   b9632:	bfd8      	it	le
   b9634:	f1c2 0c20 	rsble	ip, r2, #32
   b9638:	fa01 f102 	lsl.w	r1, r1, r2
   b963c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9640:	bfdc      	itt	le
   b9642:	ea41 010c 	orrle.w	r1, r1, ip
   b9646:	4090      	lslle	r0, r2
   b9648:	1ae4      	subs	r4, r4, r3
   b964a:	bfa2      	ittt	ge
   b964c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9650:	4329      	orrge	r1, r5
   b9652:	bd30      	popge	{r4, r5, pc}
   b9654:	ea6f 0404 	mvn.w	r4, r4
   b9658:	3c1f      	subs	r4, #31
   b965a:	da1c      	bge.n	b9696 <__adddf3+0x1d2>
   b965c:	340c      	adds	r4, #12
   b965e:	dc0e      	bgt.n	b967e <__adddf3+0x1ba>
   b9660:	f104 0414 	add.w	r4, r4, #20
   b9664:	f1c4 0220 	rsb	r2, r4, #32
   b9668:	fa20 f004 	lsr.w	r0, r0, r4
   b966c:	fa01 f302 	lsl.w	r3, r1, r2
   b9670:	ea40 0003 	orr.w	r0, r0, r3
   b9674:	fa21 f304 	lsr.w	r3, r1, r4
   b9678:	ea45 0103 	orr.w	r1, r5, r3
   b967c:	bd30      	pop	{r4, r5, pc}
   b967e:	f1c4 040c 	rsb	r4, r4, #12
   b9682:	f1c4 0220 	rsb	r2, r4, #32
   b9686:	fa20 f002 	lsr.w	r0, r0, r2
   b968a:	fa01 f304 	lsl.w	r3, r1, r4
   b968e:	ea40 0003 	orr.w	r0, r0, r3
   b9692:	4629      	mov	r1, r5
   b9694:	bd30      	pop	{r4, r5, pc}
   b9696:	fa21 f004 	lsr.w	r0, r1, r4
   b969a:	4629      	mov	r1, r5
   b969c:	bd30      	pop	{r4, r5, pc}
   b969e:	f094 0f00 	teq	r4, #0
   b96a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b96a6:	bf06      	itte	eq
   b96a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b96ac:	3401      	addeq	r4, #1
   b96ae:	3d01      	subne	r5, #1
   b96b0:	e74e      	b.n	b9550 <__adddf3+0x8c>
   b96b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b96b6:	bf18      	it	ne
   b96b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b96bc:	d029      	beq.n	b9712 <__adddf3+0x24e>
   b96be:	ea94 0f05 	teq	r4, r5
   b96c2:	bf08      	it	eq
   b96c4:	ea90 0f02 	teqeq	r0, r2
   b96c8:	d005      	beq.n	b96d6 <__adddf3+0x212>
   b96ca:	ea54 0c00 	orrs.w	ip, r4, r0
   b96ce:	bf04      	itt	eq
   b96d0:	4619      	moveq	r1, r3
   b96d2:	4610      	moveq	r0, r2
   b96d4:	bd30      	pop	{r4, r5, pc}
   b96d6:	ea91 0f03 	teq	r1, r3
   b96da:	bf1e      	ittt	ne
   b96dc:	2100      	movne	r1, #0
   b96de:	2000      	movne	r0, #0
   b96e0:	bd30      	popne	{r4, r5, pc}
   b96e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b96e6:	d105      	bne.n	b96f4 <__adddf3+0x230>
   b96e8:	0040      	lsls	r0, r0, #1
   b96ea:	4149      	adcs	r1, r1
   b96ec:	bf28      	it	cs
   b96ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b96f2:	bd30      	pop	{r4, r5, pc}
   b96f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b96f8:	bf3c      	itt	cc
   b96fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b96fe:	bd30      	popcc	{r4, r5, pc}
   b9700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9704:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b970c:	f04f 0000 	mov.w	r0, #0
   b9710:	bd30      	pop	{r4, r5, pc}
   b9712:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9716:	bf1a      	itte	ne
   b9718:	4619      	movne	r1, r3
   b971a:	4610      	movne	r0, r2
   b971c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9720:	bf1c      	itt	ne
   b9722:	460b      	movne	r3, r1
   b9724:	4602      	movne	r2, r0
   b9726:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b972a:	bf06      	itte	eq
   b972c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9730:	ea91 0f03 	teqeq	r1, r3
   b9734:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9738:	bd30      	pop	{r4, r5, pc}
   b973a:	bf00      	nop

000b973c <__aeabi_ui2d>:
   b973c:	f090 0f00 	teq	r0, #0
   b9740:	bf04      	itt	eq
   b9742:	2100      	moveq	r1, #0
   b9744:	4770      	bxeq	lr
   b9746:	b530      	push	{r4, r5, lr}
   b9748:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b974c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9750:	f04f 0500 	mov.w	r5, #0
   b9754:	f04f 0100 	mov.w	r1, #0
   b9758:	e750      	b.n	b95fc <__adddf3+0x138>
   b975a:	bf00      	nop

000b975c <__aeabi_i2d>:
   b975c:	f090 0f00 	teq	r0, #0
   b9760:	bf04      	itt	eq
   b9762:	2100      	moveq	r1, #0
   b9764:	4770      	bxeq	lr
   b9766:	b530      	push	{r4, r5, lr}
   b9768:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b976c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9770:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9774:	bf48      	it	mi
   b9776:	4240      	negmi	r0, r0
   b9778:	f04f 0100 	mov.w	r1, #0
   b977c:	e73e      	b.n	b95fc <__adddf3+0x138>
   b977e:	bf00      	nop

000b9780 <__aeabi_f2d>:
   b9780:	0042      	lsls	r2, r0, #1
   b9782:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9786:	ea4f 0131 	mov.w	r1, r1, rrx
   b978a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b978e:	bf1f      	itttt	ne
   b9790:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9794:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9798:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b979c:	4770      	bxne	lr
   b979e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b97a2:	bf08      	it	eq
   b97a4:	4770      	bxeq	lr
   b97a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b97aa:	bf04      	itt	eq
   b97ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b97b0:	4770      	bxeq	lr
   b97b2:	b530      	push	{r4, r5, lr}
   b97b4:	f44f 7460 	mov.w	r4, #896	; 0x380
   b97b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b97bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b97c0:	e71c      	b.n	b95fc <__adddf3+0x138>
   b97c2:	bf00      	nop

000b97c4 <__aeabi_ul2d>:
   b97c4:	ea50 0201 	orrs.w	r2, r0, r1
   b97c8:	bf08      	it	eq
   b97ca:	4770      	bxeq	lr
   b97cc:	b530      	push	{r4, r5, lr}
   b97ce:	f04f 0500 	mov.w	r5, #0
   b97d2:	e00a      	b.n	b97ea <__aeabi_l2d+0x16>

000b97d4 <__aeabi_l2d>:
   b97d4:	ea50 0201 	orrs.w	r2, r0, r1
   b97d8:	bf08      	it	eq
   b97da:	4770      	bxeq	lr
   b97dc:	b530      	push	{r4, r5, lr}
   b97de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b97e2:	d502      	bpl.n	b97ea <__aeabi_l2d+0x16>
   b97e4:	4240      	negs	r0, r0
   b97e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b97ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b97ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b97f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b97f6:	f43f aed8 	beq.w	b95aa <__adddf3+0xe6>
   b97fa:	f04f 0203 	mov.w	r2, #3
   b97fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9802:	bf18      	it	ne
   b9804:	3203      	addne	r2, #3
   b9806:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b980a:	bf18      	it	ne
   b980c:	3203      	addne	r2, #3
   b980e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9812:	f1c2 0320 	rsb	r3, r2, #32
   b9816:	fa00 fc03 	lsl.w	ip, r0, r3
   b981a:	fa20 f002 	lsr.w	r0, r0, r2
   b981e:	fa01 fe03 	lsl.w	lr, r1, r3
   b9822:	ea40 000e 	orr.w	r0, r0, lr
   b9826:	fa21 f102 	lsr.w	r1, r1, r2
   b982a:	4414      	add	r4, r2
   b982c:	e6bd      	b.n	b95aa <__adddf3+0xe6>
   b982e:	bf00      	nop

000b9830 <__aeabi_dmul>:
   b9830:	b570      	push	{r4, r5, r6, lr}
   b9832:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b983a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b983e:	bf1d      	ittte	ne
   b9840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9844:	ea94 0f0c 	teqne	r4, ip
   b9848:	ea95 0f0c 	teqne	r5, ip
   b984c:	f000 f8de 	bleq	b9a0c <__aeabi_dmul+0x1dc>
   b9850:	442c      	add	r4, r5
   b9852:	ea81 0603 	eor.w	r6, r1, r3
   b9856:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b985a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b985e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9862:	bf18      	it	ne
   b9864:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9868:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b986c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9870:	d038      	beq.n	b98e4 <__aeabi_dmul+0xb4>
   b9872:	fba0 ce02 	umull	ip, lr, r0, r2
   b9876:	f04f 0500 	mov.w	r5, #0
   b987a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b987e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9882:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9886:	f04f 0600 	mov.w	r6, #0
   b988a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b988e:	f09c 0f00 	teq	ip, #0
   b9892:	bf18      	it	ne
   b9894:	f04e 0e01 	orrne.w	lr, lr, #1
   b9898:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b989c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b98a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b98a4:	d204      	bcs.n	b98b0 <__aeabi_dmul+0x80>
   b98a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b98aa:	416d      	adcs	r5, r5
   b98ac:	eb46 0606 	adc.w	r6, r6, r6
   b98b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b98b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b98b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b98bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b98c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b98c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b98c8:	bf88      	it	hi
   b98ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b98ce:	d81e      	bhi.n	b990e <__aeabi_dmul+0xde>
   b98d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b98d4:	bf08      	it	eq
   b98d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b98da:	f150 0000 	adcs.w	r0, r0, #0
   b98de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b98e2:	bd70      	pop	{r4, r5, r6, pc}
   b98e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b98e8:	ea46 0101 	orr.w	r1, r6, r1
   b98ec:	ea40 0002 	orr.w	r0, r0, r2
   b98f0:	ea81 0103 	eor.w	r1, r1, r3
   b98f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b98f8:	bfc2      	ittt	gt
   b98fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b98fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9902:	bd70      	popgt	{r4, r5, r6, pc}
   b9904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9908:	f04f 0e00 	mov.w	lr, #0
   b990c:	3c01      	subs	r4, #1
   b990e:	f300 80ab 	bgt.w	b9a68 <__aeabi_dmul+0x238>
   b9912:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b9916:	bfde      	ittt	le
   b9918:	2000      	movle	r0, #0
   b991a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b991e:	bd70      	pople	{r4, r5, r6, pc}
   b9920:	f1c4 0400 	rsb	r4, r4, #0
   b9924:	3c20      	subs	r4, #32
   b9926:	da35      	bge.n	b9994 <__aeabi_dmul+0x164>
   b9928:	340c      	adds	r4, #12
   b992a:	dc1b      	bgt.n	b9964 <__aeabi_dmul+0x134>
   b992c:	f104 0414 	add.w	r4, r4, #20
   b9930:	f1c4 0520 	rsb	r5, r4, #32
   b9934:	fa00 f305 	lsl.w	r3, r0, r5
   b9938:	fa20 f004 	lsr.w	r0, r0, r4
   b993c:	fa01 f205 	lsl.w	r2, r1, r5
   b9940:	ea40 0002 	orr.w	r0, r0, r2
   b9944:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9948:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b994c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9950:	fa21 f604 	lsr.w	r6, r1, r4
   b9954:	eb42 0106 	adc.w	r1, r2, r6
   b9958:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b995c:	bf08      	it	eq
   b995e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9962:	bd70      	pop	{r4, r5, r6, pc}
   b9964:	f1c4 040c 	rsb	r4, r4, #12
   b9968:	f1c4 0520 	rsb	r5, r4, #32
   b996c:	fa00 f304 	lsl.w	r3, r0, r4
   b9970:	fa20 f005 	lsr.w	r0, r0, r5
   b9974:	fa01 f204 	lsl.w	r2, r1, r4
   b9978:	ea40 0002 	orr.w	r0, r0, r2
   b997c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9980:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9984:	f141 0100 	adc.w	r1, r1, #0
   b9988:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b998c:	bf08      	it	eq
   b998e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9992:	bd70      	pop	{r4, r5, r6, pc}
   b9994:	f1c4 0520 	rsb	r5, r4, #32
   b9998:	fa00 f205 	lsl.w	r2, r0, r5
   b999c:	ea4e 0e02 	orr.w	lr, lr, r2
   b99a0:	fa20 f304 	lsr.w	r3, r0, r4
   b99a4:	fa01 f205 	lsl.w	r2, r1, r5
   b99a8:	ea43 0302 	orr.w	r3, r3, r2
   b99ac:	fa21 f004 	lsr.w	r0, r1, r4
   b99b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b99b4:	fa21 f204 	lsr.w	r2, r1, r4
   b99b8:	ea20 0002 	bic.w	r0, r0, r2
   b99bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b99c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b99c4:	bf08      	it	eq
   b99c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b99ca:	bd70      	pop	{r4, r5, r6, pc}
   b99cc:	f094 0f00 	teq	r4, #0
   b99d0:	d10f      	bne.n	b99f2 <__aeabi_dmul+0x1c2>
   b99d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b99d6:	0040      	lsls	r0, r0, #1
   b99d8:	eb41 0101 	adc.w	r1, r1, r1
   b99dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b99e0:	bf08      	it	eq
   b99e2:	3c01      	subeq	r4, #1
   b99e4:	d0f7      	beq.n	b99d6 <__aeabi_dmul+0x1a6>
   b99e6:	ea41 0106 	orr.w	r1, r1, r6
   b99ea:	f095 0f00 	teq	r5, #0
   b99ee:	bf18      	it	ne
   b99f0:	4770      	bxne	lr
   b99f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b99f6:	0052      	lsls	r2, r2, #1
   b99f8:	eb43 0303 	adc.w	r3, r3, r3
   b99fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9a00:	bf08      	it	eq
   b9a02:	3d01      	subeq	r5, #1
   b9a04:	d0f7      	beq.n	b99f6 <__aeabi_dmul+0x1c6>
   b9a06:	ea43 0306 	orr.w	r3, r3, r6
   b9a0a:	4770      	bx	lr
   b9a0c:	ea94 0f0c 	teq	r4, ip
   b9a10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9a14:	bf18      	it	ne
   b9a16:	ea95 0f0c 	teqne	r5, ip
   b9a1a:	d00c      	beq.n	b9a36 <__aeabi_dmul+0x206>
   b9a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9a20:	bf18      	it	ne
   b9a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9a26:	d1d1      	bne.n	b99cc <__aeabi_dmul+0x19c>
   b9a28:	ea81 0103 	eor.w	r1, r1, r3
   b9a2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9a30:	f04f 0000 	mov.w	r0, #0
   b9a34:	bd70      	pop	{r4, r5, r6, pc}
   b9a36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9a3a:	bf06      	itte	eq
   b9a3c:	4610      	moveq	r0, r2
   b9a3e:	4619      	moveq	r1, r3
   b9a40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9a44:	d019      	beq.n	b9a7a <__aeabi_dmul+0x24a>
   b9a46:	ea94 0f0c 	teq	r4, ip
   b9a4a:	d102      	bne.n	b9a52 <__aeabi_dmul+0x222>
   b9a4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9a50:	d113      	bne.n	b9a7a <__aeabi_dmul+0x24a>
   b9a52:	ea95 0f0c 	teq	r5, ip
   b9a56:	d105      	bne.n	b9a64 <__aeabi_dmul+0x234>
   b9a58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9a5c:	bf1c      	itt	ne
   b9a5e:	4610      	movne	r0, r2
   b9a60:	4619      	movne	r1, r3
   b9a62:	d10a      	bne.n	b9a7a <__aeabi_dmul+0x24a>
   b9a64:	ea81 0103 	eor.w	r1, r1, r3
   b9a68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9a6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9a70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9a74:	f04f 0000 	mov.w	r0, #0
   b9a78:	bd70      	pop	{r4, r5, r6, pc}
   b9a7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9a7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9a82:	bd70      	pop	{r4, r5, r6, pc}

000b9a84 <__aeabi_ddiv>:
   b9a84:	b570      	push	{r4, r5, r6, lr}
   b9a86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9a8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9a8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9a92:	bf1d      	ittte	ne
   b9a94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9a98:	ea94 0f0c 	teqne	r4, ip
   b9a9c:	ea95 0f0c 	teqne	r5, ip
   b9aa0:	f000 f8a7 	bleq	b9bf2 <__aeabi_ddiv+0x16e>
   b9aa4:	eba4 0405 	sub.w	r4, r4, r5
   b9aa8:	ea81 0e03 	eor.w	lr, r1, r3
   b9aac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9ab0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9ab4:	f000 8088 	beq.w	b9bc8 <__aeabi_ddiv+0x144>
   b9ab8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9abc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9ac0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9ac4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9ac8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9acc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9ad0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9ad4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9ad8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9adc:	429d      	cmp	r5, r3
   b9ade:	bf08      	it	eq
   b9ae0:	4296      	cmpeq	r6, r2
   b9ae2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9ae6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9aea:	d202      	bcs.n	b9af2 <__aeabi_ddiv+0x6e>
   b9aec:	085b      	lsrs	r3, r3, #1
   b9aee:	ea4f 0232 	mov.w	r2, r2, rrx
   b9af2:	1ab6      	subs	r6, r6, r2
   b9af4:	eb65 0503 	sbc.w	r5, r5, r3
   b9af8:	085b      	lsrs	r3, r3, #1
   b9afa:	ea4f 0232 	mov.w	r2, r2, rrx
   b9afe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b9b02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9b06:	ebb6 0e02 	subs.w	lr, r6, r2
   b9b0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9b0e:	bf22      	ittt	cs
   b9b10:	1ab6      	subcs	r6, r6, r2
   b9b12:	4675      	movcs	r5, lr
   b9b14:	ea40 000c 	orrcs.w	r0, r0, ip
   b9b18:	085b      	lsrs	r3, r3, #1
   b9b1a:	ea4f 0232 	mov.w	r2, r2, rrx
   b9b1e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9b22:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9b26:	bf22      	ittt	cs
   b9b28:	1ab6      	subcs	r6, r6, r2
   b9b2a:	4675      	movcs	r5, lr
   b9b2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9b30:	085b      	lsrs	r3, r3, #1
   b9b32:	ea4f 0232 	mov.w	r2, r2, rrx
   b9b36:	ebb6 0e02 	subs.w	lr, r6, r2
   b9b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9b3e:	bf22      	ittt	cs
   b9b40:	1ab6      	subcs	r6, r6, r2
   b9b42:	4675      	movcs	r5, lr
   b9b44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9b48:	085b      	lsrs	r3, r3, #1
   b9b4a:	ea4f 0232 	mov.w	r2, r2, rrx
   b9b4e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9b52:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9b56:	bf22      	ittt	cs
   b9b58:	1ab6      	subcs	r6, r6, r2
   b9b5a:	4675      	movcs	r5, lr
   b9b5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9b60:	ea55 0e06 	orrs.w	lr, r5, r6
   b9b64:	d018      	beq.n	b9b98 <__aeabi_ddiv+0x114>
   b9b66:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9b6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b9b6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9b72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9b76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9b7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9b7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9b82:	d1c0      	bne.n	b9b06 <__aeabi_ddiv+0x82>
   b9b84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9b88:	d10b      	bne.n	b9ba2 <__aeabi_ddiv+0x11e>
   b9b8a:	ea41 0100 	orr.w	r1, r1, r0
   b9b8e:	f04f 0000 	mov.w	r0, #0
   b9b92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9b96:	e7b6      	b.n	b9b06 <__aeabi_ddiv+0x82>
   b9b98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9b9c:	bf04      	itt	eq
   b9b9e:	4301      	orreq	r1, r0
   b9ba0:	2000      	moveq	r0, #0
   b9ba2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9ba6:	bf88      	it	hi
   b9ba8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9bac:	f63f aeaf 	bhi.w	b990e <__aeabi_dmul+0xde>
   b9bb0:	ebb5 0c03 	subs.w	ip, r5, r3
   b9bb4:	bf04      	itt	eq
   b9bb6:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9bba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9bbe:	f150 0000 	adcs.w	r0, r0, #0
   b9bc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9bc6:	bd70      	pop	{r4, r5, r6, pc}
   b9bc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9bcc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9bd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9bd4:	bfc2      	ittt	gt
   b9bd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9bda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9bde:	bd70      	popgt	{r4, r5, r6, pc}
   b9be0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9be4:	f04f 0e00 	mov.w	lr, #0
   b9be8:	3c01      	subs	r4, #1
   b9bea:	e690      	b.n	b990e <__aeabi_dmul+0xde>
   b9bec:	ea45 0e06 	orr.w	lr, r5, r6
   b9bf0:	e68d      	b.n	b990e <__aeabi_dmul+0xde>
   b9bf2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9bf6:	ea94 0f0c 	teq	r4, ip
   b9bfa:	bf08      	it	eq
   b9bfc:	ea95 0f0c 	teqeq	r5, ip
   b9c00:	f43f af3b 	beq.w	b9a7a <__aeabi_dmul+0x24a>
   b9c04:	ea94 0f0c 	teq	r4, ip
   b9c08:	d10a      	bne.n	b9c20 <__aeabi_ddiv+0x19c>
   b9c0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9c0e:	f47f af34 	bne.w	b9a7a <__aeabi_dmul+0x24a>
   b9c12:	ea95 0f0c 	teq	r5, ip
   b9c16:	f47f af25 	bne.w	b9a64 <__aeabi_dmul+0x234>
   b9c1a:	4610      	mov	r0, r2
   b9c1c:	4619      	mov	r1, r3
   b9c1e:	e72c      	b.n	b9a7a <__aeabi_dmul+0x24a>
   b9c20:	ea95 0f0c 	teq	r5, ip
   b9c24:	d106      	bne.n	b9c34 <__aeabi_ddiv+0x1b0>
   b9c26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9c2a:	f43f aefd 	beq.w	b9a28 <__aeabi_dmul+0x1f8>
   b9c2e:	4610      	mov	r0, r2
   b9c30:	4619      	mov	r1, r3
   b9c32:	e722      	b.n	b9a7a <__aeabi_dmul+0x24a>
   b9c34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9c38:	bf18      	it	ne
   b9c3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9c3e:	f47f aec5 	bne.w	b99cc <__aeabi_dmul+0x19c>
   b9c42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b9c46:	f47f af0d 	bne.w	b9a64 <__aeabi_dmul+0x234>
   b9c4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b9c4e:	f47f aeeb 	bne.w	b9a28 <__aeabi_dmul+0x1f8>
   b9c52:	e712      	b.n	b9a7a <__aeabi_dmul+0x24a>

000b9c54 <__gedf2>:
   b9c54:	f04f 3cff 	mov.w	ip, #4294967295
   b9c58:	e006      	b.n	b9c68 <__cmpdf2+0x4>
   b9c5a:	bf00      	nop

000b9c5c <__ledf2>:
   b9c5c:	f04f 0c01 	mov.w	ip, #1
   b9c60:	e002      	b.n	b9c68 <__cmpdf2+0x4>
   b9c62:	bf00      	nop

000b9c64 <__cmpdf2>:
   b9c64:	f04f 0c01 	mov.w	ip, #1
   b9c68:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9c6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9c74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9c78:	bf18      	it	ne
   b9c7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9c7e:	d01b      	beq.n	b9cb8 <__cmpdf2+0x54>
   b9c80:	b001      	add	sp, #4
   b9c82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9c86:	bf0c      	ite	eq
   b9c88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9c8c:	ea91 0f03 	teqne	r1, r3
   b9c90:	bf02      	ittt	eq
   b9c92:	ea90 0f02 	teqeq	r0, r2
   b9c96:	2000      	moveq	r0, #0
   b9c98:	4770      	bxeq	lr
   b9c9a:	f110 0f00 	cmn.w	r0, #0
   b9c9e:	ea91 0f03 	teq	r1, r3
   b9ca2:	bf58      	it	pl
   b9ca4:	4299      	cmppl	r1, r3
   b9ca6:	bf08      	it	eq
   b9ca8:	4290      	cmpeq	r0, r2
   b9caa:	bf2c      	ite	cs
   b9cac:	17d8      	asrcs	r0, r3, #31
   b9cae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9cb2:	f040 0001 	orr.w	r0, r0, #1
   b9cb6:	4770      	bx	lr
   b9cb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9cbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9cc0:	d102      	bne.n	b9cc8 <__cmpdf2+0x64>
   b9cc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9cc6:	d107      	bne.n	b9cd8 <__cmpdf2+0x74>
   b9cc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9ccc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9cd0:	d1d6      	bne.n	b9c80 <__cmpdf2+0x1c>
   b9cd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9cd6:	d0d3      	beq.n	b9c80 <__cmpdf2+0x1c>
   b9cd8:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9cdc:	4770      	bx	lr
   b9cde:	bf00      	nop

000b9ce0 <__aeabi_cdrcmple>:
   b9ce0:	4684      	mov	ip, r0
   b9ce2:	4610      	mov	r0, r2
   b9ce4:	4662      	mov	r2, ip
   b9ce6:	468c      	mov	ip, r1
   b9ce8:	4619      	mov	r1, r3
   b9cea:	4663      	mov	r3, ip
   b9cec:	e000      	b.n	b9cf0 <__aeabi_cdcmpeq>
   b9cee:	bf00      	nop

000b9cf0 <__aeabi_cdcmpeq>:
   b9cf0:	b501      	push	{r0, lr}
   b9cf2:	f7ff ffb7 	bl	b9c64 <__cmpdf2>
   b9cf6:	2800      	cmp	r0, #0
   b9cf8:	bf48      	it	mi
   b9cfa:	f110 0f00 	cmnmi.w	r0, #0
   b9cfe:	bd01      	pop	{r0, pc}

000b9d00 <__aeabi_dcmpeq>:
   b9d00:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9d04:	f7ff fff4 	bl	b9cf0 <__aeabi_cdcmpeq>
   b9d08:	bf0c      	ite	eq
   b9d0a:	2001      	moveq	r0, #1
   b9d0c:	2000      	movne	r0, #0
   b9d0e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9d12:	bf00      	nop

000b9d14 <__aeabi_dcmplt>:
   b9d14:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9d18:	f7ff ffea 	bl	b9cf0 <__aeabi_cdcmpeq>
   b9d1c:	bf34      	ite	cc
   b9d1e:	2001      	movcc	r0, #1
   b9d20:	2000      	movcs	r0, #0
   b9d22:	f85d fb08 	ldr.w	pc, [sp], #8
   b9d26:	bf00      	nop

000b9d28 <__aeabi_dcmple>:
   b9d28:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9d2c:	f7ff ffe0 	bl	b9cf0 <__aeabi_cdcmpeq>
   b9d30:	bf94      	ite	ls
   b9d32:	2001      	movls	r0, #1
   b9d34:	2000      	movhi	r0, #0
   b9d36:	f85d fb08 	ldr.w	pc, [sp], #8
   b9d3a:	bf00      	nop

000b9d3c <__aeabi_dcmpge>:
   b9d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9d40:	f7ff ffce 	bl	b9ce0 <__aeabi_cdrcmple>
   b9d44:	bf94      	ite	ls
   b9d46:	2001      	movls	r0, #1
   b9d48:	2000      	movhi	r0, #0
   b9d4a:	f85d fb08 	ldr.w	pc, [sp], #8
   b9d4e:	bf00      	nop

000b9d50 <__aeabi_dcmpgt>:
   b9d50:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9d54:	f7ff ffc4 	bl	b9ce0 <__aeabi_cdrcmple>
   b9d58:	bf34      	ite	cc
   b9d5a:	2001      	movcc	r0, #1
   b9d5c:	2000      	movcs	r0, #0
   b9d5e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9d62:	bf00      	nop

000b9d64 <__aeabi_dcmpun>:
   b9d64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9d68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9d6c:	d102      	bne.n	b9d74 <__aeabi_dcmpun+0x10>
   b9d6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9d72:	d10a      	bne.n	b9d8a <__aeabi_dcmpun+0x26>
   b9d74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9d78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9d7c:	d102      	bne.n	b9d84 <__aeabi_dcmpun+0x20>
   b9d7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9d82:	d102      	bne.n	b9d8a <__aeabi_dcmpun+0x26>
   b9d84:	f04f 0000 	mov.w	r0, #0
   b9d88:	4770      	bx	lr
   b9d8a:	f04f 0001 	mov.w	r0, #1
   b9d8e:	4770      	bx	lr

000b9d90 <__aeabi_d2iz>:
   b9d90:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9d94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9d98:	d215      	bcs.n	b9dc6 <__aeabi_d2iz+0x36>
   b9d9a:	d511      	bpl.n	b9dc0 <__aeabi_d2iz+0x30>
   b9d9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9da0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9da4:	d912      	bls.n	b9dcc <__aeabi_d2iz+0x3c>
   b9da6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9dae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9db2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9db6:	fa23 f002 	lsr.w	r0, r3, r2
   b9dba:	bf18      	it	ne
   b9dbc:	4240      	negne	r0, r0
   b9dbe:	4770      	bx	lr
   b9dc0:	f04f 0000 	mov.w	r0, #0
   b9dc4:	4770      	bx	lr
   b9dc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9dca:	d105      	bne.n	b9dd8 <__aeabi_d2iz+0x48>
   b9dcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b9dd0:	bf08      	it	eq
   b9dd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b9dd6:	4770      	bx	lr
   b9dd8:	f04f 0000 	mov.w	r0, #0
   b9ddc:	4770      	bx	lr
   b9dde:	bf00      	nop

000b9de0 <__aeabi_d2uiz>:
   b9de0:	004a      	lsls	r2, r1, #1
   b9de2:	d211      	bcs.n	b9e08 <__aeabi_d2uiz+0x28>
   b9de4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9de8:	d211      	bcs.n	b9e0e <__aeabi_d2uiz+0x2e>
   b9dea:	d50d      	bpl.n	b9e08 <__aeabi_d2uiz+0x28>
   b9dec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9df0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9df4:	d40e      	bmi.n	b9e14 <__aeabi_d2uiz+0x34>
   b9df6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9dfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9dfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9e02:	fa23 f002 	lsr.w	r0, r3, r2
   b9e06:	4770      	bx	lr
   b9e08:	f04f 0000 	mov.w	r0, #0
   b9e0c:	4770      	bx	lr
   b9e0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9e12:	d102      	bne.n	b9e1a <__aeabi_d2uiz+0x3a>
   b9e14:	f04f 30ff 	mov.w	r0, #4294967295
   b9e18:	4770      	bx	lr
   b9e1a:	f04f 0000 	mov.w	r0, #0
   b9e1e:	4770      	bx	lr

000b9e20 <atexit>:
   b9e20:	2300      	movs	r3, #0
   b9e22:	4601      	mov	r1, r0
   b9e24:	461a      	mov	r2, r3
   b9e26:	4618      	mov	r0, r3
   b9e28:	f000 b894 	b.w	b9f54 <__register_exitproc>

000b9e2c <memcmp>:
   b9e2c:	b510      	push	{r4, lr}
   b9e2e:	3901      	subs	r1, #1
   b9e30:	4402      	add	r2, r0
   b9e32:	4290      	cmp	r0, r2
   b9e34:	d101      	bne.n	b9e3a <memcmp+0xe>
   b9e36:	2000      	movs	r0, #0
   b9e38:	e005      	b.n	b9e46 <memcmp+0x1a>
   b9e3a:	7803      	ldrb	r3, [r0, #0]
   b9e3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9e40:	42a3      	cmp	r3, r4
   b9e42:	d001      	beq.n	b9e48 <memcmp+0x1c>
   b9e44:	1b18      	subs	r0, r3, r4
   b9e46:	bd10      	pop	{r4, pc}
   b9e48:	3001      	adds	r0, #1
   b9e4a:	e7f2      	b.n	b9e32 <memcmp+0x6>

000b9e4c <memcpy>:
   b9e4c:	440a      	add	r2, r1
   b9e4e:	4291      	cmp	r1, r2
   b9e50:	f100 33ff 	add.w	r3, r0, #4294967295
   b9e54:	d100      	bne.n	b9e58 <memcpy+0xc>
   b9e56:	4770      	bx	lr
   b9e58:	b510      	push	{r4, lr}
   b9e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9e62:	4291      	cmp	r1, r2
   b9e64:	d1f9      	bne.n	b9e5a <memcpy+0xe>
   b9e66:	bd10      	pop	{r4, pc}

000b9e68 <memmove>:
   b9e68:	4288      	cmp	r0, r1
   b9e6a:	b510      	push	{r4, lr}
   b9e6c:	eb01 0402 	add.w	r4, r1, r2
   b9e70:	d902      	bls.n	b9e78 <memmove+0x10>
   b9e72:	4284      	cmp	r4, r0
   b9e74:	4623      	mov	r3, r4
   b9e76:	d807      	bhi.n	b9e88 <memmove+0x20>
   b9e78:	1e43      	subs	r3, r0, #1
   b9e7a:	42a1      	cmp	r1, r4
   b9e7c:	d008      	beq.n	b9e90 <memmove+0x28>
   b9e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9e82:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9e86:	e7f8      	b.n	b9e7a <memmove+0x12>
   b9e88:	4402      	add	r2, r0
   b9e8a:	4601      	mov	r1, r0
   b9e8c:	428a      	cmp	r2, r1
   b9e8e:	d100      	bne.n	b9e92 <memmove+0x2a>
   b9e90:	bd10      	pop	{r4, pc}
   b9e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9e9a:	e7f7      	b.n	b9e8c <memmove+0x24>

000b9e9c <memset>:
   b9e9c:	4402      	add	r2, r0
   b9e9e:	4603      	mov	r3, r0
   b9ea0:	4293      	cmp	r3, r2
   b9ea2:	d100      	bne.n	b9ea6 <memset+0xa>
   b9ea4:	4770      	bx	lr
   b9ea6:	f803 1b01 	strb.w	r1, [r3], #1
   b9eaa:	e7f9      	b.n	b9ea0 <memset+0x4>

000b9eac <srand>:
   b9eac:	b538      	push	{r3, r4, r5, lr}
   b9eae:	4b10      	ldr	r3, [pc, #64]	; (b9ef0 <srand+0x44>)
   b9eb0:	681d      	ldr	r5, [r3, #0]
   b9eb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9eb4:	4604      	mov	r4, r0
   b9eb6:	b9b3      	cbnz	r3, b9ee6 <srand+0x3a>
   b9eb8:	2018      	movs	r0, #24
   b9eba:	f7fb fbe7 	bl	b568c <malloc>
   b9ebe:	4602      	mov	r2, r0
   b9ec0:	63a8      	str	r0, [r5, #56]	; 0x38
   b9ec2:	b920      	cbnz	r0, b9ece <srand+0x22>
   b9ec4:	4b0b      	ldr	r3, [pc, #44]	; (b9ef4 <srand+0x48>)
   b9ec6:	480c      	ldr	r0, [pc, #48]	; (b9ef8 <srand+0x4c>)
   b9ec8:	2142      	movs	r1, #66	; 0x42
   b9eca:	f7fb fbff 	bl	b56cc <__assert_func>
   b9ece:	490b      	ldr	r1, [pc, #44]	; (b9efc <srand+0x50>)
   b9ed0:	4b0b      	ldr	r3, [pc, #44]	; (b9f00 <srand+0x54>)
   b9ed2:	e9c0 1300 	strd	r1, r3, [r0]
   b9ed6:	4b0b      	ldr	r3, [pc, #44]	; (b9f04 <srand+0x58>)
   b9ed8:	6083      	str	r3, [r0, #8]
   b9eda:	230b      	movs	r3, #11
   b9edc:	8183      	strh	r3, [r0, #12]
   b9ede:	2100      	movs	r1, #0
   b9ee0:	2001      	movs	r0, #1
   b9ee2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9ee6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9ee8:	2200      	movs	r2, #0
   b9eea:	611c      	str	r4, [r3, #16]
   b9eec:	615a      	str	r2, [r3, #20]
   b9eee:	bd38      	pop	{r3, r4, r5, pc}
   b9ef0:	2003e150 	.word	0x2003e150
   b9ef4:	000bac61 	.word	0x000bac61
   b9ef8:	000bac78 	.word	0x000bac78
   b9efc:	abcd330e 	.word	0xabcd330e
   b9f00:	e66d1234 	.word	0xe66d1234
   b9f04:	0005deec 	.word	0x0005deec

000b9f08 <strcmp>:
   b9f08:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9f10:	2a01      	cmp	r2, #1
   b9f12:	bf28      	it	cs
   b9f14:	429a      	cmpcs	r2, r3
   b9f16:	d0f7      	beq.n	b9f08 <strcmp>
   b9f18:	1ad0      	subs	r0, r2, r3
   b9f1a:	4770      	bx	lr

000b9f1c <strcpy>:
   b9f1c:	4603      	mov	r3, r0
   b9f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9f22:	f803 2b01 	strb.w	r2, [r3], #1
   b9f26:	2a00      	cmp	r2, #0
   b9f28:	d1f9      	bne.n	b9f1e <strcpy+0x2>
   b9f2a:	4770      	bx	lr

000b9f2c <strlen>:
   b9f2c:	4603      	mov	r3, r0
   b9f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9f32:	2a00      	cmp	r2, #0
   b9f34:	d1fb      	bne.n	b9f2e <strlen+0x2>
   b9f36:	1a18      	subs	r0, r3, r0
   b9f38:	3801      	subs	r0, #1
   b9f3a:	4770      	bx	lr

000b9f3c <strnlen>:
   b9f3c:	b510      	push	{r4, lr}
   b9f3e:	4602      	mov	r2, r0
   b9f40:	4401      	add	r1, r0
   b9f42:	428a      	cmp	r2, r1
   b9f44:	4613      	mov	r3, r2
   b9f46:	d003      	beq.n	b9f50 <strnlen+0x14>
   b9f48:	781c      	ldrb	r4, [r3, #0]
   b9f4a:	3201      	adds	r2, #1
   b9f4c:	2c00      	cmp	r4, #0
   b9f4e:	d1f8      	bne.n	b9f42 <strnlen+0x6>
   b9f50:	1a18      	subs	r0, r3, r0
   b9f52:	bd10      	pop	{r4, pc}

000b9f54 <__register_exitproc>:
   b9f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9f58:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba014 <__register_exitproc+0xc0>
   b9f5c:	4606      	mov	r6, r0
   b9f5e:	f8d8 0000 	ldr.w	r0, [r8]
   b9f62:	461f      	mov	r7, r3
   b9f64:	460d      	mov	r5, r1
   b9f66:	4691      	mov	r9, r2
   b9f68:	f000 f856 	bl	ba018 <__retarget_lock_acquire_recursive>
   b9f6c:	4b25      	ldr	r3, [pc, #148]	; (ba004 <__register_exitproc+0xb0>)
   b9f6e:	681c      	ldr	r4, [r3, #0]
   b9f70:	b934      	cbnz	r4, b9f80 <__register_exitproc+0x2c>
   b9f72:	4c25      	ldr	r4, [pc, #148]	; (ba008 <__register_exitproc+0xb4>)
   b9f74:	601c      	str	r4, [r3, #0]
   b9f76:	4b25      	ldr	r3, [pc, #148]	; (ba00c <__register_exitproc+0xb8>)
   b9f78:	b113      	cbz	r3, b9f80 <__register_exitproc+0x2c>
   b9f7a:	681b      	ldr	r3, [r3, #0]
   b9f7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9f80:	6863      	ldr	r3, [r4, #4]
   b9f82:	2b1f      	cmp	r3, #31
   b9f84:	dd07      	ble.n	b9f96 <__register_exitproc+0x42>
   b9f86:	f8d8 0000 	ldr.w	r0, [r8]
   b9f8a:	f000 f847 	bl	ba01c <__retarget_lock_release_recursive>
   b9f8e:	f04f 30ff 	mov.w	r0, #4294967295
   b9f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9f96:	b34e      	cbz	r6, b9fec <__register_exitproc+0x98>
   b9f98:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9f9c:	b988      	cbnz	r0, b9fc2 <__register_exitproc+0x6e>
   b9f9e:	4b1c      	ldr	r3, [pc, #112]	; (ba010 <__register_exitproc+0xbc>)
   b9fa0:	b923      	cbnz	r3, b9fac <__register_exitproc+0x58>
   b9fa2:	f8d8 0000 	ldr.w	r0, [r8]
   b9fa6:	f000 f838 	bl	ba01a <__retarget_lock_release>
   b9faa:	e7f0      	b.n	b9f8e <__register_exitproc+0x3a>
   b9fac:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9fb0:	f7fb fb6c 	bl	b568c <malloc>
   b9fb4:	2800      	cmp	r0, #0
   b9fb6:	d0f4      	beq.n	b9fa2 <__register_exitproc+0x4e>
   b9fb8:	2300      	movs	r3, #0
   b9fba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9fbe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9fc2:	6863      	ldr	r3, [r4, #4]
   b9fc4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9fc8:	2201      	movs	r2, #1
   b9fca:	409a      	lsls	r2, r3
   b9fcc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9fd0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9fd4:	4313      	orrs	r3, r2
   b9fd6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9fda:	2e02      	cmp	r6, #2
   b9fdc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9fe0:	bf02      	ittt	eq
   b9fe2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9fe6:	4313      	orreq	r3, r2
   b9fe8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9fec:	6863      	ldr	r3, [r4, #4]
   b9fee:	f8d8 0000 	ldr.w	r0, [r8]
   b9ff2:	1c5a      	adds	r2, r3, #1
   b9ff4:	3302      	adds	r3, #2
   b9ff6:	6062      	str	r2, [r4, #4]
   b9ff8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9ffc:	f000 f80e 	bl	ba01c <__retarget_lock_release_recursive>
   ba000:	2000      	movs	r0, #0
   ba002:	e7c6      	b.n	b9f92 <__register_exitproc+0x3e>
   ba004:	2003e7e8 	.word	0x2003e7e8
   ba008:	2003e75c 	.word	0x2003e75c
   ba00c:	00000000 	.word	0x00000000
   ba010:	000b568d 	.word	0x000b568d
   ba014:	2003e1b4 	.word	0x2003e1b4

000ba018 <__retarget_lock_acquire_recursive>:
   ba018:	4770      	bx	lr

000ba01a <__retarget_lock_release>:
   ba01a:	4770      	bx	lr

000ba01c <__retarget_lock_release_recursive>:
   ba01c:	4770      	bx	lr

000ba01e <link_code_end>:
	...

000ba020 <dynalib_user>:
   ba020:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   ba030:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   ba040:	7620 7269 7574 6c61 4800 6c65 6f6c 5720      virtual.Hello W
   ba050:	726f 646c 4600 756f 646e 6120 4420 7665     orld.Found a Dev
   ba060:	6369 0065 6441 7264 7365 3a73 0020 6f4e     ice.Address: .No
   ba070:	6564 3a20 0029 6f4e 6564 3a20 0028 6554     de :).Node :(.Te
   ba080:	706d 203a 5300 756f 646e 203a 4d00 746f     mp: .Sound: .Mot
   ba090:	6f69 3a6e 0020 6166 006e 3265 3336 6261     ion: .fan.e263ab
   ba0a0:	3039 322d 6136 2d63 3734 3165 622d 3263     90-26ac-47e1-bc2
   ba0b0:	2d33 6433 6234 6563 3763 6432 6535 3700     3-3d4bcec72d5e.7
   ba0c0:	3232 3931 3163 2d33 3730 6437 342d 3366     2219c13-077d-4f3
   ba0d0:	2d34 3938 3837 632d 6639 3061 3733 3631     4-8978-c9fa03716
   ba0e0:	3263 0063 3837 3434 3437 6261 362d 6135     c2c.784474ab-65a
   ba0f0:	2d39 3234 6365 392d 3761 2d39 3131 3265     9-42ec-9a79-11e2
   ba100:	3937 3261 3734 3363 3600 6261 3038 6465     79a247c3.6ab80ed
   ba110:	2d35 6163 3236 342d 6633 2d63 3962 3733     5-ca62-43fc-b937
   ba120:	342d 3663 3038 6637 6361 3836 0036 3839     -4c6807fac686.98
   ba130:	6639 3933 3266 632d 6131 2d34 3134 3064     9f39f2-c1a4-41d0
   ba140:	612d 6462 2d37 6435 6136 3030 3936 6230     -abd7-5d6a00690b
   ba150:	6462 6100 6662 3438 3338 2d66 3834 3539     bd.abf8483f-4895
   ba160:	342d 3230 2d66 6439 3965 612d 3933 6634     -402f-9de9-a394f
   ba170:	3733 6231 3832 0033                         371b283.

000ba178 <_ZTV16Adafruit_SSD1306>:
	...
   ba180:	4919 000b 49a9 000b 504d 000b 8749 000b     .I...I..MP..I...
   ba190:	491d 000b 4d65 000b 47a5 000b 4635 000b     .I..eM...G..5F..
   ba1a0:	4e23 000b 4ec1 000b 4ef7 000b 4f13 000b     #N...N...N...O..

000ba1b0 <_ZL4font>:
   ba1b0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   ba1c0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   ba1d0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   ba1e0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   ba1f0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   ba200:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   ba210:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   ba220:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   ba230:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   ba240:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   ba250:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   ba260:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   ba270:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   ba280:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   ba290:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   ba2a0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   ba2b0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   ba2c0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   ba2d0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   ba2e0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   ba2f0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   ba300:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   ba310:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   ba320:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   ba330:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   ba340:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   ba350:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   ba360:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   ba370:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   ba380:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ba390:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ba3a0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ba3b0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ba3c0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ba3d0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ba3e0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ba3f0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ba400:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ba410:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ba420:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ba430:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   ba440:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   ba450:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   ba460:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ba470:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   ba480:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   ba490:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   ba4a0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   ba4b0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   ba4c0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   ba4d0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   ba4e0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   ba4f0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   ba500:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   ba510:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   ba520:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   ba530:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   ba540:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   ba550:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   ba560:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   ba570:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   ba580:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   ba590:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   ba5a0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   ba5b0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   ba5c0:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   ba5d0:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   ba5e0:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   ba5f0:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   ba600:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   ba610:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   ba620:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   ba630:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   ba640:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   ba650:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   ba660:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   ba670:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   ba680:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   ba690:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   ba6a0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000ba6ac <_ZTV12Adafruit_GFX>:
	...
   ba6bc:	504d 000b 8749 000b 40a1 000b 4d65 000b     MP..I....@..eM..
   ba6cc:	4e8b 000b 4ea7 000b 4e23 000b 4ec1 000b     .N...N..#N...N..
   ba6dc:	4ef7 000b 4f13 000b                         .N...O..

000ba6e4 <_ZTVN5spark13EthernetClassE>:
	...
   ba6ec:	574b 000b 5741 000b 5737 000b 572d 000b     KW..AW..7W..-W..
   ba6fc:	5721 000b 5715 000b 8f51 000b 8f59 000b     !W...W..Q...Y...
   ba70c:	5709 000b 5701 000b 56f7 000b 56ed 000b     .W...W...V...V..
   ba71c:	8f89 000b                                   ....

000ba720 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba720:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   ba730:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   ba740:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   ba750:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   ba760:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   ba770:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   ba780:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   ba790:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   ba7a0:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   ba7b0:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   ba7c0:	6146 6c69 6465 7420 206f 6c61 6f6c 6163     Failed to alloca
   ba7d0:	6574 6d20 6d65 726f 2179 4600 6961 656c     te memory!.Faile
   ba7e0:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   ba7f0:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   ba800:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   ba810:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   ba820:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   ba830:	6f6d 6574 6420 7665 6369 2e65 4600 6961     mote device..Fai
   ba840:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   ba850:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   ba860:	002e 7453 7261 2074 6964 6373 766f 7265     ..Start discover
   ba870:	6e69 2067 6863 7261 6361 6574 6972 7473     ing characterist
   ba880:	6369 2073 666f 7320 7265 6976 6563 203a     ics of service: 
   ba890:	7325 002e 6143 6e6e 746f 6120 6464 6e20     %s..Cannot add n
   ba8a0:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   ba8b0:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   ba8c0:	2073 6f63 6e6e 6365 6574 2e64 4300 6168     s connected..Cha
   ba8d0:	6172 7463 7265 7369 6974 2063 6964 6373     racteristic disc
   ba8e0:	766f 7265 6465 002e 6944 6373 766f 7265     overed..Discover
   ba8f0:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   ba900:	2763 2073 6168 646e 656c 6920 2073 6e69     c's handle is in
   ba910:	6176 696c 2e64 4600 6961 656c 2064 6f74     valid..Failed to
   ba920:	6120 7070 6e65 2064 6964 6373 766f 7265      append discover
   ba930:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   ba940:	2e63 4400 7075 696c 6163 6574 2064 6863     c..Duplicated ch
   ba950:	7261 6361 6574 6972 7473 6369 6320 6e61     aracteristic can
   ba960:	6f6e 2074 6562 6120 6464 6465 002e 6146     not be added..Fa
   ba970:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   ba980:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   ba990:	6974 2e63 0000 0000                         tic.....

000ba998 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba9a0:	5b05 000b 5b69 000b 5cf1 000b 5b93 000b     .[..i[...\...[..
   ba9b0:	5b09 000b                                   .[..

000ba9b4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba9bc:	5b01 000b 5b77 000b 5b03 000b 5b99 000b     .[..w[...[...[..
   ba9cc:	5b29 000b                                   )[..

000ba9d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba9d8:	5aff 000b 5b85 000b 69e7 000b 5b9f 000b     .Z...[...i...[..
   ba9e8:	5b49 000b                                   I[..

000ba9ec <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba9f8:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000baa0a <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   baa0a:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000baa1a <_ZN8particle7BleUuid9BASE_UUIDE>:
   baa1a:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   baa2a:	616e 006e 6e69 0066 766f 0066 7061 0070     nan.inf.ovf.app.
   baa3a:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   baa4a:	2553 007a 7361 7463 6d69 0065 0000          S%z.asctime...

000baa58 <_ZTV9IPAddress>:
	...
   baa60:	8b55 000b 8b45 000b 8b47 000b               U...E...G...

000baa6c <_ZTV9USBSerial>:
	...
   baa74:	8c3b 000b 8ca3 000b 8c79 000b 8749 000b     ;.......y...I...
   baa84:	8c6b 000b 8c3d 000b 8c4d 000b 8c9d 000b     k...=...M.......
   baa94:	8c5d 000b 8c35 000b                         ]...5...

000baa9c <_ZTV11USARTSerial>:
	...
   baaa4:	8d35 000b 8da1 000b 8d79 000b 8749 000b     5.......y...I...
   baab4:	8d49 000b 8d65 000b 8d57 000b 8d73 000b     I...e...W...s...
   baac4:	8d37 000b 8d3b 000b                         7...;...

000baacc <_ZTV7TwoWire>:
	...
   baad4:	8dd9 000b 8e23 000b 8dfb 000b 8ddb 000b     ....#...........
   baae4:	8e03 000b 8e0b 000b 8e13 000b 8e1b 000b     ................

000baaf4 <_ZTVN5spark9WiFiClassE>:
	...
   baafc:	8ef3 000b 8ee9 000b 8edf 000b 8e95 000b     ................
   bab0c:	8ed3 000b 8ec7 000b 8f51 000b 8f59 000b     ........Q...Y...
   bab1c:	8ebb 000b 8eb3 000b 8ea9 000b 8e9f 000b     ................
   bab2c:	8f89 000b                                   ....

000bab30 <_ZTVN5spark12NetworkClassE>:
	...
   bab38:	8f11 000b 8f1b 000b 8f25 000b 8f2f 000b     ........%.../...
   bab48:	8f39 000b 8f45 000b 8f51 000b 8f59 000b     9...E...Q...Y...
   bab58:	8f61 000b 8f6d 000b 8f75 000b 8f7f 000b     a...m...u.......
   bab68:	8f89 000b                                   ....

000bab6c <_ZSt7nothrow>:
	...

000bab6d <_ZTSSt19_Sp_make_shared_tag>:
   bab6d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bab7d:	6572 5f64 6174 0067 0000                     red_tag....

000bab88 <_ZTISt19_Sp_make_shared_tag>:
   bab88:	abc8 000b ab6d 000b                         ....m...

000bab90 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bab90:	ac28 000b ab9c 000b ac4c 000b               (.......L...

000bab9c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bab9c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   babac:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   babbc:	0045 0000                                   E...

000babc0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   babc0:	0000 0000 ab90 000b 92e1 000b 92f5 000b     ................
   babd0:	9489 000b 9489 000b 935f 000b 92a1 000b     ........_.......
   babe0:	9347 000b 9309 000b 92d3 000b               G...........

000babec <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   babec:	ac28 000b abf8 000b ab90 000b               (...........

000babf8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   babf8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bac08:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bac18:	666e 456f 0000 0000                         nfoE....

000bac20 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bac20:	0000 0000 abec 000b 9389 000b 939d 000b     ................
   bac30:	9489 000b 9489 000b 935f 000b 92a1 000b     ........_.......
   bac40:	945d 000b 93e9 000b 93b1 000b               ]...........

000bac4c <_ZTISt9type_info>:
   bac4c:	abc8 000b ac54 000b                         ....T...

000bac54 <_ZTSSt9type_info>:
   bac54:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bac64:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bac74:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bac84:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bac94:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   baca4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bacb4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bacc4:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bacd4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bace4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000bacf5 <link_const_variable_data_end>:
   bacf5:	00          	.byte	0x00
	...

000bacf8 <link_constructors_location>:
   bacf8:	000b4531 	.word	0x000b4531
   bacfc:	000b50d9 	.word	0x000b50d9
   bad00:	000b5755 	.word	0x000b5755
   bad04:	000b58e9 	.word	0x000b58e9
   bad08:	000b8739 	.word	0x000b8739
   bad0c:	000b89d5 	.word	0x000b89d5
   bad10:	000b89e5 	.word	0x000b89e5
   bad14:	000b8a01 	.word	0x000b8a01
   bad18:	000b8efd 	.word	0x000b8efd
   bad1c:	000b9061 	.word	0x000b9061
